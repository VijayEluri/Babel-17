/*/val y = 0
/*val (x) = begin y = 1; y end
x
yield y
true
false
"hey dude!"
-4
infinity
Cool
Cool 5
nil
{x=10, y = 0}
3 * 4
2 ^10 -24
1 < 2 < 3 > 0
1 > 2
1 != 2
1 <7> 2
{x=2} < {a=3}
A < B
1::(lazy 2::[])
(1::(lazy 2)).head == 1 
(1, lazy(2))
1::2::3::4
1::2::3::4::[]
(1::2).tail == 2::[]
7 div 4
7 mod 4
7 / 4 
random 100
random 100
random 2
random 2
random 2
random 2
random 2
force choose [4, 5, 19]
! false
false & true
false | true
 with () : begin end
{3, -10, 2, nil, 5, 2}
nanu
val v = {1 -> 2, 3 -> 4, 1 -> 7}
val z = { rank_ = 10 }
val x = { cool = 2, rank_ = z}
x == 10
choose v

def fac n = if n <= 0 then 1 else n * (fac (n-1)) end
fac 4
val x = lazy{rank_ = lazy 12}
val y = x
x == 12
y.rank_ */
force {A (lazy exception 0), A (lazy exception 1)}

