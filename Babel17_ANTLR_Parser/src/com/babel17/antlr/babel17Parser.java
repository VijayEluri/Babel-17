// $ANTLR 3.2 Sep 23, 2009 12:02:23 /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g 2011-06-28 09:09:54

package com.babel17.antlr;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class babel17Parser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "PROG", "NIL_TOKEN", "ANY", "LAMBDA", "SQUARE_LIST", "ROUND_LIST", "LIST_CONS", "COMPARE", "APPLY", "IF", "MAP_OR_SET_OR_OBJ", "EMPTY_MAP", "EXCEPTION", "MATCH", "TRY", "CASES", "OBJ", "FOR_EXPR", "WHILE_DO", "MESSAGE_SEND", "UMINUS", "POW", "PARENTS_PLUS", "PARENTS_MUL", "BLOCK", "BEGIN", "WITH", "VAL", "OBJELEM_ASSIGN", "ASSIGN", "ARROW", "DEF", "YIELD", "PRIVATE", "TYPEDEF", "TYPEDEF_CLAUSE", "GETTYPE", "MEMOIZE", "MEMOID_STRONG", "MEMOID_WEAK", "PRIVATEID", "IF_PATTERN", "TYPE_PATTERN", "INNERVALUE_PATTERN", "TYPEID", "TYPEVAL", "MODULEID", "TYPE_EXPR", "TYPEOF", "CONVERSION", "CONVERT", "RELATE", "INTERVAL", "IMPORT_PREFIX", "IMPORT_ALL", "IMPORT_SET", "IMPORT_PLUS", "IMPORT_MINUS", "Newline", "NotNewline", "COMMENT", "LINECOMMENT", "SmallLetter", "BigLetter", "Letter", "Digit", "Hex", "L_begin", "L_end", "L_obj", "L_with", "L_if", "L_then", "L_else", "L_elseif", "L_while", "L_for", "L_do", "L_yield", "L_match", "L_case", "L_as", "L_val", "L_def", "L_in", "L_exception", "L_to", "L_downto", "L_try", "L_catch", "L_concurrent", "L_choose", "L_lazy", "L_memoize", "L_true", "L_false", "L_this", "L_random", "L_nil", "L_div", "L_mod", "L_module", "L_typedef", "L_typeof", "L_private", "L_import", "L_unittest", "L_and", "L_not", "L_or", "L_root", "L_native", "A_EQUAL", "U_EQUAL", "A_NOT_EQUAL", "U_NOT_EQUAL", "LESS", "A_LESS_EQ", "U_LESS_EQ", "GREATER", "A_GREATER_EQ", "U_GREATER_EQ", "SC", "PLUS", "MINUS", "TIMES", "QUOTIENT", "POW_tok", "TOK_RELATE", "TOK_CONVERT", "A_DOUBLE_COLON", "U_DOUBLE_COLON", "TIMESTIMES", "QUOTIENTQUOTIENT", "PLUSPLUS", "MINUSMINUS", "A_DOUBLE_ARROW", "U_DOUBLE_ARROW", "A_ARROW", "U_ARROW", "A_ELLIPSIS", "U_ELLIPSIS", "COMMA", "PERIOD", "QUESTION_MARK", "EXCLAMATION_MARK", "L_force", "WsChar", "WS", "NL", "Constr", "Id", "Exponent", "Float", "Num", "Charcode", "String", "ROUND_BRACKET_OPEN", "ROUND_BRACKET_CLOSE", "SQUARE_BRACKET_OPEN", "SQUARE_BRACKET_CLOSE", "CURLY_BRACKET_OPEN", "CURLY_BRACKET_CLOSE", "UNDERSCORE", "COLON", "PRAGMA_LOG", "PRAGMA_PRINT", "PRAGMA_ASSERT", "PRAGMA_PROFILE", "PRAGMA_CATCH"
    };
    public static final int PRAGMA_CATCH=173;
    public static final int L_end=72;
    public static final int U_NOT_EQUAL=119;
    public static final int TIMESTIMES=136;
    public static final int L_try=92;
    public static final int BigLetter=67;
    public static final int TOK_RELATE=132;
    public static final int ROUND_BRACKET_CLOSE=162;
    public static final int L_native=115;
    public static final int L_mod=104;
    public static final int MINUSMINUS=139;
    public static final int IMPORT_PREFIX=57;
    public static final int Newline=62;
    public static final int SQUARE_BRACKET_CLOSE=164;
    public static final int LINECOMMENT=65;
    public static final int MAP_OR_SET_OR_OBJ=14;
    public static final int EOF=-1;
    public static final int U_DOUBLE_ARROW=141;
    public static final int TYPEID=48;
    public static final int L_exception=89;
    public static final int Num=158;
    public static final int GREATER=123;
    public static final int EMPTY_MAP=15;
    public static final int POW=25;
    public static final int L_concurrent=94;
    public static final int L_catch=93;
    public static final int L_false=99;
    public static final int QUOTIENTQUOTIENT=137;
    public static final int L_nil=102;
    public static final int BEGIN=29;
    public static final int LIST_CONS=10;
    public static final int L_with=74;
    public static final int QUESTION_MARK=148;
    public static final int LESS=120;
    public static final int ROUND_BRACKET_OPEN=161;
    public static final int SQUARE_LIST=8;
    public static final int MODULEID=50;
    public static final int VAL=31;
    public static final int L_as=85;
    public static final int NL=153;
    public static final int MESSAGE_SEND=23;
    public static final int A_ARROW=142;
    public static final int A_DOUBLE_COLON=134;
    public static final int COMMENT=64;
    public static final int L_def=87;
    public static final int L_and=111;
    public static final int EXCEPTION=16;
    public static final int TYPE_EXPR=51;
    public static final int L_root=114;
    public static final int L_this=100;
    public static final int IMPORT_ALL=58;
    public static final int L_force=150;
    public static final int L_choose=95;
    public static final int PERIOD=147;
    public static final int PRIVATE=37;
    public static final int L_import=109;
    public static final int SmallLetter=66;
    public static final int NIL_TOKEN=5;
    public static final int PRAGMA_PRINT=170;
    public static final int CURLY_BRACKET_OPEN=165;
    public static final int L_typedef=106;
    public static final int UNDERSCORE=167;
    public static final int MATCH=17;
    public static final int U_LESS_EQ=122;
    public static final int TRY=18;
    public static final int L_to=90;
    public static final int Float=157;
    public static final int L_unittest=110;
    public static final int WS=152;
    public static final int IMPORT_MINUS=61;
    public static final int Charcode=159;
    public static final int TYPEOF=52;
    public static final int L_do=81;
    public static final int L_val=86;
    public static final int TOK_CONVERT=133;
    public static final int L_match=83;
    public static final int L_obj=73;
    public static final int WsChar=151;
    public static final int L_module=105;
    public static final int GETTYPE=40;
    public static final int Hex=70;
    public static final int L_private=108;
    public static final int TYPE_PATTERN=46;
    public static final int L_for=80;
    public static final int MEMOID_WEAK=43;
    public static final int RELATE=55;
    public static final int Letter=68;
    public static final int EXCLAMATION_MARK=149;
    public static final int PRAGMA_ASSERT=171;
    public static final int APPLY=12;
    public static final int U_ARROW=143;
    public static final int PRAGMA_LOG=169;
    public static final int A_EQUAL=116;
    public static final int PRIVATEID=44;
    public static final int L_else=77;
    public static final int DEF=35;
    public static final int L_typeof=107;
    public static final int L_begin=71;
    public static final int L_div=103;
    public static final int L_yield=82;
    public static final int PLUSPLUS=138;
    public static final int MEMOID_STRONG=42;
    public static final int L_while=79;
    public static final int CASES=19;
    public static final int POW_tok=131;
    public static final int Exponent=156;
    public static final int IF_PATTERN=45;
    public static final int A_ELLIPSIS=144;
    public static final int PARENTS_PLUS=26;
    public static final int A_DOUBLE_ARROW=140;
    public static final int INTERVAL=56;
    public static final int SQUARE_BRACKET_OPEN=163;
    public static final int IF=13;
    public static final int L_not=112;
    public static final int PROG=4;
    public static final int COMMA=146;
    public static final int OBJ=20;
    public static final int TYPEVAL=49;
    public static final int MEMOIZE=41;
    public static final int U_ELLIPSIS=145;
    public static final int TYPEDEF_CLAUSE=39;
    public static final int INNERVALUE_PATTERN=47;
    public static final int YIELD=36;
    public static final int COMPARE=11;
    public static final int U_GREATER_EQ=125;
    public static final int U_EQUAL=117;
    public static final int PLUS=127;
    public static final int String=160;
    public static final int LAMBDA=7;
    public static final int L_true=98;
    public static final int Id=155;
    public static final int L_or=113;
    public static final int WITH=30;
    public static final int L_in=88;
    public static final int CONVERT=54;
    public static final int L_lazy=96;
    public static final int NotNewline=63;
    public static final int L_then=76;
    public static final int QUOTIENT=130;
    public static final int TYPEDEF=38;
    public static final int L_if=75;
    public static final int IMPORT_SET=59;
    public static final int CURLY_BRACKET_CLOSE=166;
    public static final int UMINUS=24;
    public static final int FOR_EXPR=21;
    public static final int Constr=154;
    public static final int WHILE_DO=22;
    public static final int L_elseif=78;
    public static final int MINUS=128;
    public static final int Digit=69;
    public static final int L_memoize=97;
    public static final int CONVERSION=53;
    public static final int A_GREATER_EQ=124;
    public static final int ROUND_LIST=9;
    public static final int COLON=168;
    public static final int PRAGMA_PROFILE=172;
    public static final int SC=126;
    public static final int L_downto=91;
    public static final int ANY=6;
    public static final int L_random=101;
    public static final int A_NOT_EQUAL=118;
    public static final int BLOCK=28;
    public static final int ASSIGN=33;
    public static final int U_DOUBLE_COLON=135;
    public static final int OBJELEM_ASSIGN=32;
    public static final int ARROW=34;
    public static final int IMPORT_PLUS=60;
    public static final int L_case=84;
    public static final int TIMES=129;
    public static final int A_LESS_EQ=121;
    public static final int PARENTS_MUL=27;

    // delegates
    // delegators


        public babel17Parser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public babel17Parser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return babel17Parser.tokenNames; }
    public String getGrammarFileName() { return "/Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g"; }

     

    public boolean errorDuringParsing = false;
    public ArrayList<RecognitionException> parsingErrors = new ArrayList<RecognitionException>();


    @Override
    public void reportError(RecognitionException e) {
      errorDuringParsing = true;
      parsingErrors.add(e);
    }



    public static class prog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prog"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:133:1: prog : block EOF -> ^( PROG block ) ;
    public final babel17Parser.prog_return prog() throws RecognitionException {
        babel17Parser.prog_return retval = new babel17Parser.prog_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF2=null;
        babel17Parser.block_return block1 = null;


        CommonTree EOF2_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:133:7: ( block EOF -> ^( PROG block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:133:9: block EOF
            {
            pushFollow(FOLLOW_block_in_prog260);
            block1=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block1.getTree());
            EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_prog262); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF2);



            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 133:19: -> ^( PROG block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:133:22: ^( PROG block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROG, "PROG"), root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prog"

    public static class token_EQUAL_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_EQUAL"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:257:1: token_EQUAL : ( A_EQUAL | U_EQUAL );
    public final babel17Parser.token_EQUAL_return token_EQUAL() throws RecognitionException {
        babel17Parser.token_EQUAL_return retval = new babel17Parser.token_EQUAL_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set3=null;

        CommonTree set3_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:258:2: ( A_EQUAL | U_EQUAL )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set3=(Token)input.LT(1);
            if ( (input.LA(1)>=A_EQUAL && input.LA(1)<=U_EQUAL) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set3));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_EQUAL"

    public static class token_NOT_EQUAL_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_NOT_EQUAL"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:265:1: token_NOT_EQUAL : ( A_NOT_EQUAL | U_NOT_EQUAL );
    public final babel17Parser.token_NOT_EQUAL_return token_NOT_EQUAL() throws RecognitionException {
        babel17Parser.token_NOT_EQUAL_return retval = new babel17Parser.token_NOT_EQUAL_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set4=null;

        CommonTree set4_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:266:2: ( A_NOT_EQUAL | U_NOT_EQUAL )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set4=(Token)input.LT(1);
            if ( (input.LA(1)>=A_NOT_EQUAL && input.LA(1)<=U_NOT_EQUAL) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set4));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_NOT_EQUAL"

    public static class token_LESS_EQ_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_LESS_EQ"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:274:1: token_LESS_EQ : ( A_LESS_EQ | U_LESS_EQ );
    public final babel17Parser.token_LESS_EQ_return token_LESS_EQ() throws RecognitionException {
        babel17Parser.token_LESS_EQ_return retval = new babel17Parser.token_LESS_EQ_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set5=null;

        CommonTree set5_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:275:2: ( A_LESS_EQ | U_LESS_EQ )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set5=(Token)input.LT(1);
            if ( (input.LA(1)>=A_LESS_EQ && input.LA(1)<=U_LESS_EQ) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set5));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_LESS_EQ"

    public static class token_GREATER_EQ_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_GREATER_EQ"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:284:1: token_GREATER_EQ : ( A_GREATER_EQ | U_GREATER_EQ );
    public final babel17Parser.token_GREATER_EQ_return token_GREATER_EQ() throws RecognitionException {
        babel17Parser.token_GREATER_EQ_return retval = new babel17Parser.token_GREATER_EQ_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set6=null;

        CommonTree set6_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:285:2: ( A_GREATER_EQ | U_GREATER_EQ )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set6=(Token)input.LT(1);
            if ( (input.LA(1)>=A_GREATER_EQ && input.LA(1)<=U_GREATER_EQ) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set6));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_GREATER_EQ"

    public static class token_OR_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_OR"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:300:1: token_OR : L_or ;
    public final babel17Parser.token_OR_return token_OR() throws RecognitionException {
        babel17Parser.token_OR_return retval = new babel17Parser.token_OR_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_or7=null;

        CommonTree L_or7_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:300:9: ( L_or )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:300:11: L_or
            {
            root_0 = (CommonTree)adaptor.nil();

            L_or7=(Token)match(input,L_or,FOLLOW_L_or_in_token_OR1086); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_or7_tree = (CommonTree)adaptor.create(L_or7);
            adaptor.addChild(root_0, L_or7_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_OR"

    public static class token_AND_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_AND"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:301:1: token_AND : L_and ;
    public final babel17Parser.token_AND_return token_AND() throws RecognitionException {
        babel17Parser.token_AND_return retval = new babel17Parser.token_AND_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_and8=null;

        CommonTree L_and8_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:302:2: ( L_and )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:302:4: L_and
            {
            root_0 = (CommonTree)adaptor.nil();

            L_and8=(Token)match(input,L_and,FOLLOW_L_and_in_token_AND1094); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_and8_tree = (CommonTree)adaptor.create(L_and8);
            adaptor.addChild(root_0, L_and8_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_AND"

    public static class token_NOT_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_NOT"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:303:1: token_NOT : L_not ;
    public final babel17Parser.token_NOT_return token_NOT() throws RecognitionException {
        babel17Parser.token_NOT_return retval = new babel17Parser.token_NOT_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_not9=null;

        CommonTree L_not9_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:304:2: ( L_not )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:304:4: L_not
            {
            root_0 = (CommonTree)adaptor.nil();

            L_not9=(Token)match(input,L_not,FOLLOW_L_not_in_token_NOT1102); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_not9_tree = (CommonTree)adaptor.create(L_not9);
            adaptor.addChild(root_0, L_not9_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_NOT"

    public static class token_DOUBLE_COLON_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_DOUBLE_COLON"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:310:1: token_DOUBLE_COLON : ( A_DOUBLE_COLON | U_DOUBLE_COLON );
    public final babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON() throws RecognitionException {
        babel17Parser.token_DOUBLE_COLON_return retval = new babel17Parser.token_DOUBLE_COLON_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set10=null;

        CommonTree set10_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:311:2: ( A_DOUBLE_COLON | U_DOUBLE_COLON )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set10=(Token)input.LT(1);
            if ( (input.LA(1)>=A_DOUBLE_COLON && input.LA(1)<=U_DOUBLE_COLON) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set10));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_DOUBLE_COLON"

    public static class token_DOUBLE_ARROW_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_DOUBLE_ARROW"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:327:1: token_DOUBLE_ARROW : ( A_DOUBLE_ARROW | U_DOUBLE_ARROW );
    public final babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW() throws RecognitionException {
        babel17Parser.token_DOUBLE_ARROW_return retval = new babel17Parser.token_DOUBLE_ARROW_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set11=null;

        CommonTree set11_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:328:2: ( A_DOUBLE_ARROW | U_DOUBLE_ARROW )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set11=(Token)input.LT(1);
            if ( (input.LA(1)>=A_DOUBLE_ARROW && input.LA(1)<=U_DOUBLE_ARROW) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set11));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_DOUBLE_ARROW"

    public static class token_ARROW_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_ARROW"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:332:1: token_ARROW : ( A_ARROW | U_ARROW );
    public final babel17Parser.token_ARROW_return token_ARROW() throws RecognitionException {
        babel17Parser.token_ARROW_return retval = new babel17Parser.token_ARROW_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set12=null;

        CommonTree set12_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:333:2: ( A_ARROW | U_ARROW )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set12=(Token)input.LT(1);
            if ( (input.LA(1)>=A_ARROW && input.LA(1)<=U_ARROW) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set12));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_ARROW"

    public static class token_ELLIPSIS_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_ELLIPSIS"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:338:1: token_ELLIPSIS : ( A_ELLIPSIS | U_ELLIPSIS );
    public final babel17Parser.token_ELLIPSIS_return token_ELLIPSIS() throws RecognitionException {
        babel17Parser.token_ELLIPSIS_return retval = new babel17Parser.token_ELLIPSIS_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set13=null;

        CommonTree set13_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:339:2: ( A_ELLIPSIS | U_ELLIPSIS )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set13=(Token)input.LT(1);
            if ( (input.LA(1)>=A_ELLIPSIS && input.LA(1)<=U_ELLIPSIS) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set13));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_ELLIPSIS"

    public static class typeid_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeid"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:1: typeid : Id ( ( NL )? PERIOD ( NL )? Id )* -> ^( TYPEID ( Id )* ) ;
    public final babel17Parser.typeid_return typeid() throws RecognitionException {
        babel17Parser.typeid_return retval = new babel17Parser.typeid_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id14=null;
        Token NL15=null;
        Token PERIOD16=null;
        Token NL17=null;
        Token Id18=null;

        CommonTree Id14_tree=null;
        CommonTree NL15_tree=null;
        CommonTree PERIOD16_tree=null;
        CommonTree NL17_tree=null;
        CommonTree Id18_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:9: ( Id ( ( NL )? PERIOD ( NL )? Id )* -> ^( TYPEID ( Id )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:11: Id ( ( NL )? PERIOD ( NL )? Id )*
            {
            Id14=(Token)match(input,Id,FOLLOW_Id_in_typeid1752); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id14);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:14: ( ( NL )? PERIOD ( NL )? Id )*
            loop3:
            do {
                int alt3=2;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==NL) ) {
                    int LA3_1 = input.LA(2);

                    if ( (LA3_1==PERIOD) ) {
                        alt3=1;
                    }


                }
                else if ( (LA3_0==PERIOD) ) {
                    alt3=1;
                }


                switch (alt3) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:15: ( NL )? PERIOD ( NL )? Id
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:15: ( NL )?
            	    int alt1=2;
            	    int LA1_0 = input.LA(1);

            	    if ( (LA1_0==NL) ) {
            	        alt1=1;
            	    }
            	    switch (alt1) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:15: NL
            	            {
            	            NL15=(Token)match(input,NL,FOLLOW_NL_in_typeid1755); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL15);


            	            }
            	            break;

            	    }

            	    PERIOD16=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_typeid1758); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD16);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:26: ( NL )?
            	    int alt2=2;
            	    int LA2_0 = input.LA(1);

            	    if ( (LA2_0==NL) ) {
            	        alt2=1;
            	    }
            	    switch (alt2) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:26: NL
            	            {
            	            NL17=(Token)match(input,NL,FOLLOW_NL_in_typeid1760); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL17);


            	            }
            	            break;

            	    }

            	    Id18=(Token)match(input,Id,FOLLOW_Id_in_typeid1763); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_Id.add(Id18);


            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);



            // AST REWRITE
            // elements: Id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 421:35: -> ^( TYPEID ( Id )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:38: ^( TYPEID ( Id )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEID, "TYPEID"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:47: ( Id )*
                while ( stream_Id.hasNext() ) {
                    adaptor.addChild(root_1, stream_Id.nextNode());

                }
                stream_Id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeid"

    public static class typeannotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeannotation"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:423:1: typeannotation : ( typeid | '(' protected_expr ')' -> ^( TYPEVAL protected_expr ) );
    public final babel17Parser.typeannotation_return typeannotation() throws RecognitionException {
        babel17Parser.typeannotation_return retval = new babel17Parser.typeannotation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal20=null;
        Token char_literal22=null;
        babel17Parser.typeid_return typeid19 = null;

        babel17Parser.protected_expr_return protected_expr21 = null;


        CommonTree char_literal20_tree=null;
        CommonTree char_literal22_tree=null;
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:424:2: ( typeid | '(' protected_expr ')' -> ^( TYPEVAL protected_expr ) )
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==Id) ) {
                alt4=1;
            }
            else if ( (LA4_0==ROUND_BRACKET_OPEN) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:424:4: typeid
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeid_in_typeannotation1783);
                    typeid19=typeid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeid19.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:425:4: '(' protected_expr ')'
                    {
                    char_literal20=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_typeannotation1788); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal20);

                    pushFollow(FOLLOW_protected_expr_in_typeannotation1790);
                    protected_expr21=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr21.getTree());
                    char_literal22=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_typeannotation1792); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal22);



                    // AST REWRITE
                    // elements: protected_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 425:27: -> ^( TYPEVAL protected_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:425:30: ^( TYPEVAL protected_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEVAL, "TYPEVAL"), root_1);

                        adaptor.addChild(root_1, stream_protected_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeannotation"

    public static class pattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:1: pattern : ( Constr ( ( NL )? pattern )? -> ^( Constr ( pattern )? ) | primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )* -> ^( LIST_CONS ( primitive_pattern )* ) | L_exception ( NL )? pattern -> ^( L_exception pattern ) | token_ELLIPSIS );
    public final babel17Parser.pattern_return pattern() throws RecognitionException {
        babel17Parser.pattern_return retval = new babel17Parser.pattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Constr23=null;
        Token NL24=null;
        Token NL27=null;
        Token NL29=null;
        Token L_exception31=null;
        Token NL32=null;
        babel17Parser.pattern_return pattern25 = null;

        babel17Parser.primitive_pattern_return primitive_pattern26 = null;

        babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON28 = null;

        babel17Parser.primitive_pattern_return primitive_pattern30 = null;

        babel17Parser.pattern_return pattern33 = null;

        babel17Parser.token_ELLIPSIS_return token_ELLIPSIS34 = null;


        CommonTree Constr23_tree=null;
        CommonTree NL24_tree=null;
        CommonTree NL27_tree=null;
        CommonTree NL29_tree=null;
        CommonTree L_exception31_tree=null;
        CommonTree NL32_tree=null;
        RewriteRuleTokenStream stream_L_exception=new RewriteRuleTokenStream(adaptor,"token L_exception");
        RewriteRuleTokenStream stream_Constr=new RewriteRuleTokenStream(adaptor,"token Constr");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_primitive_pattern=new RewriteRuleSubtreeStream(adaptor,"rule primitive_pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_COLON=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_COLON");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:9: ( Constr ( ( NL )? pattern )? -> ^( Constr ( pattern )? ) | primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )* -> ^( LIST_CONS ( primitive_pattern )* ) | L_exception ( NL )? pattern -> ^( L_exception pattern ) | token_ELLIPSIS )
            int alt11=4;
            switch ( input.LA(1) ) {
            case Constr:
                {
                alt11=1;
                }
                break;
            case L_true:
            case L_false:
            case L_nil:
            case MINUS:
            case Id:
            case Num:
            case String:
            case ROUND_BRACKET_OPEN:
            case SQUARE_BRACKET_OPEN:
            case CURLY_BRACKET_OPEN:
            case UNDERSCORE:
                {
                alt11=2;
                }
                break;
            case L_exception:
                {
                alt11=3;
                }
                break;
            case A_ELLIPSIS:
            case U_ELLIPSIS:
                {
                alt11=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }

            switch (alt11) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:11: Constr ( ( NL )? pattern )?
                    {
                    Constr23=(Token)match(input,Constr,FOLLOW_Constr_in_pattern1809); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Constr.add(Constr23);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:18: ( ( NL )? pattern )?
                    int alt6=2;
                    int LA6_0 = input.LA(1);

                    if ( (LA6_0==NL) ) {
                        int LA6_1 = input.LA(2);

                        if ( (LA6_1==L_exception||(LA6_1>=L_true && LA6_1<=L_false)||LA6_1==L_nil||LA6_1==MINUS||(LA6_1>=A_ELLIPSIS && LA6_1<=U_ELLIPSIS)||(LA6_1>=Constr && LA6_1<=Id)||LA6_1==Num||(LA6_1>=String && LA6_1<=ROUND_BRACKET_OPEN)||LA6_1==SQUARE_BRACKET_OPEN||LA6_1==CURLY_BRACKET_OPEN||LA6_1==UNDERSCORE) ) {
                            alt6=1;
                        }
                    }
                    else if ( (LA6_0==L_exception||(LA6_0>=L_true && LA6_0<=L_false)||LA6_0==L_nil||LA6_0==MINUS||(LA6_0>=A_ELLIPSIS && LA6_0<=U_ELLIPSIS)||(LA6_0>=Constr && LA6_0<=Id)||LA6_0==Num||(LA6_0>=String && LA6_0<=ROUND_BRACKET_OPEN)||LA6_0==SQUARE_BRACKET_OPEN||LA6_0==CURLY_BRACKET_OPEN||LA6_0==UNDERSCORE) ) {
                        alt6=1;
                    }
                    switch (alt6) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:19: ( NL )? pattern
                            {
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:19: ( NL )?
                            int alt5=2;
                            int LA5_0 = input.LA(1);

                            if ( (LA5_0==NL) ) {
                                alt5=1;
                            }
                            switch (alt5) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:19: NL
                                    {
                                    NL24=(Token)match(input,NL,FOLLOW_NL_in_pattern1812); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL24);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_pattern_in_pattern1815);
                            pattern25=pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pattern.add(pattern25.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: pattern, Constr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 428:33: -> ^( Constr ( pattern )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:36: ^( Constr ( pattern )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_Constr.nextNode(), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:45: ( pattern )?
                        if ( stream_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_pattern.nextTree());

                        }
                        stream_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:429:4: primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )*
                    {
                    pushFollow(FOLLOW_primitive_pattern_in_pattern1831);
                    primitive_pattern26=primitive_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitive_pattern.add(primitive_pattern26.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:429:22: ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )*
                    loop9:
                    do {
                        int alt9=2;
                        int LA9_0 = input.LA(1);

                        if ( (LA9_0==NL) ) {
                            int LA9_1 = input.LA(2);

                            if ( ((LA9_1>=A_DOUBLE_COLON && LA9_1<=U_DOUBLE_COLON)) ) {
                                alt9=1;
                            }


                        }
                        else if ( ((LA9_0>=A_DOUBLE_COLON && LA9_0<=U_DOUBLE_COLON)) ) {
                            alt9=1;
                        }


                        switch (alt9) {
                    	case 1 :
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:429:23: ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern
                    	    {
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:429:23: ( NL )?
                    	    int alt7=2;
                    	    int LA7_0 = input.LA(1);

                    	    if ( (LA7_0==NL) ) {
                    	        alt7=1;
                    	    }
                    	    switch (alt7) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:429:23: NL
                    	            {
                    	            NL27=(Token)match(input,NL,FOLLOW_NL_in_pattern1834); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL27);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_token_DOUBLE_COLON_in_pattern1837);
                    	    token_DOUBLE_COLON28=token_DOUBLE_COLON();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_token_DOUBLE_COLON.add(token_DOUBLE_COLON28.getTree());
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:429:46: ( NL )?
                    	    int alt8=2;
                    	    int LA8_0 = input.LA(1);

                    	    if ( (LA8_0==NL) ) {
                    	        alt8=1;
                    	    }
                    	    switch (alt8) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:429:46: NL
                    	            {
                    	            NL29=(Token)match(input,NL,FOLLOW_NL_in_pattern1839); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL29);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_primitive_pattern_in_pattern1842);
                    	    primitive_pattern30=primitive_pattern();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_primitive_pattern.add(primitive_pattern30.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop9;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: primitive_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 430:3: -> ^( LIST_CONS ( primitive_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:430:6: ^( LIST_CONS ( primitive_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST_CONS, "LIST_CONS"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:430:18: ( primitive_pattern )*
                        while ( stream_primitive_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_primitive_pattern.nextTree());

                        }
                        stream_primitive_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:431:4: L_exception ( NL )? pattern
                    {
                    L_exception31=(Token)match(input,L_exception,FOLLOW_L_exception_in_pattern1861); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_exception.add(L_exception31);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:431:16: ( NL )?
                    int alt10=2;
                    int LA10_0 = input.LA(1);

                    if ( (LA10_0==NL) ) {
                        alt10=1;
                    }
                    switch (alt10) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:431:16: NL
                            {
                            NL32=(Token)match(input,NL,FOLLOW_NL_in_pattern1863); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL32);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_pattern_in_pattern1866);
                    pattern33=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern33.getTree());


                    // AST REWRITE
                    // elements: L_exception, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 431:28: -> ^( L_exception pattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:431:31: ^( L_exception pattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_L_exception.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_pattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:432:4: token_ELLIPSIS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_ELLIPSIS_in_pattern1879);
                    token_ELLIPSIS34=token_ELLIPSIS();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_ELLIPSIS34.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pattern"

    public static class defpattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defpattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:434:1: defpattern : ( primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )* -> ^( LIST_CONS ( primitive_pattern )* ) | Constr ( defpattern )? -> ^( Constr ( defpattern )? ) );
    public final babel17Parser.defpattern_return defpattern() throws RecognitionException {
        babel17Parser.defpattern_return retval = new babel17Parser.defpattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL36=null;
        Token NL38=null;
        Token Constr40=null;
        babel17Parser.primitive_pattern_return primitive_pattern35 = null;

        babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON37 = null;

        babel17Parser.primitive_pattern_return primitive_pattern39 = null;

        babel17Parser.defpattern_return defpattern41 = null;


        CommonTree NL36_tree=null;
        CommonTree NL38_tree=null;
        CommonTree Constr40_tree=null;
        RewriteRuleTokenStream stream_Constr=new RewriteRuleTokenStream(adaptor,"token Constr");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_primitive_pattern=new RewriteRuleSubtreeStream(adaptor,"rule primitive_pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_COLON=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_COLON");
        RewriteRuleSubtreeStream stream_defpattern=new RewriteRuleSubtreeStream(adaptor,"rule defpattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:435:2: ( primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )* -> ^( LIST_CONS ( primitive_pattern )* ) | Constr ( defpattern )? -> ^( Constr ( defpattern )? ) )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( ((LA16_0>=L_true && LA16_0<=L_false)||LA16_0==L_nil||LA16_0==MINUS||LA16_0==Id||LA16_0==Num||(LA16_0>=String && LA16_0<=ROUND_BRACKET_OPEN)||LA16_0==SQUARE_BRACKET_OPEN||LA16_0==CURLY_BRACKET_OPEN||LA16_0==UNDERSCORE) ) {
                alt16=1;
            }
            else if ( (LA16_0==Constr) ) {
                alt16=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }
            switch (alt16) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:435:4: primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )*
                    {
                    pushFollow(FOLLOW_primitive_pattern_in_defpattern1889);
                    primitive_pattern35=primitive_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitive_pattern.add(primitive_pattern35.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:435:22: ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )*
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( (LA14_0==NL) ) {
                            int LA14_1 = input.LA(2);

                            if ( ((LA14_1>=A_DOUBLE_COLON && LA14_1<=U_DOUBLE_COLON)) ) {
                                alt14=1;
                            }


                        }
                        else if ( ((LA14_0>=A_DOUBLE_COLON && LA14_0<=U_DOUBLE_COLON)) ) {
                            alt14=1;
                        }


                        switch (alt14) {
                    	case 1 :
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:435:23: ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern
                    	    {
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:435:23: ( NL )?
                    	    int alt12=2;
                    	    int LA12_0 = input.LA(1);

                    	    if ( (LA12_0==NL) ) {
                    	        alt12=1;
                    	    }
                    	    switch (alt12) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:435:23: NL
                    	            {
                    	            NL36=(Token)match(input,NL,FOLLOW_NL_in_defpattern1892); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL36);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_token_DOUBLE_COLON_in_defpattern1895);
                    	    token_DOUBLE_COLON37=token_DOUBLE_COLON();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_token_DOUBLE_COLON.add(token_DOUBLE_COLON37.getTree());
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:435:46: ( NL )?
                    	    int alt13=2;
                    	    int LA13_0 = input.LA(1);

                    	    if ( (LA13_0==NL) ) {
                    	        alt13=1;
                    	    }
                    	    switch (alt13) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:435:46: NL
                    	            {
                    	            NL38=(Token)match(input,NL,FOLLOW_NL_in_defpattern1897); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL38);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_primitive_pattern_in_defpattern1900);
                    	    primitive_pattern39=primitive_pattern();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_primitive_pattern.add(primitive_pattern39.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: primitive_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 436:3: -> ^( LIST_CONS ( primitive_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:436:6: ^( LIST_CONS ( primitive_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST_CONS, "LIST_CONS"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:436:18: ( primitive_pattern )*
                        while ( stream_primitive_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_primitive_pattern.nextTree());

                        }
                        stream_primitive_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:437:4: Constr ( defpattern )?
                    {
                    Constr40=(Token)match(input,Constr,FOLLOW_Constr_in_defpattern1918); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Constr.add(Constr40);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:437:11: ( defpattern )?
                    int alt15=2;
                    int LA15_0 = input.LA(1);

                    if ( ((LA15_0>=L_true && LA15_0<=L_false)||LA15_0==L_nil||LA15_0==MINUS||(LA15_0>=Constr && LA15_0<=Id)||LA15_0==Num||(LA15_0>=String && LA15_0<=ROUND_BRACKET_OPEN)||LA15_0==SQUARE_BRACKET_OPEN||LA15_0==CURLY_BRACKET_OPEN||LA15_0==UNDERSCORE) ) {
                        alt15=1;
                    }
                    switch (alt15) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:437:11: defpattern
                            {
                            pushFollow(FOLLOW_defpattern_in_defpattern1920);
                            defpattern41=defpattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_defpattern.add(defpattern41.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: Constr, defpattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 437:23: -> ^( Constr ( defpattern )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:437:26: ^( Constr ( defpattern )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_Constr.nextNode(), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:437:35: ( defpattern )?
                        if ( stream_defpattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_defpattern.nextTree());

                        }
                        stream_defpattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "defpattern"

    public static class casepattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "casepattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:439:1: casepattern : ( ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation -> ^( TYPE_PATTERN typeannotation pattern ) | pattern );
    public final babel17Parser.casepattern_return casepattern() throws RecognitionException {
        babel17Parser.casepattern_return retval = new babel17Parser.casepattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL43=null;
        Token char_literal44=null;
        Token NL45=null;
        babel17Parser.pattern_return pattern42 = null;

        babel17Parser.typeannotation_return typeannotation46 = null;

        babel17Parser.pattern_return pattern47 = null;


        CommonTree NL43_tree=null;
        CommonTree char_literal44_tree=null;
        CommonTree NL45_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_typeannotation=new RewriteRuleSubtreeStream(adaptor,"rule typeannotation");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:2: ( ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation -> ^( TYPE_PATTERN typeannotation pattern ) | pattern )
            int alt19=2;
            alt19 = dfa19.predict(input);
            switch (alt19) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:5: ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation
                    {
                    pushFollow(FOLLOW_pattern_in_casepattern1951);
                    pattern42=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern42.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:34: ( NL )?
                    int alt17=2;
                    int LA17_0 = input.LA(1);

                    if ( (LA17_0==NL) ) {
                        alt17=1;
                    }
                    switch (alt17) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:34: NL
                            {
                            NL43=(Token)match(input,NL,FOLLOW_NL_in_casepattern1953); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL43);


                            }
                            break;

                    }

                    char_literal44=(Token)match(input,COLON,FOLLOW_COLON_in_casepattern1956); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(char_literal44);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:42: ( NL )?
                    int alt18=2;
                    int LA18_0 = input.LA(1);

                    if ( (LA18_0==NL) ) {
                        alt18=1;
                    }
                    switch (alt18) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:42: NL
                            {
                            NL45=(Token)match(input,NL,FOLLOW_NL_in_casepattern1958); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL45);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeannotation_in_casepattern1961);
                    typeannotation46=typeannotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeannotation.add(typeannotation46.getTree());


                    // AST REWRITE
                    // elements: pattern, typeannotation
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 440:61: -> ^( TYPE_PATTERN typeannotation pattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:64: ^( TYPE_PATTERN typeannotation pattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_PATTERN, "TYPE_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_typeannotation.nextTree());
                        adaptor.addChild(root_1, stream_pattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:441:4: pattern
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pattern_in_casepattern1976);
                    pattern47=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pattern47.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "casepattern"

    public static class bracket_pattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracket_pattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:444:1: bracket_pattern : ( ( Id ( NL )? L_as )=> Id ( NL )? L_as ( NL )? pattern -> ^( L_as Id pattern ) | ( protected_expr ( NL )? QUESTION_MARK )=> protected_expr ( NL )? QUESTION_MARK ( ( NL )? pattern )? -> ^( QUESTION_MARK protected_expr ( pattern )? ) | ( protected_expr ( NL )? EXCLAMATION_MARK )=> protected_expr ( NL )? EXCLAMATION_MARK ( ( NL )? pattern )? -> ^( EXCLAMATION_MARK protected_expr ( pattern )? ) | ( Id pattern )=> Id pattern -> ^( INNERVALUE_PATTERN Id pattern ) | L_val ( NL )? protected_expr_nc -> ^( L_val protected_expr_nc ) | L_for ( NL )? ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )? L_end -> ^( L_for ( bracket_pattern )* ) | ( pattern ( NL )? L_if )=> pattern ( NL )? L_if ( NL )? protected_expr_nc -> ^( IF_PATTERN pattern protected_expr_nc ) | ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation -> ^( TYPE_PATTERN typeannotation pattern ) | pattern );
    public final babel17Parser.bracket_pattern_return bracket_pattern() throws RecognitionException {
        babel17Parser.bracket_pattern_return retval = new babel17Parser.bracket_pattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id48=null;
        Token NL49=null;
        Token L_as50=null;
        Token NL51=null;
        Token NL54=null;
        Token QUESTION_MARK55=null;
        Token NL56=null;
        Token NL59=null;
        Token EXCLAMATION_MARK60=null;
        Token NL61=null;
        Token Id63=null;
        Token L_val65=null;
        Token NL66=null;
        Token L_for68=null;
        Token NL69=null;
        Token NL71=null;
        Token COMMA72=null;
        Token NL73=null;
        Token NL75=null;
        Token L_end76=null;
        Token NL78=null;
        Token L_if79=null;
        Token NL80=null;
        Token NL83=null;
        Token char_literal84=null;
        Token NL85=null;
        babel17Parser.pattern_return pattern52 = null;

        babel17Parser.protected_expr_return protected_expr53 = null;

        babel17Parser.pattern_return pattern57 = null;

        babel17Parser.protected_expr_return protected_expr58 = null;

        babel17Parser.pattern_return pattern62 = null;

        babel17Parser.pattern_return pattern64 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc67 = null;

        babel17Parser.bracket_pattern_return bracket_pattern70 = null;

        babel17Parser.bracket_pattern_return bracket_pattern74 = null;

        babel17Parser.pattern_return pattern77 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc81 = null;

        babel17Parser.pattern_return pattern82 = null;

        babel17Parser.typeannotation_return typeannotation86 = null;

        babel17Parser.pattern_return pattern87 = null;


        CommonTree Id48_tree=null;
        CommonTree NL49_tree=null;
        CommonTree L_as50_tree=null;
        CommonTree NL51_tree=null;
        CommonTree NL54_tree=null;
        CommonTree QUESTION_MARK55_tree=null;
        CommonTree NL56_tree=null;
        CommonTree NL59_tree=null;
        CommonTree EXCLAMATION_MARK60_tree=null;
        CommonTree NL61_tree=null;
        CommonTree Id63_tree=null;
        CommonTree L_val65_tree=null;
        CommonTree NL66_tree=null;
        CommonTree L_for68_tree=null;
        CommonTree NL69_tree=null;
        CommonTree NL71_tree=null;
        CommonTree COMMA72_tree=null;
        CommonTree NL73_tree=null;
        CommonTree NL75_tree=null;
        CommonTree L_end76_tree=null;
        CommonTree NL78_tree=null;
        CommonTree L_if79_tree=null;
        CommonTree NL80_tree=null;
        CommonTree NL83_tree=null;
        CommonTree char_literal84_tree=null;
        CommonTree NL85_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_EXCLAMATION_MARK=new RewriteRuleTokenStream(adaptor,"token EXCLAMATION_MARK");
        RewriteRuleTokenStream stream_L_for=new RewriteRuleTokenStream(adaptor,"token L_for");
        RewriteRuleTokenStream stream_L_as=new RewriteRuleTokenStream(adaptor,"token L_as");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_L_val=new RewriteRuleTokenStream(adaptor,"token L_val");
        RewriteRuleTokenStream stream_L_if=new RewriteRuleTokenStream(adaptor,"token L_if");
        RewriteRuleTokenStream stream_QUESTION_MARK=new RewriteRuleTokenStream(adaptor,"token QUESTION_MARK");
        RewriteRuleSubtreeStream stream_typeannotation=new RewriteRuleSubtreeStream(adaptor,"rule typeannotation");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_protected_expr_nc=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr_nc");
        RewriteRuleSubtreeStream stream_bracket_pattern=new RewriteRuleSubtreeStream(adaptor,"rule bracket_pattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:2: ( ( Id ( NL )? L_as )=> Id ( NL )? L_as ( NL )? pattern -> ^( L_as Id pattern ) | ( protected_expr ( NL )? QUESTION_MARK )=> protected_expr ( NL )? QUESTION_MARK ( ( NL )? pattern )? -> ^( QUESTION_MARK protected_expr ( pattern )? ) | ( protected_expr ( NL )? EXCLAMATION_MARK )=> protected_expr ( NL )? EXCLAMATION_MARK ( ( NL )? pattern )? -> ^( EXCLAMATION_MARK protected_expr ( pattern )? ) | ( Id pattern )=> Id pattern -> ^( INNERVALUE_PATTERN Id pattern ) | L_val ( NL )? protected_expr_nc -> ^( L_val protected_expr_nc ) | L_for ( NL )? ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )? L_end -> ^( L_for ( bracket_pattern )* ) | ( pattern ( NL )? L_if )=> pattern ( NL )? L_if ( NL )? protected_expr_nc -> ^( IF_PATTERN pattern protected_expr_nc ) | ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation -> ^( TYPE_PATTERN typeannotation pattern ) | pattern )
            int alt39=9;
            alt39 = dfa39.predict(input);
            switch (alt39) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:10: ( Id ( NL )? L_as )=> Id ( NL )? L_as ( NL )? pattern
                    {
                    Id48=(Token)match(input,Id,FOLLOW_Id_in_bracket_pattern2004); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id48);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:30: ( NL )?
                    int alt20=2;
                    int LA20_0 = input.LA(1);

                    if ( (LA20_0==NL) ) {
                        alt20=1;
                    }
                    switch (alt20) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:30: NL
                            {
                            NL49=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2006); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL49);


                            }
                            break;

                    }

                    L_as50=(Token)match(input,L_as,FOLLOW_L_as_in_bracket_pattern2009); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_as.add(L_as50);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:39: ( NL )?
                    int alt21=2;
                    int LA21_0 = input.LA(1);

                    if ( (LA21_0==NL) ) {
                        alt21=1;
                    }
                    switch (alt21) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:39: NL
                            {
                            NL51=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2011); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL51);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_pattern_in_bracket_pattern2014);
                    pattern52=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern52.getTree());


                    // AST REWRITE
                    // elements: L_as, Id, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 445:51: -> ^( L_as Id pattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:54: ^( L_as Id pattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_L_as.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());
                        adaptor.addChild(root_1, stream_pattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:4: ( protected_expr ( NL )? QUESTION_MARK )=> protected_expr ( NL )? QUESTION_MARK ( ( NL )? pattern )?
                    {
                    pushFollow(FOLLOW_protected_expr_in_bracket_pattern2043);
                    protected_expr53=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr53.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:18: ( NL )?
                    int alt22=2;
                    int LA22_0 = input.LA(1);

                    if ( (LA22_0==NL) ) {
                        alt22=1;
                    }
                    switch (alt22) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:18: NL
                            {
                            NL54=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2045); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL54);


                            }
                            break;

                    }

                    QUESTION_MARK55=(Token)match(input,QUESTION_MARK,FOLLOW_QUESTION_MARK_in_bracket_pattern2048); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION_MARK.add(QUESTION_MARK55);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:36: ( ( NL )? pattern )?
                    int alt24=2;
                    int LA24_0 = input.LA(1);

                    if ( (LA24_0==NL) ) {
                        int LA24_1 = input.LA(2);

                        if ( (LA24_1==L_exception||(LA24_1>=L_true && LA24_1<=L_false)||LA24_1==L_nil||LA24_1==MINUS||(LA24_1>=A_ELLIPSIS && LA24_1<=U_ELLIPSIS)||(LA24_1>=Constr && LA24_1<=Id)||LA24_1==Num||(LA24_1>=String && LA24_1<=ROUND_BRACKET_OPEN)||LA24_1==SQUARE_BRACKET_OPEN||LA24_1==CURLY_BRACKET_OPEN||LA24_1==UNDERSCORE) ) {
                            alt24=1;
                        }
                    }
                    else if ( (LA24_0==L_exception||(LA24_0>=L_true && LA24_0<=L_false)||LA24_0==L_nil||LA24_0==MINUS||(LA24_0>=A_ELLIPSIS && LA24_0<=U_ELLIPSIS)||(LA24_0>=Constr && LA24_0<=Id)||LA24_0==Num||(LA24_0>=String && LA24_0<=ROUND_BRACKET_OPEN)||LA24_0==SQUARE_BRACKET_OPEN||LA24_0==CURLY_BRACKET_OPEN||LA24_0==UNDERSCORE) ) {
                        alt24=1;
                    }
                    switch (alt24) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:37: ( NL )? pattern
                            {
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:37: ( NL )?
                            int alt23=2;
                            int LA23_0 = input.LA(1);

                            if ( (LA23_0==NL) ) {
                                alt23=1;
                            }
                            switch (alt23) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:37: NL
                                    {
                                    NL56=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2051); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL56);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_pattern_in_bracket_pattern2054);
                            pattern57=pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pattern.add(pattern57.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: pattern, protected_expr, QUESTION_MARK
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 447:51: -> ^( QUESTION_MARK protected_expr ( pattern )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:54: ^( QUESTION_MARK protected_expr ( pattern )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_QUESTION_MARK.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_protected_expr.nextTree());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:85: ( pattern )?
                        if ( stream_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_pattern.nextTree());

                        }
                        stream_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:448:4: ( protected_expr ( NL )? EXCLAMATION_MARK )=> protected_expr ( NL )? EXCLAMATION_MARK ( ( NL )? pattern )?
                    {
                    pushFollow(FOLLOW_protected_expr_in_bracket_pattern2086);
                    protected_expr58=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr58.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:18: ( NL )?
                    int alt25=2;
                    int LA25_0 = input.LA(1);

                    if ( (LA25_0==NL) ) {
                        alt25=1;
                    }
                    switch (alt25) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:18: NL
                            {
                            NL59=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2088); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL59);


                            }
                            break;

                    }

                    EXCLAMATION_MARK60=(Token)match(input,EXCLAMATION_MARK,FOLLOW_EXCLAMATION_MARK_in_bracket_pattern2091); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EXCLAMATION_MARK.add(EXCLAMATION_MARK60);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:39: ( ( NL )? pattern )?
                    int alt27=2;
                    int LA27_0 = input.LA(1);

                    if ( (LA27_0==NL) ) {
                        int LA27_1 = input.LA(2);

                        if ( (LA27_1==L_exception||(LA27_1>=L_true && LA27_1<=L_false)||LA27_1==L_nil||LA27_1==MINUS||(LA27_1>=A_ELLIPSIS && LA27_1<=U_ELLIPSIS)||(LA27_1>=Constr && LA27_1<=Id)||LA27_1==Num||(LA27_1>=String && LA27_1<=ROUND_BRACKET_OPEN)||LA27_1==SQUARE_BRACKET_OPEN||LA27_1==CURLY_BRACKET_OPEN||LA27_1==UNDERSCORE) ) {
                            alt27=1;
                        }
                    }
                    else if ( (LA27_0==L_exception||(LA27_0>=L_true && LA27_0<=L_false)||LA27_0==L_nil||LA27_0==MINUS||(LA27_0>=A_ELLIPSIS && LA27_0<=U_ELLIPSIS)||(LA27_0>=Constr && LA27_0<=Id)||LA27_0==Num||(LA27_0>=String && LA27_0<=ROUND_BRACKET_OPEN)||LA27_0==SQUARE_BRACKET_OPEN||LA27_0==CURLY_BRACKET_OPEN||LA27_0==UNDERSCORE) ) {
                        alt27=1;
                    }
                    switch (alt27) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:40: ( NL )? pattern
                            {
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:40: ( NL )?
                            int alt26=2;
                            int LA26_0 = input.LA(1);

                            if ( (LA26_0==NL) ) {
                                alt26=1;
                            }
                            switch (alt26) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:40: NL
                                    {
                                    NL61=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2094); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL61);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_pattern_in_bracket_pattern2097);
                            pattern62=pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pattern.add(pattern62.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: protected_expr, EXCLAMATION_MARK, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 449:54: -> ^( EXCLAMATION_MARK protected_expr ( pattern )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:57: ^( EXCLAMATION_MARK protected_expr ( pattern )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_EXCLAMATION_MARK.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_protected_expr.nextTree());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:91: ( pattern )?
                        if ( stream_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_pattern.nextTree());

                        }
                        stream_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:4: ( Id pattern )=> Id pattern
                    {
                    Id63=(Token)match(input,Id,FOLLOW_Id_in_bracket_pattern2123); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id63);

                    pushFollow(FOLLOW_pattern_in_bracket_pattern2125);
                    pattern64=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern64.getTree());


                    // AST REWRITE
                    // elements: pattern, Id
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 450:31: -> ^( INNERVALUE_PATTERN Id pattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:34: ^( INNERVALUE_PATTERN Id pattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERVALUE_PATTERN, "INNERVALUE_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());
                        adaptor.addChild(root_1, stream_pattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:451:4: L_val ( NL )? protected_expr_nc
                    {
                    L_val65=(Token)match(input,L_val,FOLLOW_L_val_in_bracket_pattern2140); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_val.add(L_val65);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:451:10: ( NL )?
                    int alt28=2;
                    int LA28_0 = input.LA(1);

                    if ( (LA28_0==NL) ) {
                        alt28=1;
                    }
                    switch (alt28) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:451:10: NL
                            {
                            NL66=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2142); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL66);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_bracket_pattern2145);
                    protected_expr_nc67=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc67.getTree());


                    // AST REWRITE
                    // elements: protected_expr_nc, L_val
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 451:32: -> ^( L_val protected_expr_nc )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:451:35: ^( L_val protected_expr_nc )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_L_val.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_protected_expr_nc.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:10: L_for ( NL )? ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )? L_end
                    {
                    L_for68=(Token)match(input,L_for,FOLLOW_L_for_in_bracket_pattern2164); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_for.add(L_for68);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:16: ( NL )?
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==NL) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:16: NL
                            {
                            NL69=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2166); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL69);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:20: ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )?
                    int alt34=2;
                    int LA34_0 = input.LA(1);

                    if ( (LA34_0==L_begin||(LA34_0>=L_obj && LA34_0<=L_if)||(LA34_0>=L_while && LA34_0<=L_for)||LA34_0==L_match||LA34_0==L_val||LA34_0==L_exception||LA34_0==L_try||(LA34_0>=L_concurrent && LA34_0<=L_lazy)||(LA34_0>=L_true && LA34_0<=L_nil)||LA34_0==L_typeof||LA34_0==L_not||(LA34_0>=L_root && LA34_0<=L_native)||LA34_0==MINUS||(LA34_0>=A_ELLIPSIS && LA34_0<=U_ELLIPSIS)||LA34_0==L_force||(LA34_0>=Constr && LA34_0<=Id)||(LA34_0>=Float && LA34_0<=Num)||(LA34_0>=String && LA34_0<=ROUND_BRACKET_OPEN)||LA34_0==SQUARE_BRACKET_OPEN||LA34_0==CURLY_BRACKET_OPEN||LA34_0==UNDERSCORE) ) {
                        alt34=1;
                    }
                    switch (alt34) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:21: bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )?
                            {
                            pushFollow(FOLLOW_bracket_pattern_in_bracket_pattern2170);
                            bracket_pattern70=bracket_pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern70.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:37: ( ( NL )? COMMA ( NL )? bracket_pattern )*
                            loop32:
                            do {
                                int alt32=2;
                                int LA32_0 = input.LA(1);

                                if ( (LA32_0==NL) ) {
                                    int LA32_1 = input.LA(2);

                                    if ( (LA32_1==COMMA) ) {
                                        alt32=1;
                                    }


                                }
                                else if ( (LA32_0==COMMA) ) {
                                    alt32=1;
                                }


                                switch (alt32) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:39: ( NL )? COMMA ( NL )? bracket_pattern
                            	    {
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:39: ( NL )?
                            	    int alt30=2;
                            	    int LA30_0 = input.LA(1);

                            	    if ( (LA30_0==NL) ) {
                            	        alt30=1;
                            	    }
                            	    switch (alt30) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:39: NL
                            	            {
                            	            NL71=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2174); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL71);


                            	            }
                            	            break;

                            	    }

                            	    COMMA72=(Token)match(input,COMMA,FOLLOW_COMMA_in_bracket_pattern2177); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA72);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:49: ( NL )?
                            	    int alt31=2;
                            	    int LA31_0 = input.LA(1);

                            	    if ( (LA31_0==NL) ) {
                            	        alt31=1;
                            	    }
                            	    switch (alt31) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:49: NL
                            	            {
                            	            NL73=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2179); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL73);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_bracket_pattern_in_bracket_pattern2182);
                            	    bracket_pattern74=bracket_pattern();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern74.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop32;
                                }
                            } while (true);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:72: ( NL )?
                            int alt33=2;
                            int LA33_0 = input.LA(1);

                            if ( (LA33_0==NL) ) {
                                alt33=1;
                            }
                            switch (alt33) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:72: NL
                                    {
                                    NL75=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2187); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL75);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    L_end76=(Token)match(input,L_end,FOLLOW_L_end_in_bracket_pattern2192); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_end.add(L_end76);



                    // AST REWRITE
                    // elements: bracket_pattern, L_for
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 452:84: -> ^( L_for ( bracket_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:87: ^( L_for ( bracket_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_L_for.nextNode(), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:95: ( bracket_pattern )*
                        while ( stream_bracket_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_bracket_pattern.nextTree());

                        }
                        stream_bracket_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:453:4: ( pattern ( NL )? L_if )=> pattern ( NL )? L_if ( NL )? protected_expr_nc
                    {
                    pushFollow(FOLLOW_pattern_in_bracket_pattern2217);
                    pattern77=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern77.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:453:34: ( NL )?
                    int alt35=2;
                    int LA35_0 = input.LA(1);

                    if ( (LA35_0==NL) ) {
                        alt35=1;
                    }
                    switch (alt35) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:453:34: NL
                            {
                            NL78=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2219); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL78);


                            }
                            break;

                    }

                    L_if79=(Token)match(input,L_if,FOLLOW_L_if_in_bracket_pattern2222); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_if.add(L_if79);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:453:43: ( NL )?
                    int alt36=2;
                    int LA36_0 = input.LA(1);

                    if ( (LA36_0==NL) ) {
                        alt36=1;
                    }
                    switch (alt36) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:453:43: NL
                            {
                            NL80=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2224); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL80);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_bracket_pattern2227);
                    protected_expr_nc81=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc81.getTree());


                    // AST REWRITE
                    // elements: pattern, protected_expr_nc
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 453:65: -> ^( IF_PATTERN pattern protected_expr_nc )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:453:68: ^( IF_PATTERN pattern protected_expr_nc )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IF_PATTERN, "IF_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_pattern.nextTree());
                        adaptor.addChild(root_1, stream_protected_expr_nc.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:454:4: ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation
                    {
                    pushFollow(FOLLOW_pattern_in_bracket_pattern2253);
                    pattern82=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern82.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:454:33: ( NL )?
                    int alt37=2;
                    int LA37_0 = input.LA(1);

                    if ( (LA37_0==NL) ) {
                        alt37=1;
                    }
                    switch (alt37) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:454:33: NL
                            {
                            NL83=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2255); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL83);


                            }
                            break;

                    }

                    char_literal84=(Token)match(input,COLON,FOLLOW_COLON_in_bracket_pattern2258); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(char_literal84);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:454:41: ( NL )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==NL) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:454:41: NL
                            {
                            NL85=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2260); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL85);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeannotation_in_bracket_pattern2263);
                    typeannotation86=typeannotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeannotation.add(typeannotation86.getTree());


                    // AST REWRITE
                    // elements: typeannotation, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 454:60: -> ^( TYPE_PATTERN typeannotation pattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:454:63: ^( TYPE_PATTERN typeannotation pattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_PATTERN, "TYPE_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_typeannotation.nextTree());
                        adaptor.addChild(root_1, stream_pattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:455:4: pattern
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pattern_in_bracket_pattern2278);
                    pattern87=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pattern87.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bracket_pattern"

    public static class arrow_or_assign_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrow_or_assign"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:457:1: arrow_or_assign : ( token_ARROW -> ^( ARROW ) | ASSIGN -> ^( ASSIGN ) );
    public final babel17Parser.arrow_or_assign_return arrow_or_assign() throws RecognitionException {
        babel17Parser.arrow_or_assign_return retval = new babel17Parser.arrow_or_assign_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ASSIGN89=null;
        babel17Parser.token_ARROW_return token_ARROW88 = null;


        CommonTree ASSIGN89_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_token_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_ARROW");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:458:2: ( token_ARROW -> ^( ARROW ) | ASSIGN -> ^( ASSIGN ) )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( ((LA40_0>=A_ARROW && LA40_0<=U_ARROW)) ) {
                alt40=1;
            }
            else if ( (LA40_0==ASSIGN) ) {
                alt40=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:458:4: token_ARROW
                    {
                    pushFollow(FOLLOW_token_ARROW_in_arrow_or_assign2288);
                    token_ARROW88=token_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_ARROW.add(token_ARROW88.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 458:16: -> ^( ARROW )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:458:19: ^( ARROW )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARROW, "ARROW"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:459:4: ASSIGN
                    {
                    ASSIGN89=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_arrow_or_assign2299); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN89);



                    // AST REWRITE
                    // elements: ASSIGN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 459:11: -> ^( ASSIGN )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:459:14: ^( ASSIGN )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_ASSIGN.nextNode(), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrow_or_assign"

    public static class mselem_pattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mselem_pattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:461:1: mselem_pattern : bracket_pattern ( ( NL )? arrow_or_assign ( NL )? bracket_pattern )? -> ^( NIL_TOKEN ^( NIL_TOKEN ( bracket_pattern )* ) ( arrow_or_assign )* ) ;
    public final babel17Parser.mselem_pattern_return mselem_pattern() throws RecognitionException {
        babel17Parser.mselem_pattern_return retval = new babel17Parser.mselem_pattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL91=null;
        Token NL93=null;
        babel17Parser.bracket_pattern_return bracket_pattern90 = null;

        babel17Parser.arrow_or_assign_return arrow_or_assign92 = null;

        babel17Parser.bracket_pattern_return bracket_pattern94 = null;


        CommonTree NL91_tree=null;
        CommonTree NL93_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_arrow_or_assign=new RewriteRuleSubtreeStream(adaptor,"rule arrow_or_assign");
        RewriteRuleSubtreeStream stream_bracket_pattern=new RewriteRuleSubtreeStream(adaptor,"rule bracket_pattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:462:2: ( bracket_pattern ( ( NL )? arrow_or_assign ( NL )? bracket_pattern )? -> ^( NIL_TOKEN ^( NIL_TOKEN ( bracket_pattern )* ) ( arrow_or_assign )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:462:4: bracket_pattern ( ( NL )? arrow_or_assign ( NL )? bracket_pattern )?
            {
            pushFollow(FOLLOW_bracket_pattern_in_mselem_pattern2314);
            bracket_pattern90=bracket_pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern90.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:462:20: ( ( NL )? arrow_or_assign ( NL )? bracket_pattern )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==NL) ) {
                int LA43_1 = input.LA(2);

                if ( (LA43_1==ASSIGN||(LA43_1>=A_ARROW && LA43_1<=U_ARROW)) ) {
                    alt43=1;
                }
            }
            else if ( (LA43_0==ASSIGN||(LA43_0>=A_ARROW && LA43_0<=U_ARROW)) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:462:21: ( NL )? arrow_or_assign ( NL )? bracket_pattern
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:462:21: ( NL )?
                    int alt41=2;
                    int LA41_0 = input.LA(1);

                    if ( (LA41_0==NL) ) {
                        alt41=1;
                    }
                    switch (alt41) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:462:21: NL
                            {
                            NL91=(Token)match(input,NL,FOLLOW_NL_in_mselem_pattern2317); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL91);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_arrow_or_assign_in_mselem_pattern2320);
                    arrow_or_assign92=arrow_or_assign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrow_or_assign.add(arrow_or_assign92.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:462:41: ( NL )?
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==NL) ) {
                        alt42=1;
                    }
                    switch (alt42) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:462:41: NL
                            {
                            NL93=(Token)match(input,NL,FOLLOW_NL_in_mselem_pattern2322); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL93);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_bracket_pattern_in_mselem_pattern2325);
                    bracket_pattern94=bracket_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern94.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: bracket_pattern, arrow_or_assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 463:3: -> ^( NIL_TOKEN ^( NIL_TOKEN ( bracket_pattern )* ) ( arrow_or_assign )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:463:6: ^( NIL_TOKEN ^( NIL_TOKEN ( bracket_pattern )* ) ( arrow_or_assign )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:463:18: ^( NIL_TOKEN ( bracket_pattern )* )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:463:30: ( bracket_pattern )*
                while ( stream_bracket_pattern.hasNext() ) {
                    adaptor.addChild(root_2, stream_bracket_pattern.nextTree());

                }
                stream_bracket_pattern.reset();

                adaptor.addChild(root_1, root_2);
                }
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:463:48: ( arrow_or_assign )*
                while ( stream_arrow_or_assign.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrow_or_assign.nextTree());

                }
                stream_arrow_or_assign.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mselem_pattern"

    public static class primitive_pattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitive_pattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:465:1: primitive_pattern : ( Id | '_' -> ANY | String | Num | L_true | L_false | L_nil | '-' ( NL )? Num -> ^( UMINUS Num ) | '[' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )? ']' -> ^( SQUARE_LIST ( bracket_pattern )* ) | '(' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) ) | '{' ( NL )? ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) );
    public final babel17Parser.primitive_pattern_return primitive_pattern() throws RecognitionException {
        babel17Parser.primitive_pattern_return retval = new babel17Parser.primitive_pattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id95=null;
        Token char_literal96=null;
        Token String97=null;
        Token Num98=null;
        Token L_true99=null;
        Token L_false100=null;
        Token L_nil101=null;
        Token char_literal102=null;
        Token NL103=null;
        Token Num104=null;
        Token char_literal105=null;
        Token NL106=null;
        Token NL108=null;
        Token COMMA109=null;
        Token NL110=null;
        Token NL112=null;
        Token char_literal113=null;
        Token char_literal114=null;
        Token NL115=null;
        Token NL117=null;
        Token COMMA118=null;
        Token NL119=null;
        Token NL121=null;
        Token COMMA122=null;
        Token NL123=null;
        Token char_literal124=null;
        Token char_literal125=null;
        Token NL126=null;
        Token NL128=null;
        Token COMMA129=null;
        Token NL130=null;
        Token NL132=null;
        Token char_literal133=null;
        Token char_literal134=null;
        Token NL135=null;
        Token NL137=null;
        Token char_literal138=null;
        babel17Parser.bracket_pattern_return bracket_pattern107 = null;

        babel17Parser.bracket_pattern_return bracket_pattern111 = null;

        babel17Parser.bracket_pattern_return bracket_pattern116 = null;

        babel17Parser.bracket_pattern_return bracket_pattern120 = null;

        babel17Parser.mselem_pattern_return mselem_pattern127 = null;

        babel17Parser.mselem_pattern_return mselem_pattern131 = null;

        babel17Parser.token_ARROW_return token_ARROW136 = null;


        CommonTree Id95_tree=null;
        CommonTree char_literal96_tree=null;
        CommonTree String97_tree=null;
        CommonTree Num98_tree=null;
        CommonTree L_true99_tree=null;
        CommonTree L_false100_tree=null;
        CommonTree L_nil101_tree=null;
        CommonTree char_literal102_tree=null;
        CommonTree NL103_tree=null;
        CommonTree Num104_tree=null;
        CommonTree char_literal105_tree=null;
        CommonTree NL106_tree=null;
        CommonTree NL108_tree=null;
        CommonTree COMMA109_tree=null;
        CommonTree NL110_tree=null;
        CommonTree NL112_tree=null;
        CommonTree char_literal113_tree=null;
        CommonTree char_literal114_tree=null;
        CommonTree NL115_tree=null;
        CommonTree NL117_tree=null;
        CommonTree COMMA118_tree=null;
        CommonTree NL119_tree=null;
        CommonTree NL121_tree=null;
        CommonTree COMMA122_tree=null;
        CommonTree NL123_tree=null;
        CommonTree char_literal124_tree=null;
        CommonTree char_literal125_tree=null;
        CommonTree NL126_tree=null;
        CommonTree NL128_tree=null;
        CommonTree COMMA129_tree=null;
        CommonTree NL130_tree=null;
        CommonTree NL132_tree=null;
        CommonTree char_literal133_tree=null;
        CommonTree char_literal134_tree=null;
        CommonTree NL135_tree=null;
        CommonTree NL137_tree=null;
        CommonTree char_literal138_tree=null;
        RewriteRuleTokenStream stream_CURLY_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_OPEN");
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_CURLY_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_UNDERSCORE=new RewriteRuleTokenStream(adaptor,"token UNDERSCORE");
        RewriteRuleTokenStream stream_Num=new RewriteRuleTokenStream(adaptor,"token Num");
        RewriteRuleTokenStream stream_SQUARE_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token SQUARE_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_SQUARE_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token SQUARE_BRACKET_OPEN");
        RewriteRuleSubtreeStream stream_mselem_pattern=new RewriteRuleSubtreeStream(adaptor,"rule mselem_pattern");
        RewriteRuleSubtreeStream stream_token_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_ARROW");
        RewriteRuleSubtreeStream stream_bracket_pattern=new RewriteRuleSubtreeStream(adaptor,"rule bracket_pattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:466:2: ( Id | '_' -> ANY | String | Num | L_true | L_false | L_nil | '-' ( NL )? Num -> ^( UMINUS Num ) | '[' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )? ']' -> ^( SQUARE_LIST ( bracket_pattern )* ) | '(' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) ) | '{' ( NL )? ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) )
            int alt67=12;
            alt67 = dfa67.predict(input);
            switch (alt67) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:466:4: Id
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Id95=(Token)match(input,Id,FOLLOW_Id_in_primitive_pattern2354); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Id95_tree = (CommonTree)adaptor.create(Id95);
                    adaptor.addChild(root_0, Id95_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:467:4: '_'
                    {
                    char_literal96=(Token)match(input,UNDERSCORE,FOLLOW_UNDERSCORE_in_primitive_pattern2359); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNDERSCORE.add(char_literal96);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 467:8: -> ANY
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(ANY, "ANY"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:468:4: String
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    String97=(Token)match(input,String,FOLLOW_String_in_primitive_pattern2368); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    String97_tree = (CommonTree)adaptor.create(String97);
                    adaptor.addChild(root_0, String97_tree);
                    }

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:469:4: Num
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Num98=(Token)match(input,Num,FOLLOW_Num_in_primitive_pattern2373); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Num98_tree = (CommonTree)adaptor.create(Num98);
                    adaptor.addChild(root_0, Num98_tree);
                    }

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:470:4: L_true
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_true99=(Token)match(input,L_true,FOLLOW_L_true_in_primitive_pattern2378); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_true99_tree = (CommonTree)adaptor.create(L_true99);
                    adaptor.addChild(root_0, L_true99_tree);
                    }

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:471:4: L_false
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_false100=(Token)match(input,L_false,FOLLOW_L_false_in_primitive_pattern2383); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_false100_tree = (CommonTree)adaptor.create(L_false100);
                    adaptor.addChild(root_0, L_false100_tree);
                    }

                    }
                    break;
                case 7 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:472:4: L_nil
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_nil101=(Token)match(input,L_nil,FOLLOW_L_nil_in_primitive_pattern2388); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_nil101_tree = (CommonTree)adaptor.create(L_nil101);
                    adaptor.addChild(root_0, L_nil101_tree);
                    }

                    }
                    break;
                case 8 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:4: '-' ( NL )? Num
                    {
                    char_literal102=(Token)match(input,MINUS,FOLLOW_MINUS_in_primitive_pattern2396); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(char_literal102);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:8: ( NL )?
                    int alt44=2;
                    int LA44_0 = input.LA(1);

                    if ( (LA44_0==NL) ) {
                        alt44=1;
                    }
                    switch (alt44) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:8: NL
                            {
                            NL103=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2398); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL103);


                            }
                            break;

                    }

                    Num104=(Token)match(input,Num,FOLLOW_Num_in_primitive_pattern2401); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Num.add(Num104);



                    // AST REWRITE
                    // elements: Num
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 475:16: -> ^( UMINUS Num )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:19: ^( UMINUS Num )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UMINUS, "UMINUS"), root_1);

                        adaptor.addChild(root_1, stream_Num.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:4: '[' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )? ']'
                    {
                    char_literal105=(Token)match(input,SQUARE_BRACKET_OPEN,FOLLOW_SQUARE_BRACKET_OPEN_in_primitive_pattern2414); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_OPEN.add(char_literal105);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:9: ( NL )?
                    int alt45=2;
                    int LA45_0 = input.LA(1);

                    if ( (LA45_0==NL) ) {
                        alt45=1;
                    }
                    switch (alt45) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:9: NL
                            {
                            NL106=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2417); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL106);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:13: ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )?
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==L_begin||(LA50_0>=L_obj && LA50_0<=L_if)||(LA50_0>=L_while && LA50_0<=L_for)||LA50_0==L_match||LA50_0==L_val||LA50_0==L_exception||LA50_0==L_try||(LA50_0>=L_concurrent && LA50_0<=L_lazy)||(LA50_0>=L_true && LA50_0<=L_nil)||LA50_0==L_typeof||LA50_0==L_not||(LA50_0>=L_root && LA50_0<=L_native)||LA50_0==MINUS||(LA50_0>=A_ELLIPSIS && LA50_0<=U_ELLIPSIS)||LA50_0==L_force||(LA50_0>=Constr && LA50_0<=Id)||(LA50_0>=Float && LA50_0<=Num)||(LA50_0>=String && LA50_0<=ROUND_BRACKET_OPEN)||LA50_0==SQUARE_BRACKET_OPEN||LA50_0==CURLY_BRACKET_OPEN||LA50_0==UNDERSCORE) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:14: bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )*
                            {
                            pushFollow(FOLLOW_bracket_pattern_in_primitive_pattern2421);
                            bracket_pattern107=bracket_pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern107.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:30: ( NL )?
                            int alt46=2;
                            int LA46_0 = input.LA(1);

                            if ( (LA46_0==NL) ) {
                                alt46=1;
                            }
                            switch (alt46) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:30: NL
                                    {
                                    NL108=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2423); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL108);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:34: ( COMMA ( NL )? bracket_pattern ( NL )? )*
                            loop49:
                            do {
                                int alt49=2;
                                int LA49_0 = input.LA(1);

                                if ( (LA49_0==COMMA) ) {
                                    alt49=1;
                                }


                                switch (alt49) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:36: COMMA ( NL )? bracket_pattern ( NL )?
                            	    {
                            	    COMMA109=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitive_pattern2428); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA109);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:42: ( NL )?
                            	    int alt47=2;
                            	    int LA47_0 = input.LA(1);

                            	    if ( (LA47_0==NL) ) {
                            	        alt47=1;
                            	    }
                            	    switch (alt47) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:42: NL
                            	            {
                            	            NL110=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2430); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL110);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_bracket_pattern_in_primitive_pattern2433);
                            	    bracket_pattern111=bracket_pattern();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern111.getTree());
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:62: ( NL )?
                            	    int alt48=2;
                            	    int LA48_0 = input.LA(1);

                            	    if ( (LA48_0==NL) ) {
                            	        alt48=1;
                            	    }
                            	    switch (alt48) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:62: NL
                            	            {
                            	            NL112=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2435); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL112);


                            	            }
                            	            break;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop49;
                                }
                            } while (true);


                            }
                            break;

                    }

                    char_literal113=(Token)match(input,SQUARE_BRACKET_CLOSE,FOLLOW_SQUARE_BRACKET_CLOSE_in_primitive_pattern2443); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_CLOSE.add(char_literal113);



                    // AST REWRITE
                    // elements: bracket_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 477:6: -> ^( SQUARE_LIST ( bracket_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:477:9: ^( SQUARE_LIST ( bracket_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SQUARE_LIST, "SQUARE_LIST"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:477:23: ( bracket_pattern )*
                        while ( stream_bracket_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_bracket_pattern.nextTree());

                        }
                        stream_bracket_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:4: '(' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )? ')'
                    {
                    char_literal114=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_primitive_pattern2463); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal114);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:9: ( NL )?
                    int alt51=2;
                    int LA51_0 = input.LA(1);

                    if ( (LA51_0==NL) ) {
                        alt51=1;
                    }
                    switch (alt51) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:9: NL
                            {
                            NL115=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2466); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL115);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:13: ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )?
                    int alt58=2;
                    int LA58_0 = input.LA(1);

                    if ( (LA58_0==L_begin||(LA58_0>=L_obj && LA58_0<=L_if)||(LA58_0>=L_while && LA58_0<=L_for)||LA58_0==L_match||LA58_0==L_val||LA58_0==L_exception||LA58_0==L_try||(LA58_0>=L_concurrent && LA58_0<=L_lazy)||(LA58_0>=L_true && LA58_0<=L_nil)||LA58_0==L_typeof||LA58_0==L_not||(LA58_0>=L_root && LA58_0<=L_native)||LA58_0==MINUS||(LA58_0>=A_ELLIPSIS && LA58_0<=U_ELLIPSIS)||LA58_0==L_force||(LA58_0>=Constr && LA58_0<=Id)||(LA58_0>=Float && LA58_0<=Num)||(LA58_0>=String && LA58_0<=ROUND_BRACKET_OPEN)||LA58_0==SQUARE_BRACKET_OPEN||LA58_0==CURLY_BRACKET_OPEN||LA58_0==UNDERSCORE) ) {
                        alt58=1;
                    }
                    switch (alt58) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:14: bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )?
                            {
                            pushFollow(FOLLOW_bracket_pattern_in_primitive_pattern2470);
                            bracket_pattern116=bracket_pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern116.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:30: ( NL )?
                            int alt52=2;
                            int LA52_0 = input.LA(1);

                            if ( (LA52_0==NL) ) {
                                alt52=1;
                            }
                            switch (alt52) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:30: NL
                                    {
                                    NL117=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2472); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL117);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:34: ( COMMA ( NL )? bracket_pattern ( NL )? )*
                            loop55:
                            do {
                                int alt55=2;
                                int LA55_0 = input.LA(1);

                                if ( (LA55_0==COMMA) ) {
                                    int LA55_1 = input.LA(2);

                                    if ( (LA55_1==NL) ) {
                                        int LA55_3 = input.LA(3);

                                        if ( (LA55_3==L_begin||(LA55_3>=L_obj && LA55_3<=L_if)||(LA55_3>=L_while && LA55_3<=L_for)||LA55_3==L_match||LA55_3==L_val||LA55_3==L_exception||LA55_3==L_try||(LA55_3>=L_concurrent && LA55_3<=L_lazy)||(LA55_3>=L_true && LA55_3<=L_nil)||LA55_3==L_typeof||LA55_3==L_not||(LA55_3>=L_root && LA55_3<=L_native)||LA55_3==MINUS||(LA55_3>=A_ELLIPSIS && LA55_3<=U_ELLIPSIS)||LA55_3==L_force||(LA55_3>=Constr && LA55_3<=Id)||(LA55_3>=Float && LA55_3<=Num)||(LA55_3>=String && LA55_3<=ROUND_BRACKET_OPEN)||LA55_3==SQUARE_BRACKET_OPEN||LA55_3==CURLY_BRACKET_OPEN||LA55_3==UNDERSCORE) ) {
                                            alt55=1;
                                        }


                                    }
                                    else if ( (LA55_1==L_begin||(LA55_1>=L_obj && LA55_1<=L_if)||(LA55_1>=L_while && LA55_1<=L_for)||LA55_1==L_match||LA55_1==L_val||LA55_1==L_exception||LA55_1==L_try||(LA55_1>=L_concurrent && LA55_1<=L_lazy)||(LA55_1>=L_true && LA55_1<=L_nil)||LA55_1==L_typeof||LA55_1==L_not||(LA55_1>=L_root && LA55_1<=L_native)||LA55_1==MINUS||(LA55_1>=A_ELLIPSIS && LA55_1<=U_ELLIPSIS)||LA55_1==L_force||(LA55_1>=Constr && LA55_1<=Id)||(LA55_1>=Float && LA55_1<=Num)||(LA55_1>=String && LA55_1<=ROUND_BRACKET_OPEN)||LA55_1==SQUARE_BRACKET_OPEN||LA55_1==CURLY_BRACKET_OPEN||LA55_1==UNDERSCORE) ) {
                                        alt55=1;
                                    }


                                }


                                switch (alt55) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:36: COMMA ( NL )? bracket_pattern ( NL )?
                            	    {
                            	    COMMA118=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitive_pattern2477); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA118);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:43: ( NL )?
                            	    int alt53=2;
                            	    int LA53_0 = input.LA(1);

                            	    if ( (LA53_0==NL) ) {
                            	        alt53=1;
                            	    }
                            	    switch (alt53) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:43: NL
                            	            {
                            	            NL119=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2480); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL119);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_bracket_pattern_in_primitive_pattern2483);
                            	    bracket_pattern120=bracket_pattern();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern120.getTree());
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:63: ( NL )?
                            	    int alt54=2;
                            	    int LA54_0 = input.LA(1);

                            	    if ( (LA54_0==NL) ) {
                            	        alt54=1;
                            	    }
                            	    switch (alt54) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:63: NL
                            	            {
                            	            NL121=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2485); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL121);


                            	            }
                            	            break;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop55;
                                }
                            } while (true);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:69: ( COMMA ( NL )? )?
                            int alt57=2;
                            int LA57_0 = input.LA(1);

                            if ( (LA57_0==COMMA) ) {
                                alt57=1;
                            }
                            switch (alt57) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:70: COMMA ( NL )?
                                    {
                                    COMMA122=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitive_pattern2491); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA122);

                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:76: ( NL )?
                                    int alt56=2;
                                    int LA56_0 = input.LA(1);

                                    if ( (LA56_0==NL) ) {
                                        alt56=1;
                                    }
                                    switch (alt56) {
                                        case 1 :
                                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:76: NL
                                            {
                                            NL123=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2493); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_NL.add(NL123);


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    char_literal124=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_primitive_pattern2500); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal124);



                    // AST REWRITE
                    // elements: bracket_pattern, COMMA
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 479:5: -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:479:8: ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROUND_LIST, "ROUND_LIST"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:479:21: ^( NIL_TOKEN ( COMMA )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:479:33: ( COMMA )*
                        while ( stream_COMMA.hasNext() ) {
                            adaptor.addChild(root_2, stream_COMMA.nextNode());

                        }
                        stream_COMMA.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:479:41: ^( NIL_TOKEN ( bracket_pattern )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:479:53: ( bracket_pattern )*
                        while ( stream_bracket_pattern.hasNext() ) {
                            adaptor.addChild(root_2, stream_bracket_pattern.nextTree());

                        }
                        stream_bracket_pattern.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:4: '{' ( NL )? ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )? '}'
                    {
                    char_literal125=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_primitive_pattern2532); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal125);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:9: ( NL )?
                    int alt59=2;
                    int LA59_0 = input.LA(1);

                    if ( (LA59_0==NL) ) {
                        alt59=1;
                    }
                    switch (alt59) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:9: NL
                            {
                            NL126=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2535); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL126);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:13: ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )?
                    int alt64=2;
                    int LA64_0 = input.LA(1);

                    if ( (LA64_0==L_begin||(LA64_0>=L_obj && LA64_0<=L_if)||(LA64_0>=L_while && LA64_0<=L_for)||LA64_0==L_match||LA64_0==L_val||LA64_0==L_exception||LA64_0==L_try||(LA64_0>=L_concurrent && LA64_0<=L_lazy)||(LA64_0>=L_true && LA64_0<=L_nil)||LA64_0==L_typeof||LA64_0==L_not||(LA64_0>=L_root && LA64_0<=L_native)||LA64_0==MINUS||(LA64_0>=A_ELLIPSIS && LA64_0<=U_ELLIPSIS)||LA64_0==L_force||(LA64_0>=Constr && LA64_0<=Id)||(LA64_0>=Float && LA64_0<=Num)||(LA64_0>=String && LA64_0<=ROUND_BRACKET_OPEN)||LA64_0==SQUARE_BRACKET_OPEN||LA64_0==CURLY_BRACKET_OPEN||LA64_0==UNDERSCORE) ) {
                        alt64=1;
                    }
                    switch (alt64) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:14: mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )*
                            {
                            pushFollow(FOLLOW_mselem_pattern_in_primitive_pattern2539);
                            mselem_pattern127=mselem_pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_mselem_pattern.add(mselem_pattern127.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:29: ( NL )?
                            int alt60=2;
                            int LA60_0 = input.LA(1);

                            if ( (LA60_0==NL) ) {
                                alt60=1;
                            }
                            switch (alt60) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:29: NL
                                    {
                                    NL128=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2541); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL128);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:33: ( COMMA ( NL )? mselem_pattern ( NL )? )*
                            loop63:
                            do {
                                int alt63=2;
                                int LA63_0 = input.LA(1);

                                if ( (LA63_0==COMMA) ) {
                                    alt63=1;
                                }


                                switch (alt63) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:35: COMMA ( NL )? mselem_pattern ( NL )?
                            	    {
                            	    COMMA129=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitive_pattern2546); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA129);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:42: ( NL )?
                            	    int alt61=2;
                            	    int LA61_0 = input.LA(1);

                            	    if ( (LA61_0==NL) ) {
                            	        alt61=1;
                            	    }
                            	    switch (alt61) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:42: NL
                            	            {
                            	            NL130=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2549); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL130);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_mselem_pattern_in_primitive_pattern2552);
                            	    mselem_pattern131=mselem_pattern();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_mselem_pattern.add(mselem_pattern131.getTree());
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:61: ( NL )?
                            	    int alt62=2;
                            	    int LA62_0 = input.LA(1);

                            	    if ( (LA62_0==NL) ) {
                            	        alt62=1;
                            	    }
                            	    switch (alt62) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:61: NL
                            	            {
                            	            NL132=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2554); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL132);


                            	            }
                            	            break;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop63;
                                }
                            } while (true);


                            }
                            break;

                    }

                    char_literal133=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_primitive_pattern2562); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal133);



                    // AST REWRITE
                    // elements: mselem_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 481:5: -> ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:481:8: ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MAP_OR_SET_OR_OBJ, "MAP_OR_SET_OR_OBJ"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:481:28: ( mselem_pattern )*
                        while ( stream_mselem_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_mselem_pattern.nextTree());

                        }
                        stream_mselem_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:482:4: '{' ( NL )? token_ARROW ( NL )? '}'
                    {
                    char_literal134=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_primitive_pattern2580); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal134);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:482:8: ( NL )?
                    int alt65=2;
                    int LA65_0 = input.LA(1);

                    if ( (LA65_0==NL) ) {
                        alt65=1;
                    }
                    switch (alt65) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:482:8: NL
                            {
                            NL135=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2582); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL135);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_token_ARROW_in_primitive_pattern2585);
                    token_ARROW136=token_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_ARROW.add(token_ARROW136.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:482:24: ( NL )?
                    int alt66=2;
                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==NL) ) {
                        alt66=1;
                    }
                    switch (alt66) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:482:24: NL
                            {
                            NL137=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2587); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL137);


                            }
                            break;

                    }

                    char_literal138=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_primitive_pattern2590); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal138);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 482:32: -> ^( EMPTY_MAP )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:482:35: ^( EMPTY_MAP )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EMPTY_MAP, "EMPTY_MAP"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "primitive_pattern"

    public static class sep_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sep"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:485:1: sep : ( NL | SC )+ ;
    public final babel17Parser.sep_return sep() throws RecognitionException {
        babel17Parser.sep_return retval = new babel17Parser.sep_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set139=null;

        CommonTree set139_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:485:5: ( ( NL | SC )+ )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:485:7: ( NL | SC )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:485:7: ( NL | SC )+
            int cnt68=0;
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==SC||LA68_0==NL) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            	    {
            	    set139=(Token)input.LT(1);
            	    if ( input.LA(1)==SC||input.LA(1)==NL ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set139));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt68 >= 1 ) break loop68;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(68, input);
                        throw eee;
                }
                cnt68++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sep"

    public static class block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:487:1: block : ( ( sep )? statement ( sep statement )* ( sep )? -> ^( BLOCK ( statement )* ) | ( sep )? -> ^( BLOCK ) );
    public final babel17Parser.block_return block() throws RecognitionException {
        babel17Parser.block_return retval = new babel17Parser.block_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.sep_return sep140 = null;

        babel17Parser.statement_return statement141 = null;

        babel17Parser.sep_return sep142 = null;

        babel17Parser.statement_return statement143 = null;

        babel17Parser.sep_return sep144 = null;

        babel17Parser.sep_return sep145 = null;


        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_sep=new RewriteRuleSubtreeStream(adaptor,"rule sep");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:487:8: ( ( sep )? statement ( sep statement )* ( sep )? -> ^( BLOCK ( statement )* ) | ( sep )? -> ^( BLOCK ) )
            int alt73=2;
            alt73 = dfa73.predict(input);
            switch (alt73) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:487:10: ( sep )? statement ( sep statement )* ( sep )?
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:487:10: ( sep )?
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==SC||LA69_0==NL) ) {
                        alt69=1;
                    }
                    switch (alt69) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:487:10: sep
                            {
                            pushFollow(FOLLOW_sep_in_block2622);
                            sep140=sep();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_sep.add(sep140.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_statement_in_block2625);
                    statement141=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement141.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:487:25: ( sep statement )*
                    loop70:
                    do {
                        int alt70=2;
                        alt70 = dfa70.predict(input);
                        switch (alt70) {
                    	case 1 :
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:487:26: sep statement
                    	    {
                    	    pushFollow(FOLLOW_sep_in_block2628);
                    	    sep142=sep();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_sep.add(sep142.getTree());
                    	    pushFollow(FOLLOW_statement_in_block2630);
                    	    statement143=statement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_statement.add(statement143.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop70;
                        }
                    } while (true);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:487:42: ( sep )?
                    int alt71=2;
                    int LA71_0 = input.LA(1);

                    if ( (LA71_0==SC||LA71_0==NL) ) {
                        alt71=1;
                    }
                    switch (alt71) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:487:42: sep
                            {
                            pushFollow(FOLLOW_sep_in_block2634);
                            sep144=sep();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_sep.add(sep144.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 487:47: -> ^( BLOCK ( statement )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:487:50: ^( BLOCK ( statement )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK, "BLOCK"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:487:58: ( statement )*
                        while ( stream_statement.hasNext() ) {
                            adaptor.addChild(root_1, stream_statement.nextTree());

                        }
                        stream_statement.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:4: ( sep )?
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:4: ( sep )?
                    int alt72=2;
                    int LA72_0 = input.LA(1);

                    if ( (LA72_0==SC||LA72_0==NL) ) {
                        alt72=1;
                    }
                    switch (alt72) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:4: sep
                            {
                            pushFollow(FOLLOW_sep_in_block2650);
                            sep145=sep();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_sep.add(sep145.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 488:9: -> ^( BLOCK )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:12: ^( BLOCK )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK, "BLOCK"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class pure_block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pure_block"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:490:1: pure_block : statement ( sep statement )* -> ^( BLOCK ( statement )* ) ;
    public final babel17Parser.pure_block_return pure_block() throws RecognitionException {
        babel17Parser.pure_block_return retval = new babel17Parser.pure_block_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.statement_return statement146 = null;

        babel17Parser.sep_return sep147 = null;

        babel17Parser.statement_return statement148 = null;


        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_sep=new RewriteRuleSubtreeStream(adaptor,"rule sep");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:491:2: ( statement ( sep statement )* -> ^( BLOCK ( statement )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:491:4: statement ( sep statement )*
            {
            pushFollow(FOLLOW_statement_in_pure_block2667);
            statement146=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_statement.add(statement146.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:491:14: ( sep statement )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==NL) ) {
                    int LA74_1 = input.LA(2);

                    if ( (LA74_1==L_begin||(LA74_1>=L_obj && LA74_1<=L_if)||(LA74_1>=L_while && LA74_1<=L_for)||(LA74_1>=L_yield && LA74_1<=L_match)||(LA74_1>=L_val && LA74_1<=L_def)||LA74_1==L_exception||LA74_1==L_try||(LA74_1>=L_concurrent && LA74_1<=L_nil)||(LA74_1>=L_module && LA74_1<=L_import)||LA74_1==L_not||(LA74_1>=L_root && LA74_1<=L_native)||LA74_1==SC||LA74_1==MINUS||(LA74_1>=A_ELLIPSIS && LA74_1<=U_ELLIPSIS)||LA74_1==L_force||(LA74_1>=NL && LA74_1<=Id)||(LA74_1>=Float && LA74_1<=Num)||(LA74_1>=String && LA74_1<=ROUND_BRACKET_OPEN)||LA74_1==SQUARE_BRACKET_OPEN||LA74_1==CURLY_BRACKET_OPEN||LA74_1==UNDERSCORE||(LA74_1>=PRAGMA_LOG && LA74_1<=PRAGMA_CATCH)) ) {
                        alt74=1;
                    }


                }
                else if ( (LA74_0==SC) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:491:15: sep statement
            	    {
            	    pushFollow(FOLLOW_sep_in_pure_block2670);
            	    sep147=sep();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sep.add(sep147.getTree());
            	    pushFollow(FOLLOW_statement_in_pure_block2672);
            	    statement148=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_statement.add(statement148.getTree());

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);



            // AST REWRITE
            // elements: statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 491:31: -> ^( BLOCK ( statement )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:491:34: ^( BLOCK ( statement )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK, "BLOCK"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:491:42: ( statement )*
                while ( stream_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_statement.nextTree());

                }
                stream_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pure_block"

    public static class statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:493:1: statement : ( st_typedef | st_val | st_def | st_yield | st_memoize | st_private | st_module | st_import | expr_or_assign | PRAGMA_PRINT ( NL )? expr -> ^( PRAGMA_PRINT expr ) | PRAGMA_LOG ( NL )? expr -> ^( PRAGMA_LOG expr ) | PRAGMA_PROFILE ( NL )? expr -> ^( PRAGMA_PROFILE expr ) | PRAGMA_ASSERT ( NL )? expr -> ^( PRAGMA_ASSERT expr ) | PRAGMA_CATCH ( NL )? casepattern ( NL )? L_try ( NL )? expr -> ^( PRAGMA_CATCH expr casepattern ) );
    public final babel17Parser.statement_return statement() throws RecognitionException {
        babel17Parser.statement_return retval = new babel17Parser.statement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PRAGMA_PRINT158=null;
        Token NL159=null;
        Token PRAGMA_LOG161=null;
        Token NL162=null;
        Token PRAGMA_PROFILE164=null;
        Token NL165=null;
        Token PRAGMA_ASSERT167=null;
        Token NL168=null;
        Token PRAGMA_CATCH170=null;
        Token NL171=null;
        Token NL173=null;
        Token L_try174=null;
        Token NL175=null;
        babel17Parser.st_typedef_return st_typedef149 = null;

        babel17Parser.st_val_return st_val150 = null;

        babel17Parser.st_def_return st_def151 = null;

        babel17Parser.st_yield_return st_yield152 = null;

        babel17Parser.st_memoize_return st_memoize153 = null;

        babel17Parser.st_private_return st_private154 = null;

        babel17Parser.st_module_return st_module155 = null;

        babel17Parser.st_import_return st_import156 = null;

        babel17Parser.expr_or_assign_return expr_or_assign157 = null;

        babel17Parser.expr_return expr160 = null;

        babel17Parser.expr_return expr163 = null;

        babel17Parser.expr_return expr166 = null;

        babel17Parser.expr_return expr169 = null;

        babel17Parser.casepattern_return casepattern172 = null;

        babel17Parser.expr_return expr176 = null;


        CommonTree PRAGMA_PRINT158_tree=null;
        CommonTree NL159_tree=null;
        CommonTree PRAGMA_LOG161_tree=null;
        CommonTree NL162_tree=null;
        CommonTree PRAGMA_PROFILE164_tree=null;
        CommonTree NL165_tree=null;
        CommonTree PRAGMA_ASSERT167_tree=null;
        CommonTree NL168_tree=null;
        CommonTree PRAGMA_CATCH170_tree=null;
        CommonTree NL171_tree=null;
        CommonTree NL173_tree=null;
        CommonTree L_try174_tree=null;
        CommonTree NL175_tree=null;
        RewriteRuleTokenStream stream_PRAGMA_CATCH=new RewriteRuleTokenStream(adaptor,"token PRAGMA_CATCH");
        RewriteRuleTokenStream stream_PRAGMA_PROFILE=new RewriteRuleTokenStream(adaptor,"token PRAGMA_PROFILE");
        RewriteRuleTokenStream stream_PRAGMA_ASSERT=new RewriteRuleTokenStream(adaptor,"token PRAGMA_ASSERT");
        RewriteRuleTokenStream stream_PRAGMA_LOG=new RewriteRuleTokenStream(adaptor,"token PRAGMA_LOG");
        RewriteRuleTokenStream stream_L_try=new RewriteRuleTokenStream(adaptor,"token L_try");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_PRAGMA_PRINT=new RewriteRuleTokenStream(adaptor,"token PRAGMA_PRINT");
        RewriteRuleSubtreeStream stream_casepattern=new RewriteRuleSubtreeStream(adaptor,"rule casepattern");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:494:2: ( st_typedef | st_val | st_def | st_yield | st_memoize | st_private | st_module | st_import | expr_or_assign | PRAGMA_PRINT ( NL )? expr -> ^( PRAGMA_PRINT expr ) | PRAGMA_LOG ( NL )? expr -> ^( PRAGMA_LOG expr ) | PRAGMA_PROFILE ( NL )? expr -> ^( PRAGMA_PROFILE expr ) | PRAGMA_ASSERT ( NL )? expr -> ^( PRAGMA_ASSERT expr ) | PRAGMA_CATCH ( NL )? casepattern ( NL )? L_try ( NL )? expr -> ^( PRAGMA_CATCH expr casepattern ) )
            int alt82=14;
            alt82 = dfa82.predict(input);
            switch (alt82) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:494:4: st_typedef
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_typedef_in_statement2693);
                    st_typedef149=st_typedef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_typedef149.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:495:10: st_val
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_val_in_statement2704);
                    st_val150=st_val();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_val150.getTree());

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:496:4: st_def
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_def_in_statement2709);
                    st_def151=st_def();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_def151.getTree());

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:497:4: st_yield
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_yield_in_statement2714);
                    st_yield152=st_yield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_yield152.getTree());

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:498:4: st_memoize
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_memoize_in_statement2719);
                    st_memoize153=st_memoize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_memoize153.getTree());

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:499:4: st_private
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_private_in_statement2724);
                    st_private154=st_private();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_private154.getTree());

                    }
                    break;
                case 7 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:500:4: st_module
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_module_in_statement2729);
                    st_module155=st_module();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_module155.getTree());

                    }
                    break;
                case 8 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:501:4: st_import
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_import_in_statement2734);
                    st_import156=st_import();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_import156.getTree());

                    }
                    break;
                case 9 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:502:4: expr_or_assign
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expr_or_assign_in_statement2739);
                    expr_or_assign157=expr_or_assign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_or_assign157.getTree());

                    }
                    break;
                case 10 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:503:5: PRAGMA_PRINT ( NL )? expr
                    {
                    PRAGMA_PRINT158=(Token)match(input,PRAGMA_PRINT,FOLLOW_PRAGMA_PRINT_in_statement2745); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRAGMA_PRINT.add(PRAGMA_PRINT158);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:503:18: ( NL )?
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==NL) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:503:18: NL
                            {
                            NL159=(Token)match(input,NL,FOLLOW_NL_in_statement2747); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL159);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_statement2750);
                    expr160=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr160.getTree());


                    // AST REWRITE
                    // elements: PRAGMA_PRINT, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 503:27: -> ^( PRAGMA_PRINT expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:503:30: ^( PRAGMA_PRINT expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PRAGMA_PRINT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:504:5: PRAGMA_LOG ( NL )? expr
                    {
                    PRAGMA_LOG161=(Token)match(input,PRAGMA_LOG,FOLLOW_PRAGMA_LOG_in_statement2764); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRAGMA_LOG.add(PRAGMA_LOG161);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:504:16: ( NL )?
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==NL) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:504:16: NL
                            {
                            NL162=(Token)match(input,NL,FOLLOW_NL_in_statement2766); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL162);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_statement2769);
                    expr163=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr163.getTree());


                    // AST REWRITE
                    // elements: PRAGMA_LOG, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 504:25: -> ^( PRAGMA_LOG expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:504:28: ^( PRAGMA_LOG expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PRAGMA_LOG.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:505:5: PRAGMA_PROFILE ( NL )? expr
                    {
                    PRAGMA_PROFILE164=(Token)match(input,PRAGMA_PROFILE,FOLLOW_PRAGMA_PROFILE_in_statement2783); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRAGMA_PROFILE.add(PRAGMA_PROFILE164);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:505:20: ( NL )?
                    int alt77=2;
                    int LA77_0 = input.LA(1);

                    if ( (LA77_0==NL) ) {
                        alt77=1;
                    }
                    switch (alt77) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:505:20: NL
                            {
                            NL165=(Token)match(input,NL,FOLLOW_NL_in_statement2785); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL165);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_statement2788);
                    expr166=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr166.getTree());


                    // AST REWRITE
                    // elements: expr, PRAGMA_PROFILE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 505:29: -> ^( PRAGMA_PROFILE expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:505:32: ^( PRAGMA_PROFILE expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PRAGMA_PROFILE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:5: PRAGMA_ASSERT ( NL )? expr
                    {
                    PRAGMA_ASSERT167=(Token)match(input,PRAGMA_ASSERT,FOLLOW_PRAGMA_ASSERT_in_statement2802); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRAGMA_ASSERT.add(PRAGMA_ASSERT167);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:19: ( NL )?
                    int alt78=2;
                    int LA78_0 = input.LA(1);

                    if ( (LA78_0==NL) ) {
                        alt78=1;
                    }
                    switch (alt78) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:19: NL
                            {
                            NL168=(Token)match(input,NL,FOLLOW_NL_in_statement2804); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL168);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_statement2807);
                    expr169=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr169.getTree());


                    // AST REWRITE
                    // elements: PRAGMA_ASSERT, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 506:28: -> ^( PRAGMA_ASSERT expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:31: ^( PRAGMA_ASSERT expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PRAGMA_ASSERT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 14 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:507:4: PRAGMA_CATCH ( NL )? casepattern ( NL )? L_try ( NL )? expr
                    {
                    PRAGMA_CATCH170=(Token)match(input,PRAGMA_CATCH,FOLLOW_PRAGMA_CATCH_in_statement2820); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRAGMA_CATCH.add(PRAGMA_CATCH170);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:507:17: ( NL )?
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==NL) ) {
                        alt79=1;
                    }
                    switch (alt79) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:507:17: NL
                            {
                            NL171=(Token)match(input,NL,FOLLOW_NL_in_statement2822); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL171);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_casepattern_in_statement2825);
                    casepattern172=casepattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_casepattern.add(casepattern172.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:507:33: ( NL )?
                    int alt80=2;
                    int LA80_0 = input.LA(1);

                    if ( (LA80_0==NL) ) {
                        alt80=1;
                    }
                    switch (alt80) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:507:33: NL
                            {
                            NL173=(Token)match(input,NL,FOLLOW_NL_in_statement2827); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL173);


                            }
                            break;

                    }

                    L_try174=(Token)match(input,L_try,FOLLOW_L_try_in_statement2830); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_try.add(L_try174);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:507:43: ( NL )?
                    int alt81=2;
                    int LA81_0 = input.LA(1);

                    if ( (LA81_0==NL) ) {
                        alt81=1;
                    }
                    switch (alt81) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:507:43: NL
                            {
                            NL175=(Token)match(input,NL,FOLLOW_NL_in_statement2832); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL175);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_statement2835);
                    expr176=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr176.getTree());


                    // AST REWRITE
                    // elements: PRAGMA_CATCH, expr, casepattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 507:52: -> ^( PRAGMA_CATCH expr casepattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:507:55: ^( PRAGMA_CATCH expr casepattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PRAGMA_CATCH.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());
                        adaptor.addChild(root_1, stream_casepattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class objelem_assign_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "objelem_assign"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:509:1: objelem_assign : Id PERIOD Id -> ^( OBJELEM_ASSIGN Id Id ) ;
    public final babel17Parser.objelem_assign_return objelem_assign() throws RecognitionException {
        babel17Parser.objelem_assign_return retval = new babel17Parser.objelem_assign_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id177=null;
        Token PERIOD178=null;
        Token Id179=null;

        CommonTree Id177_tree=null;
        CommonTree PERIOD178_tree=null;
        CommonTree Id179_tree=null;
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:2: ( Id PERIOD Id -> ^( OBJELEM_ASSIGN Id Id ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:4: Id PERIOD Id
            {
            Id177=(Token)match(input,Id,FOLLOW_Id_in_objelem_assign2855); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id177);

            PERIOD178=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_objelem_assign2857); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD178);

            Id179=(Token)match(input,Id,FOLLOW_Id_in_objelem_assign2859); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id179);



            // AST REWRITE
            // elements: Id, Id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 510:17: -> ^( OBJELEM_ASSIGN Id Id )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:20: ^( OBJELEM_ASSIGN Id Id )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJELEM_ASSIGN, "OBJELEM_ASSIGN"), root_1);

                adaptor.addChild(root_1, stream_Id.nextNode());
                adaptor.addChild(root_1, stream_Id.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "objelem_assign"

    public static class st_val_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_val"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:1: st_val : L_val ( NL )? ( pattern | objelem_assign ) ( NL )? '=' ( NL )? expr -> ^( VAL ( pattern )* ( objelem_assign )* expr ) ;
    public final babel17Parser.st_val_return st_val() throws RecognitionException {
        babel17Parser.st_val_return retval = new babel17Parser.st_val_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_val180=null;
        Token NL181=null;
        Token NL184=null;
        Token char_literal185=null;
        Token NL186=null;
        babel17Parser.pattern_return pattern182 = null;

        babel17Parser.objelem_assign_return objelem_assign183 = null;

        babel17Parser.expr_return expr187 = null;


        CommonTree L_val180_tree=null;
        CommonTree NL181_tree=null;
        CommonTree NL184_tree=null;
        CommonTree char_literal185_tree=null;
        CommonTree NL186_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_val=new RewriteRuleTokenStream(adaptor,"token L_val");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_objelem_assign=new RewriteRuleSubtreeStream(adaptor,"rule objelem_assign");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:8: ( L_val ( NL )? ( pattern | objelem_assign ) ( NL )? '=' ( NL )? expr -> ^( VAL ( pattern )* ( objelem_assign )* expr ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:10: L_val ( NL )? ( pattern | objelem_assign ) ( NL )? '=' ( NL )? expr
            {
            L_val180=(Token)match(input,L_val,FOLLOW_L_val_in_st_val2878); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_val.add(L_val180);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:16: ( NL )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==NL) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:16: NL
                    {
                    NL181=(Token)match(input,NL,FOLLOW_NL_in_st_val2880); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL181);


                    }
                    break;

            }

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:20: ( pattern | objelem_assign )
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==L_exception||(LA84_0>=L_true && LA84_0<=L_false)||LA84_0==L_nil||LA84_0==MINUS||(LA84_0>=A_ELLIPSIS && LA84_0<=U_ELLIPSIS)||LA84_0==Constr||LA84_0==Num||(LA84_0>=String && LA84_0<=ROUND_BRACKET_OPEN)||LA84_0==SQUARE_BRACKET_OPEN||LA84_0==CURLY_BRACKET_OPEN||LA84_0==UNDERSCORE) ) {
                alt84=1;
            }
            else if ( (LA84_0==Id) ) {
                int LA84_2 = input.LA(2);

                if ( (LA84_2==PERIOD) ) {
                    alt84=2;
                }
                else if ( (LA84_2==ASSIGN||(LA84_2>=A_DOUBLE_COLON && LA84_2<=U_DOUBLE_COLON)||LA84_2==NL) ) {
                    alt84=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 84, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);

                throw nvae;
            }
            switch (alt84) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:21: pattern
                    {
                    pushFollow(FOLLOW_pattern_in_st_val2884);
                    pattern182=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern182.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:31: objelem_assign
                    {
                    pushFollow(FOLLOW_objelem_assign_in_st_val2888);
                    objelem_assign183=objelem_assign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_objelem_assign.add(objelem_assign183.getTree());

                    }
                    break;

            }

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:47: ( NL )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==NL) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:47: NL
                    {
                    NL184=(Token)match(input,NL,FOLLOW_NL_in_st_val2891); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL184);


                    }
                    break;

            }

            char_literal185=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_st_val2894); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal185);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:55: ( NL )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==NL) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:55: NL
                    {
                    NL186=(Token)match(input,NL,FOLLOW_NL_in_st_val2896); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL186);


                    }
                    break;

            }

            pushFollow(FOLLOW_expr_in_st_val2899);
            expr187=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr187.getTree());


            // AST REWRITE
            // elements: objelem_assign, pattern, expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 512:64: -> ^( VAL ( pattern )* ( objelem_assign )* expr )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:67: ^( VAL ( pattern )* ( objelem_assign )* expr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAL, "VAL"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:73: ( pattern )*
                while ( stream_pattern.hasNext() ) {
                    adaptor.addChild(root_1, stream_pattern.nextTree());

                }
                stream_pattern.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:82: ( objelem_assign )*
                while ( stream_objelem_assign.hasNext() ) {
                    adaptor.addChild(root_1, stream_objelem_assign.nextTree());

                }
                stream_objelem_assign.reset();
                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_val"

    public static class st_def_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_def"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:1: st_def : ( L_def ( NL )? Id ( NL )? ( defpattern ( NL )? )? ( ':' ( NL )? typeid ( NL )? )? '=' ( NL )? expr -> ^( DEF Id ( typeid )? ( defpattern )? expr ) | L_def ( NL )? L_this ( NL )? ':' ( NL )? typeid ( NL )? '=' ( NL )? expr -> ^( CONVERSION typeid expr ) );
    public final babel17Parser.st_def_return st_def() throws RecognitionException {
        babel17Parser.st_def_return retval = new babel17Parser.st_def_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_def188=null;
        Token NL189=null;
        Token Id190=null;
        Token NL191=null;
        Token NL193=null;
        Token char_literal194=null;
        Token NL195=null;
        Token NL197=null;
        Token char_literal198=null;
        Token NL199=null;
        Token L_def201=null;
        Token NL202=null;
        Token L_this203=null;
        Token NL204=null;
        Token char_literal205=null;
        Token NL206=null;
        Token NL208=null;
        Token char_literal209=null;
        Token NL210=null;
        babel17Parser.defpattern_return defpattern192 = null;

        babel17Parser.typeid_return typeid196 = null;

        babel17Parser.expr_return expr200 = null;

        babel17Parser.typeid_return typeid207 = null;

        babel17Parser.expr_return expr211 = null;


        CommonTree L_def188_tree=null;
        CommonTree NL189_tree=null;
        CommonTree Id190_tree=null;
        CommonTree NL191_tree=null;
        CommonTree NL193_tree=null;
        CommonTree char_literal194_tree=null;
        CommonTree NL195_tree=null;
        CommonTree NL197_tree=null;
        CommonTree char_literal198_tree=null;
        CommonTree NL199_tree=null;
        CommonTree L_def201_tree=null;
        CommonTree NL202_tree=null;
        CommonTree L_this203_tree=null;
        CommonTree NL204_tree=null;
        CommonTree char_literal205_tree=null;
        CommonTree NL206_tree=null;
        CommonTree NL208_tree=null;
        CommonTree char_literal209_tree=null;
        CommonTree NL210_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_L_this=new RewriteRuleTokenStream(adaptor,"token L_this");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_L_def=new RewriteRuleTokenStream(adaptor,"token L_def");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_typeid=new RewriteRuleSubtreeStream(adaptor,"rule typeid");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_defpattern=new RewriteRuleSubtreeStream(adaptor,"rule defpattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:8: ( L_def ( NL )? Id ( NL )? ( defpattern ( NL )? )? ( ':' ( NL )? typeid ( NL )? )? '=' ( NL )? expr -> ^( DEF Id ( typeid )? ( defpattern )? expr ) | L_def ( NL )? L_this ( NL )? ':' ( NL )? typeid ( NL )? '=' ( NL )? expr -> ^( CONVERSION typeid expr ) )
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==L_def) ) {
                switch ( input.LA(2) ) {
                case NL:
                    {
                    int LA100_2 = input.LA(3);

                    if ( (LA100_2==Id) ) {
                        alt100=1;
                    }
                    else if ( (LA100_2==L_this) ) {
                        alt100=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 100, 2, input);

                        throw nvae;
                    }
                    }
                    break;
                case L_this:
                    {
                    alt100=2;
                    }
                    break;
                case Id:
                    {
                    alt100=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 100, 1, input);

                    throw nvae;
                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 100, 0, input);

                throw nvae;
            }
            switch (alt100) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:10: L_def ( NL )? Id ( NL )? ( defpattern ( NL )? )? ( ':' ( NL )? typeid ( NL )? )? '=' ( NL )? expr
                    {
                    L_def188=(Token)match(input,L_def,FOLLOW_L_def_in_st_def2923); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_def.add(L_def188);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:16: ( NL )?
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==NL) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:16: NL
                            {
                            NL189=(Token)match(input,NL,FOLLOW_NL_in_st_def2925); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL189);


                            }
                            break;

                    }

                    Id190=(Token)match(input,Id,FOLLOW_Id_in_st_def2928); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id190);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:23: ( NL )?
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==NL) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:23: NL
                            {
                            NL191=(Token)match(input,NL,FOLLOW_NL_in_st_def2930); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL191);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:27: ( defpattern ( NL )? )?
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( ((LA90_0>=L_true && LA90_0<=L_false)||LA90_0==L_nil||LA90_0==MINUS||(LA90_0>=Constr && LA90_0<=Id)||LA90_0==Num||(LA90_0>=String && LA90_0<=ROUND_BRACKET_OPEN)||LA90_0==SQUARE_BRACKET_OPEN||LA90_0==CURLY_BRACKET_OPEN||LA90_0==UNDERSCORE) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:28: defpattern ( NL )?
                            {
                            pushFollow(FOLLOW_defpattern_in_st_def2934);
                            defpattern192=defpattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_defpattern.add(defpattern192.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:39: ( NL )?
                            int alt89=2;
                            int LA89_0 = input.LA(1);

                            if ( (LA89_0==NL) ) {
                                alt89=1;
                            }
                            switch (alt89) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:39: NL
                                    {
                                    NL193=(Token)match(input,NL,FOLLOW_NL_in_st_def2936); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL193);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:45: ( ':' ( NL )? typeid ( NL )? )?
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==COLON) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:46: ':' ( NL )? typeid ( NL )?
                            {
                            char_literal194=(Token)match(input,COLON,FOLLOW_COLON_in_st_def2942); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(char_literal194);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:50: ( NL )?
                            int alt91=2;
                            int LA91_0 = input.LA(1);

                            if ( (LA91_0==NL) ) {
                                alt91=1;
                            }
                            switch (alt91) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:50: NL
                                    {
                                    NL195=(Token)match(input,NL,FOLLOW_NL_in_st_def2944); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL195);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_typeid_in_st_def2947);
                            typeid196=typeid();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typeid.add(typeid196.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:61: ( NL )?
                            int alt92=2;
                            int LA92_0 = input.LA(1);

                            if ( (LA92_0==NL) ) {
                                alt92=1;
                            }
                            switch (alt92) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:61: NL
                                    {
                                    NL197=(Token)match(input,NL,FOLLOW_NL_in_st_def2949); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL197);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    char_literal198=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_st_def2954); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal198);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:71: ( NL )?
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==NL) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:71: NL
                            {
                            NL199=(Token)match(input,NL,FOLLOW_NL_in_st_def2956); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL199);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_st_def2959);
                    expr200=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr200.getTree());


                    // AST REWRITE
                    // elements: defpattern, Id, expr, typeid
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 515:5: -> ^( DEF Id ( typeid )? ( defpattern )? expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:515:8: ^( DEF Id ( typeid )? ( defpattern )? expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DEF, "DEF"), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:515:17: ( typeid )?
                        if ( stream_typeid.hasNext() ) {
                            adaptor.addChild(root_1, stream_typeid.nextTree());

                        }
                        stream_typeid.reset();
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:515:25: ( defpattern )?
                        if ( stream_defpattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_defpattern.nextTree());

                        }
                        stream_defpattern.reset();
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:516:4: L_def ( NL )? L_this ( NL )? ':' ( NL )? typeid ( NL )? '=' ( NL )? expr
                    {
                    L_def201=(Token)match(input,L_def,FOLLOW_L_def_in_st_def2985); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_def.add(L_def201);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:516:10: ( NL )?
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==NL) ) {
                        alt95=1;
                    }
                    switch (alt95) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:516:10: NL
                            {
                            NL202=(Token)match(input,NL,FOLLOW_NL_in_st_def2987); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL202);


                            }
                            break;

                    }

                    L_this203=(Token)match(input,L_this,FOLLOW_L_this_in_st_def2990); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_this.add(L_this203);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:516:21: ( NL )?
                    int alt96=2;
                    int LA96_0 = input.LA(1);

                    if ( (LA96_0==NL) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:516:21: NL
                            {
                            NL204=(Token)match(input,NL,FOLLOW_NL_in_st_def2992); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL204);


                            }
                            break;

                    }

                    char_literal205=(Token)match(input,COLON,FOLLOW_COLON_in_st_def2995); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(char_literal205);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:516:29: ( NL )?
                    int alt97=2;
                    int LA97_0 = input.LA(1);

                    if ( (LA97_0==NL) ) {
                        alt97=1;
                    }
                    switch (alt97) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:516:29: NL
                            {
                            NL206=(Token)match(input,NL,FOLLOW_NL_in_st_def2997); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL206);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeid_in_st_def3000);
                    typeid207=typeid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeid.add(typeid207.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:516:40: ( NL )?
                    int alt98=2;
                    int LA98_0 = input.LA(1);

                    if ( (LA98_0==NL) ) {
                        alt98=1;
                    }
                    switch (alt98) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:516:40: NL
                            {
                            NL208=(Token)match(input,NL,FOLLOW_NL_in_st_def3002); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL208);


                            }
                            break;

                    }

                    char_literal209=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_st_def3005); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal209);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:516:48: ( NL )?
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( (LA99_0==NL) ) {
                        alt99=1;
                    }
                    switch (alt99) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:516:48: NL
                            {
                            NL210=(Token)match(input,NL,FOLLOW_NL_in_st_def3007); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL210);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_st_def3010);
                    expr211=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr211.getTree());


                    // AST REWRITE
                    // elements: typeid, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 516:57: -> ^( CONVERSION typeid expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:516:60: ^( CONVERSION typeid expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONVERSION, "CONVERSION"), root_1);

                        adaptor.addChild(root_1, stream_typeid.nextTree());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_def"

    public static class st_typedef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_typedef"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:518:1: st_typedef : L_typedef ( NL )? Id ( NL )? typedef_clause ( ( NL )? COMMA ( NL )? typedef_clause )* -> ^( TYPEDEF Id ^( NIL_TOKEN ( typedef_clause )* ) ) ;
    public final babel17Parser.st_typedef_return st_typedef() throws RecognitionException {
        babel17Parser.st_typedef_return retval = new babel17Parser.st_typedef_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_typedef212=null;
        Token NL213=null;
        Token Id214=null;
        Token NL215=null;
        Token NL217=null;
        Token COMMA218=null;
        Token NL219=null;
        babel17Parser.typedef_clause_return typedef_clause216 = null;

        babel17Parser.typedef_clause_return typedef_clause220 = null;


        CommonTree L_typedef212_tree=null;
        CommonTree NL213_tree=null;
        CommonTree Id214_tree=null;
        CommonTree NL215_tree=null;
        CommonTree NL217_tree=null;
        CommonTree COMMA218_tree=null;
        CommonTree NL219_tree=null;
        RewriteRuleTokenStream stream_L_typedef=new RewriteRuleTokenStream(adaptor,"token L_typedef");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleSubtreeStream stream_typedef_clause=new RewriteRuleSubtreeStream(adaptor,"rule typedef_clause");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:2: ( L_typedef ( NL )? Id ( NL )? typedef_clause ( ( NL )? COMMA ( NL )? typedef_clause )* -> ^( TYPEDEF Id ^( NIL_TOKEN ( typedef_clause )* ) ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:4: L_typedef ( NL )? Id ( NL )? typedef_clause ( ( NL )? COMMA ( NL )? typedef_clause )*
            {
            L_typedef212=(Token)match(input,L_typedef,FOLLOW_L_typedef_in_st_typedef3033); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_typedef.add(L_typedef212);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:14: ( NL )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==NL) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:14: NL
                    {
                    NL213=(Token)match(input,NL,FOLLOW_NL_in_st_typedef3035); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL213);


                    }
                    break;

            }

            Id214=(Token)match(input,Id,FOLLOW_Id_in_st_typedef3038); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id214);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:21: ( NL )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==NL) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:21: NL
                    {
                    NL215=(Token)match(input,NL,FOLLOW_NL_in_st_typedef3040); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL215);


                    }
                    break;

            }

            pushFollow(FOLLOW_typedef_clause_in_st_typedef3043);
            typedef_clause216=typedef_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_clause.add(typedef_clause216.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:40: ( ( NL )? COMMA ( NL )? typedef_clause )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==NL) ) {
                    int LA105_1 = input.LA(2);

                    if ( (LA105_1==COMMA) ) {
                        alt105=1;
                    }


                }
                else if ( (LA105_0==COMMA) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:41: ( NL )? COMMA ( NL )? typedef_clause
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:41: ( NL )?
            	    int alt103=2;
            	    int LA103_0 = input.LA(1);

            	    if ( (LA103_0==NL) ) {
            	        alt103=1;
            	    }
            	    switch (alt103) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:41: NL
            	            {
            	            NL217=(Token)match(input,NL,FOLLOW_NL_in_st_typedef3046); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL217);


            	            }
            	            break;

            	    }

            	    COMMA218=(Token)match(input,COMMA,FOLLOW_COMMA_in_st_typedef3049); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA218);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:51: ( NL )?
            	    int alt104=2;
            	    int LA104_0 = input.LA(1);

            	    if ( (LA104_0==NL) ) {
            	        alt104=1;
            	    }
            	    switch (alt104) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:51: NL
            	            {
            	            NL219=(Token)match(input,NL,FOLLOW_NL_in_st_typedef3051); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL219);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_typedef_clause_in_st_typedef3054);
            	    typedef_clause220=typedef_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typedef_clause.add(typedef_clause220.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);



            // AST REWRITE
            // elements: typedef_clause, Id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 519:72: -> ^( TYPEDEF Id ^( NIL_TOKEN ( typedef_clause )* ) )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:75: ^( TYPEDEF Id ^( NIL_TOKEN ( typedef_clause )* ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEDEF, "TYPEDEF"), root_1);

                adaptor.addChild(root_1, stream_Id.nextNode());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:88: ^( NIL_TOKEN ( typedef_clause )* )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:100: ( typedef_clause )*
                while ( stream_typedef_clause.hasNext() ) {
                    adaptor.addChild(root_2, stream_typedef_clause.nextTree());

                }
                stream_typedef_clause.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_typedef"

    public static class typedef_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typedef_clause"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:1: typedef_clause : ( ( defpattern ( NL )? '=' )=> defpattern ( NL )? '=' ( NL )? expr -> ^( TYPEDEF_CLAUSE defpattern expr ) | defpattern -> ^( TYPEDEF_CLAUSE defpattern ) );
    public final babel17Parser.typedef_clause_return typedef_clause() throws RecognitionException {
        babel17Parser.typedef_clause_return retval = new babel17Parser.typedef_clause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL222=null;
        Token char_literal223=null;
        Token NL224=null;
        babel17Parser.defpattern_return defpattern221 = null;

        babel17Parser.expr_return expr225 = null;

        babel17Parser.defpattern_return defpattern226 = null;


        CommonTree NL222_tree=null;
        CommonTree char_literal223_tree=null;
        CommonTree NL224_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_defpattern=new RewriteRuleSubtreeStream(adaptor,"rule defpattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:2: ( ( defpattern ( NL )? '=' )=> defpattern ( NL )? '=' ( NL )? expr -> ^( TYPEDEF_CLAUSE defpattern expr ) | defpattern -> ^( TYPEDEF_CLAUSE defpattern ) )
            int alt108=2;
            alt108 = dfa108.predict(input);
            switch (alt108) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:4: ( defpattern ( NL )? '=' )=> defpattern ( NL )? '=' ( NL )? expr
                    {
                    pushFollow(FOLLOW_defpattern_in_typedef_clause3092);
                    defpattern221=defpattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_defpattern.add(defpattern221.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:39: ( NL )?
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==NL) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:39: NL
                            {
                            NL222=(Token)match(input,NL,FOLLOW_NL_in_typedef_clause3094); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL222);


                            }
                            break;

                    }

                    char_literal223=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_typedef_clause3097); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal223);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:47: ( NL )?
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( (LA107_0==NL) ) {
                        alt107=1;
                    }
                    switch (alt107) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:47: NL
                            {
                            NL224=(Token)match(input,NL,FOLLOW_NL_in_typedef_clause3099); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL224);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_typedef_clause3102);
                    expr225=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr225.getTree());


                    // AST REWRITE
                    // elements: expr, defpattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 522:56: -> ^( TYPEDEF_CLAUSE defpattern expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:59: ^( TYPEDEF_CLAUSE defpattern expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEDEF_CLAUSE, "TYPEDEF_CLAUSE"), root_1);

                        adaptor.addChild(root_1, stream_defpattern.nextTree());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:523:4: defpattern
                    {
                    pushFollow(FOLLOW_defpattern_in_typedef_clause3117);
                    defpattern226=defpattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_defpattern.add(defpattern226.getTree());


                    // AST REWRITE
                    // elements: defpattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 523:15: -> ^( TYPEDEF_CLAUSE defpattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:523:18: ^( TYPEDEF_CLAUSE defpattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEDEF_CLAUSE, "TYPEDEF_CLAUSE"), root_1);

                        adaptor.addChild(root_1, stream_defpattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typedef_clause"

    public static class st_yield_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_yield"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:525:1: st_yield : L_yield expr -> ^( YIELD expr ) ;
    public final babel17Parser.st_yield_return st_yield() throws RecognitionException {
        babel17Parser.st_yield_return retval = new babel17Parser.st_yield_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_yield227=null;
        babel17Parser.expr_return expr228 = null;


        CommonTree L_yield227_tree=null;
        RewriteRuleTokenStream stream_L_yield=new RewriteRuleTokenStream(adaptor,"token L_yield");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:525:9: ( L_yield expr -> ^( YIELD expr ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:525:11: L_yield expr
            {
            L_yield227=(Token)match(input,L_yield,FOLLOW_L_yield_in_st_yield3136); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_yield.add(L_yield227);

            pushFollow(FOLLOW_expr_in_st_yield3138);
            expr228=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr228.getTree());


            // AST REWRITE
            // elements: expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 525:24: -> ^( YIELD expr )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:525:27: ^( YIELD expr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YIELD, "YIELD"), root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_yield"

    public static class st_memoize_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_memoize"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:1: st_memoize : L_memoize memo_id ( ( NL )? COMMA ( NL )? memo_id )* -> ^( MEMOIZE ( memo_id )* ) ;
    public final babel17Parser.st_memoize_return st_memoize() throws RecognitionException {
        babel17Parser.st_memoize_return retval = new babel17Parser.st_memoize_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_memoize229=null;
        Token NL231=null;
        Token COMMA232=null;
        Token NL233=null;
        babel17Parser.memo_id_return memo_id230 = null;

        babel17Parser.memo_id_return memo_id234 = null;


        CommonTree L_memoize229_tree=null;
        CommonTree NL231_tree=null;
        CommonTree COMMA232_tree=null;
        CommonTree NL233_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_memoize=new RewriteRuleTokenStream(adaptor,"token L_memoize");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_memo_id=new RewriteRuleSubtreeStream(adaptor,"rule memo_id");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:528:2: ( L_memoize memo_id ( ( NL )? COMMA ( NL )? memo_id )* -> ^( MEMOIZE ( memo_id )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:528:4: L_memoize memo_id ( ( NL )? COMMA ( NL )? memo_id )*
            {
            L_memoize229=(Token)match(input,L_memoize,FOLLOW_L_memoize_in_st_memoize3159); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_memoize.add(L_memoize229);

            pushFollow(FOLLOW_memo_id_in_st_memoize3161);
            memo_id230=memo_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_memo_id.add(memo_id230.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:528:22: ( ( NL )? COMMA ( NL )? memo_id )*
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( (LA111_0==NL) ) {
                    int LA111_1 = input.LA(2);

                    if ( (LA111_1==COMMA) ) {
                        alt111=1;
                    }


                }
                else if ( (LA111_0==COMMA) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:528:23: ( NL )? COMMA ( NL )? memo_id
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:528:23: ( NL )?
            	    int alt109=2;
            	    int LA109_0 = input.LA(1);

            	    if ( (LA109_0==NL) ) {
            	        alt109=1;
            	    }
            	    switch (alt109) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:528:23: NL
            	            {
            	            NL231=(Token)match(input,NL,FOLLOW_NL_in_st_memoize3164); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL231);


            	            }
            	            break;

            	    }

            	    COMMA232=(Token)match(input,COMMA,FOLLOW_COMMA_in_st_memoize3167); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA232);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:528:33: ( NL )?
            	    int alt110=2;
            	    int LA110_0 = input.LA(1);

            	    if ( (LA110_0==NL) ) {
            	        alt110=1;
            	    }
            	    switch (alt110) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:528:33: NL
            	            {
            	            NL233=(Token)match(input,NL,FOLLOW_NL_in_st_memoize3169); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL233);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_memo_id_in_st_memoize3172);
            	    memo_id234=memo_id();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_memo_id.add(memo_id234.getTree());

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);



            // AST REWRITE
            // elements: memo_id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 529:5: -> ^( MEMOIZE ( memo_id )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:529:8: ^( MEMOIZE ( memo_id )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MEMOIZE, "MEMOIZE"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:529:18: ( memo_id )*
                while ( stream_memo_id.hasNext() ) {
                    adaptor.addChild(root_1, stream_memo_id.nextTree());

                }
                stream_memo_id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_memoize"

    public static class memo_id_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "memo_id"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:531:1: memo_id : ( Id -> ^( MEMOID_STRONG Id ) | '(' Id ')' -> ^( MEMOID_WEAK Id ) );
    public final babel17Parser.memo_id_return memo_id() throws RecognitionException {
        babel17Parser.memo_id_return retval = new babel17Parser.memo_id_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id235=null;
        Token char_literal236=null;
        Token Id237=null;
        Token char_literal238=null;

        CommonTree Id235_tree=null;
        CommonTree char_literal236_tree=null;
        CommonTree Id237_tree=null;
        CommonTree char_literal238_tree=null;
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:531:9: ( Id -> ^( MEMOID_STRONG Id ) | '(' Id ')' -> ^( MEMOID_WEAK Id ) )
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==Id) ) {
                alt112=1;
            }
            else if ( (LA112_0==ROUND_BRACKET_OPEN) ) {
                alt112=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 112, 0, input);

                throw nvae;
            }
            switch (alt112) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:531:11: Id
                    {
                    Id235=(Token)match(input,Id,FOLLOW_Id_in_memo_id3201); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id235);



                    // AST REWRITE
                    // elements: Id
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 531:14: -> ^( MEMOID_STRONG Id )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:531:17: ^( MEMOID_STRONG Id )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MEMOID_STRONG, "MEMOID_STRONG"), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:532:4: '(' Id ')'
                    {
                    char_literal236=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_memo_id3214); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal236);

                    Id237=(Token)match(input,Id,FOLLOW_Id_in_memo_id3216); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id237);

                    char_literal238=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_memo_id3218); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal238);



                    // AST REWRITE
                    // elements: Id
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 532:15: -> ^( MEMOID_WEAK Id )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:532:18: ^( MEMOID_WEAK Id )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MEMOID_WEAK, "MEMOID_WEAK"), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "memo_id"

    public static class st_private_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_private"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:534:1: st_private : L_private private_id ( ( NL )? COMMA ( NL )? private_id )* -> ^( PRIVATE ( private_id )* ) ;
    public final babel17Parser.st_private_return st_private() throws RecognitionException {
        babel17Parser.st_private_return retval = new babel17Parser.st_private_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_private239=null;
        Token NL241=null;
        Token COMMA242=null;
        Token NL243=null;
        babel17Parser.private_id_return private_id240 = null;

        babel17Parser.private_id_return private_id244 = null;


        CommonTree L_private239_tree=null;
        CommonTree NL241_tree=null;
        CommonTree COMMA242_tree=null;
        CommonTree NL243_tree=null;
        RewriteRuleTokenStream stream_L_private=new RewriteRuleTokenStream(adaptor,"token L_private");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_private_id=new RewriteRuleSubtreeStream(adaptor,"rule private_id");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:535:2: ( L_private private_id ( ( NL )? COMMA ( NL )? private_id )* -> ^( PRIVATE ( private_id )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:535:4: L_private private_id ( ( NL )? COMMA ( NL )? private_id )*
            {
            L_private239=(Token)match(input,L_private,FOLLOW_L_private_in_st_private3235); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_private.add(L_private239);

            pushFollow(FOLLOW_private_id_in_st_private3237);
            private_id240=private_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_private_id.add(private_id240.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:535:25: ( ( NL )? COMMA ( NL )? private_id )*
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==NL) ) {
                    int LA115_1 = input.LA(2);

                    if ( (LA115_1==COMMA) ) {
                        alt115=1;
                    }


                }
                else if ( (LA115_0==COMMA) ) {
                    alt115=1;
                }


                switch (alt115) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:535:26: ( NL )? COMMA ( NL )? private_id
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:535:26: ( NL )?
            	    int alt113=2;
            	    int LA113_0 = input.LA(1);

            	    if ( (LA113_0==NL) ) {
            	        alt113=1;
            	    }
            	    switch (alt113) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:535:26: NL
            	            {
            	            NL241=(Token)match(input,NL,FOLLOW_NL_in_st_private3240); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL241);


            	            }
            	            break;

            	    }

            	    COMMA242=(Token)match(input,COMMA,FOLLOW_COMMA_in_st_private3243); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA242);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:535:36: ( NL )?
            	    int alt114=2;
            	    int LA114_0 = input.LA(1);

            	    if ( (LA114_0==NL) ) {
            	        alt114=1;
            	    }
            	    switch (alt114) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:535:36: NL
            	            {
            	            NL243=(Token)match(input,NL,FOLLOW_NL_in_st_private3245); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL243);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_private_id_in_st_private3248);
            	    private_id244=private_id();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_private_id.add(private_id244.getTree());

            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);



            // AST REWRITE
            // elements: private_id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 536:5: -> ^( PRIVATE ( private_id )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:536:8: ^( PRIVATE ( private_id )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRIVATE, "PRIVATE"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:536:18: ( private_id )*
                while ( stream_private_id.hasNext() ) {
                    adaptor.addChild(root_1, stream_private_id.nextTree());

                }
                stream_private_id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_private"

    public static class private_id_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "private_id"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:538:1: private_id : Id -> ^( PRIVATEID Id ) ;
    public final babel17Parser.private_id_return private_id() throws RecognitionException {
        babel17Parser.private_id_return retval = new babel17Parser.private_id_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id245=null;

        CommonTree Id245_tree=null;
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:539:2: ( Id -> ^( PRIVATEID Id ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:539:4: Id
            {
            Id245=(Token)match(input,Id,FOLLOW_Id_in_private_id3274); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id245);



            // AST REWRITE
            // elements: Id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 539:7: -> ^( PRIVATEID Id )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:539:10: ^( PRIVATEID Id )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRIVATEID, "PRIVATEID"), root_1);

                adaptor.addChild(root_1, stream_Id.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "private_id"

    public static class testid_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "testid"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:541:1: testid : ( Id | L_unittest );
    public final babel17Parser.testid_return testid() throws RecognitionException {
        babel17Parser.testid_return retval = new babel17Parser.testid_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set246=null;

        CommonTree set246_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:541:8: ( Id | L_unittest )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set246=(Token)input.LT(1);
            if ( input.LA(1)==L_unittest||input.LA(1)==Id ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set246));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "testid"

    public static class moduleid_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moduleid"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:544:1: moduleid : Id ( ( NL )? PERIOD ( NL )? testid )* -> ^( MODULEID ( Id )? ( testid )* ) ;
    public final babel17Parser.moduleid_return moduleid() throws RecognitionException {
        babel17Parser.moduleid_return retval = new babel17Parser.moduleid_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id247=null;
        Token NL248=null;
        Token PERIOD249=null;
        Token NL250=null;
        babel17Parser.testid_return testid251 = null;


        CommonTree Id247_tree=null;
        CommonTree NL248_tree=null;
        CommonTree PERIOD249_tree=null;
        CommonTree NL250_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_testid=new RewriteRuleSubtreeStream(adaptor,"rule testid");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:545:2: ( Id ( ( NL )? PERIOD ( NL )? testid )* -> ^( MODULEID ( Id )? ( testid )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:545:4: Id ( ( NL )? PERIOD ( NL )? testid )*
            {
            Id247=(Token)match(input,Id,FOLLOW_Id_in_moduleid3307); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id247);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:545:7: ( ( NL )? PERIOD ( NL )? testid )*
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==NL) ) {
                    int LA118_1 = input.LA(2);

                    if ( (LA118_1==PERIOD) ) {
                        alt118=1;
                    }


                }
                else if ( (LA118_0==PERIOD) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:545:8: ( NL )? PERIOD ( NL )? testid
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:545:8: ( NL )?
            	    int alt116=2;
            	    int LA116_0 = input.LA(1);

            	    if ( (LA116_0==NL) ) {
            	        alt116=1;
            	    }
            	    switch (alt116) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:545:8: NL
            	            {
            	            NL248=(Token)match(input,NL,FOLLOW_NL_in_moduleid3310); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL248);


            	            }
            	            break;

            	    }

            	    PERIOD249=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_moduleid3313); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD249);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:545:19: ( NL )?
            	    int alt117=2;
            	    int LA117_0 = input.LA(1);

            	    if ( (LA117_0==NL) ) {
            	        alt117=1;
            	    }
            	    switch (alt117) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:545:19: NL
            	            {
            	            NL250=(Token)match(input,NL,FOLLOW_NL_in_moduleid3315); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL250);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_testid_in_moduleid3318);
            	    testid251=testid();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_testid.add(testid251.getTree());

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);



            // AST REWRITE
            // elements: testid, Id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 545:32: -> ^( MODULEID ( Id )? ( testid )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:545:35: ^( MODULEID ( Id )? ( testid )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MODULEID, "MODULEID"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:545:46: ( Id )?
                if ( stream_Id.hasNext() ) {
                    adaptor.addChild(root_1, stream_Id.nextNode());

                }
                stream_Id.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:545:50: ( testid )*
                while ( stream_testid.hasNext() ) {
                    adaptor.addChild(root_1, stream_testid.nextTree());

                }
                stream_testid.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moduleid"

    public static class st_module_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_module"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:547:1: st_module : L_module ( NL )? moduleid block ( L_unittest block )? L_end -> ^( L_module moduleid block ( L_unittest )? ( block )? ) ;
    public final babel17Parser.st_module_return st_module() throws RecognitionException {
        babel17Parser.st_module_return retval = new babel17Parser.st_module_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_module252=null;
        Token NL253=null;
        Token L_unittest256=null;
        Token L_end258=null;
        babel17Parser.moduleid_return moduleid254 = null;

        babel17Parser.block_return block255 = null;

        babel17Parser.block_return block257 = null;


        CommonTree L_module252_tree=null;
        CommonTree NL253_tree=null;
        CommonTree L_unittest256_tree=null;
        CommonTree L_end258_tree=null;
        RewriteRuleTokenStream stream_L_module=new RewriteRuleTokenStream(adaptor,"token L_module");
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_unittest=new RewriteRuleTokenStream(adaptor,"token L_unittest");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_moduleid=new RewriteRuleSubtreeStream(adaptor,"rule moduleid");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:548:2: ( L_module ( NL )? moduleid block ( L_unittest block )? L_end -> ^( L_module moduleid block ( L_unittest )? ( block )? ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:548:4: L_module ( NL )? moduleid block ( L_unittest block )? L_end
            {
            L_module252=(Token)match(input,L_module,FOLLOW_L_module_in_st_module3341); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_module.add(L_module252);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:548:13: ( NL )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==NL) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:548:13: NL
                    {
                    NL253=(Token)match(input,NL,FOLLOW_NL_in_st_module3343); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL253);


                    }
                    break;

            }

            pushFollow(FOLLOW_moduleid_in_st_module3346);
            moduleid254=moduleid();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moduleid.add(moduleid254.getTree());
            pushFollow(FOLLOW_block_in_st_module3348);
            block255=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block255.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:548:32: ( L_unittest block )?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==L_unittest) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:548:33: L_unittest block
                    {
                    L_unittest256=(Token)match(input,L_unittest,FOLLOW_L_unittest_in_st_module3351); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_unittest.add(L_unittest256);

                    pushFollow(FOLLOW_block_in_st_module3353);
                    block257=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block257.getTree());

                    }
                    break;

            }

            L_end258=(Token)match(input,L_end,FOLLOW_L_end_in_st_module3357); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end258);



            // AST REWRITE
            // elements: block, L_unittest, block, moduleid, L_module
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 548:58: -> ^( L_module moduleid block ( L_unittest )? ( block )? )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:548:61: ^( L_module moduleid block ( L_unittest )? ( block )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_L_module.nextNode(), root_1);

                adaptor.addChild(root_1, stream_moduleid.nextTree());
                adaptor.addChild(root_1, stream_block.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:548:87: ( L_unittest )?
                if ( stream_L_unittest.hasNext() ) {
                    adaptor.addChild(root_1, stream_L_unittest.nextNode());

                }
                stream_L_unittest.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:548:99: ( block )?
                if ( stream_block.hasNext() ) {
                    adaptor.addChild(root_1, stream_block.nextTree());

                }
                stream_block.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_module"

    public static class importprefix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importprefix"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:550:1: importprefix : ( L_root | testid ) ( ( NL )? PERIOD ( NL )? testid )* -> ^( IMPORT_PREFIX ( L_root )? ( testid )* ) ;
    public final babel17Parser.importprefix_return importprefix() throws RecognitionException {
        babel17Parser.importprefix_return retval = new babel17Parser.importprefix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_root259=null;
        Token NL261=null;
        Token PERIOD262=null;
        Token NL263=null;
        babel17Parser.testid_return testid260 = null;

        babel17Parser.testid_return testid264 = null;


        CommonTree L_root259_tree=null;
        CommonTree NL261_tree=null;
        CommonTree PERIOD262_tree=null;
        CommonTree NL263_tree=null;
        RewriteRuleTokenStream stream_L_root=new RewriteRuleTokenStream(adaptor,"token L_root");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_testid=new RewriteRuleSubtreeStream(adaptor,"rule testid");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:551:2: ( ( L_root | testid ) ( ( NL )? PERIOD ( NL )? testid )* -> ^( IMPORT_PREFIX ( L_root )? ( testid )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:551:4: ( L_root | testid ) ( ( NL )? PERIOD ( NL )? testid )*
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:551:4: ( L_root | testid )
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==L_root) ) {
                alt121=1;
            }
            else if ( (LA121_0==L_unittest||LA121_0==Id) ) {
                alt121=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;
            }
            switch (alt121) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:551:5: L_root
                    {
                    L_root259=(Token)match(input,L_root,FOLLOW_L_root_in_importprefix3384); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_root.add(L_root259);


                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:551:14: testid
                    {
                    pushFollow(FOLLOW_testid_in_importprefix3388);
                    testid260=testid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_testid.add(testid260.getTree());

                    }
                    break;

            }

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:551:22: ( ( NL )? PERIOD ( NL )? testid )*
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( (LA124_0==NL) ) {
                    int LA124_1 = input.LA(2);

                    if ( (LA124_1==PERIOD) ) {
                        int LA124_2 = input.LA(3);

                        if ( (LA124_2==NL) ) {
                            int LA124_4 = input.LA(4);

                            if ( (LA124_4==L_unittest||LA124_4==Id) ) {
                                alt124=1;
                            }


                        }
                        else if ( (LA124_2==L_unittest||LA124_2==Id) ) {
                            alt124=1;
                        }


                    }


                }
                else if ( (LA124_0==PERIOD) ) {
                    int LA124_2 = input.LA(2);

                    if ( (LA124_2==NL) ) {
                        int LA124_4 = input.LA(3);

                        if ( (LA124_4==L_unittest||LA124_4==Id) ) {
                            alt124=1;
                        }


                    }
                    else if ( (LA124_2==L_unittest||LA124_2==Id) ) {
                        alt124=1;
                    }


                }


                switch (alt124) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:551:23: ( NL )? PERIOD ( NL )? testid
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:551:23: ( NL )?
            	    int alt122=2;
            	    int LA122_0 = input.LA(1);

            	    if ( (LA122_0==NL) ) {
            	        alt122=1;
            	    }
            	    switch (alt122) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:551:23: NL
            	            {
            	            NL261=(Token)match(input,NL,FOLLOW_NL_in_importprefix3392); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL261);


            	            }
            	            break;

            	    }

            	    PERIOD262=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_importprefix3395); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD262);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:551:34: ( NL )?
            	    int alt123=2;
            	    int LA123_0 = input.LA(1);

            	    if ( (LA123_0==NL) ) {
            	        alt123=1;
            	    }
            	    switch (alt123) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:551:34: NL
            	            {
            	            NL263=(Token)match(input,NL,FOLLOW_NL_in_importprefix3397); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL263);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_testid_in_importprefix3400);
            	    testid264=testid();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_testid.add(testid264.getTree());

            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);



            // AST REWRITE
            // elements: L_root, testid
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 551:47: -> ^( IMPORT_PREFIX ( L_root )? ( testid )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:551:50: ^( IMPORT_PREFIX ( L_root )? ( testid )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_PREFIX, "IMPORT_PREFIX"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:551:66: ( L_root )?
                if ( stream_L_root.hasNext() ) {
                    adaptor.addChild(root_1, stream_L_root.nextNode());

                }
                stream_L_root.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:551:74: ( testid )*
                while ( stream_testid.hasNext() ) {
                    adaptor.addChild(root_1, stream_testid.nextTree());

                }
                stream_testid.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "importprefix"

    public static class importall_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importall"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:1: importall : UNDERSCORE -> ^( IMPORT_ALL ) ;
    public final babel17Parser.importall_return importall() throws RecognitionException {
        babel17Parser.importall_return retval = new babel17Parser.importall_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token UNDERSCORE265=null;

        CommonTree UNDERSCORE265_tree=null;
        RewriteRuleTokenStream stream_UNDERSCORE=new RewriteRuleTokenStream(adaptor,"token UNDERSCORE");

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:554:2: ( UNDERSCORE -> ^( IMPORT_ALL ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:554:4: UNDERSCORE
            {
            UNDERSCORE265=(Token)match(input,UNDERSCORE,FOLLOW_UNDERSCORE_in_importall3425); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UNDERSCORE.add(UNDERSCORE265);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 554:15: -> ^( IMPORT_ALL )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:554:18: ^( IMPORT_ALL )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_ALL, "IMPORT_ALL"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "importall"

    public static class importsetclause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importsetclause"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:556:1: importsetclause : ( testid ( ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )? )? -> ^( IMPORT_PLUS testid ( Id )? ) | '-' ( NL )? testid -> ^( IMPORT_MINUS testid ) | importall );
    public final babel17Parser.importsetclause_return importsetclause() throws RecognitionException {
        babel17Parser.importsetclause_return retval = new babel17Parser.importsetclause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL267=null;
        Token NL269=null;
        Token Id270=null;
        Token char_literal271=null;
        Token NL272=null;
        babel17Parser.testid_return testid266 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW268 = null;

        babel17Parser.testid_return testid273 = null;

        babel17Parser.importall_return importall274 = null;


        CommonTree NL267_tree=null;
        CommonTree NL269_tree=null;
        CommonTree Id270_tree=null;
        CommonTree char_literal271_tree=null;
        CommonTree NL272_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_testid=new RewriteRuleSubtreeStream(adaptor,"rule testid");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:2: ( testid ( ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )? )? -> ^( IMPORT_PLUS testid ( Id )? ) | '-' ( NL )? testid -> ^( IMPORT_MINUS testid ) | importall )
            int alt130=3;
            switch ( input.LA(1) ) {
            case L_unittest:
            case Id:
                {
                alt130=1;
                }
                break;
            case MINUS:
                {
                alt130=2;
                }
                break;
            case UNDERSCORE:
                {
                alt130=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);

                throw nvae;
            }

            switch (alt130) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:4: testid ( ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )? )?
                    {
                    pushFollow(FOLLOW_testid_in_importsetclause3441);
                    testid266=testid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_testid.add(testid266.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:11: ( ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )? )?
                    int alt128=2;
                    int LA128_0 = input.LA(1);

                    if ( (LA128_0==NL) ) {
                        int LA128_1 = input.LA(2);

                        if ( ((LA128_1>=A_DOUBLE_ARROW && LA128_1<=U_DOUBLE_ARROW)) ) {
                            alt128=1;
                        }
                    }
                    else if ( ((LA128_0>=A_DOUBLE_ARROW && LA128_0<=U_DOUBLE_ARROW)) ) {
                        alt128=1;
                    }
                    switch (alt128) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:12: ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )?
                            {
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:12: ( NL )?
                            int alt125=2;
                            int LA125_0 = input.LA(1);

                            if ( (LA125_0==NL) ) {
                                alt125=1;
                            }
                            switch (alt125) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:12: NL
                                    {
                                    NL267=(Token)match(input,NL,FOLLOW_NL_in_importsetclause3444); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL267);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_importsetclause3447);
                            token_DOUBLE_ARROW268=token_DOUBLE_ARROW();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW268.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:35: ( ( NL )? Id )?
                            int alt127=2;
                            int LA127_0 = input.LA(1);

                            if ( (LA127_0==NL) ) {
                                int LA127_1 = input.LA(2);

                                if ( (LA127_1==Id) ) {
                                    alt127=1;
                                }
                            }
                            else if ( (LA127_0==Id) ) {
                                alt127=1;
                            }
                            switch (alt127) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:36: ( NL )? Id
                                    {
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:36: ( NL )?
                                    int alt126=2;
                                    int LA126_0 = input.LA(1);

                                    if ( (LA126_0==NL) ) {
                                        alt126=1;
                                    }
                                    switch (alt126) {
                                        case 1 :
                                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:36: NL
                                            {
                                            NL269=(Token)match(input,NL,FOLLOW_NL_in_importsetclause3450); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_NL.add(NL269);


                                            }
                                            break;

                                    }

                                    Id270=(Token)match(input,Id,FOLLOW_Id_in_importsetclause3453); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_Id.add(Id270);


                                    }
                                    break;

                            }


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: Id, testid
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 557:47: -> ^( IMPORT_PLUS testid ( Id )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:50: ^( IMPORT_PLUS testid ( Id )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_PLUS, "IMPORT_PLUS"), root_1);

                        adaptor.addChild(root_1, stream_testid.nextTree());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:71: ( Id )?
                        if ( stream_Id.hasNext() ) {
                            adaptor.addChild(root_1, stream_Id.nextNode());

                        }
                        stream_Id.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:4: '-' ( NL )? testid
                    {
                    char_literal271=(Token)match(input,MINUS,FOLLOW_MINUS_in_importsetclause3473); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(char_literal271);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:8: ( NL )?
                    int alt129=2;
                    int LA129_0 = input.LA(1);

                    if ( (LA129_0==NL) ) {
                        alt129=1;
                    }
                    switch (alt129) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:8: NL
                            {
                            NL272=(Token)match(input,NL,FOLLOW_NL_in_importsetclause3475); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL272);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_testid_in_importsetclause3478);
                    testid273=testid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_testid.add(testid273.getTree());


                    // AST REWRITE
                    // elements: testid
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 558:19: -> ^( IMPORT_MINUS testid )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:22: ^( IMPORT_MINUS testid )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_MINUS, "IMPORT_MINUS"), root_1);

                        adaptor.addChild(root_1, stream_testid.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:559:4: importall
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_importall_in_importsetclause3491);
                    importall274=importall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, importall274.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "importsetclause"

    public static class importset_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importset"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:1: importset : '{' ( NL )? importsetclause ( ( NL )? ',' ( NL )? importsetclause )* ( NL )? '}' -> ^( IMPORT_SET ( importsetclause )* ) ;
    public final babel17Parser.importset_return importset() throws RecognitionException {
        babel17Parser.importset_return retval = new babel17Parser.importset_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal275=null;
        Token NL276=null;
        Token NL278=null;
        Token char_literal279=null;
        Token NL280=null;
        Token NL282=null;
        Token char_literal283=null;
        babel17Parser.importsetclause_return importsetclause277 = null;

        babel17Parser.importsetclause_return importsetclause281 = null;


        CommonTree char_literal275_tree=null;
        CommonTree NL276_tree=null;
        CommonTree NL278_tree=null;
        CommonTree char_literal279_tree=null;
        CommonTree NL280_tree=null;
        CommonTree NL282_tree=null;
        CommonTree char_literal283_tree=null;
        RewriteRuleTokenStream stream_CURLY_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_OPEN");
        RewriteRuleTokenStream stream_CURLY_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_importsetclause=new RewriteRuleSubtreeStream(adaptor,"rule importsetclause");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:562:2: ( '{' ( NL )? importsetclause ( ( NL )? ',' ( NL )? importsetclause )* ( NL )? '}' -> ^( IMPORT_SET ( importsetclause )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:562:4: '{' ( NL )? importsetclause ( ( NL )? ',' ( NL )? importsetclause )* ( NL )? '}'
            {
            char_literal275=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_importset3501); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal275);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:562:8: ( NL )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==NL) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:562:8: NL
                    {
                    NL276=(Token)match(input,NL,FOLLOW_NL_in_importset3503); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL276);


                    }
                    break;

            }

            pushFollow(FOLLOW_importsetclause_in_importset3506);
            importsetclause277=importsetclause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importsetclause.add(importsetclause277.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:562:28: ( ( NL )? ',' ( NL )? importsetclause )*
            loop134:
            do {
                int alt134=2;
                int LA134_0 = input.LA(1);

                if ( (LA134_0==NL) ) {
                    int LA134_1 = input.LA(2);

                    if ( (LA134_1==COMMA) ) {
                        alt134=1;
                    }


                }
                else if ( (LA134_0==COMMA) ) {
                    alt134=1;
                }


                switch (alt134) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:562:29: ( NL )? ',' ( NL )? importsetclause
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:562:29: ( NL )?
            	    int alt132=2;
            	    int LA132_0 = input.LA(1);

            	    if ( (LA132_0==NL) ) {
            	        alt132=1;
            	    }
            	    switch (alt132) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:562:29: NL
            	            {
            	            NL278=(Token)match(input,NL,FOLLOW_NL_in_importset3509); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL278);


            	            }
            	            break;

            	    }

            	    char_literal279=(Token)match(input,COMMA,FOLLOW_COMMA_in_importset3512); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal279);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:562:37: ( NL )?
            	    int alt133=2;
            	    int LA133_0 = input.LA(1);

            	    if ( (LA133_0==NL) ) {
            	        alt133=1;
            	    }
            	    switch (alt133) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:562:37: NL
            	            {
            	            NL280=(Token)match(input,NL,FOLLOW_NL_in_importset3514); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL280);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_importsetclause_in_importset3517);
            	    importsetclause281=importsetclause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_importsetclause.add(importsetclause281.getTree());

            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:562:59: ( NL )?
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==NL) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:562:59: NL
                    {
                    NL282=(Token)match(input,NL,FOLLOW_NL_in_importset3521); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL282);


                    }
                    break;

            }

            char_literal283=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_importset3524); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal283);



            // AST REWRITE
            // elements: importsetclause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 562:67: -> ^( IMPORT_SET ( importsetclause )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:562:70: ^( IMPORT_SET ( importsetclause )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_SET, "IMPORT_SET"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:562:83: ( importsetclause )*
                while ( stream_importsetclause.hasNext() ) {
                    adaptor.addChild(root_1, stream_importsetclause.nextTree());

                }
                stream_importsetclause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "importset"

    public static class st_import_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_import"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:1: st_import : L_import ( NL )? importprefix ( ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id ) )? -> ^( L_import importprefix ( importall )? ( importset )? ( Id )? ) ;
    public final babel17Parser.st_import_return st_import() throws RecognitionException {
        babel17Parser.st_import_return retval = new babel17Parser.st_import_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_import284=null;
        Token NL285=null;
        Token NL287=null;
        Token PERIOD288=null;
        Token NL289=null;
        Token PERIOD291=null;
        Token NL292=null;
        Token NL295=null;
        Token Id296=null;
        babel17Parser.importprefix_return importprefix286 = null;

        babel17Parser.importall_return importall290 = null;

        babel17Parser.importset_return importset293 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW294 = null;


        CommonTree L_import284_tree=null;
        CommonTree NL285_tree=null;
        CommonTree NL287_tree=null;
        CommonTree PERIOD288_tree=null;
        CommonTree NL289_tree=null;
        CommonTree PERIOD291_tree=null;
        CommonTree NL292_tree=null;
        CommonTree NL295_tree=null;
        CommonTree Id296_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_L_import=new RewriteRuleTokenStream(adaptor,"token L_import");
        RewriteRuleSubtreeStream stream_importprefix=new RewriteRuleSubtreeStream(adaptor,"rule importprefix");
        RewriteRuleSubtreeStream stream_importset=new RewriteRuleSubtreeStream(adaptor,"rule importset");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_importall=new RewriteRuleSubtreeStream(adaptor,"rule importall");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:2: ( L_import ( NL )? importprefix ( ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id ) )? -> ^( L_import importprefix ( importall )? ( importset )? ( Id )? ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:4: L_import ( NL )? importprefix ( ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id ) )?
            {
            L_import284=(Token)match(input,L_import,FOLLOW_L_import_in_st_import3542); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_import.add(L_import284);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:13: ( NL )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==NL) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:13: NL
                    {
                    NL285=(Token)match(input,NL,FOLLOW_NL_in_st_import3544); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL285);


                    }
                    break;

            }

            pushFollow(FOLLOW_importprefix_in_st_import3547);
            importprefix286=importprefix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importprefix.add(importprefix286.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:30: ( ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id ) )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==NL) ) {
                int LA142_1 = input.LA(2);

                if ( ((LA142_1>=A_DOUBLE_ARROW && LA142_1<=U_DOUBLE_ARROW)||LA142_1==PERIOD) ) {
                    alt142=1;
                }
            }
            else if ( ((LA142_0>=A_DOUBLE_ARROW && LA142_0<=U_DOUBLE_ARROW)||LA142_0==PERIOD) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:31: ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id )
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:31: ( NL )?
                    int alt137=2;
                    int LA137_0 = input.LA(1);

                    if ( (LA137_0==NL) ) {
                        alt137=1;
                    }
                    switch (alt137) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:31: NL
                            {
                            NL287=(Token)match(input,NL,FOLLOW_NL_in_st_import3550); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL287);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:35: ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id )
                    int alt141=3;
                    int LA141_0 = input.LA(1);

                    if ( (LA141_0==PERIOD) ) {
                        switch ( input.LA(2) ) {
                        case NL:
                            {
                            int LA141_3 = input.LA(3);

                            if ( (LA141_3==UNDERSCORE) ) {
                                alt141=1;
                            }
                            else if ( (LA141_3==CURLY_BRACKET_OPEN) ) {
                                alt141=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 141, 3, input);

                                throw nvae;
                            }
                            }
                            break;
                        case UNDERSCORE:
                            {
                            alt141=1;
                            }
                            break;
                        case CURLY_BRACKET_OPEN:
                            {
                            alt141=2;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 141, 1, input);

                            throw nvae;
                        }

                    }
                    else if ( ((LA141_0>=A_DOUBLE_ARROW && LA141_0<=U_DOUBLE_ARROW)) ) {
                        alt141=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 141, 0, input);

                        throw nvae;
                    }
                    switch (alt141) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:36: PERIOD ( NL )? importall
                            {
                            PERIOD288=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_st_import3554); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD288);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:43: ( NL )?
                            int alt138=2;
                            int LA138_0 = input.LA(1);

                            if ( (LA138_0==NL) ) {
                                alt138=1;
                            }
                            switch (alt138) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:43: NL
                                    {
                                    NL289=(Token)match(input,NL,FOLLOW_NL_in_st_import3556); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL289);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_importall_in_st_import3559);
                            importall290=importall();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_importall.add(importall290.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:59: PERIOD ( NL )? importset
                            {
                            PERIOD291=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_st_import3563); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD291);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:66: ( NL )?
                            int alt139=2;
                            int LA139_0 = input.LA(1);

                            if ( (LA139_0==NL) ) {
                                alt139=1;
                            }
                            switch (alt139) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:66: NL
                                    {
                                    NL292=(Token)match(input,NL,FOLLOW_NL_in_st_import3565); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL292);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_importset_in_st_import3568);
                            importset293=importset();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_importset.add(importset293.getTree());

                            }
                            break;
                        case 3 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:82: token_DOUBLE_ARROW ( NL )? Id
                            {
                            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_st_import3572);
                            token_DOUBLE_ARROW294=token_DOUBLE_ARROW();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW294.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:101: ( NL )?
                            int alt140=2;
                            int LA140_0 = input.LA(1);

                            if ( (LA140_0==NL) ) {
                                alt140=1;
                            }
                            switch (alt140) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:101: NL
                                    {
                                    NL295=(Token)match(input,NL,FOLLOW_NL_in_st_import3574); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL295);


                                    }
                                    break;

                            }

                            Id296=(Token)match(input,Id,FOLLOW_Id_in_st_import3577); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Id.add(Id296);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: L_import, Id, importprefix, importset, importall
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 565:111: -> ^( L_import importprefix ( importall )? ( importset )? ( Id )? )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:114: ^( L_import importprefix ( importall )? ( importset )? ( Id )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_L_import.nextNode(), root_1);

                adaptor.addChild(root_1, stream_importprefix.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:138: ( importall )?
                if ( stream_importall.hasNext() ) {
                    adaptor.addChild(root_1, stream_importall.nextTree());

                }
                stream_importall.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:149: ( importset )?
                if ( stream_importset.hasNext() ) {
                    adaptor.addChild(root_1, stream_importset.nextTree());

                }
                stream_importset.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:160: ( Id )?
                if ( stream_Id.hasNext() ) {
                    adaptor.addChild(root_1, stream_Id.nextNode());

                }
                stream_Id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_import"

    public static class expr_or_assign_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_or_assign"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:567:1: expr_or_assign : ( ( ( pattern | objelem_assign ) ( NL )? '=' )=> ( pattern | objelem_assign ) ( NL )? '=' ( NL )? expr -> ^( ASSIGN ( pattern )* ( objelem_assign )* expr ) | expr );
    public final babel17Parser.expr_or_assign_return expr_or_assign() throws RecognitionException {
        babel17Parser.expr_or_assign_return retval = new babel17Parser.expr_or_assign_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL299=null;
        Token char_literal300=null;
        Token NL301=null;
        babel17Parser.pattern_return pattern297 = null;

        babel17Parser.objelem_assign_return objelem_assign298 = null;

        babel17Parser.expr_return expr302 = null;

        babel17Parser.expr_return expr303 = null;


        CommonTree NL299_tree=null;
        CommonTree char_literal300_tree=null;
        CommonTree NL301_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_objelem_assign=new RewriteRuleSubtreeStream(adaptor,"rule objelem_assign");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:568:2: ( ( ( pattern | objelem_assign ) ( NL )? '=' )=> ( pattern | objelem_assign ) ( NL )? '=' ( NL )? expr -> ^( ASSIGN ( pattern )* ( objelem_assign )* expr ) | expr )
            int alt146=2;
            alt146 = dfa146.predict(input);
            switch (alt146) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:568:4: ( ( pattern | objelem_assign ) ( NL )? '=' )=> ( pattern | objelem_assign ) ( NL )? '=' ( NL )? expr
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:568:44: ( pattern | objelem_assign )
                    int alt143=2;
                    int LA143_0 = input.LA(1);

                    if ( (LA143_0==L_exception||(LA143_0>=L_true && LA143_0<=L_false)||LA143_0==L_nil||LA143_0==MINUS||(LA143_0>=A_ELLIPSIS && LA143_0<=U_ELLIPSIS)||LA143_0==Constr||LA143_0==Num||(LA143_0>=String && LA143_0<=ROUND_BRACKET_OPEN)||LA143_0==SQUARE_BRACKET_OPEN||LA143_0==CURLY_BRACKET_OPEN||LA143_0==UNDERSCORE) ) {
                        alt143=1;
                    }
                    else if ( (LA143_0==Id) ) {
                        int LA143_2 = input.LA(2);

                        if ( (LA143_2==PERIOD) ) {
                            alt143=2;
                        }
                        else if ( (LA143_2==ASSIGN||(LA143_2>=A_DOUBLE_COLON && LA143_2<=U_DOUBLE_COLON)||LA143_2==NL) ) {
                            alt143=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 143, 2, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 143, 0, input);

                        throw nvae;
                    }
                    switch (alt143) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:568:45: pattern
                            {
                            pushFollow(FOLLOW_pattern_in_expr_or_assign3625);
                            pattern297=pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pattern.add(pattern297.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:568:55: objelem_assign
                            {
                            pushFollow(FOLLOW_objelem_assign_in_expr_or_assign3629);
                            objelem_assign298=objelem_assign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_objelem_assign.add(objelem_assign298.getTree());

                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:568:71: ( NL )?
                    int alt144=2;
                    int LA144_0 = input.LA(1);

                    if ( (LA144_0==NL) ) {
                        alt144=1;
                    }
                    switch (alt144) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:568:71: NL
                            {
                            NL299=(Token)match(input,NL,FOLLOW_NL_in_expr_or_assign3632); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL299);


                            }
                            break;

                    }

                    char_literal300=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_expr_or_assign3635); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal300);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:568:79: ( NL )?
                    int alt145=2;
                    int LA145_0 = input.LA(1);

                    if ( (LA145_0==NL) ) {
                        alt145=1;
                    }
                    switch (alt145) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:568:79: NL
                            {
                            NL301=(Token)match(input,NL,FOLLOW_NL_in_expr_or_assign3637); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL301);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_expr_or_assign3640);
                    expr302=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr302.getTree());


                    // AST REWRITE
                    // elements: objelem_assign, expr, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 568:88: -> ^( ASSIGN ( pattern )* ( objelem_assign )* expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:568:91: ^( ASSIGN ( pattern )* ( objelem_assign )* expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:568:100: ( pattern )*
                        while ( stream_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_pattern.nextTree());

                        }
                        stream_pattern.reset();
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:568:109: ( objelem_assign )*
                        while ( stream_objelem_assign.hasNext() ) {
                            adaptor.addChild(root_1, stream_objelem_assign.nextTree());

                        }
                        stream_objelem_assign.reset();
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:569:4: expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expr_in_expr_or_assign3659);
                    expr303=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr303.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expr_or_assign"

    public static class expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:571:1: expr : ( lop_expr | obj_expr );
    public final babel17Parser.expr_return expr() throws RecognitionException {
        babel17Parser.expr_return retval = new babel17Parser.expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.lop_expr_return lop_expr304 = null;

        babel17Parser.obj_expr_return obj_expr305 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:572:2: ( lop_expr | obj_expr )
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==L_begin||(LA147_0>=L_with && LA147_0<=L_if)||(LA147_0>=L_while && LA147_0<=L_for)||LA147_0==L_match||LA147_0==L_exception||LA147_0==L_try||(LA147_0>=L_concurrent && LA147_0<=L_lazy)||(LA147_0>=L_true && LA147_0<=L_nil)||LA147_0==L_typeof||LA147_0==L_not||(LA147_0>=L_root && LA147_0<=L_native)||LA147_0==MINUS||(LA147_0>=A_ELLIPSIS && LA147_0<=U_ELLIPSIS)||LA147_0==L_force||(LA147_0>=Constr && LA147_0<=Id)||(LA147_0>=Float && LA147_0<=Num)||(LA147_0>=String && LA147_0<=ROUND_BRACKET_OPEN)||LA147_0==SQUARE_BRACKET_OPEN||LA147_0==CURLY_BRACKET_OPEN||LA147_0==UNDERSCORE) ) {
                alt147=1;
            }
            else if ( (LA147_0==L_obj) ) {
                alt147=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;
            }
            switch (alt147) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:572:4: lop_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lop_expr_in_expr3670);
                    lop_expr304=lop_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lop_expr304.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:4: obj_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_obj_expr_in_expr3675);
                    obj_expr305=obj_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, obj_expr305.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expr"

    public static class control_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "control_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:575:1: control_expr : ( if_expr | while_do_expr | match_expr | for_expr | try_expr | begin_end );
    public final babel17Parser.control_expr_return control_expr() throws RecognitionException {
        babel17Parser.control_expr_return retval = new babel17Parser.control_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.if_expr_return if_expr306 = null;

        babel17Parser.while_do_expr_return while_do_expr307 = null;

        babel17Parser.match_expr_return match_expr308 = null;

        babel17Parser.for_expr_return for_expr309 = null;

        babel17Parser.try_expr_return try_expr310 = null;

        babel17Parser.begin_end_return begin_end311 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:576:2: ( if_expr | while_do_expr | match_expr | for_expr | try_expr | begin_end )
            int alt148=6;
            switch ( input.LA(1) ) {
            case L_if:
                {
                alt148=1;
                }
                break;
            case L_while:
                {
                alt148=2;
                }
                break;
            case L_match:
                {
                alt148=3;
                }
                break;
            case L_for:
                {
                alt148=4;
                }
                break;
            case L_try:
                {
                alt148=5;
                }
                break;
            case L_begin:
                {
                alt148=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);

                throw nvae;
            }

            switch (alt148) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:576:4: if_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_if_expr_in_control_expr3685);
                    if_expr306=if_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_expr306.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:4: while_do_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_while_do_expr_in_control_expr3690);
                    while_do_expr307=while_do_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_do_expr307.getTree());

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:578:4: match_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_match_expr_in_control_expr3695);
                    match_expr308=match_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, match_expr308.getTree());

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:579:4: for_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_for_expr_in_control_expr3700);
                    for_expr309=for_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_expr309.getTree());

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:580:5: try_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_try_expr_in_control_expr3706);
                    try_expr310=try_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, try_expr310.getTree());

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:581:4: begin_end
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_begin_end_in_control_expr3711);
                    begin_end311=begin_end();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, begin_end311.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "control_expr"

    public static class with_control_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "with_control_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:583:1: with_control_expr : ( control_expr | L_with ( NL )? protected_expr ( NL )? L_do block L_end -> ^( WITH protected_expr ^( BEGIN block ) ) );
    public final babel17Parser.with_control_expr_return with_control_expr() throws RecognitionException {
        babel17Parser.with_control_expr_return retval = new babel17Parser.with_control_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_with313=null;
        Token NL314=null;
        Token NL316=null;
        Token L_do317=null;
        Token L_end319=null;
        babel17Parser.control_expr_return control_expr312 = null;

        babel17Parser.protected_expr_return protected_expr315 = null;

        babel17Parser.block_return block318 = null;


        CommonTree L_with313_tree=null;
        CommonTree NL314_tree=null;
        CommonTree NL316_tree=null;
        CommonTree L_do317_tree=null;
        CommonTree L_end319_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_do=new RewriteRuleTokenStream(adaptor,"token L_do");
        RewriteRuleTokenStream stream_L_with=new RewriteRuleTokenStream(adaptor,"token L_with");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:584:2: ( control_expr | L_with ( NL )? protected_expr ( NL )? L_do block L_end -> ^( WITH protected_expr ^( BEGIN block ) ) )
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==L_begin||LA151_0==L_if||(LA151_0>=L_while && LA151_0<=L_for)||LA151_0==L_match||LA151_0==L_try) ) {
                alt151=1;
            }
            else if ( (LA151_0==L_with) ) {
                alt151=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);

                throw nvae;
            }
            switch (alt151) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:584:4: control_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_control_expr_in_with_control_expr3721);
                    control_expr312=control_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, control_expr312.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:585:4: L_with ( NL )? protected_expr ( NL )? L_do block L_end
                    {
                    L_with313=(Token)match(input,L_with,FOLLOW_L_with_in_with_control_expr3726); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_with.add(L_with313);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:585:11: ( NL )?
                    int alt149=2;
                    int LA149_0 = input.LA(1);

                    if ( (LA149_0==NL) ) {
                        alt149=1;
                    }
                    switch (alt149) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:585:11: NL
                            {
                            NL314=(Token)match(input,NL,FOLLOW_NL_in_with_control_expr3728); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL314);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_in_with_control_expr3731);
                    protected_expr315=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr315.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:585:30: ( NL )?
                    int alt150=2;
                    int LA150_0 = input.LA(1);

                    if ( (LA150_0==NL) ) {
                        alt150=1;
                    }
                    switch (alt150) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:585:30: NL
                            {
                            NL316=(Token)match(input,NL,FOLLOW_NL_in_with_control_expr3733); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL316);


                            }
                            break;

                    }

                    L_do317=(Token)match(input,L_do,FOLLOW_L_do_in_with_control_expr3736); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_do.add(L_do317);

                    pushFollow(FOLLOW_block_in_with_control_expr3738);
                    block318=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block318.getTree());
                    L_end319=(Token)match(input,L_end,FOLLOW_L_end_in_with_control_expr3740); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_end.add(L_end319);



                    // AST REWRITE
                    // elements: block, protected_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 585:51: -> ^( WITH protected_expr ^( BEGIN block ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:585:54: ^( WITH protected_expr ^( BEGIN block ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WITH, "WITH"), root_1);

                        adaptor.addChild(root_1, stream_protected_expr.nextTree());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:585:76: ^( BEGIN block )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BEGIN, "BEGIN"), root_2);

                        adaptor.addChild(root_2, stream_block.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "with_control_expr"

    public static class protected_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "protected_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:588:1: protected_expr : ( p_lop_expr | obj_expr );
    public final babel17Parser.protected_expr_return protected_expr() throws RecognitionException {
        babel17Parser.protected_expr_return retval = new babel17Parser.protected_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.p_lop_expr_return p_lop_expr320 = null;

        babel17Parser.obj_expr_return obj_expr321 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:589:2: ( p_lop_expr | obj_expr )
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==L_begin||(LA152_0>=L_with && LA152_0<=L_if)||(LA152_0>=L_while && LA152_0<=L_for)||LA152_0==L_match||LA152_0==L_exception||LA152_0==L_try||(LA152_0>=L_concurrent && LA152_0<=L_lazy)||(LA152_0>=L_true && LA152_0<=L_nil)||LA152_0==L_typeof||LA152_0==L_not||(LA152_0>=L_root && LA152_0<=L_native)||LA152_0==MINUS||(LA152_0>=A_ELLIPSIS && LA152_0<=U_ELLIPSIS)||LA152_0==L_force||(LA152_0>=Constr && LA152_0<=Id)||(LA152_0>=Float && LA152_0<=Num)||(LA152_0>=String && LA152_0<=ROUND_BRACKET_OPEN)||LA152_0==SQUARE_BRACKET_OPEN||LA152_0==CURLY_BRACKET_OPEN||LA152_0==UNDERSCORE) ) {
                alt152=1;
            }
            else if ( (LA152_0==L_obj) ) {
                alt152=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;
            }
            switch (alt152) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:589:4: p_lop_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_lop_expr_in_protected_expr3765);
                    p_lop_expr320=p_lop_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_lop_expr320.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:590:4: obj_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_obj_expr_in_protected_expr3770);
                    obj_expr321=obj_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, obj_expr321.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "protected_expr"

    public static class protected_expr_nc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "protected_expr_nc"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:592:1: protected_expr_nc : protected_expr ;
    public final babel17Parser.protected_expr_nc_return protected_expr_nc() throws RecognitionException {
        babel17Parser.protected_expr_nc_return retval = new babel17Parser.protected_expr_nc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.protected_expr_return protected_expr322 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:593:2: ( protected_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:593:4: protected_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_protected_expr_in_protected_expr_nc3781);
            protected_expr322=protected_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, protected_expr322.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "protected_expr_nc"

    public static class begin_end_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "begin_end"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:595:1: begin_end : L_begin block L_end -> ^( BEGIN block ) ;
    public final babel17Parser.begin_end_return begin_end() throws RecognitionException {
        babel17Parser.begin_end_return retval = new babel17Parser.begin_end_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_begin323=null;
        Token L_end325=null;
        babel17Parser.block_return block324 = null;


        CommonTree L_begin323_tree=null;
        CommonTree L_end325_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_begin=new RewriteRuleTokenStream(adaptor,"token L_begin");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:596:2: ( L_begin block L_end -> ^( BEGIN block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:596:4: L_begin block L_end
            {
            L_begin323=(Token)match(input,L_begin,FOLLOW_L_begin_in_begin_end3791); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_begin.add(L_begin323);

            pushFollow(FOLLOW_block_in_begin_end3793);
            block324=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block324.getTree());
            L_end325=(Token)match(input,L_end,FOLLOW_L_end_in_begin_end3795); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end325);



            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 596:24: -> ^( BEGIN block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:596:27: ^( BEGIN block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BEGIN, "BEGIN"), root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "begin_end"

    public static class parents_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parents"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:1: parents : ( '+' primitive_expr -> ^( PARENTS_PLUS primitive_expr ) | '*' primitive_expr -> ^( PARENTS_MUL primitive_expr ) );
    public final babel17Parser.parents_return parents() throws RecognitionException {
        babel17Parser.parents_return retval = new babel17Parser.parents_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal326=null;
        Token char_literal328=null;
        babel17Parser.primitive_expr_return primitive_expr327 = null;

        babel17Parser.primitive_expr_return primitive_expr329 = null;


        CommonTree char_literal326_tree=null;
        CommonTree char_literal328_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_TIMES=new RewriteRuleTokenStream(adaptor,"token TIMES");
        RewriteRuleSubtreeStream stream_primitive_expr=new RewriteRuleSubtreeStream(adaptor,"rule primitive_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:9: ( '+' primitive_expr -> ^( PARENTS_PLUS primitive_expr ) | '*' primitive_expr -> ^( PARENTS_MUL primitive_expr ) )
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==PLUS) ) {
                alt153=1;
            }
            else if ( (LA153_0==TIMES) ) {
                alt153=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);

                throw nvae;
            }
            switch (alt153) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:11: '+' primitive_expr
                    {
                    char_literal326=(Token)match(input,PLUS,FOLLOW_PLUS_in_parents3813); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(char_literal326);

                    pushFollow(FOLLOW_primitive_expr_in_parents3815);
                    primitive_expr327=primitive_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitive_expr.add(primitive_expr327.getTree());


                    // AST REWRITE
                    // elements: primitive_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 599:30: -> ^( PARENTS_PLUS primitive_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:33: ^( PARENTS_PLUS primitive_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARENTS_PLUS, "PARENTS_PLUS"), root_1);

                        adaptor.addChild(root_1, stream_primitive_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:600:4: '*' primitive_expr
                    {
                    char_literal328=(Token)match(input,TIMES,FOLLOW_TIMES_in_parents3828); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMES.add(char_literal328);

                    pushFollow(FOLLOW_primitive_expr_in_parents3830);
                    primitive_expr329=primitive_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitive_expr.add(primitive_expr329.getTree());


                    // AST REWRITE
                    // elements: primitive_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 600:23: -> ^( PARENTS_MUL primitive_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:600:26: ^( PARENTS_MUL primitive_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARENTS_MUL, "PARENTS_MUL"), root_1);

                        adaptor.addChild(root_1, stream_primitive_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parents"

    public static class obj_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "obj_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:603:1: obj_expr : ( ( L_obj ( NL )? parents )=> L_obj ( NL )? parents block L_end -> ^( OBJ block parents ) | L_obj block L_end -> ^( OBJ block ) );
    public final babel17Parser.obj_expr_return obj_expr() throws RecognitionException {
        babel17Parser.obj_expr_return retval = new babel17Parser.obj_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_obj330=null;
        Token NL331=null;
        Token L_end334=null;
        Token L_obj335=null;
        Token L_end337=null;
        babel17Parser.parents_return parents332 = null;

        babel17Parser.block_return block333 = null;

        babel17Parser.block_return block336 = null;


        CommonTree L_obj330_tree=null;
        CommonTree NL331_tree=null;
        CommonTree L_end334_tree=null;
        CommonTree L_obj335_tree=null;
        CommonTree L_end337_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_obj=new RewriteRuleTokenStream(adaptor,"token L_obj");
        RewriteRuleSubtreeStream stream_parents=new RewriteRuleSubtreeStream(adaptor,"rule parents");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:603:9: ( ( L_obj ( NL )? parents )=> L_obj ( NL )? parents block L_end -> ^( OBJ block parents ) | L_obj block L_end -> ^( OBJ block ) )
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==L_obj) ) {
                int LA155_1 = input.LA(2);

                if ( (LA155_1==NL) ) {
                    int LA155_2 = input.LA(3);

                    if ( (LA155_2==PLUS) && (synpred10_babel17())) {
                        alt155=1;
                    }
                    else if ( (LA155_2==TIMES) && (synpred10_babel17())) {
                        alt155=1;
                    }
                    else if ( ((LA155_2>=L_begin && LA155_2<=L_if)||(LA155_2>=L_while && LA155_2<=L_for)||(LA155_2>=L_yield && LA155_2<=L_match)||(LA155_2>=L_val && LA155_2<=L_def)||LA155_2==L_exception||LA155_2==L_try||(LA155_2>=L_concurrent && LA155_2<=L_nil)||(LA155_2>=L_module && LA155_2<=L_import)||LA155_2==L_not||(LA155_2>=L_root && LA155_2<=L_native)||LA155_2==SC||LA155_2==MINUS||(LA155_2>=A_ELLIPSIS && LA155_2<=U_ELLIPSIS)||LA155_2==L_force||(LA155_2>=NL && LA155_2<=Id)||(LA155_2>=Float && LA155_2<=Num)||(LA155_2>=String && LA155_2<=ROUND_BRACKET_OPEN)||LA155_2==SQUARE_BRACKET_OPEN||LA155_2==CURLY_BRACKET_OPEN||LA155_2==UNDERSCORE||(LA155_2>=PRAGMA_LOG && LA155_2<=PRAGMA_CATCH)) ) {
                        alt155=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 155, 2, input);

                        throw nvae;
                    }
                }
                else if ( ((LA155_1>=L_begin && LA155_1<=L_if)||(LA155_1>=L_while && LA155_1<=L_for)||(LA155_1>=L_yield && LA155_1<=L_match)||(LA155_1>=L_val && LA155_1<=L_def)||LA155_1==L_exception||LA155_1==L_try||(LA155_1>=L_concurrent && LA155_1<=L_nil)||(LA155_1>=L_module && LA155_1<=L_import)||LA155_1==L_not||(LA155_1>=L_root && LA155_1<=L_native)||LA155_1==SC||LA155_1==MINUS||(LA155_1>=A_ELLIPSIS && LA155_1<=U_ELLIPSIS)||LA155_1==L_force||(LA155_1>=Constr && LA155_1<=Id)||(LA155_1>=Float && LA155_1<=Num)||(LA155_1>=String && LA155_1<=ROUND_BRACKET_OPEN)||LA155_1==SQUARE_BRACKET_OPEN||LA155_1==CURLY_BRACKET_OPEN||LA155_1==UNDERSCORE||(LA155_1>=PRAGMA_LOG && LA155_1<=PRAGMA_CATCH)) ) {
                    alt155=2;
                }
                else if ( (LA155_1==PLUS) && (synpred10_babel17())) {
                    alt155=1;
                }
                else if ( (LA155_1==TIMES) && (synpred10_babel17())) {
                    alt155=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;
            }
            switch (alt155) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:603:11: ( L_obj ( NL )? parents )=> L_obj ( NL )? parents block L_end
                    {
                    L_obj330=(Token)match(input,L_obj,FOLLOW_L_obj_in_obj_expr3858); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_obj.add(L_obj330);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:603:40: ( NL )?
                    int alt154=2;
                    int LA154_0 = input.LA(1);

                    if ( (LA154_0==NL) ) {
                        alt154=1;
                    }
                    switch (alt154) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:603:40: NL
                            {
                            NL331=(Token)match(input,NL,FOLLOW_NL_in_obj_expr3860); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL331);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_parents_in_obj_expr3863);
                    parents332=parents();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parents.add(parents332.getTree());
                    pushFollow(FOLLOW_block_in_obj_expr3865);
                    block333=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block333.getTree());
                    L_end334=(Token)match(input,L_end,FOLLOW_L_end_in_obj_expr3867); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_end.add(L_end334);



                    // AST REWRITE
                    // elements: block, parents
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 603:64: -> ^( OBJ block parents )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:603:67: ^( OBJ block parents )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJ, "OBJ"), root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());
                        adaptor.addChild(root_1, stream_parents.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:604:17: L_obj block L_end
                    {
                    L_obj335=(Token)match(input,L_obj,FOLLOW_L_obj_in_obj_expr3895); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_obj.add(L_obj335);

                    pushFollow(FOLLOW_block_in_obj_expr3897);
                    block336=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block336.getTree());
                    L_end337=(Token)match(input,L_end,FOLLOW_L_end_in_obj_expr3899); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_end.add(L_end337);



                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 604:35: -> ^( OBJ block )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:604:38: ^( OBJ block )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJ, "OBJ"), root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "obj_expr"

    public static class lop_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lop_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:606:1: lop_expr : ( ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | op_expr );
    public final babel17Parser.lop_expr_return lop_expr() throws RecognitionException {
        babel17Parser.lop_expr_return retval = new babel17Parser.lop_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.lambda_expr_nobrackets_return lambda_expr_nobrackets338 = null;

        babel17Parser.op_expr_return op_expr339 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:608:2: ( ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | op_expr )
            int alt156=2;
            alt156 = dfa156.predict(input);
            switch (alt156) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:608:4: ( lambda_expr_nobrackets )=> lambda_expr_nobrackets
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lambda_expr_nobrackets_in_lop_expr3929);
                    lambda_expr_nobrackets338=lambda_expr_nobrackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lambda_expr_nobrackets338.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:609:4: op_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_op_expr_in_lop_expr3934);
                    op_expr339=op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op_expr339.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lop_expr"

    public static class p_lop_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_lop_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:611:1: p_lop_expr : ( ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | p_op_expr );
    public final babel17Parser.p_lop_expr_return p_lop_expr() throws RecognitionException {
        babel17Parser.p_lop_expr_return retval = new babel17Parser.p_lop_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.lambda_expr_nobrackets_return lambda_expr_nobrackets340 = null;

        babel17Parser.p_op_expr_return p_op_expr341 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:2: ( ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | p_op_expr )
            int alt157=2;
            alt157 = dfa157.predict(input);
            switch (alt157) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:4: ( lambda_expr_nobrackets )=> lambda_expr_nobrackets
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lambda_expr_nobrackets_in_p_lop_expr3952);
                    lambda_expr_nobrackets340=lambda_expr_nobrackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lambda_expr_nobrackets340.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:614:4: p_op_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_op_expr_in_p_lop_expr3957);
                    p_op_expr341=p_op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_op_expr341.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_lop_expr"

    public static class if_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "if_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:616:1: if_expr : L_if ( NL )? protected_expr ( NL )? L_then block ( L_elseif ( NL )? protected_expr ( NL )? L_then block )* ( L_else block )? L_end -> ^( IF ( protected_expr )* ( block )* ) ;
    public final babel17Parser.if_expr_return if_expr() throws RecognitionException {
        babel17Parser.if_expr_return retval = new babel17Parser.if_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_if342=null;
        Token NL343=null;
        Token NL345=null;
        Token L_then346=null;
        Token L_elseif348=null;
        Token NL349=null;
        Token NL351=null;
        Token L_then352=null;
        Token L_else354=null;
        Token L_end356=null;
        babel17Parser.protected_expr_return protected_expr344 = null;

        babel17Parser.block_return block347 = null;

        babel17Parser.protected_expr_return protected_expr350 = null;

        babel17Parser.block_return block353 = null;

        babel17Parser.block_return block355 = null;


        CommonTree L_if342_tree=null;
        CommonTree NL343_tree=null;
        CommonTree NL345_tree=null;
        CommonTree L_then346_tree=null;
        CommonTree L_elseif348_tree=null;
        CommonTree NL349_tree=null;
        CommonTree NL351_tree=null;
        CommonTree L_then352_tree=null;
        CommonTree L_else354_tree=null;
        CommonTree L_end356_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_else=new RewriteRuleTokenStream(adaptor,"token L_else");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_elseif=new RewriteRuleTokenStream(adaptor,"token L_elseif");
        RewriteRuleTokenStream stream_L_then=new RewriteRuleTokenStream(adaptor,"token L_then");
        RewriteRuleTokenStream stream_L_if=new RewriteRuleTokenStream(adaptor,"token L_if");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:616:9: ( L_if ( NL )? protected_expr ( NL )? L_then block ( L_elseif ( NL )? protected_expr ( NL )? L_then block )* ( L_else block )? L_end -> ^( IF ( protected_expr )* ( block )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:616:11: L_if ( NL )? protected_expr ( NL )? L_then block ( L_elseif ( NL )? protected_expr ( NL )? L_then block )* ( L_else block )? L_end
            {
            L_if342=(Token)match(input,L_if,FOLLOW_L_if_in_if_expr3967); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_if.add(L_if342);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:616:16: ( NL )?
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==NL) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:616:16: NL
                    {
                    NL343=(Token)match(input,NL,FOLLOW_NL_in_if_expr3969); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL343);


                    }
                    break;

            }

            pushFollow(FOLLOW_protected_expr_in_if_expr3972);
            protected_expr344=protected_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr344.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:616:35: ( NL )?
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==NL) ) {
                alt159=1;
            }
            switch (alt159) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:616:35: NL
                    {
                    NL345=(Token)match(input,NL,FOLLOW_NL_in_if_expr3974); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL345);


                    }
                    break;

            }

            L_then346=(Token)match(input,L_then,FOLLOW_L_then_in_if_expr3977); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_then.add(L_then346);

            pushFollow(FOLLOW_block_in_if_expr3979);
            block347=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block347.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:617:3: ( L_elseif ( NL )? protected_expr ( NL )? L_then block )*
            loop162:
            do {
                int alt162=2;
                int LA162_0 = input.LA(1);

                if ( (LA162_0==L_elseif) ) {
                    alt162=1;
                }


                switch (alt162) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:617:4: L_elseif ( NL )? protected_expr ( NL )? L_then block
            	    {
            	    L_elseif348=(Token)match(input,L_elseif,FOLLOW_L_elseif_in_if_expr3985); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_L_elseif.add(L_elseif348);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:617:13: ( NL )?
            	    int alt160=2;
            	    int LA160_0 = input.LA(1);

            	    if ( (LA160_0==NL) ) {
            	        alt160=1;
            	    }
            	    switch (alt160) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:617:13: NL
            	            {
            	            NL349=(Token)match(input,NL,FOLLOW_NL_in_if_expr3987); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL349);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_protected_expr_in_if_expr3990);
            	    protected_expr350=protected_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr350.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:617:32: ( NL )?
            	    int alt161=2;
            	    int LA161_0 = input.LA(1);

            	    if ( (LA161_0==NL) ) {
            	        alt161=1;
            	    }
            	    switch (alt161) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:617:32: NL
            	            {
            	            NL351=(Token)match(input,NL,FOLLOW_NL_in_if_expr3992); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL351);


            	            }
            	            break;

            	    }

            	    L_then352=(Token)match(input,L_then,FOLLOW_L_then_in_if_expr3995); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_L_then.add(L_then352);

            	    pushFollow(FOLLOW_block_in_if_expr3997);
            	    block353=block();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_block.add(block353.getTree());

            	    }
            	    break;

            	default :
            	    break loop162;
                }
            } while (true);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:618:3: ( L_else block )?
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==L_else) ) {
                alt163=1;
            }
            switch (alt163) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:618:4: L_else block
                    {
                    L_else354=(Token)match(input,L_else,FOLLOW_L_else_in_if_expr4005); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_else.add(L_else354);

                    pushFollow(FOLLOW_block_in_if_expr4007);
                    block355=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block355.getTree());

                    }
                    break;

            }

            L_end356=(Token)match(input,L_end,FOLLOW_L_end_in_if_expr4011); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end356);



            // AST REWRITE
            // elements: block, protected_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 618:26: -> ^( IF ( protected_expr )* ( block )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:618:29: ^( IF ( protected_expr )* ( block )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IF, "IF"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:618:34: ( protected_expr )*
                while ( stream_protected_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_protected_expr.nextTree());

                }
                stream_protected_expr.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:618:50: ( block )*
                while ( stream_block.hasNext() ) {
                    adaptor.addChild(root_1, stream_block.nextTree());

                }
                stream_block.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "if_expr"

    public static class while_do_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "while_do_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:620:1: while_do_expr : L_while ( NL )? protected_expr ( NL )? L_do block L_end -> ^( WHILE_DO protected_expr block ) ;
    public final babel17Parser.while_do_expr_return while_do_expr() throws RecognitionException {
        babel17Parser.while_do_expr_return retval = new babel17Parser.while_do_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_while357=null;
        Token NL358=null;
        Token NL360=null;
        Token L_do361=null;
        Token L_end363=null;
        babel17Parser.protected_expr_return protected_expr359 = null;

        babel17Parser.block_return block362 = null;


        CommonTree L_while357_tree=null;
        CommonTree NL358_tree=null;
        CommonTree NL360_tree=null;
        CommonTree L_do361_tree=null;
        CommonTree L_end363_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_do=new RewriteRuleTokenStream(adaptor,"token L_do");
        RewriteRuleTokenStream stream_L_while=new RewriteRuleTokenStream(adaptor,"token L_while");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:621:2: ( L_while ( NL )? protected_expr ( NL )? L_do block L_end -> ^( WHILE_DO protected_expr block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:621:4: L_while ( NL )? protected_expr ( NL )? L_do block L_end
            {
            L_while357=(Token)match(input,L_while,FOLLOW_L_while_in_while_do_expr4035); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_while.add(L_while357);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:621:12: ( NL )?
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==NL) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:621:12: NL
                    {
                    NL358=(Token)match(input,NL,FOLLOW_NL_in_while_do_expr4037); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL358);


                    }
                    break;

            }

            pushFollow(FOLLOW_protected_expr_in_while_do_expr4040);
            protected_expr359=protected_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr359.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:621:31: ( NL )?
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==NL) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:621:31: NL
                    {
                    NL360=(Token)match(input,NL,FOLLOW_NL_in_while_do_expr4042); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL360);


                    }
                    break;

            }

            L_do361=(Token)match(input,L_do,FOLLOW_L_do_in_while_do_expr4045); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_do.add(L_do361);

            pushFollow(FOLLOW_block_in_while_do_expr4047);
            block362=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block362.getTree());
            L_end363=(Token)match(input,L_end,FOLLOW_L_end_in_while_do_expr4049); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end363);



            // AST REWRITE
            // elements: block, protected_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 622:5: -> ^( WHILE_DO protected_expr block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:622:8: ^( WHILE_DO protected_expr block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHILE_DO, "WHILE_DO"), root_1);

                adaptor.addChild(root_1, stream_protected_expr.nextTree());
                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "while_do_expr"

    public static class cases_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cases"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:624:1: cases : ( full_cases | pattern ( NL )? token_DOUBLE_ARROW block -> ^( CASES ^( NIL_TOKEN pattern block ) ) );
    public final babel17Parser.cases_return cases() throws RecognitionException {
        babel17Parser.cases_return retval = new babel17Parser.cases_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL366=null;
        babel17Parser.full_cases_return full_cases364 = null;

        babel17Parser.pattern_return pattern365 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW367 = null;

        babel17Parser.block_return block368 = null;


        CommonTree NL366_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:625:2: ( full_cases | pattern ( NL )? token_DOUBLE_ARROW block -> ^( CASES ^( NIL_TOKEN pattern block ) ) )
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==L_case) ) {
                alt167=1;
            }
            else if ( (LA167_0==L_exception||(LA167_0>=L_true && LA167_0<=L_false)||LA167_0==L_nil||LA167_0==MINUS||(LA167_0>=A_ELLIPSIS && LA167_0<=U_ELLIPSIS)||(LA167_0>=Constr && LA167_0<=Id)||LA167_0==Num||(LA167_0>=String && LA167_0<=ROUND_BRACKET_OPEN)||LA167_0==SQUARE_BRACKET_OPEN||LA167_0==CURLY_BRACKET_OPEN||LA167_0==UNDERSCORE) ) {
                alt167=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;
            }
            switch (alt167) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:625:4: full_cases
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_full_cases_in_cases4079);
                    full_cases364=full_cases();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, full_cases364.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:626:4: pattern ( NL )? token_DOUBLE_ARROW block
                    {
                    pushFollow(FOLLOW_pattern_in_cases4084);
                    pattern365=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern365.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:626:12: ( NL )?
                    int alt166=2;
                    int LA166_0 = input.LA(1);

                    if ( (LA166_0==NL) ) {
                        alt166=1;
                    }
                    switch (alt166) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:626:12: NL
                            {
                            NL366=(Token)match(input,NL,FOLLOW_NL_in_cases4086); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL366);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_token_DOUBLE_ARROW_in_cases4089);
                    token_DOUBLE_ARROW367=token_DOUBLE_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW367.getTree());
                    pushFollow(FOLLOW_block_in_cases4091);
                    block368=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block368.getTree());


                    // AST REWRITE
                    // elements: block, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 626:41: -> ^( CASES ^( NIL_TOKEN pattern block ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:626:44: ^( CASES ^( NIL_TOKEN pattern block ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:626:52: ^( NIL_TOKEN pattern block )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        adaptor.addChild(root_2, stream_pattern.nextTree());
                        adaptor.addChild(root_2, stream_block.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cases"

    public static class full_cases_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "full_cases"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:628:1: full_cases : ( case_expr )+ -> ^( CASES ( case_expr )+ ) ;
    public final babel17Parser.full_cases_return full_cases() throws RecognitionException {
        babel17Parser.full_cases_return retval = new babel17Parser.full_cases_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.case_expr_return case_expr369 = null;


        RewriteRuleSubtreeStream stream_case_expr=new RewriteRuleSubtreeStream(adaptor,"rule case_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:629:2: ( ( case_expr )+ -> ^( CASES ( case_expr )+ ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:629:4: ( case_expr )+
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:629:4: ( case_expr )+
            int cnt168=0;
            loop168:
            do {
                int alt168=2;
                int LA168_0 = input.LA(1);

                if ( (LA168_0==L_case) ) {
                    alt168=1;
                }


                switch (alt168) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:629:4: case_expr
            	    {
            	    pushFollow(FOLLOW_case_expr_in_full_cases4114);
            	    case_expr369=case_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_case_expr.add(case_expr369.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt168 >= 1 ) break loop168;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(168, input);
                        throw eee;
                }
                cnt168++;
            } while (true);



            // AST REWRITE
            // elements: case_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 629:15: -> ^( CASES ( case_expr )+ )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:629:18: ^( CASES ( case_expr )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                if ( !(stream_case_expr.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_case_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_case_expr.nextTree());

                }
                stream_case_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "full_cases"

    public static class case_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "case_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:631:1: case_expr : ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block ) -> ^( NIL_TOKEN casepattern block ) ;
    public final babel17Parser.case_expr_return case_expr() throws RecognitionException {
        babel17Parser.case_expr_return retval = new babel17Parser.case_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_case370=null;
        Token NL371=null;
        Token NL373=null;
        babel17Parser.casepattern_return casepattern372 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW374 = null;

        babel17Parser.block_return block375 = null;


        CommonTree L_case370_tree=null;
        CommonTree NL371_tree=null;
        CommonTree NL373_tree=null;
        RewriteRuleTokenStream stream_L_case=new RewriteRuleTokenStream(adaptor,"token L_case");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_casepattern=new RewriteRuleSubtreeStream(adaptor,"rule casepattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:632:2: ( ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block ) -> ^( NIL_TOKEN casepattern block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:632:4: ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block )
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:632:4: ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:632:5: L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block
            {
            L_case370=(Token)match(input,L_case,FOLLOW_L_case_in_case_expr4135); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_case.add(L_case370);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:632:12: ( NL )?
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==NL) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:632:12: NL
                    {
                    NL371=(Token)match(input,NL,FOLLOW_NL_in_case_expr4137); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL371);


                    }
                    break;

            }

            pushFollow(FOLLOW_casepattern_in_case_expr4140);
            casepattern372=casepattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_casepattern.add(casepattern372.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:632:28: ( NL )?
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==NL) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:632:28: NL
                    {
                    NL373=(Token)match(input,NL,FOLLOW_NL_in_case_expr4142); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL373);


                    }
                    break;

            }

            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_case_expr4145);
            token_DOUBLE_ARROW374=token_DOUBLE_ARROW();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW374.getTree());
            pushFollow(FOLLOW_block_in_case_expr4147);
            block375=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block375.getTree());

            }



            // AST REWRITE
            // elements: casepattern, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 632:58: -> ^( NIL_TOKEN casepattern block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:632:61: ^( NIL_TOKEN casepattern block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_1);

                adaptor.addChild(root_1, stream_casepattern.nextTree());
                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "case_expr"

    public static class match_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "match_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:634:1: match_expr : L_match ( NL )? p_op_expr ( NL )? full_cases L_end -> ^( MATCH p_op_expr full_cases ) ;
    public final babel17Parser.match_expr_return match_expr() throws RecognitionException {
        babel17Parser.match_expr_return retval = new babel17Parser.match_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_match376=null;
        Token NL377=null;
        Token NL379=null;
        Token L_end381=null;
        babel17Parser.p_op_expr_return p_op_expr378 = null;

        babel17Parser.full_cases_return full_cases380 = null;


        CommonTree L_match376_tree=null;
        CommonTree NL377_tree=null;
        CommonTree NL379_tree=null;
        CommonTree L_end381_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_match=new RewriteRuleTokenStream(adaptor,"token L_match");
        RewriteRuleSubtreeStream stream_full_cases=new RewriteRuleSubtreeStream(adaptor,"rule full_cases");
        RewriteRuleSubtreeStream stream_p_op_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_op_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:635:2: ( L_match ( NL )? p_op_expr ( NL )? full_cases L_end -> ^( MATCH p_op_expr full_cases ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:635:4: L_match ( NL )? p_op_expr ( NL )? full_cases L_end
            {
            L_match376=(Token)match(input,L_match,FOLLOW_L_match_in_match_expr4168); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_match.add(L_match376);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:635:12: ( NL )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==NL) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:635:12: NL
                    {
                    NL377=(Token)match(input,NL,FOLLOW_NL_in_match_expr4170); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL377);


                    }
                    break;

            }

            pushFollow(FOLLOW_p_op_expr_in_match_expr4173);
            p_op_expr378=p_op_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_op_expr.add(p_op_expr378.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:635:26: ( NL )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==NL) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:635:26: NL
                    {
                    NL379=(Token)match(input,NL,FOLLOW_NL_in_match_expr4175); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL379);


                    }
                    break;

            }

            pushFollow(FOLLOW_full_cases_in_match_expr4178);
            full_cases380=full_cases();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_full_cases.add(full_cases380.getTree());
            L_end381=(Token)match(input,L_end,FOLLOW_L_end_in_match_expr4180); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end381);



            // AST REWRITE
            // elements: p_op_expr, full_cases
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 636:5: -> ^( MATCH p_op_expr full_cases )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:636:8: ^( MATCH p_op_expr full_cases )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH, "MATCH"), root_1);

                adaptor.addChild(root_1, stream_p_op_expr.nextTree());
                adaptor.addChild(root_1, stream_full_cases.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "match_expr"

    public static class try_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "try_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:638:1: try_expr : L_try ( NL )? pure_block ( NL )? L_catch ( NL )? full_cases L_end -> ^( TRY pure_block full_cases ) ;
    public final babel17Parser.try_expr_return try_expr() throws RecognitionException {
        babel17Parser.try_expr_return retval = new babel17Parser.try_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_try382=null;
        Token NL383=null;
        Token NL385=null;
        Token L_catch386=null;
        Token NL387=null;
        Token L_end389=null;
        babel17Parser.pure_block_return pure_block384 = null;

        babel17Parser.full_cases_return full_cases388 = null;


        CommonTree L_try382_tree=null;
        CommonTree NL383_tree=null;
        CommonTree NL385_tree=null;
        CommonTree L_catch386_tree=null;
        CommonTree NL387_tree=null;
        CommonTree L_end389_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_try=new RewriteRuleTokenStream(adaptor,"token L_try");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_catch=new RewriteRuleTokenStream(adaptor,"token L_catch");
        RewriteRuleSubtreeStream stream_full_cases=new RewriteRuleSubtreeStream(adaptor,"rule full_cases");
        RewriteRuleSubtreeStream stream_pure_block=new RewriteRuleSubtreeStream(adaptor,"rule pure_block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:638:9: ( L_try ( NL )? pure_block ( NL )? L_catch ( NL )? full_cases L_end -> ^( TRY pure_block full_cases ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:638:11: L_try ( NL )? pure_block ( NL )? L_catch ( NL )? full_cases L_end
            {
            L_try382=(Token)match(input,L_try,FOLLOW_L_try_in_try_expr4206); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_try.add(L_try382);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:638:17: ( NL )?
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==NL) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:638:17: NL
                    {
                    NL383=(Token)match(input,NL,FOLLOW_NL_in_try_expr4208); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL383);


                    }
                    break;

            }

            pushFollow(FOLLOW_pure_block_in_try_expr4211);
            pure_block384=pure_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pure_block.add(pure_block384.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:638:32: ( NL )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==NL) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:638:32: NL
                    {
                    NL385=(Token)match(input,NL,FOLLOW_NL_in_try_expr4213); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL385);


                    }
                    break;

            }

            L_catch386=(Token)match(input,L_catch,FOLLOW_L_catch_in_try_expr4216); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_catch.add(L_catch386);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:638:44: ( NL )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==NL) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:638:44: NL
                    {
                    NL387=(Token)match(input,NL,FOLLOW_NL_in_try_expr4218); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL387);


                    }
                    break;

            }

            pushFollow(FOLLOW_full_cases_in_try_expr4221);
            full_cases388=full_cases();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_full_cases.add(full_cases388.getTree());
            L_end389=(Token)match(input,L_end,FOLLOW_L_end_in_try_expr4223); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end389);



            // AST REWRITE
            // elements: full_cases, pure_block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 639:5: -> ^( TRY pure_block full_cases )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:639:8: ^( TRY pure_block full_cases )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TRY, "TRY"), root_1);

                adaptor.addChild(root_1, stream_pure_block.nextTree());
                adaptor.addChild(root_1, stream_full_cases.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "try_expr"

    public static class lambda_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:641:1: lambda_expr : '(' ( NL )? lambda_cases ( NL )? ')' -> ^( LAMBDA lambda_cases ) ;
    public final babel17Parser.lambda_expr_return lambda_expr() throws RecognitionException {
        babel17Parser.lambda_expr_return retval = new babel17Parser.lambda_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal390=null;
        Token NL391=null;
        Token NL393=null;
        Token char_literal394=null;
        babel17Parser.lambda_cases_return lambda_cases392 = null;


        CommonTree char_literal390_tree=null;
        CommonTree NL391_tree=null;
        CommonTree NL393_tree=null;
        CommonTree char_literal394_tree=null;
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleSubtreeStream stream_lambda_cases=new RewriteRuleSubtreeStream(adaptor,"rule lambda_cases");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:642:2: ( '(' ( NL )? lambda_cases ( NL )? ')' -> ^( LAMBDA lambda_cases ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:642:4: '(' ( NL )? lambda_cases ( NL )? ')'
            {
            char_literal390=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_lambda_expr4247); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal390);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:642:8: ( NL )?
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==NL) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:642:8: NL
                    {
                    NL391=(Token)match(input,NL,FOLLOW_NL_in_lambda_expr4249); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL391);


                    }
                    break;

            }

            pushFollow(FOLLOW_lambda_cases_in_lambda_expr4252);
            lambda_cases392=lambda_cases();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lambda_cases.add(lambda_cases392.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:642:25: ( NL )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==NL) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:642:25: NL
                    {
                    NL393=(Token)match(input,NL,FOLLOW_NL_in_lambda_expr4254); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL393);


                    }
                    break;

            }

            char_literal394=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_lambda_expr4257); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal394);



            // AST REWRITE
            // elements: lambda_cases
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 642:33: -> ^( LAMBDA lambda_cases )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:642:36: ^( LAMBDA lambda_cases )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAMBDA, "LAMBDA"), root_1);

                adaptor.addChild(root_1, stream_lambda_cases.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_expr"

    public static class lambda_expr_nobrackets_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_expr_nobrackets"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:644:1: lambda_expr_nobrackets : lambda_cases_nobrackets -> ^( LAMBDA lambda_cases_nobrackets ) ;
    public final babel17Parser.lambda_expr_nobrackets_return lambda_expr_nobrackets() throws RecognitionException {
        babel17Parser.lambda_expr_nobrackets_return retval = new babel17Parser.lambda_expr_nobrackets_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.lambda_cases_nobrackets_return lambda_cases_nobrackets395 = null;


        RewriteRuleSubtreeStream stream_lambda_cases_nobrackets=new RewriteRuleSubtreeStream(adaptor,"rule lambda_cases_nobrackets");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:645:2: ( lambda_cases_nobrackets -> ^( LAMBDA lambda_cases_nobrackets ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:645:4: lambda_cases_nobrackets
            {
            pushFollow(FOLLOW_lambda_cases_nobrackets_in_lambda_expr_nobrackets4276);
            lambda_cases_nobrackets395=lambda_cases_nobrackets();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lambda_cases_nobrackets.add(lambda_cases_nobrackets395.getTree());


            // AST REWRITE
            // elements: lambda_cases_nobrackets
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 645:28: -> ^( LAMBDA lambda_cases_nobrackets )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:645:31: ^( LAMBDA lambda_cases_nobrackets )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAMBDA, "LAMBDA"), root_1);

                adaptor.addChild(root_1, stream_lambda_cases_nobrackets.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_expr_nobrackets"

    public static class lambda_cases_nobrackets_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_cases_nobrackets"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:647:1: lambda_cases_nobrackets : pattern ( NL )? token_DOUBLE_ARROW ( NL )? lop_expr -> ^( CASES ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) ) ) ;
    public final babel17Parser.lambda_cases_nobrackets_return lambda_cases_nobrackets() throws RecognitionException {
        babel17Parser.lambda_cases_nobrackets_return retval = new babel17Parser.lambda_cases_nobrackets_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL397=null;
        Token NL399=null;
        babel17Parser.pattern_return pattern396 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW398 = null;

        babel17Parser.lop_expr_return lop_expr400 = null;


        CommonTree NL397_tree=null;
        CommonTree NL399_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_lop_expr=new RewriteRuleSubtreeStream(adaptor,"rule lop_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:648:2: ( pattern ( NL )? token_DOUBLE_ARROW ( NL )? lop_expr -> ^( CASES ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) ) ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:648:4: pattern ( NL )? token_DOUBLE_ARROW ( NL )? lop_expr
            {
            pushFollow(FOLLOW_pattern_in_lambda_cases_nobrackets4294);
            pattern396=pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pattern.add(pattern396.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:648:12: ( NL )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==NL) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:648:12: NL
                    {
                    NL397=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases_nobrackets4296); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL397);


                    }
                    break;

            }

            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_lambda_cases_nobrackets4299);
            token_DOUBLE_ARROW398=token_DOUBLE_ARROW();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW398.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:648:35: ( NL )?
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==NL) ) {
                alt179=1;
            }
            switch (alt179) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:648:35: NL
                    {
                    NL399=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases_nobrackets4301); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL399);


                    }
                    break;

            }

            pushFollow(FOLLOW_lop_expr_in_lambda_cases_nobrackets4304);
            lop_expr400=lop_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lop_expr.add(lop_expr400.getTree());


            // AST REWRITE
            // elements: lop_expr, pattern
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 648:48: -> ^( CASES ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) ) )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:648:51: ^( CASES ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:648:59: ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                adaptor.addChild(root_2, stream_pattern.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:648:79: ^( BLOCK lop_expr )
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK, "BLOCK"), root_3);

                adaptor.addChild(root_3, stream_lop_expr.nextTree());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_cases_nobrackets"

    public static class lambda_case_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_case_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:650:1: lambda_case_expr : ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block ) -> ^( NIL_TOKEN casepattern pure_block ) ;
    public final babel17Parser.lambda_case_expr_return lambda_case_expr() throws RecognitionException {
        babel17Parser.lambda_case_expr_return retval = new babel17Parser.lambda_case_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_case401=null;
        Token NL402=null;
        Token NL404=null;
        Token NL406=null;
        babel17Parser.casepattern_return casepattern403 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW405 = null;

        babel17Parser.pure_block_return pure_block407 = null;


        CommonTree L_case401_tree=null;
        CommonTree NL402_tree=null;
        CommonTree NL404_tree=null;
        CommonTree NL406_tree=null;
        RewriteRuleTokenStream stream_L_case=new RewriteRuleTokenStream(adaptor,"token L_case");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_casepattern=new RewriteRuleSubtreeStream(adaptor,"rule casepattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_pure_block=new RewriteRuleSubtreeStream(adaptor,"rule pure_block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:651:2: ( ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block ) -> ^( NIL_TOKEN casepattern pure_block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:651:4: ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block )
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:651:4: ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:651:5: L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block
            {
            L_case401=(Token)match(input,L_case,FOLLOW_L_case_in_lambda_case_expr4332); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_case.add(L_case401);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:651:12: ( NL )?
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==NL) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:651:12: NL
                    {
                    NL402=(Token)match(input,NL,FOLLOW_NL_in_lambda_case_expr4334); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL402);


                    }
                    break;

            }

            pushFollow(FOLLOW_casepattern_in_lambda_case_expr4337);
            casepattern403=casepattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_casepattern.add(casepattern403.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:651:28: ( NL )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==NL) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:651:28: NL
                    {
                    NL404=(Token)match(input,NL,FOLLOW_NL_in_lambda_case_expr4339); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL404);


                    }
                    break;

            }

            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_lambda_case_expr4342);
            token_DOUBLE_ARROW405=token_DOUBLE_ARROW();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW405.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:651:51: ( NL )?
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==NL) ) {
                alt182=1;
            }
            switch (alt182) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:651:51: NL
                    {
                    NL406=(Token)match(input,NL,FOLLOW_NL_in_lambda_case_expr4344); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL406);


                    }
                    break;

            }

            pushFollow(FOLLOW_pure_block_in_lambda_case_expr4347);
            pure_block407=pure_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pure_block.add(pure_block407.getTree());

            }



            // AST REWRITE
            // elements: casepattern, pure_block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 651:67: -> ^( NIL_TOKEN casepattern pure_block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:651:70: ^( NIL_TOKEN casepattern pure_block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_1);

                adaptor.addChild(root_1, stream_casepattern.nextTree());
                adaptor.addChild(root_1, stream_pure_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_case_expr"

    public static class lambda_cases_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_cases"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:653:1: lambda_cases : ( pattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block -> ^( CASES ^( NIL_TOKEN pattern pure_block ) ) | lambda_case_expr ( ( NL )? lambda_case_expr )* -> ^( CASES ( lambda_case_expr )+ ) );
    public final babel17Parser.lambda_cases_return lambda_cases() throws RecognitionException {
        babel17Parser.lambda_cases_return retval = new babel17Parser.lambda_cases_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL409=null;
        Token NL411=null;
        Token NL414=null;
        babel17Parser.pattern_return pattern408 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW410 = null;

        babel17Parser.pure_block_return pure_block412 = null;

        babel17Parser.lambda_case_expr_return lambda_case_expr413 = null;

        babel17Parser.lambda_case_expr_return lambda_case_expr415 = null;


        CommonTree NL409_tree=null;
        CommonTree NL411_tree=null;
        CommonTree NL414_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_lambda_case_expr=new RewriteRuleSubtreeStream(adaptor,"rule lambda_case_expr");
        RewriteRuleSubtreeStream stream_pure_block=new RewriteRuleSubtreeStream(adaptor,"rule pure_block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:654:2: ( pattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block -> ^( CASES ^( NIL_TOKEN pattern pure_block ) ) | lambda_case_expr ( ( NL )? lambda_case_expr )* -> ^( CASES ( lambda_case_expr )+ ) )
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==L_exception||(LA187_0>=L_true && LA187_0<=L_false)||LA187_0==L_nil||LA187_0==MINUS||(LA187_0>=A_ELLIPSIS && LA187_0<=U_ELLIPSIS)||(LA187_0>=Constr && LA187_0<=Id)||LA187_0==Num||(LA187_0>=String && LA187_0<=ROUND_BRACKET_OPEN)||LA187_0==SQUARE_BRACKET_OPEN||LA187_0==CURLY_BRACKET_OPEN||LA187_0==UNDERSCORE) ) {
                alt187=1;
            }
            else if ( (LA187_0==L_case) ) {
                alt187=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 187, 0, input);

                throw nvae;
            }
            switch (alt187) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:654:4: pattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block
                    {
                    pushFollow(FOLLOW_pattern_in_lambda_cases4368);
                    pattern408=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern408.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:654:12: ( NL )?
                    int alt183=2;
                    int LA183_0 = input.LA(1);

                    if ( (LA183_0==NL) ) {
                        alt183=1;
                    }
                    switch (alt183) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:654:12: NL
                            {
                            NL409=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases4370); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL409);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_token_DOUBLE_ARROW_in_lambda_cases4373);
                    token_DOUBLE_ARROW410=token_DOUBLE_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW410.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:654:35: ( NL )?
                    int alt184=2;
                    int LA184_0 = input.LA(1);

                    if ( (LA184_0==NL) ) {
                        alt184=1;
                    }
                    switch (alt184) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:654:35: NL
                            {
                            NL411=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases4375); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL411);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_pure_block_in_lambda_cases4378);
                    pure_block412=pure_block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pure_block.add(pure_block412.getTree());


                    // AST REWRITE
                    // elements: pure_block, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 654:50: -> ^( CASES ^( NIL_TOKEN pattern pure_block ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:654:53: ^( CASES ^( NIL_TOKEN pattern pure_block ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:654:61: ^( NIL_TOKEN pattern pure_block )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        adaptor.addChild(root_2, stream_pattern.nextTree());
                        adaptor.addChild(root_2, stream_pure_block.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:655:4: lambda_case_expr ( ( NL )? lambda_case_expr )*
                    {
                    pushFollow(FOLLOW_lambda_case_expr_in_lambda_cases4397);
                    lambda_case_expr413=lambda_case_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lambda_case_expr.add(lambda_case_expr413.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:655:21: ( ( NL )? lambda_case_expr )*
                    loop186:
                    do {
                        int alt186=2;
                        int LA186_0 = input.LA(1);

                        if ( (LA186_0==NL) ) {
                            int LA186_1 = input.LA(2);

                            if ( (LA186_1==L_case) ) {
                                alt186=1;
                            }


                        }
                        else if ( (LA186_0==L_case) ) {
                            alt186=1;
                        }


                        switch (alt186) {
                    	case 1 :
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:655:22: ( NL )? lambda_case_expr
                    	    {
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:655:22: ( NL )?
                    	    int alt185=2;
                    	    int LA185_0 = input.LA(1);

                    	    if ( (LA185_0==NL) ) {
                    	        alt185=1;
                    	    }
                    	    switch (alt185) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:655:22: NL
                    	            {
                    	            NL414=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases4400); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL414);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_lambda_case_expr_in_lambda_cases4403);
                    	    lambda_case_expr415=lambda_case_expr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_lambda_case_expr.add(lambda_case_expr415.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop186;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: lambda_case_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 655:45: -> ^( CASES ( lambda_case_expr )+ )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:655:48: ^( CASES ( lambda_case_expr )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                        if ( !(stream_lambda_case_expr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_lambda_case_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_lambda_case_expr.nextTree());

                        }
                        stream_lambda_case_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_cases"

    public static class for_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:657:1: for_expr : L_for ( NL )? pattern ( NL )? L_in ( NL )? protected_expr ( NL )? L_do block L_end -> ^( FOR_EXPR pattern protected_expr block ) ;
    public final babel17Parser.for_expr_return for_expr() throws RecognitionException {
        babel17Parser.for_expr_return retval = new babel17Parser.for_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_for416=null;
        Token NL417=null;
        Token NL419=null;
        Token L_in420=null;
        Token NL421=null;
        Token NL423=null;
        Token L_do424=null;
        Token L_end426=null;
        babel17Parser.pattern_return pattern418 = null;

        babel17Parser.protected_expr_return protected_expr422 = null;

        babel17Parser.block_return block425 = null;


        CommonTree L_for416_tree=null;
        CommonTree NL417_tree=null;
        CommonTree NL419_tree=null;
        CommonTree L_in420_tree=null;
        CommonTree NL421_tree=null;
        CommonTree NL423_tree=null;
        CommonTree L_do424_tree=null;
        CommonTree L_end426_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_for=new RewriteRuleTokenStream(adaptor,"token L_for");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_in=new RewriteRuleTokenStream(adaptor,"token L_in");
        RewriteRuleTokenStream stream_L_do=new RewriteRuleTokenStream(adaptor,"token L_do");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:657:9: ( L_for ( NL )? pattern ( NL )? L_in ( NL )? protected_expr ( NL )? L_do block L_end -> ^( FOR_EXPR pattern protected_expr block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:657:11: L_for ( NL )? pattern ( NL )? L_in ( NL )? protected_expr ( NL )? L_do block L_end
            {
            L_for416=(Token)match(input,L_for,FOLLOW_L_for_in_for_expr4421); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_for.add(L_for416);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:657:17: ( NL )?
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==NL) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:657:17: NL
                    {
                    NL417=(Token)match(input,NL,FOLLOW_NL_in_for_expr4423); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL417);


                    }
                    break;

            }

            pushFollow(FOLLOW_pattern_in_for_expr4426);
            pattern418=pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pattern.add(pattern418.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:657:29: ( NL )?
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==NL) ) {
                alt189=1;
            }
            switch (alt189) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:657:29: NL
                    {
                    NL419=(Token)match(input,NL,FOLLOW_NL_in_for_expr4428); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL419);


                    }
                    break;

            }

            L_in420=(Token)match(input,L_in,FOLLOW_L_in_in_for_expr4431); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_in.add(L_in420);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:657:38: ( NL )?
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==NL) ) {
                alt190=1;
            }
            switch (alt190) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:657:38: NL
                    {
                    NL421=(Token)match(input,NL,FOLLOW_NL_in_for_expr4433); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL421);


                    }
                    break;

            }

            pushFollow(FOLLOW_protected_expr_in_for_expr4436);
            protected_expr422=protected_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr422.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:657:57: ( NL )?
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==NL) ) {
                alt191=1;
            }
            switch (alt191) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:657:57: NL
                    {
                    NL423=(Token)match(input,NL,FOLLOW_NL_in_for_expr4438); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL423);


                    }
                    break;

            }

            L_do424=(Token)match(input,L_do,FOLLOW_L_do_in_for_expr4441); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_do.add(L_do424);

            pushFollow(FOLLOW_block_in_for_expr4443);
            block425=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block425.getTree());
            L_end426=(Token)match(input,L_end,FOLLOW_L_end_in_for_expr4445); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end426);



            // AST REWRITE
            // elements: block, pattern, protected_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 658:5: -> ^( FOR_EXPR pattern protected_expr block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:658:8: ^( FOR_EXPR pattern protected_expr block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_EXPR, "FOR_EXPR"), root_1);

                adaptor.addChild(root_1, stream_pattern.nextTree());
                adaptor.addChild(root_1, stream_protected_expr.nextTree());
                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "for_expr"

    public static class op_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "op_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:661:1: op_expr : ( builtin_primitive op_expr | bool_expr );
    public final babel17Parser.op_expr_return op_expr() throws RecognitionException {
        babel17Parser.op_expr_return retval = new babel17Parser.op_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.builtin_primitive_return builtin_primitive427 = null;

        babel17Parser.op_expr_return op_expr428 = null;

        babel17Parser.bool_expr_return bool_expr429 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:662:2: ( builtin_primitive op_expr | bool_expr )
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==L_exception||LA192_0==L_concurrent||LA192_0==L_lazy||LA192_0==L_force) ) {
                alt192=1;
            }
            else if ( (LA192_0==L_begin||(LA192_0>=L_with && LA192_0<=L_if)||(LA192_0>=L_while && LA192_0<=L_for)||LA192_0==L_match||LA192_0==L_try||LA192_0==L_choose||(LA192_0>=L_true && LA192_0<=L_nil)||LA192_0==L_typeof||LA192_0==L_not||(LA192_0>=L_root && LA192_0<=L_native)||LA192_0==MINUS||(LA192_0>=Constr && LA192_0<=Id)||(LA192_0>=Float && LA192_0<=Num)||(LA192_0>=String && LA192_0<=ROUND_BRACKET_OPEN)||LA192_0==SQUARE_BRACKET_OPEN||LA192_0==CURLY_BRACKET_OPEN) ) {
                alt192=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 192, 0, input);

                throw nvae;
            }
            switch (alt192) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:662:4: builtin_primitive op_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_builtin_primitive_in_op_expr4474);
                    builtin_primitive427=builtin_primitive();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(builtin_primitive427.getTree(), root_0);
                    pushFollow(FOLLOW_op_expr_in_op_expr4477);
                    op_expr428=op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op_expr428.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:663:4: bool_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_bool_expr_in_op_expr4482);
                    bool_expr429=bool_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_expr429.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "op_expr"

    public static class p_op_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_op_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:665:1: p_op_expr : ( builtin_primitive ( NL )? p_op_expr | p_bool_expr );
    public final babel17Parser.p_op_expr_return p_op_expr() throws RecognitionException {
        babel17Parser.p_op_expr_return retval = new babel17Parser.p_op_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL431=null;
        babel17Parser.builtin_primitive_return builtin_primitive430 = null;

        babel17Parser.p_op_expr_return p_op_expr432 = null;

        babel17Parser.p_bool_expr_return p_bool_expr433 = null;


        CommonTree NL431_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:666:2: ( builtin_primitive ( NL )? p_op_expr | p_bool_expr )
            int alt194=2;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==L_exception||LA194_0==L_concurrent||LA194_0==L_lazy||LA194_0==L_force) ) {
                alt194=1;
            }
            else if ( (LA194_0==L_begin||(LA194_0>=L_with && LA194_0<=L_if)||(LA194_0>=L_while && LA194_0<=L_for)||LA194_0==L_match||LA194_0==L_try||LA194_0==L_choose||(LA194_0>=L_true && LA194_0<=L_nil)||LA194_0==L_typeof||LA194_0==L_not||(LA194_0>=L_root && LA194_0<=L_native)||LA194_0==MINUS||(LA194_0>=Constr && LA194_0<=Id)||(LA194_0>=Float && LA194_0<=Num)||(LA194_0>=String && LA194_0<=ROUND_BRACKET_OPEN)||LA194_0==SQUARE_BRACKET_OPEN||LA194_0==CURLY_BRACKET_OPEN) ) {
                alt194=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 194, 0, input);

                throw nvae;
            }
            switch (alt194) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:666:4: builtin_primitive ( NL )? p_op_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_builtin_primitive_in_p_op_expr4492);
                    builtin_primitive430=builtin_primitive();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(builtin_primitive430.getTree(), root_0);
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:666:25: ( NL )?
                    int alt193=2;
                    int LA193_0 = input.LA(1);

                    if ( (LA193_0==NL) ) {
                        alt193=1;
                    }
                    switch (alt193) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:666:25: NL
                            {
                            NL431=(Token)match(input,NL,FOLLOW_NL_in_p_op_expr4495); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_op_expr_in_p_op_expr4499);
                    p_op_expr432=p_op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_op_expr432.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:667:4: p_bool_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_bool_expr_in_p_op_expr4504);
                    p_bool_expr433=p_bool_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_expr433.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_op_expr"

    public static class builtin_primitive_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtin_primitive"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:669:1: builtin_primitive : ( L_exception | L_lazy | L_concurrent | L_force );
    public final babel17Parser.builtin_primitive_return builtin_primitive() throws RecognitionException {
        babel17Parser.builtin_primitive_return retval = new babel17Parser.builtin_primitive_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set434=null;

        CommonTree set434_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:670:2: ( L_exception | L_lazy | L_concurrent | L_force )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set434=(Token)input.LT(1);
            if ( input.LA(1)==L_exception||input.LA(1)==L_concurrent||input.LA(1)==L_lazy||input.LA(1)==L_force ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set434));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtin_primitive"

    public static class bool_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bool_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:672:1: bool_expr : bool_or_expr ;
    public final babel17Parser.bool_expr_return bool_expr() throws RecognitionException {
        babel17Parser.bool_expr_return retval = new babel17Parser.bool_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.bool_or_expr_return bool_or_expr435 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:673:2: ( bool_or_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:673:4: bool_or_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_bool_or_expr_in_bool_expr4535);
            bool_or_expr435=bool_or_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_or_expr435.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bool_expr"

    public static class p_bool_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_bool_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:675:1: p_bool_expr : p_bool_or_expr ;
    public final babel17Parser.p_bool_expr_return p_bool_expr() throws RecognitionException {
        babel17Parser.p_bool_expr_return retval = new babel17Parser.p_bool_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.p_bool_or_expr_return p_bool_or_expr436 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:676:2: ( p_bool_or_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:676:4: p_bool_or_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_bool_or_expr_in_p_bool_expr4545);
            p_bool_or_expr436=p_bool_or_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_or_expr436.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_bool_expr"

    public static class bool_or_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bool_or_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:678:1: bool_or_expr : bool_and_expr ( ( NL )? token_OR ( NL )? bool_and_expr )* ;
    public final babel17Parser.bool_or_expr_return bool_or_expr() throws RecognitionException {
        babel17Parser.bool_or_expr_return retval = new babel17Parser.bool_or_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL438=null;
        Token NL440=null;
        babel17Parser.bool_and_expr_return bool_and_expr437 = null;

        babel17Parser.token_OR_return token_OR439 = null;

        babel17Parser.bool_and_expr_return bool_and_expr441 = null;


        CommonTree NL438_tree=null;
        CommonTree NL440_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:679:2: ( bool_and_expr ( ( NL )? token_OR ( NL )? bool_and_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:679:4: bool_and_expr ( ( NL )? token_OR ( NL )? bool_and_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_bool_and_expr_in_bool_or_expr4554);
            bool_and_expr437=bool_and_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_and_expr437.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:679:18: ( ( NL )? token_OR ( NL )? bool_and_expr )*
            loop197:
            do {
                int alt197=2;
                int LA197_0 = input.LA(1);

                if ( (LA197_0==NL) ) {
                    int LA197_1 = input.LA(2);

                    if ( (LA197_1==L_or) ) {
                        alt197=1;
                    }


                }
                else if ( (LA197_0==L_or) ) {
                    alt197=1;
                }


                switch (alt197) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:679:19: ( NL )? token_OR ( NL )? bool_and_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:679:21: ( NL )?
            	    int alt195=2;
            	    int LA195_0 = input.LA(1);

            	    if ( (LA195_0==NL) ) {
            	        alt195=1;
            	    }
            	    switch (alt195) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:679:21: NL
            	            {
            	            NL438=(Token)match(input,NL,FOLLOW_NL_in_bool_or_expr4557); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_OR_in_bool_or_expr4561);
            	    token_OR439=token_OR();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_OR439.getTree(), root_0);
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:679:36: ( NL )?
            	    int alt196=2;
            	    int LA196_0 = input.LA(1);

            	    if ( (LA196_0==NL) ) {
            	        alt196=1;
            	    }
            	    switch (alt196) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:679:36: NL
            	            {
            	            NL440=(Token)match(input,NL,FOLLOW_NL_in_bool_or_expr4564); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_bool_and_expr_in_bool_or_expr4568);
            	    bool_and_expr441=bool_and_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_and_expr441.getTree());

            	    }
            	    break;

            	default :
            	    break loop197;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bool_or_expr"

    public static class p_bool_or_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_bool_or_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:681:1: p_bool_or_expr : p_bool_and_expr ( ( NL )? token_OR ( NL )? p_bool_and_expr )* ;
    public final babel17Parser.p_bool_or_expr_return p_bool_or_expr() throws RecognitionException {
        babel17Parser.p_bool_or_expr_return retval = new babel17Parser.p_bool_or_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL443=null;
        Token NL445=null;
        babel17Parser.p_bool_and_expr_return p_bool_and_expr442 = null;

        babel17Parser.token_OR_return token_OR444 = null;

        babel17Parser.p_bool_and_expr_return p_bool_and_expr446 = null;


        CommonTree NL443_tree=null;
        CommonTree NL445_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:682:2: ( p_bool_and_expr ( ( NL )? token_OR ( NL )? p_bool_and_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:682:4: p_bool_and_expr ( ( NL )? token_OR ( NL )? p_bool_and_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_bool_and_expr_in_p_bool_or_expr4580);
            p_bool_and_expr442=p_bool_and_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_and_expr442.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:682:20: ( ( NL )? token_OR ( NL )? p_bool_and_expr )*
            loop200:
            do {
                int alt200=2;
                int LA200_0 = input.LA(1);

                if ( (LA200_0==NL) ) {
                    int LA200_2 = input.LA(2);

                    if ( (LA200_2==L_or) ) {
                        alt200=1;
                    }


                }
                else if ( (LA200_0==L_or) ) {
                    alt200=1;
                }


                switch (alt200) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:682:21: ( NL )? token_OR ( NL )? p_bool_and_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:682:23: ( NL )?
            	    int alt198=2;
            	    int LA198_0 = input.LA(1);

            	    if ( (LA198_0==NL) ) {
            	        alt198=1;
            	    }
            	    switch (alt198) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:682:23: NL
            	            {
            	            NL443=(Token)match(input,NL,FOLLOW_NL_in_p_bool_or_expr4583); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_OR_in_p_bool_or_expr4587);
            	    token_OR444=token_OR();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_OR444.getTree(), root_0);
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:682:38: ( NL )?
            	    int alt199=2;
            	    int LA199_0 = input.LA(1);

            	    if ( (LA199_0==NL) ) {
            	        alt199=1;
            	    }
            	    switch (alt199) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:682:38: NL
            	            {
            	            NL445=(Token)match(input,NL,FOLLOW_NL_in_p_bool_or_expr4590); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_bool_and_expr_in_p_bool_or_expr4594);
            	    p_bool_and_expr446=p_bool_and_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_and_expr446.getTree());

            	    }
            	    break;

            	default :
            	    break loop200;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_bool_or_expr"

    public static class bool_and_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bool_and_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:684:1: bool_and_expr : bool_not_expr ( ( NL )? token_AND ( NL )? bool_not_expr )* ;
    public final babel17Parser.bool_and_expr_return bool_and_expr() throws RecognitionException {
        babel17Parser.bool_and_expr_return retval = new babel17Parser.bool_and_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL448=null;
        Token NL450=null;
        babel17Parser.bool_not_expr_return bool_not_expr447 = null;

        babel17Parser.token_AND_return token_AND449 = null;

        babel17Parser.bool_not_expr_return bool_not_expr451 = null;


        CommonTree NL448_tree=null;
        CommonTree NL450_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:685:2: ( bool_not_expr ( ( NL )? token_AND ( NL )? bool_not_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:685:4: bool_not_expr ( ( NL )? token_AND ( NL )? bool_not_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_bool_not_expr_in_bool_and_expr4606);
            bool_not_expr447=bool_not_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_not_expr447.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:685:18: ( ( NL )? token_AND ( NL )? bool_not_expr )*
            loop203:
            do {
                int alt203=2;
                int LA203_0 = input.LA(1);

                if ( (LA203_0==NL) ) {
                    int LA203_1 = input.LA(2);

                    if ( (LA203_1==L_and) ) {
                        alt203=1;
                    }


                }
                else if ( (LA203_0==L_and) ) {
                    alt203=1;
                }


                switch (alt203) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:685:19: ( NL )? token_AND ( NL )? bool_not_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:685:21: ( NL )?
            	    int alt201=2;
            	    int LA201_0 = input.LA(1);

            	    if ( (LA201_0==NL) ) {
            	        alt201=1;
            	    }
            	    switch (alt201) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:685:21: NL
            	            {
            	            NL448=(Token)match(input,NL,FOLLOW_NL_in_bool_and_expr4609); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_AND_in_bool_and_expr4613);
            	    token_AND449=token_AND();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_AND449.getTree(), root_0);
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:685:37: ( NL )?
            	    int alt202=2;
            	    int LA202_0 = input.LA(1);

            	    if ( (LA202_0==NL) ) {
            	        alt202=1;
            	    }
            	    switch (alt202) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:685:37: NL
            	            {
            	            NL450=(Token)match(input,NL,FOLLOW_NL_in_bool_and_expr4616); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_bool_not_expr_in_bool_and_expr4620);
            	    bool_not_expr451=bool_not_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_not_expr451.getTree());

            	    }
            	    break;

            	default :
            	    break loop203;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bool_and_expr"

    public static class p_bool_and_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_bool_and_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:687:1: p_bool_and_expr : p_bool_not_expr ( ( NL )? token_AND ( NL )? p_bool_not_expr )* ;
    public final babel17Parser.p_bool_and_expr_return p_bool_and_expr() throws RecognitionException {
        babel17Parser.p_bool_and_expr_return retval = new babel17Parser.p_bool_and_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL453=null;
        Token NL455=null;
        babel17Parser.p_bool_not_expr_return p_bool_not_expr452 = null;

        babel17Parser.token_AND_return token_AND454 = null;

        babel17Parser.p_bool_not_expr_return p_bool_not_expr456 = null;


        CommonTree NL453_tree=null;
        CommonTree NL455_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:688:2: ( p_bool_not_expr ( ( NL )? token_AND ( NL )? p_bool_not_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:688:4: p_bool_not_expr ( ( NL )? token_AND ( NL )? p_bool_not_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_bool_not_expr_in_p_bool_and_expr4632);
            p_bool_not_expr452=p_bool_not_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_not_expr452.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:688:20: ( ( NL )? token_AND ( NL )? p_bool_not_expr )*
            loop206:
            do {
                int alt206=2;
                int LA206_0 = input.LA(1);

                if ( (LA206_0==NL) ) {
                    int LA206_1 = input.LA(2);

                    if ( (LA206_1==L_and) ) {
                        alt206=1;
                    }


                }
                else if ( (LA206_0==L_and) ) {
                    alt206=1;
                }


                switch (alt206) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:688:21: ( NL )? token_AND ( NL )? p_bool_not_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:688:23: ( NL )?
            	    int alt204=2;
            	    int LA204_0 = input.LA(1);

            	    if ( (LA204_0==NL) ) {
            	        alt204=1;
            	    }
            	    switch (alt204) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:688:23: NL
            	            {
            	            NL453=(Token)match(input,NL,FOLLOW_NL_in_p_bool_and_expr4635); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_AND_in_p_bool_and_expr4639);
            	    token_AND454=token_AND();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_AND454.getTree(), root_0);
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:688:39: ( NL )?
            	    int alt205=2;
            	    int LA205_0 = input.LA(1);

            	    if ( (LA205_0==NL) ) {
            	        alt205=1;
            	    }
            	    switch (alt205) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:688:39: NL
            	            {
            	            NL455=(Token)match(input,NL,FOLLOW_NL_in_p_bool_and_expr4642); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_bool_not_expr_in_p_bool_and_expr4646);
            	    p_bool_not_expr456=p_bool_not_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_not_expr456.getTree());

            	    }
            	    break;

            	default :
            	    break loop206;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_bool_and_expr"

    public static class bool_not_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bool_not_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:691:1: bool_not_expr : ( token_NOT ( NL )? bool_not_expr | rel_expr );
    public final babel17Parser.bool_not_expr_return bool_not_expr() throws RecognitionException {
        babel17Parser.bool_not_expr_return retval = new babel17Parser.bool_not_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL458=null;
        babel17Parser.token_NOT_return token_NOT457 = null;

        babel17Parser.bool_not_expr_return bool_not_expr459 = null;

        babel17Parser.rel_expr_return rel_expr460 = null;


        CommonTree NL458_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:692:2: ( token_NOT ( NL )? bool_not_expr | rel_expr )
            int alt208=2;
            int LA208_0 = input.LA(1);

            if ( (LA208_0==L_not) ) {
                alt208=1;
            }
            else if ( (LA208_0==L_begin||(LA208_0>=L_with && LA208_0<=L_if)||(LA208_0>=L_while && LA208_0<=L_for)||LA208_0==L_match||LA208_0==L_try||LA208_0==L_choose||(LA208_0>=L_true && LA208_0<=L_nil)||LA208_0==L_typeof||(LA208_0>=L_root && LA208_0<=L_native)||LA208_0==MINUS||(LA208_0>=Constr && LA208_0<=Id)||(LA208_0>=Float && LA208_0<=Num)||(LA208_0>=String && LA208_0<=ROUND_BRACKET_OPEN)||LA208_0==SQUARE_BRACKET_OPEN||LA208_0==CURLY_BRACKET_OPEN) ) {
                alt208=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 208, 0, input);

                throw nvae;
            }
            switch (alt208) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:692:4: token_NOT ( NL )? bool_not_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_NOT_in_bool_not_expr4658);
                    token_NOT457=token_NOT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_NOT457.getTree(), root_0);
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:692:17: ( NL )?
                    int alt207=2;
                    int LA207_0 = input.LA(1);

                    if ( (LA207_0==NL) ) {
                        alt207=1;
                    }
                    switch (alt207) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:692:17: NL
                            {
                            NL458=(Token)match(input,NL,FOLLOW_NL_in_bool_not_expr4661); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_bool_not_expr_in_bool_not_expr4665);
                    bool_not_expr459=bool_not_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_not_expr459.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:693:4: rel_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rel_expr_in_bool_not_expr4670);
                    rel_expr460=rel_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_expr460.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bool_not_expr"

    public static class p_bool_not_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_bool_not_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:695:1: p_bool_not_expr : ( token_NOT ( NL )? p_bool_not_expr | p_rel_expr );
    public final babel17Parser.p_bool_not_expr_return p_bool_not_expr() throws RecognitionException {
        babel17Parser.p_bool_not_expr_return retval = new babel17Parser.p_bool_not_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL462=null;
        babel17Parser.token_NOT_return token_NOT461 = null;

        babel17Parser.p_bool_not_expr_return p_bool_not_expr463 = null;

        babel17Parser.p_rel_expr_return p_rel_expr464 = null;


        CommonTree NL462_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:696:2: ( token_NOT ( NL )? p_bool_not_expr | p_rel_expr )
            int alt210=2;
            int LA210_0 = input.LA(1);

            if ( (LA210_0==L_not) ) {
                alt210=1;
            }
            else if ( (LA210_0==L_begin||(LA210_0>=L_with && LA210_0<=L_if)||(LA210_0>=L_while && LA210_0<=L_for)||LA210_0==L_match||LA210_0==L_try||LA210_0==L_choose||(LA210_0>=L_true && LA210_0<=L_nil)||LA210_0==L_typeof||(LA210_0>=L_root && LA210_0<=L_native)||LA210_0==MINUS||(LA210_0>=Constr && LA210_0<=Id)||(LA210_0>=Float && LA210_0<=Num)||(LA210_0>=String && LA210_0<=ROUND_BRACKET_OPEN)||LA210_0==SQUARE_BRACKET_OPEN||LA210_0==CURLY_BRACKET_OPEN) ) {
                alt210=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 210, 0, input);

                throw nvae;
            }
            switch (alt210) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:696:4: token_NOT ( NL )? p_bool_not_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_NOT_in_p_bool_not_expr4681);
                    token_NOT461=token_NOT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_NOT461.getTree(), root_0);
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:696:17: ( NL )?
                    int alt209=2;
                    int LA209_0 = input.LA(1);

                    if ( (LA209_0==NL) ) {
                        alt209=1;
                    }
                    switch (alt209) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:696:17: NL
                            {
                            NL462=(Token)match(input,NL,FOLLOW_NL_in_p_bool_not_expr4684); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_bool_not_expr_in_p_bool_not_expr4688);
                    p_bool_not_expr463=p_bool_not_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_not_expr463.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:697:4: p_rel_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_rel_expr_in_p_bool_not_expr4693);
                    p_rel_expr464=p_rel_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_rel_expr464.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_bool_not_expr"

    public static class rel_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rel_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:700:1: rel_expr : relate_expr ( ( NL )? rel_op ( NL )? relate_expr )* -> ^( COMPARE relate_expr ( rel_op relate_expr )* ) ;
    public final babel17Parser.rel_expr_return rel_expr() throws RecognitionException {
        babel17Parser.rel_expr_return retval = new babel17Parser.rel_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL466=null;
        Token NL468=null;
        babel17Parser.relate_expr_return relate_expr465 = null;

        babel17Parser.rel_op_return rel_op467 = null;

        babel17Parser.relate_expr_return relate_expr469 = null;


        CommonTree NL466_tree=null;
        CommonTree NL468_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_relate_expr=new RewriteRuleSubtreeStream(adaptor,"rule relate_expr");
        RewriteRuleSubtreeStream stream_rel_op=new RewriteRuleSubtreeStream(adaptor,"rule rel_op");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:701:2: ( relate_expr ( ( NL )? rel_op ( NL )? relate_expr )* -> ^( COMPARE relate_expr ( rel_op relate_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:701:4: relate_expr ( ( NL )? rel_op ( NL )? relate_expr )*
            {
            pushFollow(FOLLOW_relate_expr_in_rel_expr4703);
            relate_expr465=relate_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_relate_expr.add(relate_expr465.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:701:16: ( ( NL )? rel_op ( NL )? relate_expr )*
            loop213:
            do {
                int alt213=2;
                int LA213_0 = input.LA(1);

                if ( (LA213_0==NL) ) {
                    int LA213_1 = input.LA(2);

                    if ( ((LA213_1>=A_EQUAL && LA213_1<=U_GREATER_EQ)) ) {
                        alt213=1;
                    }


                }
                else if ( ((LA213_0>=A_EQUAL && LA213_0<=U_GREATER_EQ)) ) {
                    alt213=1;
                }


                switch (alt213) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:701:17: ( NL )? rel_op ( NL )? relate_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:701:17: ( NL )?
            	    int alt211=2;
            	    int LA211_0 = input.LA(1);

            	    if ( (LA211_0==NL) ) {
            	        alt211=1;
            	    }
            	    switch (alt211) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:701:17: NL
            	            {
            	            NL466=(Token)match(input,NL,FOLLOW_NL_in_rel_expr4706); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL466);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_rel_op_in_rel_expr4709);
            	    rel_op467=rel_op();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_rel_op.add(rel_op467.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:701:28: ( NL )?
            	    int alt212=2;
            	    int LA212_0 = input.LA(1);

            	    if ( (LA212_0==NL) ) {
            	        alt212=1;
            	    }
            	    switch (alt212) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:701:28: NL
            	            {
            	            NL468=(Token)match(input,NL,FOLLOW_NL_in_rel_expr4711); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL468);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_relate_expr_in_rel_expr4714);
            	    relate_expr469=relate_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_relate_expr.add(relate_expr469.getTree());

            	    }
            	    break;

            	default :
            	    break loop213;
                }
            } while (true);



            // AST REWRITE
            // elements: relate_expr, rel_op, relate_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 701:46: -> ^( COMPARE relate_expr ( rel_op relate_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:701:49: ^( COMPARE relate_expr ( rel_op relate_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPARE, "COMPARE"), root_1);

                adaptor.addChild(root_1, stream_relate_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:701:71: ( rel_op relate_expr )*
                while ( stream_relate_expr.hasNext()||stream_rel_op.hasNext() ) {
                    adaptor.addChild(root_1, stream_rel_op.nextTree());
                    adaptor.addChild(root_1, stream_relate_expr.nextTree());

                }
                stream_relate_expr.reset();
                stream_rel_op.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rel_expr"

    public static class p_rel_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_rel_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:703:1: p_rel_expr : p_relate_expr ( ( NL )? rel_op ( NL )? p_relate_expr )* -> ^( COMPARE p_relate_expr ( rel_op p_relate_expr )* ) ;
    public final babel17Parser.p_rel_expr_return p_rel_expr() throws RecognitionException {
        babel17Parser.p_rel_expr_return retval = new babel17Parser.p_rel_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL471=null;
        Token NL473=null;
        babel17Parser.p_relate_expr_return p_relate_expr470 = null;

        babel17Parser.rel_op_return rel_op472 = null;

        babel17Parser.p_relate_expr_return p_relate_expr474 = null;


        CommonTree NL471_tree=null;
        CommonTree NL473_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_p_relate_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_relate_expr");
        RewriteRuleSubtreeStream stream_rel_op=new RewriteRuleSubtreeStream(adaptor,"rule rel_op");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:704:2: ( p_relate_expr ( ( NL )? rel_op ( NL )? p_relate_expr )* -> ^( COMPARE p_relate_expr ( rel_op p_relate_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:704:4: p_relate_expr ( ( NL )? rel_op ( NL )? p_relate_expr )*
            {
            pushFollow(FOLLOW_p_relate_expr_in_p_rel_expr4741);
            p_relate_expr470=p_relate_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_relate_expr.add(p_relate_expr470.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:704:18: ( ( NL )? rel_op ( NL )? p_relate_expr )*
            loop216:
            do {
                int alt216=2;
                int LA216_0 = input.LA(1);

                if ( (LA216_0==NL) ) {
                    int LA216_1 = input.LA(2);

                    if ( ((LA216_1>=A_EQUAL && LA216_1<=U_GREATER_EQ)) ) {
                        alt216=1;
                    }


                }
                else if ( ((LA216_0>=A_EQUAL && LA216_0<=U_GREATER_EQ)) ) {
                    alt216=1;
                }


                switch (alt216) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:704:19: ( NL )? rel_op ( NL )? p_relate_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:704:19: ( NL )?
            	    int alt214=2;
            	    int LA214_0 = input.LA(1);

            	    if ( (LA214_0==NL) ) {
            	        alt214=1;
            	    }
            	    switch (alt214) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:704:19: NL
            	            {
            	            NL471=(Token)match(input,NL,FOLLOW_NL_in_p_rel_expr4744); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL471);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_rel_op_in_p_rel_expr4747);
            	    rel_op472=rel_op();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_rel_op.add(rel_op472.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:704:30: ( NL )?
            	    int alt215=2;
            	    int LA215_0 = input.LA(1);

            	    if ( (LA215_0==NL) ) {
            	        alt215=1;
            	    }
            	    switch (alt215) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:704:30: NL
            	            {
            	            NL473=(Token)match(input,NL,FOLLOW_NL_in_p_rel_expr4749); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL473);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_relate_expr_in_p_rel_expr4752);
            	    p_relate_expr474=p_relate_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_relate_expr.add(p_relate_expr474.getTree());

            	    }
            	    break;

            	default :
            	    break loop216;
                }
            } while (true);



            // AST REWRITE
            // elements: rel_op, p_relate_expr, p_relate_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 704:50: -> ^( COMPARE p_relate_expr ( rel_op p_relate_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:704:53: ^( COMPARE p_relate_expr ( rel_op p_relate_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPARE, "COMPARE"), root_1);

                adaptor.addChild(root_1, stream_p_relate_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:704:77: ( rel_op p_relate_expr )*
                while ( stream_rel_op.hasNext()||stream_p_relate_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_rel_op.nextTree());
                    adaptor.addChild(root_1, stream_p_relate_expr.nextTree());

                }
                stream_rel_op.reset();
                stream_p_relate_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_rel_expr"

    public static class rel_op_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rel_op"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:1: rel_op : ( token_EQUAL | token_NOT_EQUAL | GREATER | token_GREATER_EQ | LESS | token_LESS_EQ );
    public final babel17Parser.rel_op_return rel_op() throws RecognitionException {
        babel17Parser.rel_op_return retval = new babel17Parser.rel_op_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token GREATER477=null;
        Token LESS479=null;
        babel17Parser.token_EQUAL_return token_EQUAL475 = null;

        babel17Parser.token_NOT_EQUAL_return token_NOT_EQUAL476 = null;

        babel17Parser.token_GREATER_EQ_return token_GREATER_EQ478 = null;

        babel17Parser.token_LESS_EQ_return token_LESS_EQ480 = null;


        CommonTree GREATER477_tree=null;
        CommonTree LESS479_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:8: ( token_EQUAL | token_NOT_EQUAL | GREATER | token_GREATER_EQ | LESS | token_LESS_EQ )
            int alt217=6;
            switch ( input.LA(1) ) {
            case A_EQUAL:
            case U_EQUAL:
                {
                alt217=1;
                }
                break;
            case A_NOT_EQUAL:
            case U_NOT_EQUAL:
                {
                alt217=2;
                }
                break;
            case GREATER:
                {
                alt217=3;
                }
                break;
            case A_GREATER_EQ:
            case U_GREATER_EQ:
                {
                alt217=4;
                }
                break;
            case LESS:
                {
                alt217=5;
                }
                break;
            case A_LESS_EQ:
            case U_LESS_EQ:
                {
                alt217=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 217, 0, input);

                throw nvae;
            }

            switch (alt217) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:10: token_EQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_EQUAL_in_rel_op4778);
                    token_EQUAL475=token_EQUAL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_EQUAL475.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:24: token_NOT_EQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_NOT_EQUAL_in_rel_op4782);
                    token_NOT_EQUAL476=token_NOT_EQUAL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_NOT_EQUAL476.getTree());

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:42: GREATER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    GREATER477=(Token)match(input,GREATER,FOLLOW_GREATER_in_rel_op4786); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER477_tree = (CommonTree)adaptor.create(GREATER477);
                    adaptor.addChild(root_0, GREATER477_tree);
                    }

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:52: token_GREATER_EQ
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_GREATER_EQ_in_rel_op4790);
                    token_GREATER_EQ478=token_GREATER_EQ();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_GREATER_EQ478.getTree());

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:71: LESS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LESS479=(Token)match(input,LESS,FOLLOW_LESS_in_rel_op4794); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LESS479_tree = (CommonTree)adaptor.create(LESS479);
                    adaptor.addChild(root_0, LESS479_tree);
                    }

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:78: token_LESS_EQ
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_LESS_EQ_in_rel_op4798);
                    token_LESS_EQ480=token_LESS_EQ();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_LESS_EQ480.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rel_op"

    public static class relate_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relate_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:1: relate_expr : convert_expr ( ( NL )? TOK_RELATE ( NL )? convert_expr )? -> ^( RELATE ( convert_expr )* ) ;
    public final babel17Parser.relate_expr_return relate_expr() throws RecognitionException {
        babel17Parser.relate_expr_return retval = new babel17Parser.relate_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL482=null;
        Token TOK_RELATE483=null;
        Token NL484=null;
        babel17Parser.convert_expr_return convert_expr481 = null;

        babel17Parser.convert_expr_return convert_expr485 = null;


        CommonTree NL482_tree=null;
        CommonTree TOK_RELATE483_tree=null;
        CommonTree NL484_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_TOK_RELATE=new RewriteRuleTokenStream(adaptor,"token TOK_RELATE");
        RewriteRuleSubtreeStream stream_convert_expr=new RewriteRuleSubtreeStream(adaptor,"rule convert_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:12: ( convert_expr ( ( NL )? TOK_RELATE ( NL )? convert_expr )? -> ^( RELATE ( convert_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:14: convert_expr ( ( NL )? TOK_RELATE ( NL )? convert_expr )?
            {
            pushFollow(FOLLOW_convert_expr_in_relate_expr4807);
            convert_expr481=convert_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_convert_expr.add(convert_expr481.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:27: ( ( NL )? TOK_RELATE ( NL )? convert_expr )?
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( (LA220_0==NL) ) {
                int LA220_1 = input.LA(2);

                if ( (LA220_1==TOK_RELATE) ) {
                    alt220=1;
                }
            }
            else if ( (LA220_0==TOK_RELATE) ) {
                alt220=1;
            }
            switch (alt220) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:28: ( NL )? TOK_RELATE ( NL )? convert_expr
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:28: ( NL )?
                    int alt218=2;
                    int LA218_0 = input.LA(1);

                    if ( (LA218_0==NL) ) {
                        alt218=1;
                    }
                    switch (alt218) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:28: NL
                            {
                            NL482=(Token)match(input,NL,FOLLOW_NL_in_relate_expr4810); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL482);


                            }
                            break;

                    }

                    TOK_RELATE483=(Token)match(input,TOK_RELATE,FOLLOW_TOK_RELATE_in_relate_expr4813); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TOK_RELATE.add(TOK_RELATE483);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:43: ( NL )?
                    int alt219=2;
                    int LA219_0 = input.LA(1);

                    if ( (LA219_0==NL) ) {
                        alt219=1;
                    }
                    switch (alt219) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:43: NL
                            {
                            NL484=(Token)match(input,NL,FOLLOW_NL_in_relate_expr4815); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL484);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_convert_expr_in_relate_expr4818);
                    convert_expr485=convert_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_convert_expr.add(convert_expr485.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: convert_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 709:62: -> ^( RELATE ( convert_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:65: ^( RELATE ( convert_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RELATE, "RELATE"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:74: ( convert_expr )*
                while ( stream_convert_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_convert_expr.nextTree());

                }
                stream_convert_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "relate_expr"

    public static class p_relate_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_relate_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:711:1: p_relate_expr : p_convert_expr ( ( NL )? TOK_RELATE ( NL )? p_convert_expr )? -> ^( RELATE ( p_convert_expr )* ) ;
    public final babel17Parser.p_relate_expr_return p_relate_expr() throws RecognitionException {
        babel17Parser.p_relate_expr_return retval = new babel17Parser.p_relate_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL487=null;
        Token TOK_RELATE488=null;
        Token NL489=null;
        babel17Parser.p_convert_expr_return p_convert_expr486 = null;

        babel17Parser.p_convert_expr_return p_convert_expr490 = null;


        CommonTree NL487_tree=null;
        CommonTree TOK_RELATE488_tree=null;
        CommonTree NL489_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_TOK_RELATE=new RewriteRuleTokenStream(adaptor,"token TOK_RELATE");
        RewriteRuleSubtreeStream stream_p_convert_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_convert_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:711:14: ( p_convert_expr ( ( NL )? TOK_RELATE ( NL )? p_convert_expr )? -> ^( RELATE ( p_convert_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:711:16: p_convert_expr ( ( NL )? TOK_RELATE ( NL )? p_convert_expr )?
            {
            pushFollow(FOLLOW_p_convert_expr_in_p_relate_expr4837);
            p_convert_expr486=p_convert_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_convert_expr.add(p_convert_expr486.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:711:31: ( ( NL )? TOK_RELATE ( NL )? p_convert_expr )?
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==NL) ) {
                int LA223_1 = input.LA(2);

                if ( (LA223_1==TOK_RELATE) ) {
                    alt223=1;
                }
            }
            else if ( (LA223_0==TOK_RELATE) ) {
                alt223=1;
            }
            switch (alt223) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:711:32: ( NL )? TOK_RELATE ( NL )? p_convert_expr
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:711:32: ( NL )?
                    int alt221=2;
                    int LA221_0 = input.LA(1);

                    if ( (LA221_0==NL) ) {
                        alt221=1;
                    }
                    switch (alt221) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:711:32: NL
                            {
                            NL487=(Token)match(input,NL,FOLLOW_NL_in_p_relate_expr4840); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL487);


                            }
                            break;

                    }

                    TOK_RELATE488=(Token)match(input,TOK_RELATE,FOLLOW_TOK_RELATE_in_p_relate_expr4843); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TOK_RELATE.add(TOK_RELATE488);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:711:47: ( NL )?
                    int alt222=2;
                    int LA222_0 = input.LA(1);

                    if ( (LA222_0==NL) ) {
                        alt222=1;
                    }
                    switch (alt222) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:711:47: NL
                            {
                            NL489=(Token)match(input,NL,FOLLOW_NL_in_p_relate_expr4845); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL489);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_convert_expr_in_p_relate_expr4848);
                    p_convert_expr490=p_convert_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_convert_expr.add(p_convert_expr490.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: p_convert_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 711:68: -> ^( RELATE ( p_convert_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:711:71: ^( RELATE ( p_convert_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RELATE, "RELATE"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:711:80: ( p_convert_expr )*
                while ( stream_p_convert_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_convert_expr.nextTree());

                }
                stream_p_convert_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_relate_expr"

    public static class convert_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "convert_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:713:1: convert_expr : term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )? -> ^( CONVERT term_expr ( typeannotation )? ) ;
    public final babel17Parser.convert_expr_return convert_expr() throws RecognitionException {
        babel17Parser.convert_expr_return retval = new babel17Parser.convert_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL492=null;
        Token TOK_CONVERT493=null;
        Token NL494=null;
        babel17Parser.term_expr_return term_expr491 = null;

        babel17Parser.typeannotation_return typeannotation495 = null;


        CommonTree NL492_tree=null;
        CommonTree TOK_CONVERT493_tree=null;
        CommonTree NL494_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_TOK_CONVERT=new RewriteRuleTokenStream(adaptor,"token TOK_CONVERT");
        RewriteRuleSubtreeStream stream_typeannotation=new RewriteRuleSubtreeStream(adaptor,"rule typeannotation");
        RewriteRuleSubtreeStream stream_term_expr=new RewriteRuleSubtreeStream(adaptor,"rule term_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:714:2: ( term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )? -> ^( CONVERT term_expr ( typeannotation )? ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:714:4: term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )?
            {
            pushFollow(FOLLOW_term_expr_in_convert_expr4869);
            term_expr491=term_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_term_expr.add(term_expr491.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:714:14: ( ( NL )? TOK_CONVERT ( NL )? typeannotation )?
            int alt226=2;
            int LA226_0 = input.LA(1);

            if ( (LA226_0==NL) ) {
                int LA226_1 = input.LA(2);

                if ( (LA226_1==TOK_CONVERT) ) {
                    alt226=1;
                }
            }
            else if ( (LA226_0==TOK_CONVERT) ) {
                alt226=1;
            }
            switch (alt226) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:714:15: ( NL )? TOK_CONVERT ( NL )? typeannotation
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:714:15: ( NL )?
                    int alt224=2;
                    int LA224_0 = input.LA(1);

                    if ( (LA224_0==NL) ) {
                        alt224=1;
                    }
                    switch (alt224) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:714:15: NL
                            {
                            NL492=(Token)match(input,NL,FOLLOW_NL_in_convert_expr4872); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL492);


                            }
                            break;

                    }

                    TOK_CONVERT493=(Token)match(input,TOK_CONVERT,FOLLOW_TOK_CONVERT_in_convert_expr4875); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TOK_CONVERT.add(TOK_CONVERT493);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:714:31: ( NL )?
                    int alt225=2;
                    int LA225_0 = input.LA(1);

                    if ( (LA225_0==NL) ) {
                        alt225=1;
                    }
                    switch (alt225) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:714:31: NL
                            {
                            NL494=(Token)match(input,NL,FOLLOW_NL_in_convert_expr4877); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL494);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeannotation_in_convert_expr4880);
                    typeannotation495=typeannotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeannotation.add(typeannotation495.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: typeannotation, term_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 714:52: -> ^( CONVERT term_expr ( typeannotation )? )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:714:55: ^( CONVERT term_expr ( typeannotation )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONVERT, "CONVERT"), root_1);

                adaptor.addChild(root_1, stream_term_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:714:75: ( typeannotation )?
                if ( stream_typeannotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeannotation.nextTree());

                }
                stream_typeannotation.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "convert_expr"

    public static class p_convert_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_convert_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:716:1: p_convert_expr : p_term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )? -> ^( CONVERT p_term_expr ( typeannotation )? ) ;
    public final babel17Parser.p_convert_expr_return p_convert_expr() throws RecognitionException {
        babel17Parser.p_convert_expr_return retval = new babel17Parser.p_convert_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL497=null;
        Token TOK_CONVERT498=null;
        Token NL499=null;
        babel17Parser.p_term_expr_return p_term_expr496 = null;

        babel17Parser.typeannotation_return typeannotation500 = null;


        CommonTree NL497_tree=null;
        CommonTree TOK_CONVERT498_tree=null;
        CommonTree NL499_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_TOK_CONVERT=new RewriteRuleTokenStream(adaptor,"token TOK_CONVERT");
        RewriteRuleSubtreeStream stream_typeannotation=new RewriteRuleSubtreeStream(adaptor,"rule typeannotation");
        RewriteRuleSubtreeStream stream_p_term_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_term_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:717:2: ( p_term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )? -> ^( CONVERT p_term_expr ( typeannotation )? ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:717:4: p_term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )?
            {
            pushFollow(FOLLOW_p_term_expr_in_p_convert_expr4902);
            p_term_expr496=p_term_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_term_expr.add(p_term_expr496.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:717:16: ( ( NL )? TOK_CONVERT ( NL )? typeannotation )?
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( (LA229_0==NL) ) {
                int LA229_1 = input.LA(2);

                if ( (LA229_1==TOK_CONVERT) ) {
                    alt229=1;
                }
            }
            else if ( (LA229_0==TOK_CONVERT) ) {
                alt229=1;
            }
            switch (alt229) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:717:17: ( NL )? TOK_CONVERT ( NL )? typeannotation
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:717:17: ( NL )?
                    int alt227=2;
                    int LA227_0 = input.LA(1);

                    if ( (LA227_0==NL) ) {
                        alt227=1;
                    }
                    switch (alt227) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:717:17: NL
                            {
                            NL497=(Token)match(input,NL,FOLLOW_NL_in_p_convert_expr4905); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL497);


                            }
                            break;

                    }

                    TOK_CONVERT498=(Token)match(input,TOK_CONVERT,FOLLOW_TOK_CONVERT_in_p_convert_expr4908); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TOK_CONVERT.add(TOK_CONVERT498);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:717:33: ( NL )?
                    int alt228=2;
                    int LA228_0 = input.LA(1);

                    if ( (LA228_0==NL) ) {
                        alt228=1;
                    }
                    switch (alt228) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:717:33: NL
                            {
                            NL499=(Token)match(input,NL,FOLLOW_NL_in_p_convert_expr4910); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL499);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeannotation_in_p_convert_expr4913);
                    typeannotation500=typeannotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeannotation.add(typeannotation500.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: p_term_expr, typeannotation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 717:54: -> ^( CONVERT p_term_expr ( typeannotation )? )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:717:57: ^( CONVERT p_term_expr ( typeannotation )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONVERT, "CONVERT"), root_1);

                adaptor.addChild(root_1, stream_p_term_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:717:79: ( typeannotation )?
                if ( stream_typeannotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeannotation.nextTree());

                }
                stream_typeannotation.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_convert_expr"

    public static class term_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "term_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:719:1: term_expr : ( builtin_fun term_expr | arith_expr );
    public final babel17Parser.term_expr_return term_expr() throws RecognitionException {
        babel17Parser.term_expr_return retval = new babel17Parser.term_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.builtin_fun_return builtin_fun501 = null;

        babel17Parser.term_expr_return term_expr502 = null;

        babel17Parser.arith_expr_return arith_expr503 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:720:2: ( builtin_fun term_expr | arith_expr )
            int alt230=2;
            int LA230_0 = input.LA(1);

            if ( (LA230_0==L_choose||LA230_0==L_random||LA230_0==L_typeof||LA230_0==L_native) ) {
                alt230=1;
            }
            else if ( (LA230_0==L_begin||(LA230_0>=L_with && LA230_0<=L_if)||(LA230_0>=L_while && LA230_0<=L_for)||LA230_0==L_match||LA230_0==L_try||(LA230_0>=L_true && LA230_0<=L_this)||LA230_0==L_nil||LA230_0==L_root||LA230_0==MINUS||(LA230_0>=Constr && LA230_0<=Id)||(LA230_0>=Float && LA230_0<=Num)||(LA230_0>=String && LA230_0<=ROUND_BRACKET_OPEN)||LA230_0==SQUARE_BRACKET_OPEN||LA230_0==CURLY_BRACKET_OPEN) ) {
                alt230=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 230, 0, input);

                throw nvae;
            }
            switch (alt230) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:720:4: builtin_fun term_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_builtin_fun_in_term_expr4936);
                    builtin_fun501=builtin_fun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(builtin_fun501.getTree(), root_0);
                    pushFollow(FOLLOW_term_expr_in_term_expr4939);
                    term_expr502=term_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, term_expr502.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:721:4: arith_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arith_expr_in_term_expr4944);
                    arith_expr503=arith_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_expr503.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "term_expr"

    public static class p_term_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_term_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:723:1: p_term_expr : ( builtin_fun ( NL )? p_term_expr | p_arith_expr );
    public final babel17Parser.p_term_expr_return p_term_expr() throws RecognitionException {
        babel17Parser.p_term_expr_return retval = new babel17Parser.p_term_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL505=null;
        babel17Parser.builtin_fun_return builtin_fun504 = null;

        babel17Parser.p_term_expr_return p_term_expr506 = null;

        babel17Parser.p_arith_expr_return p_arith_expr507 = null;


        CommonTree NL505_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:724:2: ( builtin_fun ( NL )? p_term_expr | p_arith_expr )
            int alt232=2;
            int LA232_0 = input.LA(1);

            if ( (LA232_0==L_choose||LA232_0==L_random||LA232_0==L_typeof||LA232_0==L_native) ) {
                alt232=1;
            }
            else if ( (LA232_0==L_begin||(LA232_0>=L_with && LA232_0<=L_if)||(LA232_0>=L_while && LA232_0<=L_for)||LA232_0==L_match||LA232_0==L_try||(LA232_0>=L_true && LA232_0<=L_this)||LA232_0==L_nil||LA232_0==L_root||LA232_0==MINUS||(LA232_0>=Constr && LA232_0<=Id)||(LA232_0>=Float && LA232_0<=Num)||(LA232_0>=String && LA232_0<=ROUND_BRACKET_OPEN)||LA232_0==SQUARE_BRACKET_OPEN||LA232_0==CURLY_BRACKET_OPEN) ) {
                alt232=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 232, 0, input);

                throw nvae;
            }
            switch (alt232) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:724:4: builtin_fun ( NL )? p_term_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_builtin_fun_in_p_term_expr4954);
                    builtin_fun504=builtin_fun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(builtin_fun504.getTree(), root_0);
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:724:19: ( NL )?
                    int alt231=2;
                    int LA231_0 = input.LA(1);

                    if ( (LA231_0==NL) ) {
                        alt231=1;
                    }
                    switch (alt231) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:724:19: NL
                            {
                            NL505=(Token)match(input,NL,FOLLOW_NL_in_p_term_expr4957); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_term_expr_in_p_term_expr4961);
                    p_term_expr506=p_term_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_term_expr506.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:725:4: p_arith_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_arith_expr_in_p_term_expr4966);
                    p_arith_expr507=p_arith_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_expr507.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_term_expr"

    public static class builtin_fun_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtin_fun"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:727:1: builtin_fun : ( L_random | L_choose | L_typeof | L_native );
    public final babel17Parser.builtin_fun_return builtin_fun() throws RecognitionException {
        babel17Parser.builtin_fun_return retval = new babel17Parser.builtin_fun_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set508=null;

        CommonTree set508_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:728:2: ( L_random | L_choose | L_typeof | L_native )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set508=(Token)input.LT(1);
            if ( input.LA(1)==L_choose||input.LA(1)==L_random||input.LA(1)==L_typeof||input.LA(1)==L_native ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set508));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtin_fun"

    public static class arith_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:730:1: arith_expr : plusplus_expr ;
    public final babel17Parser.arith_expr_return arith_expr() throws RecognitionException {
        babel17Parser.arith_expr_return retval = new babel17Parser.arith_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.plusplus_expr_return plusplus_expr509 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:731:2: ( plusplus_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:731:4: plusplus_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_plusplus_expr_in_arith_expr4996);
            plusplus_expr509=plusplus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, plusplus_expr509.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_expr"

    public static class p_arith_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:733:1: p_arith_expr : p_plusplus_expr ;
    public final babel17Parser.p_arith_expr_return p_arith_expr() throws RecognitionException {
        babel17Parser.p_arith_expr_return retval = new babel17Parser.p_arith_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.p_plusplus_expr_return p_plusplus_expr510 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:734:2: ( p_plusplus_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:734:4: p_plusplus_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_plusplus_expr_in_p_arith_expr5005);
            p_plusplus_expr510=p_plusplus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_plusplus_expr510.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_expr"

    public static class plusplus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "plusplus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:1: plusplus_expr : timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr )* ;
    public final babel17Parser.plusplus_expr_return plusplus_expr() throws RecognitionException {
        babel17Parser.plusplus_expr_return retval = new babel17Parser.plusplus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL512=null;
        Token PLUSPLUS513=null;
        Token MINUSMINUS514=null;
        Token NL515=null;
        babel17Parser.timestimes_expr_return timestimes_expr511 = null;

        babel17Parser.timestimes_expr_return timestimes_expr516 = null;


        CommonTree NL512_tree=null;
        CommonTree PLUSPLUS513_tree=null;
        CommonTree MINUSMINUS514_tree=null;
        CommonTree NL515_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:2: ( timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:4: timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_timestimes_expr_in_plusplus_expr5015);
            timestimes_expr511=timestimes_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, timestimes_expr511.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:20: ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr )*
            loop236:
            do {
                int alt236=2;
                int LA236_0 = input.LA(1);

                if ( (LA236_0==NL) ) {
                    int LA236_1 = input.LA(2);

                    if ( ((LA236_1>=PLUSPLUS && LA236_1<=MINUSMINUS)) ) {
                        alt236=1;
                    }


                }
                else if ( ((LA236_0>=PLUSPLUS && LA236_0<=MINUSMINUS)) ) {
                    alt236=1;
                }


                switch (alt236) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:21: ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:23: ( NL )?
            	    int alt233=2;
            	    int LA233_0 = input.LA(1);

            	    if ( (LA233_0==NL) ) {
            	        alt233=1;
            	    }
            	    switch (alt233) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:23: NL
            	            {
            	            NL512=(Token)match(input,NL,FOLLOW_NL_in_plusplus_expr5018); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:26: ( PLUSPLUS | MINUSMINUS )
            	    int alt234=2;
            	    int LA234_0 = input.LA(1);

            	    if ( (LA234_0==PLUSPLUS) ) {
            	        alt234=1;
            	    }
            	    else if ( (LA234_0==MINUSMINUS) ) {
            	        alt234=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 234, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt234) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:27: PLUSPLUS
            	            {
            	            PLUSPLUS513=(Token)match(input,PLUSPLUS,FOLLOW_PLUSPLUS_in_plusplus_expr5023); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUSPLUS513_tree = (CommonTree)adaptor.create(PLUSPLUS513);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUSPLUS513_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:37: MINUSMINUS
            	            {
            	            MINUSMINUS514=(Token)match(input,MINUSMINUS,FOLLOW_MINUSMINUS_in_plusplus_expr5026); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUSMINUS514_tree = (CommonTree)adaptor.create(MINUSMINUS514);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUSMINUS514_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:52: ( NL )?
            	    int alt235=2;
            	    int LA235_0 = input.LA(1);

            	    if ( (LA235_0==NL) ) {
            	        alt235=1;
            	    }
            	    switch (alt235) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:52: NL
            	            {
            	            NL515=(Token)match(input,NL,FOLLOW_NL_in_plusplus_expr5030); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_timestimes_expr_in_plusplus_expr5034);
            	    timestimes_expr516=timestimes_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, timestimes_expr516.getTree());

            	    }
            	    break;

            	default :
            	    break loop236;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "plusplus_expr"

    public static class p_plusplus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_plusplus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:739:1: p_plusplus_expr : p_timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr )* ;
    public final babel17Parser.p_plusplus_expr_return p_plusplus_expr() throws RecognitionException {
        babel17Parser.p_plusplus_expr_return retval = new babel17Parser.p_plusplus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL518=null;
        Token PLUSPLUS519=null;
        Token MINUSMINUS520=null;
        Token NL521=null;
        babel17Parser.p_timestimes_expr_return p_timestimes_expr517 = null;

        babel17Parser.p_timestimes_expr_return p_timestimes_expr522 = null;


        CommonTree NL518_tree=null;
        CommonTree PLUSPLUS519_tree=null;
        CommonTree MINUSMINUS520_tree=null;
        CommonTree NL521_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:2: ( p_timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:4: p_timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_timestimes_expr_in_p_plusplus_expr5046);
            p_timestimes_expr517=p_timestimes_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_timestimes_expr517.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:22: ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr )*
            loop240:
            do {
                int alt240=2;
                int LA240_0 = input.LA(1);

                if ( (LA240_0==NL) ) {
                    int LA240_1 = input.LA(2);

                    if ( ((LA240_1>=PLUSPLUS && LA240_1<=MINUSMINUS)) ) {
                        alt240=1;
                    }


                }
                else if ( ((LA240_0>=PLUSPLUS && LA240_0<=MINUSMINUS)) ) {
                    alt240=1;
                }


                switch (alt240) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:23: ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:25: ( NL )?
            	    int alt237=2;
            	    int LA237_0 = input.LA(1);

            	    if ( (LA237_0==NL) ) {
            	        alt237=1;
            	    }
            	    switch (alt237) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:25: NL
            	            {
            	            NL518=(Token)match(input,NL,FOLLOW_NL_in_p_plusplus_expr5049); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:28: ( PLUSPLUS | MINUSMINUS )
            	    int alt238=2;
            	    int LA238_0 = input.LA(1);

            	    if ( (LA238_0==PLUSPLUS) ) {
            	        alt238=1;
            	    }
            	    else if ( (LA238_0==MINUSMINUS) ) {
            	        alt238=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 238, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt238) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:29: PLUSPLUS
            	            {
            	            PLUSPLUS519=(Token)match(input,PLUSPLUS,FOLLOW_PLUSPLUS_in_p_plusplus_expr5054); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUSPLUS519_tree = (CommonTree)adaptor.create(PLUSPLUS519);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUSPLUS519_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:39: MINUSMINUS
            	            {
            	            MINUSMINUS520=(Token)match(input,MINUSMINUS,FOLLOW_MINUSMINUS_in_p_plusplus_expr5057); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUSMINUS520_tree = (CommonTree)adaptor.create(MINUSMINUS520);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUSMINUS520_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:54: ( NL )?
            	    int alt239=2;
            	    int LA239_0 = input.LA(1);

            	    if ( (LA239_0==NL) ) {
            	        alt239=1;
            	    }
            	    switch (alt239) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:54: NL
            	            {
            	            NL521=(Token)match(input,NL,FOLLOW_NL_in_p_plusplus_expr5061); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_timestimes_expr_in_p_plusplus_expr5065);
            	    p_timestimes_expr522=p_timestimes_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_timestimes_expr522.getTree());

            	    }
            	    break;

            	default :
            	    break loop240;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_plusplus_expr"

    public static class timestimes_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timestimes_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:743:1: timestimes_expr : simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr )* ;
    public final babel17Parser.timestimes_expr_return timestimes_expr() throws RecognitionException {
        babel17Parser.timestimes_expr_return retval = new babel17Parser.timestimes_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL524=null;
        Token TIMESTIMES525=null;
        Token QUOTIENTQUOTIENT526=null;
        Token NL527=null;
        babel17Parser.simple_expr_return simple_expr523 = null;

        babel17Parser.simple_expr_return simple_expr528 = null;


        CommonTree NL524_tree=null;
        CommonTree TIMESTIMES525_tree=null;
        CommonTree QUOTIENTQUOTIENT526_tree=null;
        CommonTree NL527_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:744:2: ( simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:744:4: simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_simple_expr_in_timestimes_expr5077);
            simple_expr523=simple_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expr523.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:744:16: ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr )*
            loop244:
            do {
                int alt244=2;
                int LA244_0 = input.LA(1);

                if ( (LA244_0==NL) ) {
                    int LA244_1 = input.LA(2);

                    if ( ((LA244_1>=TIMESTIMES && LA244_1<=QUOTIENTQUOTIENT)) ) {
                        alt244=1;
                    }


                }
                else if ( ((LA244_0>=TIMESTIMES && LA244_0<=QUOTIENTQUOTIENT)) ) {
                    alt244=1;
                }


                switch (alt244) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:744:17: ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:744:19: ( NL )?
            	    int alt241=2;
            	    int LA241_0 = input.LA(1);

            	    if ( (LA241_0==NL) ) {
            	        alt241=1;
            	    }
            	    switch (alt241) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:744:19: NL
            	            {
            	            NL524=(Token)match(input,NL,FOLLOW_NL_in_timestimes_expr5080); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:744:22: ( TIMESTIMES | QUOTIENTQUOTIENT )
            	    int alt242=2;
            	    int LA242_0 = input.LA(1);

            	    if ( (LA242_0==TIMESTIMES) ) {
            	        alt242=1;
            	    }
            	    else if ( (LA242_0==QUOTIENTQUOTIENT) ) {
            	        alt242=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 242, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt242) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:744:23: TIMESTIMES
            	            {
            	            TIMESTIMES525=(Token)match(input,TIMESTIMES,FOLLOW_TIMESTIMES_in_timestimes_expr5085); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            TIMESTIMES525_tree = (CommonTree)adaptor.create(TIMESTIMES525);
            	            root_0 = (CommonTree)adaptor.becomeRoot(TIMESTIMES525_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:744:35: QUOTIENTQUOTIENT
            	            {
            	            QUOTIENTQUOTIENT526=(Token)match(input,QUOTIENTQUOTIENT,FOLLOW_QUOTIENTQUOTIENT_in_timestimes_expr5088); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            QUOTIENTQUOTIENT526_tree = (CommonTree)adaptor.create(QUOTIENTQUOTIENT526);
            	            root_0 = (CommonTree)adaptor.becomeRoot(QUOTIENTQUOTIENT526_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:744:56: ( NL )?
            	    int alt243=2;
            	    int LA243_0 = input.LA(1);

            	    if ( (LA243_0==NL) ) {
            	        alt243=1;
            	    }
            	    switch (alt243) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:744:56: NL
            	            {
            	            NL527=(Token)match(input,NL,FOLLOW_NL_in_timestimes_expr5092); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_simple_expr_in_timestimes_expr5096);
            	    simple_expr528=simple_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expr528.getTree());

            	    }
            	    break;

            	default :
            	    break loop244;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timestimes_expr"

    public static class p_timestimes_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_timestimes_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:746:1: p_timestimes_expr : p_simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr )* ;
    public final babel17Parser.p_timestimes_expr_return p_timestimes_expr() throws RecognitionException {
        babel17Parser.p_timestimes_expr_return retval = new babel17Parser.p_timestimes_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL530=null;
        Token TIMESTIMES531=null;
        Token QUOTIENTQUOTIENT532=null;
        Token NL533=null;
        babel17Parser.p_simple_expr_return p_simple_expr529 = null;

        babel17Parser.p_simple_expr_return p_simple_expr534 = null;


        CommonTree NL530_tree=null;
        CommonTree TIMESTIMES531_tree=null;
        CommonTree QUOTIENTQUOTIENT532_tree=null;
        CommonTree NL533_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:747:2: ( p_simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:747:4: p_simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_simple_expr_in_p_timestimes_expr5109);
            p_simple_expr529=p_simple_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_simple_expr529.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:747:18: ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr )*
            loop248:
            do {
                int alt248=2;
                int LA248_0 = input.LA(1);

                if ( (LA248_0==NL) ) {
                    int LA248_1 = input.LA(2);

                    if ( ((LA248_1>=TIMESTIMES && LA248_1<=QUOTIENTQUOTIENT)) ) {
                        alt248=1;
                    }


                }
                else if ( ((LA248_0>=TIMESTIMES && LA248_0<=QUOTIENTQUOTIENT)) ) {
                    alt248=1;
                }


                switch (alt248) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:747:19: ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:747:21: ( NL )?
            	    int alt245=2;
            	    int LA245_0 = input.LA(1);

            	    if ( (LA245_0==NL) ) {
            	        alt245=1;
            	    }
            	    switch (alt245) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:747:21: NL
            	            {
            	            NL530=(Token)match(input,NL,FOLLOW_NL_in_p_timestimes_expr5112); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:747:24: ( TIMESTIMES | QUOTIENTQUOTIENT )
            	    int alt246=2;
            	    int LA246_0 = input.LA(1);

            	    if ( (LA246_0==TIMESTIMES) ) {
            	        alt246=1;
            	    }
            	    else if ( (LA246_0==QUOTIENTQUOTIENT) ) {
            	        alt246=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 246, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt246) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:747:25: TIMESTIMES
            	            {
            	            TIMESTIMES531=(Token)match(input,TIMESTIMES,FOLLOW_TIMESTIMES_in_p_timestimes_expr5117); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            TIMESTIMES531_tree = (CommonTree)adaptor.create(TIMESTIMES531);
            	            root_0 = (CommonTree)adaptor.becomeRoot(TIMESTIMES531_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:747:37: QUOTIENTQUOTIENT
            	            {
            	            QUOTIENTQUOTIENT532=(Token)match(input,QUOTIENTQUOTIENT,FOLLOW_QUOTIENTQUOTIENT_in_p_timestimes_expr5120); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            QUOTIENTQUOTIENT532_tree = (CommonTree)adaptor.create(QUOTIENTQUOTIENT532);
            	            root_0 = (CommonTree)adaptor.becomeRoot(QUOTIENTQUOTIENT532_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:747:58: ( NL )?
            	    int alt247=2;
            	    int LA247_0 = input.LA(1);

            	    if ( (LA247_0==NL) ) {
            	        alt247=1;
            	    }
            	    switch (alt247) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:747:58: NL
            	            {
            	            NL533=(Token)match(input,NL,FOLLOW_NL_in_p_timestimes_expr5124); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_simple_expr_in_p_timestimes_expr5128);
            	    p_simple_expr534=p_simple_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_simple_expr534.getTree());

            	    }
            	    break;

            	default :
            	    break loop248;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_timestimes_expr"

    public static class simple_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:749:1: simple_expr : cons_expr ;
    public final babel17Parser.simple_expr_return simple_expr() throws RecognitionException {
        babel17Parser.simple_expr_return retval = new babel17Parser.simple_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.cons_expr_return cons_expr535 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:750:2: ( cons_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:750:4: cons_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_cons_expr_in_simple_expr5139);
            cons_expr535=cons_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cons_expr535.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "simple_expr"

    public static class p_simple_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_simple_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:752:1: p_simple_expr : p_cons_expr ;
    public final babel17Parser.p_simple_expr_return p_simple_expr() throws RecognitionException {
        babel17Parser.p_simple_expr_return retval = new babel17Parser.p_simple_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.p_cons_expr_return p_cons_expr536 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:753:2: ( p_cons_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:753:4: p_cons_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_cons_expr_in_p_simple_expr5148);
            p_cons_expr536=p_cons_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_cons_expr536.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_simple_expr"

    public static class cons_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cons_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:755:1: cons_expr : to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? to_expr )* -> ^( LIST_CONS ( to_expr )* ) ;
    public final babel17Parser.cons_expr_return cons_expr() throws RecognitionException {
        babel17Parser.cons_expr_return retval = new babel17Parser.cons_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL538=null;
        Token NL540=null;
        babel17Parser.to_expr_return to_expr537 = null;

        babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON539 = null;

        babel17Parser.to_expr_return to_expr541 = null;


        CommonTree NL538_tree=null;
        CommonTree NL540_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_token_DOUBLE_COLON=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_COLON");
        RewriteRuleSubtreeStream stream_to_expr=new RewriteRuleSubtreeStream(adaptor,"rule to_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:756:2: ( to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? to_expr )* -> ^( LIST_CONS ( to_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:756:4: to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? to_expr )*
            {
            pushFollow(FOLLOW_to_expr_in_cons_expr5157);
            to_expr537=to_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_to_expr.add(to_expr537.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:756:12: ( ( NL )? token_DOUBLE_COLON ( NL )? to_expr )*
            loop251:
            do {
                int alt251=2;
                int LA251_0 = input.LA(1);

                if ( (LA251_0==NL) ) {
                    int LA251_1 = input.LA(2);

                    if ( ((LA251_1>=A_DOUBLE_COLON && LA251_1<=U_DOUBLE_COLON)) ) {
                        alt251=1;
                    }


                }
                else if ( ((LA251_0>=A_DOUBLE_COLON && LA251_0<=U_DOUBLE_COLON)) ) {
                    alt251=1;
                }


                switch (alt251) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:756:13: ( NL )? token_DOUBLE_COLON ( NL )? to_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:756:13: ( NL )?
            	    int alt249=2;
            	    int LA249_0 = input.LA(1);

            	    if ( (LA249_0==NL) ) {
            	        alt249=1;
            	    }
            	    switch (alt249) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:756:13: NL
            	            {
            	            NL538=(Token)match(input,NL,FOLLOW_NL_in_cons_expr5160); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL538);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_DOUBLE_COLON_in_cons_expr5163);
            	    token_DOUBLE_COLON539=token_DOUBLE_COLON();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_token_DOUBLE_COLON.add(token_DOUBLE_COLON539.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:756:36: ( NL )?
            	    int alt250=2;
            	    int LA250_0 = input.LA(1);

            	    if ( (LA250_0==NL) ) {
            	        alt250=1;
            	    }
            	    switch (alt250) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:756:36: NL
            	            {
            	            NL540=(Token)match(input,NL,FOLLOW_NL_in_cons_expr5165); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL540);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_to_expr_in_cons_expr5168);
            	    to_expr541=to_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_to_expr.add(to_expr541.getTree());

            	    }
            	    break;

            	default :
            	    break loop251;
                }
            } while (true);



            // AST REWRITE
            // elements: to_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 756:50: -> ^( LIST_CONS ( to_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:756:53: ^( LIST_CONS ( to_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST_CONS, "LIST_CONS"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:756:65: ( to_expr )*
                while ( stream_to_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_to_expr.nextTree());

                }
                stream_to_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cons_expr"

    public static class p_cons_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_cons_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:758:1: p_cons_expr : p_to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr )* -> ^( LIST_CONS ( p_to_expr )* ) ;
    public final babel17Parser.p_cons_expr_return p_cons_expr() throws RecognitionException {
        babel17Parser.p_cons_expr_return retval = new babel17Parser.p_cons_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL543=null;
        Token NL545=null;
        babel17Parser.p_to_expr_return p_to_expr542 = null;

        babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON544 = null;

        babel17Parser.p_to_expr_return p_to_expr546 = null;


        CommonTree NL543_tree=null;
        CommonTree NL545_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_p_to_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_to_expr");
        RewriteRuleSubtreeStream stream_token_DOUBLE_COLON=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_COLON");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:759:2: ( p_to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr )* -> ^( LIST_CONS ( p_to_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:759:4: p_to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr )*
            {
            pushFollow(FOLLOW_p_to_expr_in_p_cons_expr5188);
            p_to_expr542=p_to_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_to_expr.add(p_to_expr542.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:759:14: ( ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr )*
            loop254:
            do {
                int alt254=2;
                int LA254_0 = input.LA(1);

                if ( (LA254_0==NL) ) {
                    int LA254_1 = input.LA(2);

                    if ( ((LA254_1>=A_DOUBLE_COLON && LA254_1<=U_DOUBLE_COLON)) ) {
                        alt254=1;
                    }


                }
                else if ( ((LA254_0>=A_DOUBLE_COLON && LA254_0<=U_DOUBLE_COLON)) ) {
                    alt254=1;
                }


                switch (alt254) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:759:15: ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:759:15: ( NL )?
            	    int alt252=2;
            	    int LA252_0 = input.LA(1);

            	    if ( (LA252_0==NL) ) {
            	        alt252=1;
            	    }
            	    switch (alt252) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:759:15: NL
            	            {
            	            NL543=(Token)match(input,NL,FOLLOW_NL_in_p_cons_expr5191); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL543);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_DOUBLE_COLON_in_p_cons_expr5194);
            	    token_DOUBLE_COLON544=token_DOUBLE_COLON();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_token_DOUBLE_COLON.add(token_DOUBLE_COLON544.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:759:38: ( NL )?
            	    int alt253=2;
            	    int LA253_0 = input.LA(1);

            	    if ( (LA253_0==NL) ) {
            	        alt253=1;
            	    }
            	    switch (alt253) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:759:38: NL
            	            {
            	            NL545=(Token)match(input,NL,FOLLOW_NL_in_p_cons_expr5196); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL545);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_to_expr_in_p_cons_expr5199);
            	    p_to_expr546=p_to_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_to_expr.add(p_to_expr546.getTree());

            	    }
            	    break;

            	default :
            	    break loop254;
                }
            } while (true);



            // AST REWRITE
            // elements: p_to_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 759:54: -> ^( LIST_CONS ( p_to_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:759:57: ^( LIST_CONS ( p_to_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST_CONS, "LIST_CONS"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:759:69: ( p_to_expr )*
                while ( stream_p_to_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_to_expr.nextTree());

                }
                stream_p_to_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_cons_expr"

    public static class to_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:762:1: to_expr : arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr )? ;
    public final babel17Parser.to_expr_return to_expr() throws RecognitionException {
        babel17Parser.to_expr_return retval = new babel17Parser.to_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL548=null;
        Token L_to549=null;
        Token L_downto550=null;
        Token NL551=null;
        babel17Parser.arith_plus_expr_return arith_plus_expr547 = null;

        babel17Parser.arith_plus_expr_return arith_plus_expr552 = null;


        CommonTree NL548_tree=null;
        CommonTree L_to549_tree=null;
        CommonTree L_downto550_tree=null;
        CommonTree NL551_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:762:9: ( arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr )? )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:762:11: arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_arith_plus_expr_in_to_expr5219);
            arith_plus_expr547=arith_plus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_plus_expr547.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:762:27: ( ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr )?
            int alt258=2;
            int LA258_0 = input.LA(1);

            if ( (LA258_0==NL) ) {
                int LA258_1 = input.LA(2);

                if ( ((LA258_1>=L_to && LA258_1<=L_downto)) ) {
                    alt258=1;
                }
            }
            else if ( ((LA258_0>=L_to && LA258_0<=L_downto)) ) {
                alt258=1;
            }
            switch (alt258) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:762:28: ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:762:30: ( NL )?
                    int alt255=2;
                    int LA255_0 = input.LA(1);

                    if ( (LA255_0==NL) ) {
                        alt255=1;
                    }
                    switch (alt255) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:762:30: NL
                            {
                            NL548=(Token)match(input,NL,FOLLOW_NL_in_to_expr5222); if (state.failed) return retval;

                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:762:33: ( L_to | L_downto )
                    int alt256=2;
                    int LA256_0 = input.LA(1);

                    if ( (LA256_0==L_to) ) {
                        alt256=1;
                    }
                    else if ( (LA256_0==L_downto) ) {
                        alt256=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 256, 0, input);

                        throw nvae;
                    }
                    switch (alt256) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:762:34: L_to
                            {
                            L_to549=(Token)match(input,L_to,FOLLOW_L_to_in_to_expr5227); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            L_to549_tree = (CommonTree)adaptor.create(L_to549);
                            root_0 = (CommonTree)adaptor.becomeRoot(L_to549_tree, root_0);
                            }

                            }
                            break;
                        case 2 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:762:41: L_downto
                            {
                            L_downto550=(Token)match(input,L_downto,FOLLOW_L_downto_in_to_expr5231); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            L_downto550_tree = (CommonTree)adaptor.create(L_downto550);
                            root_0 = (CommonTree)adaptor.becomeRoot(L_downto550_tree, root_0);
                            }

                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:762:54: ( NL )?
                    int alt257=2;
                    int LA257_0 = input.LA(1);

                    if ( (LA257_0==NL) ) {
                        alt257=1;
                    }
                    switch (alt257) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:762:54: NL
                            {
                            NL551=(Token)match(input,NL,FOLLOW_NL_in_to_expr5235); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_arith_plus_expr_in_to_expr5239);
                    arith_plus_expr552=arith_plus_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_plus_expr552.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "to_expr"

    public static class p_to_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_to_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:764:1: p_to_expr : p_arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr )? ;
    public final babel17Parser.p_to_expr_return p_to_expr() throws RecognitionException {
        babel17Parser.p_to_expr_return retval = new babel17Parser.p_to_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL554=null;
        Token L_to555=null;
        Token L_downto556=null;
        Token NL557=null;
        babel17Parser.p_arith_plus_expr_return p_arith_plus_expr553 = null;

        babel17Parser.p_arith_plus_expr_return p_arith_plus_expr558 = null;


        CommonTree NL554_tree=null;
        CommonTree L_to555_tree=null;
        CommonTree L_downto556_tree=null;
        CommonTree NL557_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:765:2: ( p_arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr )? )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:765:4: p_arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_arith_plus_expr_in_p_to_expr5252);
            p_arith_plus_expr553=p_arith_plus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_plus_expr553.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:765:22: ( ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr )?
            int alt262=2;
            int LA262_0 = input.LA(1);

            if ( (LA262_0==NL) ) {
                int LA262_1 = input.LA(2);

                if ( ((LA262_1>=L_to && LA262_1<=L_downto)) ) {
                    alt262=1;
                }
            }
            else if ( ((LA262_0>=L_to && LA262_0<=L_downto)) ) {
                alt262=1;
            }
            switch (alt262) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:765:23: ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:765:25: ( NL )?
                    int alt259=2;
                    int LA259_0 = input.LA(1);

                    if ( (LA259_0==NL) ) {
                        alt259=1;
                    }
                    switch (alt259) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:765:25: NL
                            {
                            NL554=(Token)match(input,NL,FOLLOW_NL_in_p_to_expr5255); if (state.failed) return retval;

                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:765:28: ( L_to | L_downto )
                    int alt260=2;
                    int LA260_0 = input.LA(1);

                    if ( (LA260_0==L_to) ) {
                        alt260=1;
                    }
                    else if ( (LA260_0==L_downto) ) {
                        alt260=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 260, 0, input);

                        throw nvae;
                    }
                    switch (alt260) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:765:29: L_to
                            {
                            L_to555=(Token)match(input,L_to,FOLLOW_L_to_in_p_to_expr5260); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            L_to555_tree = (CommonTree)adaptor.create(L_to555);
                            root_0 = (CommonTree)adaptor.becomeRoot(L_to555_tree, root_0);
                            }

                            }
                            break;
                        case 2 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:765:36: L_downto
                            {
                            L_downto556=(Token)match(input,L_downto,FOLLOW_L_downto_in_p_to_expr5264); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            L_downto556_tree = (CommonTree)adaptor.create(L_downto556);
                            root_0 = (CommonTree)adaptor.becomeRoot(L_downto556_tree, root_0);
                            }

                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:765:49: ( NL )?
                    int alt261=2;
                    int LA261_0 = input.LA(1);

                    if ( (LA261_0==NL) ) {
                        alt261=1;
                    }
                    switch (alt261) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:765:49: NL
                            {
                            NL557=(Token)match(input,NL,FOLLOW_NL_in_p_to_expr5268); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_arith_plus_expr_in_p_to_expr5272);
                    p_arith_plus_expr558=p_arith_plus_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_plus_expr558.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_to_expr"

    public static class arith_plus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_plus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:767:1: arith_plus_expr : arith_uminus_expr ( ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr )* ;
    public final babel17Parser.arith_plus_expr_return arith_plus_expr() throws RecognitionException {
        babel17Parser.arith_plus_expr_return retval = new babel17Parser.arith_plus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL560=null;
        Token PLUS561=null;
        Token MINUS562=null;
        Token NL563=null;
        babel17Parser.arith_uminus_expr_return arith_uminus_expr559 = null;

        babel17Parser.arith_uminus_expr_return arith_uminus_expr564 = null;


        CommonTree NL560_tree=null;
        CommonTree PLUS561_tree=null;
        CommonTree MINUS562_tree=null;
        CommonTree NL563_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:768:2: ( arith_uminus_expr ( ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:768:4: arith_uminus_expr ( ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_arith_uminus_expr_in_arith_plus_expr5284);
            arith_uminus_expr559=arith_uminus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_uminus_expr559.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:768:22: ( ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr )*
            loop266:
            do {
                int alt266=2;
                int LA266_0 = input.LA(1);

                if ( (LA266_0==NL) ) {
                    int LA266_1 = input.LA(2);

                    if ( (LA266_1==PLUS) ) {
                        alt266=1;
                    }


                }
                else if ( ((LA266_0>=PLUS && LA266_0<=MINUS)) ) {
                    alt266=1;
                }


                switch (alt266) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:768:23: ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:768:23: ( ( NL )? PLUS | MINUS )
            	    int alt264=2;
            	    int LA264_0 = input.LA(1);

            	    if ( (LA264_0==PLUS||LA264_0==NL) ) {
            	        alt264=1;
            	    }
            	    else if ( (LA264_0==MINUS) ) {
            	        alt264=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 264, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt264) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:768:24: ( NL )? PLUS
            	            {
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:768:26: ( NL )?
            	            int alt263=2;
            	            int LA263_0 = input.LA(1);

            	            if ( (LA263_0==NL) ) {
            	                alt263=1;
            	            }
            	            switch (alt263) {
            	                case 1 :
            	                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:768:26: NL
            	                    {
            	                    NL560=(Token)match(input,NL,FOLLOW_NL_in_arith_plus_expr5288); if (state.failed) return retval;

            	                    }
            	                    break;

            	            }

            	            PLUS561=(Token)match(input,PLUS,FOLLOW_PLUS_in_arith_plus_expr5292); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS561_tree = (CommonTree)adaptor.create(PLUS561);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS561_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:768:37: MINUS
            	            {
            	            MINUS562=(Token)match(input,MINUS,FOLLOW_MINUS_in_arith_plus_expr5297); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS562_tree = (CommonTree)adaptor.create(MINUS562);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS562_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:768:47: ( NL )?
            	    int alt265=2;
            	    int LA265_0 = input.LA(1);

            	    if ( (LA265_0==NL) ) {
            	        alt265=1;
            	    }
            	    switch (alt265) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:768:47: NL
            	            {
            	            NL563=(Token)match(input,NL,FOLLOW_NL_in_arith_plus_expr5301); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_arith_uminus_expr_in_arith_plus_expr5305);
            	    arith_uminus_expr564=arith_uminus_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_uminus_expr564.getTree());

            	    }
            	    break;

            	default :
            	    break loop266;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_plus_expr"

    public static class p_arith_plus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_plus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:770:1: p_arith_plus_expr : p_arith_uminus_expr ( ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr )* ;
    public final babel17Parser.p_arith_plus_expr_return p_arith_plus_expr() throws RecognitionException {
        babel17Parser.p_arith_plus_expr_return retval = new babel17Parser.p_arith_plus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL566=null;
        Token set567=null;
        Token NL568=null;
        babel17Parser.p_arith_uminus_expr_return p_arith_uminus_expr565 = null;

        babel17Parser.p_arith_uminus_expr_return p_arith_uminus_expr569 = null;


        CommonTree NL566_tree=null;
        CommonTree set567_tree=null;
        CommonTree NL568_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:771:2: ( p_arith_uminus_expr ( ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:771:4: p_arith_uminus_expr ( ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_arith_uminus_expr_in_p_arith_plus_expr5316);
            p_arith_uminus_expr565=p_arith_uminus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_uminus_expr565.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:771:24: ( ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr )*
            loop269:
            do {
                int alt269=2;
                int LA269_0 = input.LA(1);

                if ( (LA269_0==NL) ) {
                    int LA269_1 = input.LA(2);

                    if ( ((LA269_1>=PLUS && LA269_1<=MINUS)) ) {
                        alt269=1;
                    }


                }
                else if ( ((LA269_0>=PLUS && LA269_0<=MINUS)) ) {
                    alt269=1;
                }


                switch (alt269) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:771:25: ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:771:27: ( NL )?
            	    int alt267=2;
            	    int LA267_0 = input.LA(1);

            	    if ( (LA267_0==NL) ) {
            	        alt267=1;
            	    }
            	    switch (alt267) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:771:27: NL
            	            {
            	            NL566=(Token)match(input,NL,FOLLOW_NL_in_p_arith_plus_expr5319); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    set567=(Token)input.LT(1);
            	    set567=(Token)input.LT(1);
            	    if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set567), root_0);
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:771:48: ( NL )?
            	    int alt268=2;
            	    int LA268_0 = input.LA(1);

            	    if ( (LA268_0==NL) ) {
            	        alt268=1;
            	    }
            	    switch (alt268) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:771:48: NL
            	            {
            	            NL568=(Token)match(input,NL,FOLLOW_NL_in_p_arith_plus_expr5332); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_arith_uminus_expr_in_p_arith_plus_expr5336);
            	    p_arith_uminus_expr569=p_arith_uminus_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_uminus_expr569.getTree());

            	    }
            	    break;

            	default :
            	    break loop269;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_plus_expr"

    public static class arith_uminus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_uminus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:773:1: arith_uminus_expr : ( MINUS ( NL )? arith_mult_expr -> ^( UMINUS arith_mult_expr ) | arith_mult_expr );
    public final babel17Parser.arith_uminus_expr_return arith_uminus_expr() throws RecognitionException {
        babel17Parser.arith_uminus_expr_return retval = new babel17Parser.arith_uminus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS570=null;
        Token NL571=null;
        babel17Parser.arith_mult_expr_return arith_mult_expr572 = null;

        babel17Parser.arith_mult_expr_return arith_mult_expr573 = null;


        CommonTree MINUS570_tree=null;
        CommonTree NL571_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_arith_mult_expr=new RewriteRuleSubtreeStream(adaptor,"rule arith_mult_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:774:2: ( MINUS ( NL )? arith_mult_expr -> ^( UMINUS arith_mult_expr ) | arith_mult_expr )
            int alt271=2;
            int LA271_0 = input.LA(1);

            if ( (LA271_0==MINUS) ) {
                alt271=1;
            }
            else if ( (LA271_0==L_begin||(LA271_0>=L_with && LA271_0<=L_if)||(LA271_0>=L_while && LA271_0<=L_for)||LA271_0==L_match||LA271_0==L_try||(LA271_0>=L_true && LA271_0<=L_this)||LA271_0==L_nil||LA271_0==L_root||(LA271_0>=Constr && LA271_0<=Id)||(LA271_0>=Float && LA271_0<=Num)||(LA271_0>=String && LA271_0<=ROUND_BRACKET_OPEN)||LA271_0==SQUARE_BRACKET_OPEN||LA271_0==CURLY_BRACKET_OPEN) ) {
                alt271=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 271, 0, input);

                throw nvae;
            }
            switch (alt271) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:774:4: MINUS ( NL )? arith_mult_expr
                    {
                    MINUS570=(Token)match(input,MINUS,FOLLOW_MINUS_in_arith_uminus_expr5349); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS570);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:774:10: ( NL )?
                    int alt270=2;
                    int LA270_0 = input.LA(1);

                    if ( (LA270_0==NL) ) {
                        alt270=1;
                    }
                    switch (alt270) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:774:10: NL
                            {
                            NL571=(Token)match(input,NL,FOLLOW_NL_in_arith_uminus_expr5351); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL571);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_arith_mult_expr_in_arith_uminus_expr5354);
                    arith_mult_expr572=arith_mult_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arith_mult_expr.add(arith_mult_expr572.getTree());


                    // AST REWRITE
                    // elements: arith_mult_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 774:30: -> ^( UMINUS arith_mult_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:774:33: ^( UMINUS arith_mult_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UMINUS, "UMINUS"), root_1);

                        adaptor.addChild(root_1, stream_arith_mult_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:775:4: arith_mult_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arith_mult_expr_in_arith_uminus_expr5367);
                    arith_mult_expr573=arith_mult_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_mult_expr573.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_uminus_expr"

    public static class p_arith_uminus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_uminus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:777:1: p_arith_uminus_expr : ( MINUS ( NL )? p_arith_mult_expr -> ^( UMINUS p_arith_mult_expr ) | p_arith_mult_expr );
    public final babel17Parser.p_arith_uminus_expr_return p_arith_uminus_expr() throws RecognitionException {
        babel17Parser.p_arith_uminus_expr_return retval = new babel17Parser.p_arith_uminus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS574=null;
        Token NL575=null;
        babel17Parser.p_arith_mult_expr_return p_arith_mult_expr576 = null;

        babel17Parser.p_arith_mult_expr_return p_arith_mult_expr577 = null;


        CommonTree MINUS574_tree=null;
        CommonTree NL575_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_p_arith_mult_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_arith_mult_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:778:2: ( MINUS ( NL )? p_arith_mult_expr -> ^( UMINUS p_arith_mult_expr ) | p_arith_mult_expr )
            int alt273=2;
            int LA273_0 = input.LA(1);

            if ( (LA273_0==MINUS) ) {
                alt273=1;
            }
            else if ( (LA273_0==L_begin||(LA273_0>=L_with && LA273_0<=L_if)||(LA273_0>=L_while && LA273_0<=L_for)||LA273_0==L_match||LA273_0==L_try||(LA273_0>=L_true && LA273_0<=L_this)||LA273_0==L_nil||LA273_0==L_root||(LA273_0>=Constr && LA273_0<=Id)||(LA273_0>=Float && LA273_0<=Num)||(LA273_0>=String && LA273_0<=ROUND_BRACKET_OPEN)||LA273_0==SQUARE_BRACKET_OPEN||LA273_0==CURLY_BRACKET_OPEN) ) {
                alt273=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 273, 0, input);

                throw nvae;
            }
            switch (alt273) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:778:4: MINUS ( NL )? p_arith_mult_expr
                    {
                    MINUS574=(Token)match(input,MINUS,FOLLOW_MINUS_in_p_arith_uminus_expr5378); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS574);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:778:10: ( NL )?
                    int alt272=2;
                    int LA272_0 = input.LA(1);

                    if ( (LA272_0==NL) ) {
                        alt272=1;
                    }
                    switch (alt272) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:778:10: NL
                            {
                            NL575=(Token)match(input,NL,FOLLOW_NL_in_p_arith_uminus_expr5380); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL575);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_arith_mult_expr_in_p_arith_uminus_expr5383);
                    p_arith_mult_expr576=p_arith_mult_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_arith_mult_expr.add(p_arith_mult_expr576.getTree());


                    // AST REWRITE
                    // elements: p_arith_mult_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 778:32: -> ^( UMINUS p_arith_mult_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:778:35: ^( UMINUS p_arith_mult_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UMINUS, "UMINUS"), root_1);

                        adaptor.addChild(root_1, stream_p_arith_mult_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:779:4: p_arith_mult_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_arith_mult_expr_in_p_arith_uminus_expr5396);
                    p_arith_mult_expr577=p_arith_mult_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_mult_expr577.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_uminus_expr"

    public static class arith_mult_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_mult_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:781:1: arith_mult_expr : arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr )* ;
    public final babel17Parser.arith_mult_expr_return arith_mult_expr() throws RecognitionException {
        babel17Parser.arith_mult_expr_return retval = new babel17Parser.arith_mult_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL579=null;
        Token set580=null;
        Token NL581=null;
        babel17Parser.arith_pow_expr_return arith_pow_expr578 = null;

        babel17Parser.arith_pow_expr_return arith_pow_expr582 = null;


        CommonTree NL579_tree=null;
        CommonTree set580_tree=null;
        CommonTree NL581_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:782:2: ( arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:782:4: arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_arith_pow_expr_in_arith_mult_expr5405);
            arith_pow_expr578=arith_pow_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_pow_expr578.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:782:19: ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr )*
            loop276:
            do {
                int alt276=2;
                int LA276_0 = input.LA(1);

                if ( (LA276_0==NL) ) {
                    int LA276_1 = input.LA(2);

                    if ( ((LA276_1>=L_div && LA276_1<=L_mod)||(LA276_1>=TIMES && LA276_1<=QUOTIENT)) ) {
                        alt276=1;
                    }


                }
                else if ( ((LA276_0>=L_div && LA276_0<=L_mod)||(LA276_0>=TIMES && LA276_0<=QUOTIENT)) ) {
                    alt276=1;
                }


                switch (alt276) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:782:20: ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:782:22: ( NL )?
            	    int alt274=2;
            	    int LA274_0 = input.LA(1);

            	    if ( (LA274_0==NL) ) {
            	        alt274=1;
            	    }
            	    switch (alt274) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:782:22: NL
            	            {
            	            NL579=(Token)match(input,NL,FOLLOW_NL_in_arith_mult_expr5408); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    set580=(Token)input.LT(1);
            	    set580=(Token)input.LT(1);
            	    if ( (input.LA(1)>=L_div && input.LA(1)<=L_mod)||(input.LA(1)>=TIMES && input.LA(1)<=QUOTIENT) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set580), root_0);
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:782:63: ( NL )?
            	    int alt275=2;
            	    int LA275_0 = input.LA(1);

            	    if ( (LA275_0==NL) ) {
            	        alt275=1;
            	    }
            	    switch (alt275) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:782:63: NL
            	            {
            	            NL581=(Token)match(input,NL,FOLLOW_NL_in_arith_mult_expr5429); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_arith_pow_expr_in_arith_mult_expr5433);
            	    arith_pow_expr582=arith_pow_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_pow_expr582.getTree());

            	    }
            	    break;

            	default :
            	    break loop276;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_mult_expr"

    public static class p_arith_mult_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_mult_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:784:1: p_arith_mult_expr : p_arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr )* ;
    public final babel17Parser.p_arith_mult_expr_return p_arith_mult_expr() throws RecognitionException {
        babel17Parser.p_arith_mult_expr_return retval = new babel17Parser.p_arith_mult_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL584=null;
        Token set585=null;
        Token NL586=null;
        babel17Parser.p_arith_pow_expr_return p_arith_pow_expr583 = null;

        babel17Parser.p_arith_pow_expr_return p_arith_pow_expr587 = null;


        CommonTree NL584_tree=null;
        CommonTree set585_tree=null;
        CommonTree NL586_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:2: ( p_arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:4: p_arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_arith_pow_expr_in_p_arith_mult_expr5445);
            p_arith_pow_expr583=p_arith_pow_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_pow_expr583.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:21: ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr )*
            loop279:
            do {
                int alt279=2;
                int LA279_0 = input.LA(1);

                if ( (LA279_0==NL) ) {
                    int LA279_1 = input.LA(2);

                    if ( ((LA279_1>=L_div && LA279_1<=L_mod)||(LA279_1>=TIMES && LA279_1<=QUOTIENT)) ) {
                        alt279=1;
                    }


                }
                else if ( ((LA279_0>=L_div && LA279_0<=L_mod)||(LA279_0>=TIMES && LA279_0<=QUOTIENT)) ) {
                    alt279=1;
                }


                switch (alt279) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:22: ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:24: ( NL )?
            	    int alt277=2;
            	    int LA277_0 = input.LA(1);

            	    if ( (LA277_0==NL) ) {
            	        alt277=1;
            	    }
            	    switch (alt277) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:24: NL
            	            {
            	            NL584=(Token)match(input,NL,FOLLOW_NL_in_p_arith_mult_expr5448); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    set585=(Token)input.LT(1);
            	    set585=(Token)input.LT(1);
            	    if ( (input.LA(1)>=L_div && input.LA(1)<=L_mod)||(input.LA(1)>=TIMES && input.LA(1)<=QUOTIENT) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set585), root_0);
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:65: ( NL )?
            	    int alt278=2;
            	    int LA278_0 = input.LA(1);

            	    if ( (LA278_0==NL) ) {
            	        alt278=1;
            	    }
            	    switch (alt278) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:65: NL
            	            {
            	            NL586=(Token)match(input,NL,FOLLOW_NL_in_p_arith_mult_expr5469); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_arith_pow_expr_in_p_arith_mult_expr5473);
            	    p_arith_pow_expr587=p_arith_pow_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_pow_expr587.getTree());

            	    }
            	    break;

            	default :
            	    break loop279;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_mult_expr"

    public static class arith_pow_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_pow_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:787:1: arith_pow_expr : apply_expr ( ( NL )? POW_tok ( NL )? apply_expr )* -> ^( POW ( apply_expr )* ) ;
    public final babel17Parser.arith_pow_expr_return arith_pow_expr() throws RecognitionException {
        babel17Parser.arith_pow_expr_return retval = new babel17Parser.arith_pow_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL589=null;
        Token POW_tok590=null;
        Token NL591=null;
        babel17Parser.apply_expr_return apply_expr588 = null;

        babel17Parser.apply_expr_return apply_expr592 = null;


        CommonTree NL589_tree=null;
        CommonTree POW_tok590_tree=null;
        CommonTree NL591_tree=null;
        RewriteRuleTokenStream stream_POW_tok=new RewriteRuleTokenStream(adaptor,"token POW_tok");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_apply_expr=new RewriteRuleSubtreeStream(adaptor,"rule apply_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:2: ( apply_expr ( ( NL )? POW_tok ( NL )? apply_expr )* -> ^( POW ( apply_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:4: apply_expr ( ( NL )? POW_tok ( NL )? apply_expr )*
            {
            pushFollow(FOLLOW_apply_expr_in_arith_pow_expr5484);
            apply_expr588=apply_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_apply_expr.add(apply_expr588.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:15: ( ( NL )? POW_tok ( NL )? apply_expr )*
            loop282:
            do {
                int alt282=2;
                int LA282_0 = input.LA(1);

                if ( (LA282_0==NL) ) {
                    int LA282_1 = input.LA(2);

                    if ( (LA282_1==POW_tok) ) {
                        alt282=1;
                    }


                }
                else if ( (LA282_0==POW_tok) ) {
                    alt282=1;
                }


                switch (alt282) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:16: ( NL )? POW_tok ( NL )? apply_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:16: ( NL )?
            	    int alt280=2;
            	    int LA280_0 = input.LA(1);

            	    if ( (LA280_0==NL) ) {
            	        alt280=1;
            	    }
            	    switch (alt280) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:16: NL
            	            {
            	            NL589=(Token)match(input,NL,FOLLOW_NL_in_arith_pow_expr5487); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL589);


            	            }
            	            break;

            	    }

            	    POW_tok590=(Token)match(input,POW_tok,FOLLOW_POW_tok_in_arith_pow_expr5490); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_POW_tok.add(POW_tok590);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:28: ( NL )?
            	    int alt281=2;
            	    int LA281_0 = input.LA(1);

            	    if ( (LA281_0==NL) ) {
            	        alt281=1;
            	    }
            	    switch (alt281) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:28: NL
            	            {
            	            NL591=(Token)match(input,NL,FOLLOW_NL_in_arith_pow_expr5492); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL591);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_apply_expr_in_arith_pow_expr5495);
            	    apply_expr592=apply_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_apply_expr.add(apply_expr592.getTree());

            	    }
            	    break;

            	default :
            	    break loop282;
                }
            } while (true);



            // AST REWRITE
            // elements: apply_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 788:45: -> ^( POW ( apply_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:48: ^( POW ( apply_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(POW, "POW"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:54: ( apply_expr )*
                while ( stream_apply_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_apply_expr.nextTree());

                }
                stream_apply_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_pow_expr"

    public static class p_arith_pow_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_pow_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:790:1: p_arith_pow_expr : p_apply_expr ( ( NL )? POW_tok ( NL )? p_apply_expr )* -> ^( POW ( p_apply_expr )* ) ;
    public final babel17Parser.p_arith_pow_expr_return p_arith_pow_expr() throws RecognitionException {
        babel17Parser.p_arith_pow_expr_return retval = new babel17Parser.p_arith_pow_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL594=null;
        Token POW_tok595=null;
        Token NL596=null;
        babel17Parser.p_apply_expr_return p_apply_expr593 = null;

        babel17Parser.p_apply_expr_return p_apply_expr597 = null;


        CommonTree NL594_tree=null;
        CommonTree POW_tok595_tree=null;
        CommonTree NL596_tree=null;
        RewriteRuleTokenStream stream_POW_tok=new RewriteRuleTokenStream(adaptor,"token POW_tok");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_p_apply_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_apply_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:791:2: ( p_apply_expr ( ( NL )? POW_tok ( NL )? p_apply_expr )* -> ^( POW ( p_apply_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:791:4: p_apply_expr ( ( NL )? POW_tok ( NL )? p_apply_expr )*
            {
            pushFollow(FOLLOW_p_apply_expr_in_p_arith_pow_expr5516);
            p_apply_expr593=p_apply_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_apply_expr.add(p_apply_expr593.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:791:17: ( ( NL )? POW_tok ( NL )? p_apply_expr )*
            loop285:
            do {
                int alt285=2;
                int LA285_0 = input.LA(1);

                if ( (LA285_0==NL) ) {
                    int LA285_1 = input.LA(2);

                    if ( (LA285_1==POW_tok) ) {
                        alt285=1;
                    }


                }
                else if ( (LA285_0==POW_tok) ) {
                    alt285=1;
                }


                switch (alt285) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:791:18: ( NL )? POW_tok ( NL )? p_apply_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:791:18: ( NL )?
            	    int alt283=2;
            	    int LA283_0 = input.LA(1);

            	    if ( (LA283_0==NL) ) {
            	        alt283=1;
            	    }
            	    switch (alt283) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:791:18: NL
            	            {
            	            NL594=(Token)match(input,NL,FOLLOW_NL_in_p_arith_pow_expr5519); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL594);


            	            }
            	            break;

            	    }

            	    POW_tok595=(Token)match(input,POW_tok,FOLLOW_POW_tok_in_p_arith_pow_expr5522); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_POW_tok.add(POW_tok595);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:791:30: ( NL )?
            	    int alt284=2;
            	    int LA284_0 = input.LA(1);

            	    if ( (LA284_0==NL) ) {
            	        alt284=1;
            	    }
            	    switch (alt284) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:791:30: NL
            	            {
            	            NL596=(Token)match(input,NL,FOLLOW_NL_in_p_arith_pow_expr5524); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL596);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_apply_expr_in_p_arith_pow_expr5527);
            	    p_apply_expr597=p_apply_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_apply_expr.add(p_apply_expr597.getTree());

            	    }
            	    break;

            	default :
            	    break loop285;
                }
            } while (true);



            // AST REWRITE
            // elements: p_apply_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 791:49: -> ^( POW ( p_apply_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:791:52: ^( POW ( p_apply_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(POW, "POW"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:791:58: ( p_apply_expr )*
                while ( stream_p_apply_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_apply_expr.nextTree());

                }
                stream_p_apply_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_pow_expr"

    public static class apply_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apply_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:793:1: apply_expr : ( basic_expr )+ -> ^( APPLY ( basic_expr )* ) ;
    public final babel17Parser.apply_expr_return apply_expr() throws RecognitionException {
        babel17Parser.apply_expr_return retval = new babel17Parser.apply_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.basic_expr_return basic_expr598 = null;


        RewriteRuleSubtreeStream stream_basic_expr=new RewriteRuleSubtreeStream(adaptor,"rule basic_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:794:2: ( ( basic_expr )+ -> ^( APPLY ( basic_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:794:4: ( basic_expr )+
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:794:4: ( basic_expr )+
            int cnt286=0;
            loop286:
            do {
                int alt286=2;
                int LA286_0 = input.LA(1);

                if ( (LA286_0==L_begin||(LA286_0>=L_with && LA286_0<=L_if)||(LA286_0>=L_while && LA286_0<=L_for)||LA286_0==L_match||LA286_0==L_try||(LA286_0>=L_true && LA286_0<=L_this)||LA286_0==L_nil||LA286_0==L_root||(LA286_0>=Constr && LA286_0<=Id)||(LA286_0>=Float && LA286_0<=Num)||(LA286_0>=String && LA286_0<=ROUND_BRACKET_OPEN)||LA286_0==SQUARE_BRACKET_OPEN||LA286_0==CURLY_BRACKET_OPEN) ) {
                    alt286=1;
                }


                switch (alt286) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:794:4: basic_expr
            	    {
            	    pushFollow(FOLLOW_basic_expr_in_apply_expr5548);
            	    basic_expr598=basic_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_basic_expr.add(basic_expr598.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt286 >= 1 ) break loop286;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(286, input);
                        throw eee;
                }
                cnt286++;
            } while (true);



            // AST REWRITE
            // elements: basic_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 794:16: -> ^( APPLY ( basic_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:794:19: ^( APPLY ( basic_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(APPLY, "APPLY"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:794:27: ( basic_expr )*
                while ( stream_basic_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_basic_expr.nextTree());

                }
                stream_basic_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "apply_expr"

    public static class p_apply_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_apply_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:795:1: p_apply_expr : p_basic_expr ( ( NL )? p_basic_expr )* -> ^( APPLY ( p_basic_expr )* ) ;
    public final babel17Parser.p_apply_expr_return p_apply_expr() throws RecognitionException {
        babel17Parser.p_apply_expr_return retval = new babel17Parser.p_apply_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL600=null;
        babel17Parser.p_basic_expr_return p_basic_expr599 = null;

        babel17Parser.p_basic_expr_return p_basic_expr601 = null;


        CommonTree NL600_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_p_basic_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_basic_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:796:2: ( p_basic_expr ( ( NL )? p_basic_expr )* -> ^( APPLY ( p_basic_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:796:4: p_basic_expr ( ( NL )? p_basic_expr )*
            {
            pushFollow(FOLLOW_p_basic_expr_in_p_apply_expr5566);
            p_basic_expr599=p_basic_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_basic_expr.add(p_basic_expr599.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:796:17: ( ( NL )? p_basic_expr )*
            loop288:
            do {
                int alt288=2;
                int LA288_0 = input.LA(1);

                if ( (LA288_0==NL) ) {
                    int LA288_1 = input.LA(2);

                    if ( (LA288_1==L_begin||(LA288_1>=L_with && LA288_1<=L_if)||(LA288_1>=L_while && LA288_1<=L_for)||LA288_1==L_match||LA288_1==L_try||(LA288_1>=L_true && LA288_1<=L_this)||LA288_1==L_nil||LA288_1==L_root||(LA288_1>=Constr && LA288_1<=Id)||(LA288_1>=Float && LA288_1<=Num)||(LA288_1>=String && LA288_1<=ROUND_BRACKET_OPEN)||LA288_1==SQUARE_BRACKET_OPEN||LA288_1==CURLY_BRACKET_OPEN) ) {
                        alt288=1;
                    }


                }
                else if ( (LA288_0==L_begin||(LA288_0>=L_with && LA288_0<=L_if)||(LA288_0>=L_while && LA288_0<=L_for)||LA288_0==L_match||LA288_0==L_try||(LA288_0>=L_true && LA288_0<=L_this)||LA288_0==L_nil||LA288_0==L_root||(LA288_0>=Constr && LA288_0<=Id)||(LA288_0>=Float && LA288_0<=Num)||(LA288_0>=String && LA288_0<=ROUND_BRACKET_OPEN)||LA288_0==SQUARE_BRACKET_OPEN||LA288_0==CURLY_BRACKET_OPEN) ) {
                    alt288=1;
                }


                switch (alt288) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:796:18: ( NL )? p_basic_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:796:18: ( NL )?
            	    int alt287=2;
            	    int LA287_0 = input.LA(1);

            	    if ( (LA287_0==NL) ) {
            	        alt287=1;
            	    }
            	    switch (alt287) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:796:18: NL
            	            {
            	            NL600=(Token)match(input,NL,FOLLOW_NL_in_p_apply_expr5569); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL600);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_basic_expr_in_p_apply_expr5572);
            	    p_basic_expr601=p_basic_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_basic_expr.add(p_basic_expr601.getTree());

            	    }
            	    break;

            	default :
            	    break loop288;
                }
            } while (true);



            // AST REWRITE
            // elements: p_basic_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 796:37: -> ^( APPLY ( p_basic_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:796:40: ^( APPLY ( p_basic_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(APPLY, "APPLY"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:796:48: ( p_basic_expr )*
                while ( stream_p_basic_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_basic_expr.nextTree());

                }
                stream_p_basic_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_apply_expr"

    public static class basic_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "basic_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:798:1: basic_expr : message_send_expr ;
    public final babel17Parser.basic_expr_return basic_expr() throws RecognitionException {
        babel17Parser.basic_expr_return retval = new babel17Parser.basic_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.message_send_expr_return message_send_expr602 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:799:2: ( message_send_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:799:4: message_send_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_message_send_expr_in_basic_expr5592);
            message_send_expr602=message_send_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, message_send_expr602.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "basic_expr"

    public static class p_basic_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_basic_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:801:1: p_basic_expr : message_send_expr ;
    public final babel17Parser.p_basic_expr_return p_basic_expr() throws RecognitionException {
        babel17Parser.p_basic_expr_return retval = new babel17Parser.p_basic_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.message_send_expr_return message_send_expr603 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:2: ( message_send_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:4: message_send_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_message_send_expr_in_p_basic_expr5601);
            message_send_expr603=message_send_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, message_send_expr603.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_basic_expr"

    public static class message_send_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "message_send_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:804:1: message_send_expr : primitive_expr ( ( NL )? PERIOD ( NL )? Id )* -> ^( MESSAGE_SEND primitive_expr ( Id )* ) ;
    public final babel17Parser.message_send_expr_return message_send_expr() throws RecognitionException {
        babel17Parser.message_send_expr_return retval = new babel17Parser.message_send_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL605=null;
        Token PERIOD606=null;
        Token NL607=null;
        Token Id608=null;
        babel17Parser.primitive_expr_return primitive_expr604 = null;


        CommonTree NL605_tree=null;
        CommonTree PERIOD606_tree=null;
        CommonTree NL607_tree=null;
        CommonTree Id608_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleSubtreeStream stream_primitive_expr=new RewriteRuleSubtreeStream(adaptor,"rule primitive_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:2: ( primitive_expr ( ( NL )? PERIOD ( NL )? Id )* -> ^( MESSAGE_SEND primitive_expr ( Id )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:4: primitive_expr ( ( NL )? PERIOD ( NL )? Id )*
            {
            pushFollow(FOLLOW_primitive_expr_in_message_send_expr5610);
            primitive_expr604=primitive_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_primitive_expr.add(primitive_expr604.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:19: ( ( NL )? PERIOD ( NL )? Id )*
            loop291:
            do {
                int alt291=2;
                int LA291_0 = input.LA(1);

                if ( (LA291_0==NL) ) {
                    int LA291_1 = input.LA(2);

                    if ( (LA291_1==PERIOD) ) {
                        alt291=1;
                    }


                }
                else if ( (LA291_0==PERIOD) ) {
                    alt291=1;
                }


                switch (alt291) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:20: ( NL )? PERIOD ( NL )? Id
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:20: ( NL )?
            	    int alt289=2;
            	    int LA289_0 = input.LA(1);

            	    if ( (LA289_0==NL) ) {
            	        alt289=1;
            	    }
            	    switch (alt289) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:20: NL
            	            {
            	            NL605=(Token)match(input,NL,FOLLOW_NL_in_message_send_expr5613); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL605);


            	            }
            	            break;

            	    }

            	    PERIOD606=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_message_send_expr5616); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD606);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:31: ( NL )?
            	    int alt290=2;
            	    int LA290_0 = input.LA(1);

            	    if ( (LA290_0==NL) ) {
            	        alt290=1;
            	    }
            	    switch (alt290) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:31: NL
            	            {
            	            NL607=(Token)match(input,NL,FOLLOW_NL_in_message_send_expr5618); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL607);


            	            }
            	            break;

            	    }

            	    Id608=(Token)match(input,Id,FOLLOW_Id_in_message_send_expr5621); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_Id.add(Id608);


            	    }
            	    break;

            	default :
            	    break loop291;
                }
            } while (true);



            // AST REWRITE
            // elements: Id, primitive_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 805:40: -> ^( MESSAGE_SEND primitive_expr ( Id )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:43: ^( MESSAGE_SEND primitive_expr ( Id )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MESSAGE_SEND, "MESSAGE_SEND"), root_1);

                adaptor.addChild(root_1, stream_primitive_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:73: ( Id )*
                while ( stream_Id.hasNext() ) {
                    adaptor.addChild(root_1, stream_Id.nextNode());

                }
                stream_Id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "message_send_expr"

    public static class list_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "list_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:807:1: list_expr : ( ( '[' ( NL )? protected_expr_nc ( NL )? ';' )=> '[' ( NL )? protected_expr_nc ( NL )? ';' ( NL )? protected_expr_nc ( NL )? ']' -> ^( INTERVAL ( protected_expr_nc )* ) | '[' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? )? ']' -> ^( SQUARE_LIST ( protected_expr_nc )* ) | '(' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( protected_expr_nc )* ) ) );
    public final babel17Parser.list_expr_return list_expr() throws RecognitionException {
        babel17Parser.list_expr_return retval = new babel17Parser.list_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal609=null;
        Token NL610=null;
        Token NL612=null;
        Token char_literal613=null;
        Token NL614=null;
        Token NL616=null;
        Token char_literal617=null;
        Token char_literal618=null;
        Token NL619=null;
        Token NL621=null;
        Token COMMA622=null;
        Token NL623=null;
        Token NL625=null;
        Token char_literal626=null;
        Token char_literal627=null;
        Token NL628=null;
        Token NL630=null;
        Token COMMA631=null;
        Token NL632=null;
        Token NL634=null;
        Token COMMA635=null;
        Token NL636=null;
        Token char_literal637=null;
        babel17Parser.protected_expr_nc_return protected_expr_nc611 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc615 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc620 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc624 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc629 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc633 = null;


        CommonTree char_literal609_tree=null;
        CommonTree NL610_tree=null;
        CommonTree NL612_tree=null;
        CommonTree char_literal613_tree=null;
        CommonTree NL614_tree=null;
        CommonTree NL616_tree=null;
        CommonTree char_literal617_tree=null;
        CommonTree char_literal618_tree=null;
        CommonTree NL619_tree=null;
        CommonTree NL621_tree=null;
        CommonTree COMMA622_tree=null;
        CommonTree NL623_tree=null;
        CommonTree NL625_tree=null;
        CommonTree char_literal626_tree=null;
        CommonTree char_literal627_tree=null;
        CommonTree NL628_tree=null;
        CommonTree NL630_tree=null;
        CommonTree COMMA631_tree=null;
        CommonTree NL632_tree=null;
        CommonTree NL634_tree=null;
        CommonTree COMMA635_tree=null;
        CommonTree NL636_tree=null;
        CommonTree char_literal637_tree=null;
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_SC=new RewriteRuleTokenStream(adaptor,"token SC");
        RewriteRuleTokenStream stream_SQUARE_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token SQUARE_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_SQUARE_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token SQUARE_BRACKET_OPEN");
        RewriteRuleSubtreeStream stream_protected_expr_nc=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr_nc");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:2: ( ( '[' ( NL )? protected_expr_nc ( NL )? ';' )=> '[' ( NL )? protected_expr_nc ( NL )? ';' ( NL )? protected_expr_nc ( NL )? ']' -> ^( INTERVAL ( protected_expr_nc )* ) | '[' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? )? ']' -> ^( SQUARE_LIST ( protected_expr_nc )* ) | '(' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( protected_expr_nc )* ) ) )
            int alt310=3;
            int LA310_0 = input.LA(1);

            if ( (LA310_0==SQUARE_BRACKET_OPEN) ) {
                int LA310_1 = input.LA(2);

                if ( (synpred13_babel17()) ) {
                    alt310=1;
                }
                else if ( (true) ) {
                    alt310=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 310, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA310_0==ROUND_BRACKET_OPEN) ) {
                alt310=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 310, 0, input);

                throw nvae;
            }
            switch (alt310) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:4: ( '[' ( NL )? protected_expr_nc ( NL )? ';' )=> '[' ( NL )? protected_expr_nc ( NL )? ';' ( NL )? protected_expr_nc ( NL )? ']'
                    {
                    char_literal609=(Token)match(input,SQUARE_BRACKET_OPEN,FOLLOW_SQUARE_BRACKET_OPEN_in_list_expr5661); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_OPEN.add(char_literal609);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:47: ( NL )?
                    int alt292=2;
                    int LA292_0 = input.LA(1);

                    if ( (LA292_0==NL) ) {
                        alt292=1;
                    }
                    switch (alt292) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:47: NL
                            {
                            NL610=(Token)match(input,NL,FOLLOW_NL_in_list_expr5663); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL610);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_list_expr5666);
                    protected_expr_nc611=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc611.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:69: ( NL )?
                    int alt293=2;
                    int LA293_0 = input.LA(1);

                    if ( (LA293_0==NL) ) {
                        alt293=1;
                    }
                    switch (alt293) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:69: NL
                            {
                            NL612=(Token)match(input,NL,FOLLOW_NL_in_list_expr5668); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL612);


                            }
                            break;

                    }

                    char_literal613=(Token)match(input,SC,FOLLOW_SC_in_list_expr5671); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SC.add(char_literal613);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:77: ( NL )?
                    int alt294=2;
                    int LA294_0 = input.LA(1);

                    if ( (LA294_0==NL) ) {
                        alt294=1;
                    }
                    switch (alt294) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:77: NL
                            {
                            NL614=(Token)match(input,NL,FOLLOW_NL_in_list_expr5673); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL614);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_list_expr5676);
                    protected_expr_nc615=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc615.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:99: ( NL )?
                    int alt295=2;
                    int LA295_0 = input.LA(1);

                    if ( (LA295_0==NL) ) {
                        alt295=1;
                    }
                    switch (alt295) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:99: NL
                            {
                            NL616=(Token)match(input,NL,FOLLOW_NL_in_list_expr5678); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL616);


                            }
                            break;

                    }

                    char_literal617=(Token)match(input,SQUARE_BRACKET_CLOSE,FOLLOW_SQUARE_BRACKET_CLOSE_in_list_expr5681); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_CLOSE.add(char_literal617);



                    // AST REWRITE
                    // elements: protected_expr_nc
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 808:107: -> ^( INTERVAL ( protected_expr_nc )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:110: ^( INTERVAL ( protected_expr_nc )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTERVAL, "INTERVAL"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:121: ( protected_expr_nc )*
                        while ( stream_protected_expr_nc.hasNext() ) {
                            adaptor.addChild(root_1, stream_protected_expr_nc.nextTree());

                        }
                        stream_protected_expr_nc.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:4: '[' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? )? ']'
                    {
                    char_literal618=(Token)match(input,SQUARE_BRACKET_OPEN,FOLLOW_SQUARE_BRACKET_OPEN_in_list_expr5695); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_OPEN.add(char_literal618);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:8: ( NL )?
                    int alt296=2;
                    int LA296_0 = input.LA(1);

                    if ( (LA296_0==NL) ) {
                        alt296=1;
                    }
                    switch (alt296) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:8: NL
                            {
                            NL619=(Token)match(input,NL,FOLLOW_NL_in_list_expr5697); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL619);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:12: ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? )?
                    int alt301=2;
                    int LA301_0 = input.LA(1);

                    if ( (LA301_0==L_begin||(LA301_0>=L_obj && LA301_0<=L_if)||(LA301_0>=L_while && LA301_0<=L_for)||LA301_0==L_match||LA301_0==L_exception||LA301_0==L_try||(LA301_0>=L_concurrent && LA301_0<=L_lazy)||(LA301_0>=L_true && LA301_0<=L_nil)||LA301_0==L_typeof||LA301_0==L_not||(LA301_0>=L_root && LA301_0<=L_native)||LA301_0==MINUS||(LA301_0>=A_ELLIPSIS && LA301_0<=U_ELLIPSIS)||LA301_0==L_force||(LA301_0>=Constr && LA301_0<=Id)||(LA301_0>=Float && LA301_0<=Num)||(LA301_0>=String && LA301_0<=ROUND_BRACKET_OPEN)||LA301_0==SQUARE_BRACKET_OPEN||LA301_0==CURLY_BRACKET_OPEN||LA301_0==UNDERSCORE) ) {
                        alt301=1;
                    }
                    switch (alt301) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:13: protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )?
                            {
                            pushFollow(FOLLOW_protected_expr_nc_in_list_expr5701);
                            protected_expr_nc620=protected_expr_nc();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc620.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:31: ( ( NL )? COMMA ( NL )? protected_expr_nc )*
                            loop299:
                            do {
                                int alt299=2;
                                int LA299_0 = input.LA(1);

                                if ( (LA299_0==NL) ) {
                                    int LA299_1 = input.LA(2);

                                    if ( (LA299_1==COMMA) ) {
                                        alt299=1;
                                    }


                                }
                                else if ( (LA299_0==COMMA) ) {
                                    alt299=1;
                                }


                                switch (alt299) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:32: ( NL )? COMMA ( NL )? protected_expr_nc
                            	    {
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:32: ( NL )?
                            	    int alt297=2;
                            	    int LA297_0 = input.LA(1);

                            	    if ( (LA297_0==NL) ) {
                            	        alt297=1;
                            	    }
                            	    switch (alt297) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:32: NL
                            	            {
                            	            NL621=(Token)match(input,NL,FOLLOW_NL_in_list_expr5704); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL621);


                            	            }
                            	            break;

                            	    }

                            	    COMMA622=(Token)match(input,COMMA,FOLLOW_COMMA_in_list_expr5707); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA622);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:42: ( NL )?
                            	    int alt298=2;
                            	    int LA298_0 = input.LA(1);

                            	    if ( (LA298_0==NL) ) {
                            	        alt298=1;
                            	    }
                            	    switch (alt298) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:42: NL
                            	            {
                            	            NL623=(Token)match(input,NL,FOLLOW_NL_in_list_expr5709); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL623);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_protected_expr_nc_in_list_expr5712);
                            	    protected_expr_nc624=protected_expr_nc();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc624.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop299;
                                }
                            } while (true);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:66: ( NL )?
                            int alt300=2;
                            int LA300_0 = input.LA(1);

                            if ( (LA300_0==NL) ) {
                                alt300=1;
                            }
                            switch (alt300) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:66: NL
                                    {
                                    NL625=(Token)match(input,NL,FOLLOW_NL_in_list_expr5716); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL625);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    char_literal626=(Token)match(input,SQUARE_BRACKET_CLOSE,FOLLOW_SQUARE_BRACKET_CLOSE_in_list_expr5721); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_CLOSE.add(char_literal626);



                    // AST REWRITE
                    // elements: protected_expr_nc
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 809:76: -> ^( SQUARE_LIST ( protected_expr_nc )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:79: ^( SQUARE_LIST ( protected_expr_nc )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SQUARE_LIST, "SQUARE_LIST"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:93: ( protected_expr_nc )*
                        while ( stream_protected_expr_nc.hasNext() ) {
                            adaptor.addChild(root_1, stream_protected_expr_nc.nextTree());

                        }
                        stream_protected_expr_nc.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:4: '(' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )? )? ')'
                    {
                    char_literal627=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_list_expr5735); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal627);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:8: ( NL )?
                    int alt302=2;
                    int LA302_0 = input.LA(1);

                    if ( (LA302_0==NL) ) {
                        alt302=1;
                    }
                    switch (alt302) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:8: NL
                            {
                            NL628=(Token)match(input,NL,FOLLOW_NL_in_list_expr5737); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL628);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:12: ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )? )?
                    int alt309=2;
                    int LA309_0 = input.LA(1);

                    if ( (LA309_0==L_begin||(LA309_0>=L_obj && LA309_0<=L_if)||(LA309_0>=L_while && LA309_0<=L_for)||LA309_0==L_match||LA309_0==L_exception||LA309_0==L_try||(LA309_0>=L_concurrent && LA309_0<=L_lazy)||(LA309_0>=L_true && LA309_0<=L_nil)||LA309_0==L_typeof||LA309_0==L_not||(LA309_0>=L_root && LA309_0<=L_native)||LA309_0==MINUS||(LA309_0>=A_ELLIPSIS && LA309_0<=U_ELLIPSIS)||LA309_0==L_force||(LA309_0>=Constr && LA309_0<=Id)||(LA309_0>=Float && LA309_0<=Num)||(LA309_0>=String && LA309_0<=ROUND_BRACKET_OPEN)||LA309_0==SQUARE_BRACKET_OPEN||LA309_0==CURLY_BRACKET_OPEN||LA309_0==UNDERSCORE) ) {
                        alt309=1;
                    }
                    switch (alt309) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:13: protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )?
                            {
                            pushFollow(FOLLOW_protected_expr_nc_in_list_expr5741);
                            protected_expr_nc629=protected_expr_nc();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc629.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:31: ( ( NL )? COMMA ( NL )? protected_expr_nc )*
                            loop305:
                            do {
                                int alt305=2;
                                int LA305_0 = input.LA(1);

                                if ( (LA305_0==NL) ) {
                                    int LA305_1 = input.LA(2);

                                    if ( (LA305_1==COMMA) ) {
                                        int LA305_2 = input.LA(3);

                                        if ( (LA305_2==NL) ) {
                                            int LA305_4 = input.LA(4);

                                            if ( (LA305_4==L_begin||(LA305_4>=L_obj && LA305_4<=L_if)||(LA305_4>=L_while && LA305_4<=L_for)||LA305_4==L_match||LA305_4==L_exception||LA305_4==L_try||(LA305_4>=L_concurrent && LA305_4<=L_lazy)||(LA305_4>=L_true && LA305_4<=L_nil)||LA305_4==L_typeof||LA305_4==L_not||(LA305_4>=L_root && LA305_4<=L_native)||LA305_4==MINUS||(LA305_4>=A_ELLIPSIS && LA305_4<=U_ELLIPSIS)||LA305_4==L_force||(LA305_4>=Constr && LA305_4<=Id)||(LA305_4>=Float && LA305_4<=Num)||(LA305_4>=String && LA305_4<=ROUND_BRACKET_OPEN)||LA305_4==SQUARE_BRACKET_OPEN||LA305_4==CURLY_BRACKET_OPEN||LA305_4==UNDERSCORE) ) {
                                                alt305=1;
                                            }


                                        }
                                        else if ( (LA305_2==L_begin||(LA305_2>=L_obj && LA305_2<=L_if)||(LA305_2>=L_while && LA305_2<=L_for)||LA305_2==L_match||LA305_2==L_exception||LA305_2==L_try||(LA305_2>=L_concurrent && LA305_2<=L_lazy)||(LA305_2>=L_true && LA305_2<=L_nil)||LA305_2==L_typeof||LA305_2==L_not||(LA305_2>=L_root && LA305_2<=L_native)||LA305_2==MINUS||(LA305_2>=A_ELLIPSIS && LA305_2<=U_ELLIPSIS)||LA305_2==L_force||(LA305_2>=Constr && LA305_2<=Id)||(LA305_2>=Float && LA305_2<=Num)||(LA305_2>=String && LA305_2<=ROUND_BRACKET_OPEN)||LA305_2==SQUARE_BRACKET_OPEN||LA305_2==CURLY_BRACKET_OPEN||LA305_2==UNDERSCORE) ) {
                                            alt305=1;
                                        }


                                    }


                                }
                                else if ( (LA305_0==COMMA) ) {
                                    int LA305_2 = input.LA(2);

                                    if ( (LA305_2==NL) ) {
                                        int LA305_4 = input.LA(3);

                                        if ( (LA305_4==L_begin||(LA305_4>=L_obj && LA305_4<=L_if)||(LA305_4>=L_while && LA305_4<=L_for)||LA305_4==L_match||LA305_4==L_exception||LA305_4==L_try||(LA305_4>=L_concurrent && LA305_4<=L_lazy)||(LA305_4>=L_true && LA305_4<=L_nil)||LA305_4==L_typeof||LA305_4==L_not||(LA305_4>=L_root && LA305_4<=L_native)||LA305_4==MINUS||(LA305_4>=A_ELLIPSIS && LA305_4<=U_ELLIPSIS)||LA305_4==L_force||(LA305_4>=Constr && LA305_4<=Id)||(LA305_4>=Float && LA305_4<=Num)||(LA305_4>=String && LA305_4<=ROUND_BRACKET_OPEN)||LA305_4==SQUARE_BRACKET_OPEN||LA305_4==CURLY_BRACKET_OPEN||LA305_4==UNDERSCORE) ) {
                                            alt305=1;
                                        }


                                    }
                                    else if ( (LA305_2==L_begin||(LA305_2>=L_obj && LA305_2<=L_if)||(LA305_2>=L_while && LA305_2<=L_for)||LA305_2==L_match||LA305_2==L_exception||LA305_2==L_try||(LA305_2>=L_concurrent && LA305_2<=L_lazy)||(LA305_2>=L_true && LA305_2<=L_nil)||LA305_2==L_typeof||LA305_2==L_not||(LA305_2>=L_root && LA305_2<=L_native)||LA305_2==MINUS||(LA305_2>=A_ELLIPSIS && LA305_2<=U_ELLIPSIS)||LA305_2==L_force||(LA305_2>=Constr && LA305_2<=Id)||(LA305_2>=Float && LA305_2<=Num)||(LA305_2>=String && LA305_2<=ROUND_BRACKET_OPEN)||LA305_2==SQUARE_BRACKET_OPEN||LA305_2==CURLY_BRACKET_OPEN||LA305_2==UNDERSCORE) ) {
                                        alt305=1;
                                    }


                                }


                                switch (alt305) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:32: ( NL )? COMMA ( NL )? protected_expr_nc
                            	    {
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:32: ( NL )?
                            	    int alt303=2;
                            	    int LA303_0 = input.LA(1);

                            	    if ( (LA303_0==NL) ) {
                            	        alt303=1;
                            	    }
                            	    switch (alt303) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:32: NL
                            	            {
                            	            NL630=(Token)match(input,NL,FOLLOW_NL_in_list_expr5744); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL630);


                            	            }
                            	            break;

                            	    }

                            	    COMMA631=(Token)match(input,COMMA,FOLLOW_COMMA_in_list_expr5747); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA631);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:42: ( NL )?
                            	    int alt304=2;
                            	    int LA304_0 = input.LA(1);

                            	    if ( (LA304_0==NL) ) {
                            	        alt304=1;
                            	    }
                            	    switch (alt304) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:42: NL
                            	            {
                            	            NL632=(Token)match(input,NL,FOLLOW_NL_in_list_expr5749); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL632);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_protected_expr_nc_in_list_expr5752);
                            	    protected_expr_nc633=protected_expr_nc();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc633.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop305;
                                }
                            } while (true);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:66: ( NL )?
                            int alt306=2;
                            int LA306_0 = input.LA(1);

                            if ( (LA306_0==NL) ) {
                                alt306=1;
                            }
                            switch (alt306) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:66: NL
                                    {
                                    NL634=(Token)match(input,NL,FOLLOW_NL_in_list_expr5756); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL634);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:70: ( COMMA ( NL )? )?
                            int alt308=2;
                            int LA308_0 = input.LA(1);

                            if ( (LA308_0==COMMA) ) {
                                alt308=1;
                            }
                            switch (alt308) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:71: COMMA ( NL )?
                                    {
                                    COMMA635=(Token)match(input,COMMA,FOLLOW_COMMA_in_list_expr5760); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA635);

                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:77: ( NL )?
                                    int alt307=2;
                                    int LA307_0 = input.LA(1);

                                    if ( (LA307_0==NL) ) {
                                        alt307=1;
                                    }
                                    switch (alt307) {
                                        case 1 :
                                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:77: NL
                                            {
                                            NL636=(Token)match(input,NL,FOLLOW_NL_in_list_expr5762); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_NL.add(NL636);


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    char_literal637=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_list_expr5769); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal637);



                    // AST REWRITE
                    // elements: protected_expr_nc, COMMA
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 810:89: -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( protected_expr_nc )* ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:92: ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( protected_expr_nc )* ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROUND_LIST, "ROUND_LIST"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:105: ^( NIL_TOKEN ( COMMA )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:117: ( COMMA )*
                        while ( stream_COMMA.hasNext() ) {
                            adaptor.addChild(root_2, stream_COMMA.nextNode());

                        }
                        stream_COMMA.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:125: ^( NIL_TOKEN ( protected_expr_nc )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:137: ( protected_expr_nc )*
                        while ( stream_protected_expr_nc.hasNext() ) {
                            adaptor.addChild(root_2, stream_protected_expr_nc.nextTree());

                        }
                        stream_protected_expr_nc.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "list_expr"

    public static class map_or_set_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "map_or_set_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:812:1: map_or_set_expr : ( '{' ( NL )? ( map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( map_or_set_elem_expr )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) );
    public final babel17Parser.map_or_set_expr_return map_or_set_expr() throws RecognitionException {
        babel17Parser.map_or_set_expr_return retval = new babel17Parser.map_or_set_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal638=null;
        Token NL639=null;
        Token NL641=null;
        Token COMMA642=null;
        Token NL643=null;
        Token NL645=null;
        Token char_literal646=null;
        Token char_literal647=null;
        Token NL648=null;
        Token NL650=null;
        Token char_literal651=null;
        babel17Parser.map_or_set_elem_expr_return map_or_set_elem_expr640 = null;

        babel17Parser.map_or_set_elem_expr_return map_or_set_elem_expr644 = null;

        babel17Parser.token_ARROW_return token_ARROW649 = null;


        CommonTree char_literal638_tree=null;
        CommonTree NL639_tree=null;
        CommonTree NL641_tree=null;
        CommonTree COMMA642_tree=null;
        CommonTree NL643_tree=null;
        CommonTree NL645_tree=null;
        CommonTree char_literal646_tree=null;
        CommonTree char_literal647_tree=null;
        CommonTree NL648_tree=null;
        CommonTree NL650_tree=null;
        CommonTree char_literal651_tree=null;
        RewriteRuleTokenStream stream_CURLY_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_OPEN");
        RewriteRuleTokenStream stream_CURLY_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_map_or_set_elem_expr=new RewriteRuleSubtreeStream(adaptor,"rule map_or_set_elem_expr");
        RewriteRuleSubtreeStream stream_token_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_ARROW");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:2: ( '{' ( NL )? ( map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( map_or_set_elem_expr )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) )
            int alt319=2;
            int LA319_0 = input.LA(1);

            if ( (LA319_0==CURLY_BRACKET_OPEN) ) {
                switch ( input.LA(2) ) {
                case NL:
                    {
                    int LA319_2 = input.LA(3);

                    if ( (LA319_2==L_begin||(LA319_2>=L_obj && LA319_2<=L_if)||(LA319_2>=L_while && LA319_2<=L_for)||LA319_2==L_match||LA319_2==L_exception||LA319_2==L_try||(LA319_2>=L_concurrent && LA319_2<=L_lazy)||(LA319_2>=L_true && LA319_2<=L_nil)||LA319_2==L_typeof||LA319_2==L_not||(LA319_2>=L_root && LA319_2<=L_native)||LA319_2==MINUS||(LA319_2>=A_ELLIPSIS && LA319_2<=U_ELLIPSIS)||LA319_2==L_force||(LA319_2>=Constr && LA319_2<=Id)||(LA319_2>=Float && LA319_2<=Num)||(LA319_2>=String && LA319_2<=ROUND_BRACKET_OPEN)||LA319_2==SQUARE_BRACKET_OPEN||(LA319_2>=CURLY_BRACKET_OPEN && LA319_2<=UNDERSCORE)) ) {
                        alt319=1;
                    }
                    else if ( ((LA319_2>=A_ARROW && LA319_2<=U_ARROW)) ) {
                        alt319=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 319, 2, input);

                        throw nvae;
                    }
                    }
                    break;
                case L_begin:
                case L_obj:
                case L_with:
                case L_if:
                case L_while:
                case L_for:
                case L_match:
                case L_exception:
                case L_try:
                case L_concurrent:
                case L_choose:
                case L_lazy:
                case L_true:
                case L_false:
                case L_this:
                case L_random:
                case L_nil:
                case L_typeof:
                case L_not:
                case L_root:
                case L_native:
                case MINUS:
                case A_ELLIPSIS:
                case U_ELLIPSIS:
                case L_force:
                case Constr:
                case Id:
                case Float:
                case Num:
                case String:
                case ROUND_BRACKET_OPEN:
                case SQUARE_BRACKET_OPEN:
                case CURLY_BRACKET_OPEN:
                case CURLY_BRACKET_CLOSE:
                case UNDERSCORE:
                    {
                    alt319=1;
                    }
                    break;
                case A_ARROW:
                case U_ARROW:
                    {
                    alt319=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 319, 1, input);

                    throw nvae;
                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 319, 0, input);

                throw nvae;
            }
            switch (alt319) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:4: '{' ( NL )? ( map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )* )? '}'
                    {
                    char_literal638=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_map_or_set_expr5798); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal638);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:8: ( NL )?
                    int alt311=2;
                    int LA311_0 = input.LA(1);

                    if ( (LA311_0==NL) ) {
                        alt311=1;
                    }
                    switch (alt311) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:8: NL
                            {
                            NL639=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr5800); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL639);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:12: ( map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )* )?
                    int alt316=2;
                    int LA316_0 = input.LA(1);

                    if ( (LA316_0==L_begin||(LA316_0>=L_obj && LA316_0<=L_if)||(LA316_0>=L_while && LA316_0<=L_for)||LA316_0==L_match||LA316_0==L_exception||LA316_0==L_try||(LA316_0>=L_concurrent && LA316_0<=L_lazy)||(LA316_0>=L_true && LA316_0<=L_nil)||LA316_0==L_typeof||LA316_0==L_not||(LA316_0>=L_root && LA316_0<=L_native)||LA316_0==MINUS||(LA316_0>=A_ELLIPSIS && LA316_0<=U_ELLIPSIS)||LA316_0==L_force||(LA316_0>=Constr && LA316_0<=Id)||(LA316_0>=Float && LA316_0<=Num)||(LA316_0>=String && LA316_0<=ROUND_BRACKET_OPEN)||LA316_0==SQUARE_BRACKET_OPEN||LA316_0==CURLY_BRACKET_OPEN||LA316_0==UNDERSCORE) ) {
                        alt316=1;
                    }
                    switch (alt316) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:13: map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )*
                            {
                            pushFollow(FOLLOW_map_or_set_elem_expr_in_map_or_set_expr5804);
                            map_or_set_elem_expr640=map_or_set_elem_expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_map_or_set_elem_expr.add(map_or_set_elem_expr640.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:34: ( NL )?
                            int alt312=2;
                            int LA312_0 = input.LA(1);

                            if ( (LA312_0==NL) ) {
                                alt312=1;
                            }
                            switch (alt312) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:34: NL
                                    {
                                    NL641=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr5806); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL641);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:38: ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )*
                            loop315:
                            do {
                                int alt315=2;
                                int LA315_0 = input.LA(1);

                                if ( (LA315_0==COMMA) ) {
                                    alt315=1;
                                }


                                switch (alt315) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:39: COMMA ( NL )? map_or_set_elem_expr ( NL )?
                            	    {
                            	    COMMA642=(Token)match(input,COMMA,FOLLOW_COMMA_in_map_or_set_expr5810); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA642);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:45: ( NL )?
                            	    int alt313=2;
                            	    int LA313_0 = input.LA(1);

                            	    if ( (LA313_0==NL) ) {
                            	        alt313=1;
                            	    }
                            	    switch (alt313) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:45: NL
                            	            {
                            	            NL643=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr5812); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL643);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_map_or_set_elem_expr_in_map_or_set_expr5815);
                            	    map_or_set_elem_expr644=map_or_set_elem_expr();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_map_or_set_elem_expr.add(map_or_set_elem_expr644.getTree());
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:70: ( NL )?
                            	    int alt314=2;
                            	    int LA314_0 = input.LA(1);

                            	    if ( (LA314_0==NL) ) {
                            	        alt314=1;
                            	    }
                            	    switch (alt314) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:70: NL
                            	            {
                            	            NL645=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr5817); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL645);


                            	            }
                            	            break;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop315;
                                }
                            } while (true);


                            }
                            break;

                    }

                    char_literal646=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_map_or_set_expr5824); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal646);



                    // AST REWRITE
                    // elements: map_or_set_elem_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 813:82: -> ^( MAP_OR_SET_OR_OBJ ( map_or_set_elem_expr )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:85: ^( MAP_OR_SET_OR_OBJ ( map_or_set_elem_expr )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MAP_OR_SET_OR_OBJ, "MAP_OR_SET_OR_OBJ"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:105: ( map_or_set_elem_expr )*
                        while ( stream_map_or_set_elem_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_map_or_set_elem_expr.nextTree());

                        }
                        stream_map_or_set_elem_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:814:10: '{' ( NL )? token_ARROW ( NL )? '}'
                    {
                    char_literal647=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_map_or_set_expr5844); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal647);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:814:14: ( NL )?
                    int alt317=2;
                    int LA317_0 = input.LA(1);

                    if ( (LA317_0==NL) ) {
                        alt317=1;
                    }
                    switch (alt317) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:814:14: NL
                            {
                            NL648=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr5846); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL648);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_token_ARROW_in_map_or_set_expr5849);
                    token_ARROW649=token_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_ARROW.add(token_ARROW649.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:814:30: ( NL )?
                    int alt318=2;
                    int LA318_0 = input.LA(1);

                    if ( (LA318_0==NL) ) {
                        alt318=1;
                    }
                    switch (alt318) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:814:30: NL
                            {
                            NL650=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr5851); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL650);


                            }
                            break;

                    }

                    char_literal651=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_map_or_set_expr5854); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal651);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 814:38: -> ^( EMPTY_MAP )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:814:41: ^( EMPTY_MAP )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EMPTY_MAP, "EMPTY_MAP"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "map_or_set_expr"

    public static class map_or_set_elem_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "map_or_set_elem_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:1: map_or_set_elem_expr : protected_expr_nc ( ( NL )? arrow_or_assign ( NL )? protected_expr_nc )? -> ^( NIL_TOKEN ^( NIL_TOKEN ( protected_expr_nc )* ) ( arrow_or_assign )* ) ;
    public final babel17Parser.map_or_set_elem_expr_return map_or_set_elem_expr() throws RecognitionException {
        babel17Parser.map_or_set_elem_expr_return retval = new babel17Parser.map_or_set_elem_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL653=null;
        Token NL655=null;
        babel17Parser.protected_expr_nc_return protected_expr_nc652 = null;

        babel17Parser.arrow_or_assign_return arrow_or_assign654 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc656 = null;


        CommonTree NL653_tree=null;
        CommonTree NL655_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_arrow_or_assign=new RewriteRuleSubtreeStream(adaptor,"rule arrow_or_assign");
        RewriteRuleSubtreeStream stream_protected_expr_nc=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr_nc");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:817:2: ( protected_expr_nc ( ( NL )? arrow_or_assign ( NL )? protected_expr_nc )? -> ^( NIL_TOKEN ^( NIL_TOKEN ( protected_expr_nc )* ) ( arrow_or_assign )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:817:4: protected_expr_nc ( ( NL )? arrow_or_assign ( NL )? protected_expr_nc )?
            {
            pushFollow(FOLLOW_protected_expr_nc_in_map_or_set_elem_expr5871);
            protected_expr_nc652=protected_expr_nc();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc652.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:817:22: ( ( NL )? arrow_or_assign ( NL )? protected_expr_nc )?
            int alt322=2;
            int LA322_0 = input.LA(1);

            if ( (LA322_0==NL) ) {
                int LA322_1 = input.LA(2);

                if ( (LA322_1==ASSIGN||(LA322_1>=A_ARROW && LA322_1<=U_ARROW)) ) {
                    alt322=1;
                }
            }
            else if ( (LA322_0==ASSIGN||(LA322_0>=A_ARROW && LA322_0<=U_ARROW)) ) {
                alt322=1;
            }
            switch (alt322) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:817:23: ( NL )? arrow_or_assign ( NL )? protected_expr_nc
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:817:23: ( NL )?
                    int alt320=2;
                    int LA320_0 = input.LA(1);

                    if ( (LA320_0==NL) ) {
                        alt320=1;
                    }
                    switch (alt320) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:817:23: NL
                            {
                            NL653=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_elem_expr5874); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL653);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_arrow_or_assign_in_map_or_set_elem_expr5877);
                    arrow_or_assign654=arrow_or_assign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrow_or_assign.add(arrow_or_assign654.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:817:43: ( NL )?
                    int alt321=2;
                    int LA321_0 = input.LA(1);

                    if ( (LA321_0==NL) ) {
                        alt321=1;
                    }
                    switch (alt321) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:817:43: NL
                            {
                            NL655=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_elem_expr5879); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL655);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_map_or_set_elem_expr5882);
                    protected_expr_nc656=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc656.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: arrow_or_assign, protected_expr_nc
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 817:67: -> ^( NIL_TOKEN ^( NIL_TOKEN ( protected_expr_nc )* ) ( arrow_or_assign )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:817:70: ^( NIL_TOKEN ^( NIL_TOKEN ( protected_expr_nc )* ) ( arrow_or_assign )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:817:82: ^( NIL_TOKEN ( protected_expr_nc )* )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:817:94: ( protected_expr_nc )*
                while ( stream_protected_expr_nc.hasNext() ) {
                    adaptor.addChild(root_2, stream_protected_expr_nc.nextTree());

                }
                stream_protected_expr_nc.reset();

                adaptor.addChild(root_1, root_2);
                }
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:817:114: ( arrow_or_assign )*
                while ( stream_arrow_or_assign.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrow_or_assign.nextTree());

                }
                stream_arrow_or_assign.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "map_or_set_elem_expr"

    public static class type_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:819:1: type_expr : '(' ( NL )? ':' ( NL )? typeid ( NL )? ')' -> ^( TYPE_EXPR typeid ) ;
    public final babel17Parser.type_expr_return type_expr() throws RecognitionException {
        babel17Parser.type_expr_return retval = new babel17Parser.type_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal657=null;
        Token NL658=null;
        Token char_literal659=null;
        Token NL660=null;
        Token NL662=null;
        Token char_literal663=null;
        babel17Parser.typeid_return typeid661 = null;


        CommonTree char_literal657_tree=null;
        CommonTree NL658_tree=null;
        CommonTree char_literal659_tree=null;
        CommonTree NL660_tree=null;
        CommonTree NL662_tree=null;
        CommonTree char_literal663_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleSubtreeStream stream_typeid=new RewriteRuleSubtreeStream(adaptor,"rule typeid");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:820:2: ( '(' ( NL )? ':' ( NL )? typeid ( NL )? ')' -> ^( TYPE_EXPR typeid ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:820:4: '(' ( NL )? ':' ( NL )? typeid ( NL )? ')'
            {
            char_literal657=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_type_expr5909); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal657);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:820:8: ( NL )?
            int alt323=2;
            int LA323_0 = input.LA(1);

            if ( (LA323_0==NL) ) {
                alt323=1;
            }
            switch (alt323) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:820:8: NL
                    {
                    NL658=(Token)match(input,NL,FOLLOW_NL_in_type_expr5911); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL658);


                    }
                    break;

            }

            char_literal659=(Token)match(input,COLON,FOLLOW_COLON_in_type_expr5914); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(char_literal659);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:820:16: ( NL )?
            int alt324=2;
            int LA324_0 = input.LA(1);

            if ( (LA324_0==NL) ) {
                alt324=1;
            }
            switch (alt324) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:820:16: NL
                    {
                    NL660=(Token)match(input,NL,FOLLOW_NL_in_type_expr5916); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL660);


                    }
                    break;

            }

            pushFollow(FOLLOW_typeid_in_type_expr5919);
            typeid661=typeid();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeid.add(typeid661.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:820:27: ( NL )?
            int alt325=2;
            int LA325_0 = input.LA(1);

            if ( (LA325_0==NL) ) {
                alt325=1;
            }
            switch (alt325) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:820:27: NL
                    {
                    NL662=(Token)match(input,NL,FOLLOW_NL_in_type_expr5921); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL662);


                    }
                    break;

            }

            char_literal663=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_type_expr5924); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal663);



            // AST REWRITE
            // elements: typeid
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 820:35: -> ^( TYPE_EXPR typeid )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:820:38: ^( TYPE_EXPR typeid )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_EXPR, "TYPE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_typeid.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_expr"

    public static class primitive_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitive_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:822:1: primitive_expr : ( Num | Float | String | Id | Constr | L_true | L_false | L_this | L_nil | L_root | ( type_expr )=> type_expr | ( lambda_expr )=> lambda_expr | list_expr | with_control_expr | map_or_set_expr );
    public final babel17Parser.primitive_expr_return primitive_expr() throws RecognitionException {
        babel17Parser.primitive_expr_return retval = new babel17Parser.primitive_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Num664=null;
        Token Float665=null;
        Token String666=null;
        Token Id667=null;
        Token Constr668=null;
        Token L_true669=null;
        Token L_false670=null;
        Token L_this671=null;
        Token L_nil672=null;
        Token L_root673=null;
        babel17Parser.type_expr_return type_expr674 = null;

        babel17Parser.lambda_expr_return lambda_expr675 = null;

        babel17Parser.list_expr_return list_expr676 = null;

        babel17Parser.with_control_expr_return with_control_expr677 = null;

        babel17Parser.map_or_set_expr_return map_or_set_expr678 = null;


        CommonTree Num664_tree=null;
        CommonTree Float665_tree=null;
        CommonTree String666_tree=null;
        CommonTree Id667_tree=null;
        CommonTree Constr668_tree=null;
        CommonTree L_true669_tree=null;
        CommonTree L_false670_tree=null;
        CommonTree L_this671_tree=null;
        CommonTree L_nil672_tree=null;
        CommonTree L_root673_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:823:2: ( Num | Float | String | Id | Constr | L_true | L_false | L_this | L_nil | L_root | ( type_expr )=> type_expr | ( lambda_expr )=> lambda_expr | list_expr | with_control_expr | map_or_set_expr )
            int alt326=15;
            alt326 = dfa326.predict(input);
            switch (alt326) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:823:4: Num
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Num664=(Token)match(input,Num,FOLLOW_Num_in_primitive_expr5942); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Num664_tree = (CommonTree)adaptor.create(Num664);
                    adaptor.addChild(root_0, Num664_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:824:4: Float
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Float665=(Token)match(input,Float,FOLLOW_Float_in_primitive_expr5947); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Float665_tree = (CommonTree)adaptor.create(Float665);
                    adaptor.addChild(root_0, Float665_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:825:4: String
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    String666=(Token)match(input,String,FOLLOW_String_in_primitive_expr5952); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    String666_tree = (CommonTree)adaptor.create(String666);
                    adaptor.addChild(root_0, String666_tree);
                    }

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:826:4: Id
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Id667=(Token)match(input,Id,FOLLOW_Id_in_primitive_expr5957); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Id667_tree = (CommonTree)adaptor.create(Id667);
                    adaptor.addChild(root_0, Id667_tree);
                    }

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:827:4: Constr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Constr668=(Token)match(input,Constr,FOLLOW_Constr_in_primitive_expr5962); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Constr668_tree = (CommonTree)adaptor.create(Constr668);
                    adaptor.addChild(root_0, Constr668_tree);
                    }

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:828:4: L_true
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_true669=(Token)match(input,L_true,FOLLOW_L_true_in_primitive_expr5967); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_true669_tree = (CommonTree)adaptor.create(L_true669);
                    adaptor.addChild(root_0, L_true669_tree);
                    }

                    }
                    break;
                case 7 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:829:4: L_false
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_false670=(Token)match(input,L_false,FOLLOW_L_false_in_primitive_expr5972); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_false670_tree = (CommonTree)adaptor.create(L_false670);
                    adaptor.addChild(root_0, L_false670_tree);
                    }

                    }
                    break;
                case 8 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:830:4: L_this
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_this671=(Token)match(input,L_this,FOLLOW_L_this_in_primitive_expr5977); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_this671_tree = (CommonTree)adaptor.create(L_this671);
                    adaptor.addChild(root_0, L_this671_tree);
                    }

                    }
                    break;
                case 9 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:831:4: L_nil
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_nil672=(Token)match(input,L_nil,FOLLOW_L_nil_in_primitive_expr5983); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_nil672_tree = (CommonTree)adaptor.create(L_nil672);
                    adaptor.addChild(root_0, L_nil672_tree);
                    }

                    }
                    break;
                case 10 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:4: L_root
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_root673=(Token)match(input,L_root,FOLLOW_L_root_in_primitive_expr5988); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_root673_tree = (CommonTree)adaptor.create(L_root673);
                    adaptor.addChild(root_0, L_root673_tree);
                    }

                    }
                    break;
                case 11 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:833:4: ( type_expr )=> type_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_type_expr_in_primitive_expr5999);
                    type_expr674=type_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_expr674.getTree());

                    }
                    break;
                case 12 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:834:4: ( lambda_expr )=> lambda_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lambda_expr_in_primitive_expr6010);
                    lambda_expr675=lambda_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lambda_expr675.getTree());

                    }
                    break;
                case 13 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:835:5: list_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_list_expr_in_primitive_expr6016);
                    list_expr676=list_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, list_expr676.getTree());

                    }
                    break;
                case 14 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:836:4: with_control_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_with_control_expr_in_primitive_expr6021);
                    with_control_expr677=with_control_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, with_control_expr677.getTree());

                    }
                    break;
                case 15 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:837:4: map_or_set_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_map_or_set_expr_in_primitive_expr6026);
                    map_or_set_expr678=map_or_set_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, map_or_set_expr678.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "primitive_expr"

    // $ANTLR start synpred1_babel17
    public final void synpred1_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:5: ( pattern ( NL )? ':' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:6: pattern ( NL )? ':'
        {
        pushFollow(FOLLOW_pattern_in_synpred1_babel171941);
        pattern();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:14: ( NL )?
        int alt327=2;
        int LA327_0 = input.LA(1);

        if ( (LA327_0==NL) ) {
            alt327=1;
        }
        switch (alt327) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:14: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred1_babel171943); if (state.failed) return ;

                }
                break;

        }

        match(input,COLON,FOLLOW_COLON_in_synpred1_babel171946); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_babel17

    // $ANTLR start synpred2_babel17
    public final void synpred2_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:10: ( Id ( NL )? L_as )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:11: Id ( NL )? L_as
        {
        match(input,Id,FOLLOW_Id_in_synpred2_babel171994); if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:14: ( NL )?
        int alt328=2;
        int LA328_0 = input.LA(1);

        if ( (LA328_0==NL) ) {
            alt328=1;
        }
        switch (alt328) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:14: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred2_babel171996); if (state.failed) return ;

                }
                break;

        }

        match(input,L_as,FOLLOW_L_as_in_synpred2_babel171999); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_babel17

    // $ANTLR start synpred3_babel17
    public final void synpred3_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:4: ( protected_expr ( NL )? QUESTION_MARK )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:5: protected_expr ( NL )? QUESTION_MARK
        {
        pushFollow(FOLLOW_protected_expr_in_synpred3_babel172030);
        protected_expr();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:20: ( NL )?
        int alt329=2;
        int LA329_0 = input.LA(1);

        if ( (LA329_0==NL) ) {
            alt329=1;
        }
        switch (alt329) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:20: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred3_babel172032); if (state.failed) return ;

                }
                break;

        }

        match(input,QUESTION_MARK,FOLLOW_QUESTION_MARK_in_synpred3_babel172035); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_babel17

    // $ANTLR start synpred4_babel17
    public final void synpred4_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:448:4: ( protected_expr ( NL )? EXCLAMATION_MARK )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:448:5: protected_expr ( NL )? EXCLAMATION_MARK
        {
        pushFollow(FOLLOW_protected_expr_in_synpred4_babel172073);
        protected_expr();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:448:20: ( NL )?
        int alt330=2;
        int LA330_0 = input.LA(1);

        if ( (LA330_0==NL) ) {
            alt330=1;
        }
        switch (alt330) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:448:20: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred4_babel172075); if (state.failed) return ;

                }
                break;

        }

        match(input,EXCLAMATION_MARK,FOLLOW_EXCLAMATION_MARK_in_synpred4_babel172078); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_babel17

    // $ANTLR start synpred5_babel17
    public final void synpred5_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:4: ( Id pattern )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:5: Id pattern
        {
        match(input,Id,FOLLOW_Id_in_synpred5_babel172116); if (state.failed) return ;
        pushFollow(FOLLOW_pattern_in_synpred5_babel172118);
        pattern();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_babel17

    // $ANTLR start synpred6_babel17
    public final void synpred6_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:453:4: ( pattern ( NL )? L_if )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:453:5: pattern ( NL )? L_if
        {
        pushFollow(FOLLOW_pattern_in_synpred6_babel172207);
        pattern();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:453:13: ( NL )?
        int alt331=2;
        int LA331_0 = input.LA(1);

        if ( (LA331_0==NL) ) {
            alt331=1;
        }
        switch (alt331) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:453:13: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred6_babel172209); if (state.failed) return ;

                }
                break;

        }

        match(input,L_if,FOLLOW_L_if_in_synpred6_babel172212); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_babel17

    // $ANTLR start synpred7_babel17
    public final void synpred7_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:454:4: ( pattern ( NL )? ':' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:454:5: pattern ( NL )? ':'
        {
        pushFollow(FOLLOW_pattern_in_synpred7_babel172243);
        pattern();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:454:13: ( NL )?
        int alt332=2;
        int LA332_0 = input.LA(1);

        if ( (LA332_0==NL) ) {
            alt332=1;
        }
        switch (alt332) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:454:13: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred7_babel172245); if (state.failed) return ;

                }
                break;

        }

        match(input,COLON,FOLLOW_COLON_in_synpred7_babel172248); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_babel17

    // $ANTLR start synpred8_babel17
    public final void synpred8_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:4: ( defpattern ( NL )? '=' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:5: defpattern ( NL )? '='
        {
        pushFollow(FOLLOW_defpattern_in_synpred8_babel173082);
        defpattern();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:16: ( NL )?
        int alt333=2;
        int LA333_0 = input.LA(1);

        if ( (LA333_0==NL) ) {
            alt333=1;
        }
        switch (alt333) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:16: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred8_babel173084); if (state.failed) return ;

                }
                break;

        }

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred8_babel173087); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_babel17

    // $ANTLR start synpred9_babel17
    public final void synpred9_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:568:4: ( ( pattern | objelem_assign ) ( NL )? '=' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:568:5: ( pattern | objelem_assign ) ( NL )? '='
        {
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:568:5: ( pattern | objelem_assign )
        int alt334=2;
        int LA334_0 = input.LA(1);

        if ( (LA334_0==L_exception||(LA334_0>=L_true && LA334_0<=L_false)||LA334_0==L_nil||LA334_0==MINUS||(LA334_0>=A_ELLIPSIS && LA334_0<=U_ELLIPSIS)||LA334_0==Constr||LA334_0==Num||(LA334_0>=String && LA334_0<=ROUND_BRACKET_OPEN)||LA334_0==SQUARE_BRACKET_OPEN||LA334_0==CURLY_BRACKET_OPEN||LA334_0==UNDERSCORE) ) {
            alt334=1;
        }
        else if ( (LA334_0==Id) ) {
            int LA334_2 = input.LA(2);

            if ( (LA334_2==PERIOD) ) {
                alt334=2;
            }
            else if ( (LA334_2==ASSIGN||(LA334_2>=A_DOUBLE_COLON && LA334_2<=U_DOUBLE_COLON)||LA334_2==NL) ) {
                alt334=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 334, 2, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 334, 0, input);

            throw nvae;
        }
        switch (alt334) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:568:6: pattern
                {
                pushFollow(FOLLOW_pattern_in_synpred9_babel173609);
                pattern();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:568:16: objelem_assign
                {
                pushFollow(FOLLOW_objelem_assign_in_synpred9_babel173613);
                objelem_assign();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:568:32: ( NL )?
        int alt335=2;
        int LA335_0 = input.LA(1);

        if ( (LA335_0==NL) ) {
            alt335=1;
        }
        switch (alt335) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:568:32: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred9_babel173616); if (state.failed) return ;

                }
                break;

        }

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred9_babel173619); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_babel17

    // $ANTLR start synpred10_babel17
    public final void synpred10_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:603:11: ( L_obj ( NL )? parents )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:603:12: L_obj ( NL )? parents
        {
        match(input,L_obj,FOLLOW_L_obj_in_synpred10_babel173848); if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:603:18: ( NL )?
        int alt336=2;
        int LA336_0 = input.LA(1);

        if ( (LA336_0==NL) ) {
            alt336=1;
        }
        switch (alt336) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:603:18: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred10_babel173850); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_parents_in_synpred10_babel173853);
        parents();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_babel17

    // $ANTLR start synpred11_babel17
    public final void synpred11_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:608:4: ( lambda_expr_nobrackets )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:608:5: lambda_expr_nobrackets
        {
        pushFollow(FOLLOW_lambda_expr_nobrackets_in_synpred11_babel173924);
        lambda_expr_nobrackets();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_babel17

    // $ANTLR start synpred12_babel17
    public final void synpred12_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:4: ( lambda_expr_nobrackets )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:5: lambda_expr_nobrackets
        {
        pushFollow(FOLLOW_lambda_expr_nobrackets_in_synpred12_babel173947);
        lambda_expr_nobrackets();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_babel17

    // $ANTLR start synpred13_babel17
    public final void synpred13_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:4: ( '[' ( NL )? protected_expr_nc ( NL )? ';' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:5: '[' ( NL )? protected_expr_nc ( NL )? ';'
        {
        match(input,SQUARE_BRACKET_OPEN,FOLLOW_SQUARE_BRACKET_OPEN_in_synpred13_babel175646); if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:9: ( NL )?
        int alt337=2;
        int LA337_0 = input.LA(1);

        if ( (LA337_0==NL) ) {
            alt337=1;
        }
        switch (alt337) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:9: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred13_babel175648); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_protected_expr_nc_in_synpred13_babel175651);
        protected_expr_nc();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:31: ( NL )?
        int alt338=2;
        int LA338_0 = input.LA(1);

        if ( (LA338_0==NL) ) {
            alt338=1;
        }
        switch (alt338) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:31: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred13_babel175653); if (state.failed) return ;

                }
                break;

        }

        match(input,SC,FOLLOW_SC_in_synpred13_babel175656); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_babel17

    // $ANTLR start synpred14_babel17
    public final void synpred14_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:833:4: ( type_expr )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:833:5: type_expr
        {
        pushFollow(FOLLOW_type_expr_in_synpred14_babel175994);
        type_expr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_babel17

    // $ANTLR start synpred15_babel17
    public final void synpred15_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:834:4: ( lambda_expr )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:834:5: lambda_expr
        {
        pushFollow(FOLLOW_lambda_expr_in_synpred15_babel176005);
        lambda_expr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_babel17

    // Delegated rules

    public final boolean synpred4_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA19 dfa19 = new DFA19(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA67 dfa67 = new DFA67(this);
    protected DFA73 dfa73 = new DFA73(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA82 dfa82 = new DFA82(this);
    protected DFA108 dfa108 = new DFA108(this);
    protected DFA146 dfa146 = new DFA146(this);
    protected DFA156 dfa156 = new DFA156(this);
    protected DFA157 dfa157 = new DFA157(this);
    protected DFA326 dfa326 = new DFA326(this);
    static final String DFA19_eotS =
        "\21\uffff";
    static final String DFA19_eofS =
        "\21\uffff";
    static final String DFA19_minS =
        "\1\131\16\0\2\uffff";
    static final String DFA19_maxS =
        "\1\u00a7\16\0\2\uffff";
    static final String DFA19_acceptS =
        "\17\uffff\1\1\1\2";
    static final String DFA19_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\2\uffff}>";
    static final String[] DFA19_transitionS = {
            "\1\15\10\uffff\1\6\1\7\2\uffff\1\10\31\uffff\1\11\17\uffff\2"+
            "\16\10\uffff\1\1\1\2\2\uffff\1\5\1\uffff\1\4\1\13\1\uffff\1"+
            "\12\1\uffff\1\14\1\uffff\1\3",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA19_eot = DFA.unpackEncodedString(DFA19_eotS);
    static final short[] DFA19_eof = DFA.unpackEncodedString(DFA19_eofS);
    static final char[] DFA19_min = DFA.unpackEncodedStringToUnsignedChars(DFA19_minS);
    static final char[] DFA19_max = DFA.unpackEncodedStringToUnsignedChars(DFA19_maxS);
    static final short[] DFA19_accept = DFA.unpackEncodedString(DFA19_acceptS);
    static final short[] DFA19_special = DFA.unpackEncodedString(DFA19_specialS);
    static final short[][] DFA19_transition;

    static {
        int numStates = DFA19_transitionS.length;
        DFA19_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA19_transition[i] = DFA.unpackEncodedString(DFA19_transitionS[i]);
        }
    }

    class DFA19 extends DFA {

        public DFA19(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 19;
            this.eot = DFA19_eot;
            this.eof = DFA19_eof;
            this.min = DFA19_min;
            this.max = DFA19_max;
            this.accept = DFA19_accept;
            this.special = DFA19_special;
            this.transition = DFA19_transition;
        }
        public String getDescription() {
            return "439:1: casepattern : ( ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation -> ^( TYPE_PATTERN typeannotation pattern ) | pattern );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA19_1 = input.LA(1);

                         
                        int index19_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA19_2 = input.LA(1);

                         
                        int index19_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA19_3 = input.LA(1);

                         
                        int index19_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA19_4 = input.LA(1);

                         
                        int index19_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA19_5 = input.LA(1);

                         
                        int index19_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA19_6 = input.LA(1);

                         
                        int index19_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA19_7 = input.LA(1);

                         
                        int index19_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA19_8 = input.LA(1);

                         
                        int index19_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA19_9 = input.LA(1);

                         
                        int index19_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA19_10 = input.LA(1);

                         
                        int index19_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA19_11 = input.LA(1);

                         
                        int index19_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA19_12 = input.LA(1);

                         
                        int index19_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA19_13 = input.LA(1);

                         
                        int index19_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA19_14 = input.LA(1);

                         
                        int index19_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 19, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA39_eotS =
        "\46\uffff";
    static final String DFA39_eofS =
        "\46\uffff";
    static final String DFA39_minS =
        "\1\107\34\0\11\uffff";
    static final String DFA39_maxS =
        "\1\u00a7\34\0\11\uffff";
    static final String DFA39_acceptS =
        "\35\uffff\1\5\1\1\1\2\1\3\1\4\1\7\1\10\1\11\1\6";
    static final String DFA39_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\11\uffff}>";
    static final String[] DFA39_transitionS = {
            "\1\32\1\uffff\1\34\1\33\1\25\3\uffff\1\26\1\30\2\uffff\1\27"+
            "\2\uffff\1\35\2\uffff\1\15\2\uffff\1\31\1\uffff\1\17\1\21\1"+
            "\17\1\uffff\1\6\1\7\1\23\1\21\1\10\4\uffff\1\21\4\uffff\1\20"+
            "\1\uffff\1\24\1\21\14\uffff\1\11\17\uffff\2\16\4\uffff\1\17"+
            "\3\uffff\1\2\1\1\1\uffff\1\22\1\5\1\uffff\1\4\1\13\1\uffff\1"+
            "\12\1\uffff\1\14\1\uffff\1\3",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA39_eot = DFA.unpackEncodedString(DFA39_eotS);
    static final short[] DFA39_eof = DFA.unpackEncodedString(DFA39_eofS);
    static final char[] DFA39_min = DFA.unpackEncodedStringToUnsignedChars(DFA39_minS);
    static final char[] DFA39_max = DFA.unpackEncodedStringToUnsignedChars(DFA39_maxS);
    static final short[] DFA39_accept = DFA.unpackEncodedString(DFA39_acceptS);
    static final short[] DFA39_special = DFA.unpackEncodedString(DFA39_specialS);
    static final short[][] DFA39_transition;

    static {
        int numStates = DFA39_transitionS.length;
        DFA39_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA39_transition[i] = DFA.unpackEncodedString(DFA39_transitionS[i]);
        }
    }

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = DFA39_eot;
            this.eof = DFA39_eof;
            this.min = DFA39_min;
            this.max = DFA39_max;
            this.accept = DFA39_accept;
            this.special = DFA39_special;
            this.transition = DFA39_transition;
        }
        public String getDescription() {
            return "444:1: bracket_pattern : ( ( Id ( NL )? L_as )=> Id ( NL )? L_as ( NL )? pattern -> ^( L_as Id pattern ) | ( protected_expr ( NL )? QUESTION_MARK )=> protected_expr ( NL )? QUESTION_MARK ( ( NL )? pattern )? -> ^( QUESTION_MARK protected_expr ( pattern )? ) | ( protected_expr ( NL )? EXCLAMATION_MARK )=> protected_expr ( NL )? EXCLAMATION_MARK ( ( NL )? pattern )? -> ^( EXCLAMATION_MARK protected_expr ( pattern )? ) | ( Id pattern )=> Id pattern -> ^( INNERVALUE_PATTERN Id pattern ) | L_val ( NL )? protected_expr_nc -> ^( L_val protected_expr_nc ) | L_for ( NL )? ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )? L_end -> ^( L_for ( bracket_pattern )* ) | ( pattern ( NL )? L_if )=> pattern ( NL )? L_if ( NL )? protected_expr_nc -> ^( IF_PATTERN pattern protected_expr_nc ) | ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation -> ^( TYPE_PATTERN typeannotation pattern ) | pattern );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA39_1 = input.LA(1);

                         
                        int index39_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 30;}

                        else if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (synpred5_babel17()) ) {s = 33;}

                        else if ( (synpred6_babel17()) ) {s = 34;}

                        else if ( (synpred7_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA39_2 = input.LA(1);

                         
                        int index39_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (synpred6_babel17()) ) {s = 34;}

                        else if ( (synpred7_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA39_3 = input.LA(1);

                         
                        int index39_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (synpred6_babel17()) ) {s = 34;}

                        else if ( (synpred7_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA39_4 = input.LA(1);

                         
                        int index39_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (synpred6_babel17()) ) {s = 34;}

                        else if ( (synpred7_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA39_5 = input.LA(1);

                         
                        int index39_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (synpred6_babel17()) ) {s = 34;}

                        else if ( (synpred7_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA39_6 = input.LA(1);

                         
                        int index39_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (synpred6_babel17()) ) {s = 34;}

                        else if ( (synpred7_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA39_7 = input.LA(1);

                         
                        int index39_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (synpred6_babel17()) ) {s = 34;}

                        else if ( (synpred7_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA39_8 = input.LA(1);

                         
                        int index39_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (synpred6_babel17()) ) {s = 34;}

                        else if ( (synpred7_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA39_9 = input.LA(1);

                         
                        int index39_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (synpred6_babel17()) ) {s = 34;}

                        else if ( (synpred7_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA39_10 = input.LA(1);

                         
                        int index39_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (synpred6_babel17()) ) {s = 34;}

                        else if ( (synpred7_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA39_11 = input.LA(1);

                         
                        int index39_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (synpred6_babel17()) ) {s = 34;}

                        else if ( (synpred7_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA39_12 = input.LA(1);

                         
                        int index39_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (synpred6_babel17()) ) {s = 34;}

                        else if ( (synpred7_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA39_13 = input.LA(1);

                         
                        int index39_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (synpred6_babel17()) ) {s = 34;}

                        else if ( (synpred7_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA39_14 = input.LA(1);

                         
                        int index39_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (synpred6_babel17()) ) {s = 34;}

                        else if ( (synpred7_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA39_15 = input.LA(1);

                         
                        int index39_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                         
                        input.seek(index39_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA39_16 = input.LA(1);

                         
                        int index39_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                         
                        input.seek(index39_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA39_17 = input.LA(1);

                         
                        int index39_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                         
                        input.seek(index39_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA39_18 = input.LA(1);

                         
                        int index39_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                         
                        input.seek(index39_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA39_19 = input.LA(1);

                         
                        int index39_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                         
                        input.seek(index39_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA39_20 = input.LA(1);

                         
                        int index39_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                         
                        input.seek(index39_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA39_21 = input.LA(1);

                         
                        int index39_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                         
                        input.seek(index39_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA39_22 = input.LA(1);

                         
                        int index39_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                         
                        input.seek(index39_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA39_23 = input.LA(1);

                         
                        int index39_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                         
                        input.seek(index39_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA39_24 = input.LA(1);

                         
                        int index39_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index39_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA39_25 = input.LA(1);

                         
                        int index39_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                         
                        input.seek(index39_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA39_26 = input.LA(1);

                         
                        int index39_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                         
                        input.seek(index39_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA39_27 = input.LA(1);

                         
                        int index39_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                         
                        input.seek(index39_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA39_28 = input.LA(1);

                         
                        int index39_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                         
                        input.seek(index39_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 39, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA67_eotS =
        "\17\uffff";
    static final String DFA67_eofS =
        "\17\uffff";
    static final String DFA67_minS =
        "\1\142\12\uffff\2\107\2\uffff";
    static final String DFA67_maxS =
        "\1\u00a7\12\uffff\2\u00a7\2\uffff";
    static final String DFA67_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\2\uffff\1\13"+
        "\1\14";
    static final String DFA67_specialS =
        "\17\uffff}>";
    static final String[] DFA67_transitionS = {
            "\1\5\1\6\2\uffff\1\7\31\uffff\1\10\32\uffff\1\1\2\uffff\1\4"+
            "\1\uffff\1\3\1\12\1\uffff\1\11\1\uffff\1\13\1\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\15\1\uffff\3\15\3\uffff\2\15\2\uffff\1\15\2\uffff\1\15\2"+
            "\uffff\1\15\2\uffff\1\15\1\uffff\3\15\1\uffff\5\15\4\uffff\1"+
            "\15\4\uffff\1\15\1\uffff\2\15\14\uffff\1\15\15\uffff\2\16\2"+
            "\15\4\uffff\1\15\2\uffff\1\14\2\15\1\uffff\2\15\1\uffff\2\15"+
            "\1\uffff\1\15\1\uffff\3\15",
            "\1\15\1\uffff\3\15\3\uffff\2\15\2\uffff\1\15\2\uffff\1\15\2"+
            "\uffff\1\15\2\uffff\1\15\1\uffff\3\15\1\uffff\5\15\4\uffff\1"+
            "\15\4\uffff\1\15\1\uffff\2\15\14\uffff\1\15\15\uffff\2\16\2"+
            "\15\4\uffff\1\15\3\uffff\2\15\1\uffff\2\15\1\uffff\2\15\1\uffff"+
            "\1\15\1\uffff\3\15",
            "",
            ""
    };

    static final short[] DFA67_eot = DFA.unpackEncodedString(DFA67_eotS);
    static final short[] DFA67_eof = DFA.unpackEncodedString(DFA67_eofS);
    static final char[] DFA67_min = DFA.unpackEncodedStringToUnsignedChars(DFA67_minS);
    static final char[] DFA67_max = DFA.unpackEncodedStringToUnsignedChars(DFA67_maxS);
    static final short[] DFA67_accept = DFA.unpackEncodedString(DFA67_acceptS);
    static final short[] DFA67_special = DFA.unpackEncodedString(DFA67_specialS);
    static final short[][] DFA67_transition;

    static {
        int numStates = DFA67_transitionS.length;
        DFA67_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA67_transition[i] = DFA.unpackEncodedString(DFA67_transitionS[i]);
        }
    }

    class DFA67 extends DFA {

        public DFA67(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 67;
            this.eot = DFA67_eot;
            this.eof = DFA67_eof;
            this.min = DFA67_min;
            this.max = DFA67_max;
            this.accept = DFA67_accept;
            this.special = DFA67_special;
            this.transition = DFA67_transition;
        }
        public String getDescription() {
            return "465:1: primitive_pattern : ( Id | '_' -> ANY | String | Num | L_true | L_false | L_nil | '-' ( NL )? Num -> ^( UMINUS Num ) | '[' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )? ']' -> ^( SQUARE_LIST ( bracket_pattern )* ) | '(' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) ) | '{' ( NL )? ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) );";
        }
    }
    static final String DFA73_eotS =
        "\4\uffff";
    static final String DFA73_eofS =
        "\2\3\2\uffff";
    static final String DFA73_minS =
        "\2\107\2\uffff";
    static final String DFA73_maxS =
        "\2\u00ad\2\uffff";
    static final String DFA73_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA73_specialS =
        "\4\uffff}>";
    static final String[] DFA73_transitionS = {
            "\1\2\1\3\3\2\1\uffff\2\3\2\2\1\uffff\2\2\1\3\1\uffff\2\2\1\uffff"+
            "\1\2\2\uffff\1\2\1\uffff\11\2\2\uffff\5\2\1\3\1\uffff\1\2\1"+
            "\uffff\2\2\12\uffff\1\1\1\uffff\1\2\17\uffff\2\2\4\uffff\1\2"+
            "\2\uffff\1\1\2\2\1\uffff\2\2\1\uffff\2\2\1\uffff\1\2\1\uffff"+
            "\1\2\1\uffff\1\2\1\uffff\5\2",
            "\1\2\1\3\3\2\1\uffff\2\3\2\2\1\uffff\2\2\1\3\1\uffff\2\2\1"+
            "\uffff\1\2\2\uffff\1\2\1\uffff\11\2\2\uffff\5\2\1\3\1\uffff"+
            "\1\2\1\uffff\2\2\12\uffff\1\1\1\uffff\1\2\17\uffff\2\2\4\uffff"+
            "\1\2\2\uffff\1\1\2\2\1\uffff\2\2\1\uffff\2\2\1\uffff\1\2\1\uffff"+
            "\1\2\1\uffff\1\2\1\uffff\5\2",
            "",
            ""
    };

    static final short[] DFA73_eot = DFA.unpackEncodedString(DFA73_eotS);
    static final short[] DFA73_eof = DFA.unpackEncodedString(DFA73_eofS);
    static final char[] DFA73_min = DFA.unpackEncodedStringToUnsignedChars(DFA73_minS);
    static final char[] DFA73_max = DFA.unpackEncodedStringToUnsignedChars(DFA73_maxS);
    static final short[] DFA73_accept = DFA.unpackEncodedString(DFA73_acceptS);
    static final short[] DFA73_special = DFA.unpackEncodedString(DFA73_specialS);
    static final short[][] DFA73_transition;

    static {
        int numStates = DFA73_transitionS.length;
        DFA73_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA73_transition[i] = DFA.unpackEncodedString(DFA73_transitionS[i]);
        }
    }

    class DFA73 extends DFA {

        public DFA73(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 73;
            this.eot = DFA73_eot;
            this.eof = DFA73_eof;
            this.min = DFA73_min;
            this.max = DFA73_max;
            this.accept = DFA73_accept;
            this.special = DFA73_special;
            this.transition = DFA73_transition;
        }
        public String getDescription() {
            return "487:1: block : ( ( sep )? statement ( sep statement )* ( sep )? -> ^( BLOCK ( statement )* ) | ( sep )? -> ^( BLOCK ) );";
        }
    }
    static final String DFA70_eotS =
        "\4\uffff";
    static final String DFA70_eofS =
        "\2\2\2\uffff";
    static final String DFA70_minS =
        "\1\110\1\107\2\uffff";
    static final String DFA70_maxS =
        "\1\u0099\1\u00ad\2\uffff";
    static final String DFA70_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA70_specialS =
        "\4\uffff}>";
    static final String[] DFA70_transitionS = {
            "\1\2\4\uffff\2\2\5\uffff\1\2\31\uffff\1\2\17\uffff\1\1\32\uffff"+
            "\1\1",
            "\1\3\1\2\3\3\1\uffff\2\2\2\3\1\uffff\2\3\1\2\1\uffff\2\3\1"+
            "\uffff\1\3\2\uffff\1\3\1\uffff\11\3\2\uffff\5\3\1\2\1\uffff"+
            "\1\3\1\uffff\2\3\12\uffff\1\1\1\uffff\1\3\17\uffff\2\3\4\uffff"+
            "\1\3\2\uffff\1\1\2\3\1\uffff\2\3\1\uffff\2\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\uffff\1\3\1\uffff\5\3",
            "",
            ""
    };

    static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_eotS);
    static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_eofS);
    static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_minS);
    static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_maxS);
    static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_acceptS);
    static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_specialS);
    static final short[][] DFA70_transition;

    static {
        int numStates = DFA70_transitionS.length;
        DFA70_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA70_transition[i] = DFA.unpackEncodedString(DFA70_transitionS[i]);
        }
    }

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = DFA70_eot;
            this.eof = DFA70_eof;
            this.min = DFA70_min;
            this.max = DFA70_max;
            this.accept = DFA70_accept;
            this.special = DFA70_special;
            this.transition = DFA70_transition;
        }
        public String getDescription() {
            return "()* loopback of 487:25: ( sep statement )*";
        }
    }
    static final String DFA82_eotS =
        "\17\uffff";
    static final String DFA82_eofS =
        "\17\uffff";
    static final String DFA82_minS =
        "\1\107\16\uffff";
    static final String DFA82_maxS =
        "\1\u00ad\16\uffff";
    static final String DFA82_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16";
    static final String DFA82_specialS =
        "\17\uffff}>";
    static final String[] DFA82_transitionS = {
            "\1\11\1\uffff\3\11\3\uffff\2\11\1\uffff\1\4\1\11\2\uffff\1\2"+
            "\1\3\1\uffff\1\11\2\uffff\1\11\1\uffff\3\11\1\5\5\11\2\uffff"+
            "\1\7\1\1\1\11\1\6\1\10\2\uffff\1\11\1\uffff\2\11\14\uffff\1"+
            "\11\17\uffff\2\11\4\uffff\1\11\3\uffff\2\11\1\uffff\2\11\1\uffff"+
            "\2\11\1\uffff\1\11\1\uffff\1\11\1\uffff\1\11\1\uffff\1\13\1"+
            "\12\1\15\1\14\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA82_eot = DFA.unpackEncodedString(DFA82_eotS);
    static final short[] DFA82_eof = DFA.unpackEncodedString(DFA82_eofS);
    static final char[] DFA82_min = DFA.unpackEncodedStringToUnsignedChars(DFA82_minS);
    static final char[] DFA82_max = DFA.unpackEncodedStringToUnsignedChars(DFA82_maxS);
    static final short[] DFA82_accept = DFA.unpackEncodedString(DFA82_acceptS);
    static final short[] DFA82_special = DFA.unpackEncodedString(DFA82_specialS);
    static final short[][] DFA82_transition;

    static {
        int numStates = DFA82_transitionS.length;
        DFA82_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA82_transition[i] = DFA.unpackEncodedString(DFA82_transitionS[i]);
        }
    }

    class DFA82 extends DFA {

        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = DFA82_eot;
            this.eof = DFA82_eof;
            this.min = DFA82_min;
            this.max = DFA82_max;
            this.accept = DFA82_accept;
            this.special = DFA82_special;
            this.transition = DFA82_transition;
        }
        public String getDescription() {
            return "493:1: statement : ( st_typedef | st_val | st_def | st_yield | st_memoize | st_private | st_module | st_import | expr_or_assign | PRAGMA_PRINT ( NL )? expr -> ^( PRAGMA_PRINT expr ) | PRAGMA_LOG ( NL )? expr -> ^( PRAGMA_LOG expr ) | PRAGMA_PROFILE ( NL )? expr -> ^( PRAGMA_PROFILE expr ) | PRAGMA_ASSERT ( NL )? expr -> ^( PRAGMA_ASSERT expr ) | PRAGMA_CATCH ( NL )? casepattern ( NL )? L_try ( NL )? expr -> ^( PRAGMA_CATCH expr casepattern ) );";
        }
    }
    static final String DFA108_eotS =
        "\17\uffff";
    static final String DFA108_eofS =
        "\17\uffff";
    static final String DFA108_minS =
        "\1\142\14\0\2\uffff";
    static final String DFA108_maxS =
        "\1\u00a7\14\0\2\uffff";
    static final String DFA108_acceptS =
        "\15\uffff\1\1\1\2";
    static final String DFA108_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\2\uffff}>";
    static final String[] DFA108_transitionS = {
            "\1\5\1\6\2\uffff\1\7\31\uffff\1\10\31\uffff\1\14\1\1\2\uffff"+
            "\1\4\1\uffff\1\3\1\12\1\uffff\1\11\1\uffff\1\13\1\uffff\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA108_eot = DFA.unpackEncodedString(DFA108_eotS);
    static final short[] DFA108_eof = DFA.unpackEncodedString(DFA108_eofS);
    static final char[] DFA108_min = DFA.unpackEncodedStringToUnsignedChars(DFA108_minS);
    static final char[] DFA108_max = DFA.unpackEncodedStringToUnsignedChars(DFA108_maxS);
    static final short[] DFA108_accept = DFA.unpackEncodedString(DFA108_acceptS);
    static final short[] DFA108_special = DFA.unpackEncodedString(DFA108_specialS);
    static final short[][] DFA108_transition;

    static {
        int numStates = DFA108_transitionS.length;
        DFA108_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA108_transition[i] = DFA.unpackEncodedString(DFA108_transitionS[i]);
        }
    }

    class DFA108 extends DFA {

        public DFA108(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 108;
            this.eot = DFA108_eot;
            this.eof = DFA108_eof;
            this.min = DFA108_min;
            this.max = DFA108_max;
            this.accept = DFA108_accept;
            this.special = DFA108_special;
            this.transition = DFA108_transition;
        }
        public String getDescription() {
            return "521:1: typedef_clause : ( ( defpattern ( NL )? '=' )=> defpattern ( NL )? '=' ( NL )? expr -> ^( TYPEDEF_CLAUSE defpattern expr ) | defpattern -> ^( TYPEDEF_CLAUSE defpattern ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA108_1 = input.LA(1);

                         
                        int index108_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index108_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA108_2 = input.LA(1);

                         
                        int index108_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index108_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA108_3 = input.LA(1);

                         
                        int index108_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index108_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA108_4 = input.LA(1);

                         
                        int index108_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index108_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA108_5 = input.LA(1);

                         
                        int index108_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index108_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA108_6 = input.LA(1);

                         
                        int index108_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index108_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA108_7 = input.LA(1);

                         
                        int index108_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index108_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA108_8 = input.LA(1);

                         
                        int index108_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index108_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA108_9 = input.LA(1);

                         
                        int index108_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index108_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA108_10 = input.LA(1);

                         
                        int index108_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index108_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA108_11 = input.LA(1);

                         
                        int index108_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index108_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA108_12 = input.LA(1);

                         
                        int index108_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index108_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 108, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA146_eotS =
        "\36\uffff";
    static final String DFA146_eofS =
        "\36\uffff";
    static final String DFA146_minS =
        "\1\107\16\0\17\uffff";
    static final String DFA146_maxS =
        "\1\u00a7\16\0\17\uffff";
    static final String DFA146_acceptS =
        "\17\uffff\1\2\15\uffff\1\1";
    static final String DFA146_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\17\uffff}>";
    static final String[] DFA146_transitionS = {
            "\1\17\1\uffff\3\17\3\uffff\2\17\2\uffff\1\17\5\uffff\1\15\2"+
            "\uffff\1\17\1\uffff\3\17\1\uffff\1\6\1\7\2\17\1\10\4\uffff\1"+
            "\17\4\uffff\1\17\1\uffff\2\17\14\uffff\1\11\17\uffff\2\16\4"+
            "\uffff\1\17\3\uffff\1\1\1\2\1\uffff\1\17\1\5\1\uffff\1\4\1\13"+
            "\1\uffff\1\12\1\uffff\1\14\1\uffff\1\3",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA146_eot = DFA.unpackEncodedString(DFA146_eotS);
    static final short[] DFA146_eof = DFA.unpackEncodedString(DFA146_eofS);
    static final char[] DFA146_min = DFA.unpackEncodedStringToUnsignedChars(DFA146_minS);
    static final char[] DFA146_max = DFA.unpackEncodedStringToUnsignedChars(DFA146_maxS);
    static final short[] DFA146_accept = DFA.unpackEncodedString(DFA146_acceptS);
    static final short[] DFA146_special = DFA.unpackEncodedString(DFA146_specialS);
    static final short[][] DFA146_transition;

    static {
        int numStates = DFA146_transitionS.length;
        DFA146_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA146_transition[i] = DFA.unpackEncodedString(DFA146_transitionS[i]);
        }
    }

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = DFA146_eot;
            this.eof = DFA146_eof;
            this.min = DFA146_min;
            this.max = DFA146_max;
            this.accept = DFA146_accept;
            this.special = DFA146_special;
            this.transition = DFA146_transition;
        }
        public String getDescription() {
            return "567:1: expr_or_assign : ( ( ( pattern | objelem_assign ) ( NL )? '=' )=> ( pattern | objelem_assign ) ( NL )? '=' ( NL )? expr -> ^( ASSIGN ( pattern )* ( objelem_assign )* expr ) | expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA146_1 = input.LA(1);

                         
                        int index146_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index146_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA146_2 = input.LA(1);

                         
                        int index146_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index146_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA146_3 = input.LA(1);

                         
                        int index146_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index146_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA146_4 = input.LA(1);

                         
                        int index146_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index146_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA146_5 = input.LA(1);

                         
                        int index146_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index146_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA146_6 = input.LA(1);

                         
                        int index146_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index146_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA146_7 = input.LA(1);

                         
                        int index146_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index146_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA146_8 = input.LA(1);

                         
                        int index146_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index146_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA146_9 = input.LA(1);

                         
                        int index146_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index146_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA146_10 = input.LA(1);

                         
                        int index146_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index146_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA146_11 = input.LA(1);

                         
                        int index146_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index146_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA146_12 = input.LA(1);

                         
                        int index146_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index146_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA146_13 = input.LA(1);

                         
                        int index146_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index146_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA146_14 = input.LA(1);

                         
                        int index146_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index146_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 146, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA156_eotS =
        "\34\uffff";
    static final String DFA156_eofS =
        "\34\uffff";
    static final String DFA156_minS =
        "\1\107\2\0\1\uffff\12\0\16\uffff";
    static final String DFA156_maxS =
        "\1\u00a7\2\0\1\uffff\12\0\16\uffff";
    static final String DFA156_acceptS =
        "\3\uffff\1\1\12\uffff\1\1\1\2\14\uffff";
    static final String DFA156_specialS =
        "\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\16\uffff}>";
    static final String[] DFA156_transitionS = {
            "\1\17\2\uffff\2\17\3\uffff\2\17\2\uffff\1\17\5\uffff\1\15\2"+
            "\uffff\1\17\1\uffff\3\17\1\uffff\1\6\1\7\2\17\1\10\4\uffff\1"+
            "\17\4\uffff\1\17\1\uffff\2\17\14\uffff\1\11\17\uffff\2\16\4"+
            "\uffff\1\17\3\uffff\1\1\1\2\1\uffff\1\17\1\5\1\uffff\1\4\1\13"+
            "\1\uffff\1\12\1\uffff\1\14\1\uffff\1\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA156_eot = DFA.unpackEncodedString(DFA156_eotS);
    static final short[] DFA156_eof = DFA.unpackEncodedString(DFA156_eofS);
    static final char[] DFA156_min = DFA.unpackEncodedStringToUnsignedChars(DFA156_minS);
    static final char[] DFA156_max = DFA.unpackEncodedStringToUnsignedChars(DFA156_maxS);
    static final short[] DFA156_accept = DFA.unpackEncodedString(DFA156_acceptS);
    static final short[] DFA156_special = DFA.unpackEncodedString(DFA156_specialS);
    static final short[][] DFA156_transition;

    static {
        int numStates = DFA156_transitionS.length;
        DFA156_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA156_transition[i] = DFA.unpackEncodedString(DFA156_transitionS[i]);
        }
    }

    class DFA156 extends DFA {

        public DFA156(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 156;
            this.eot = DFA156_eot;
            this.eof = DFA156_eof;
            this.min = DFA156_min;
            this.max = DFA156_max;
            this.accept = DFA156_accept;
            this.special = DFA156_special;
            this.transition = DFA156_transition;
        }
        public String getDescription() {
            return "606:1: lop_expr : ( ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | op_expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA156_0 = input.LA(1);

                         
                        int index156_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_0==Constr) ) {s = 1;}

                        else if ( (LA156_0==Id) ) {s = 2;}

                        else if ( (LA156_0==UNDERSCORE) && (synpred11_babel17())) {s = 3;}

                        else if ( (LA156_0==String) ) {s = 4;}

                        else if ( (LA156_0==Num) ) {s = 5;}

                        else if ( (LA156_0==L_true) ) {s = 6;}

                        else if ( (LA156_0==L_false) ) {s = 7;}

                        else if ( (LA156_0==L_nil) ) {s = 8;}

                        else if ( (LA156_0==MINUS) ) {s = 9;}

                        else if ( (LA156_0==SQUARE_BRACKET_OPEN) ) {s = 10;}

                        else if ( (LA156_0==ROUND_BRACKET_OPEN) ) {s = 11;}

                        else if ( (LA156_0==CURLY_BRACKET_OPEN) ) {s = 12;}

                        else if ( (LA156_0==L_exception) ) {s = 13;}

                        else if ( ((LA156_0>=A_ELLIPSIS && LA156_0<=U_ELLIPSIS)) && (synpred11_babel17())) {s = 14;}

                        else if ( (LA156_0==L_begin||(LA156_0>=L_with && LA156_0<=L_if)||(LA156_0>=L_while && LA156_0<=L_for)||LA156_0==L_match||LA156_0==L_try||(LA156_0>=L_concurrent && LA156_0<=L_lazy)||(LA156_0>=L_this && LA156_0<=L_random)||LA156_0==L_typeof||LA156_0==L_not||(LA156_0>=L_root && LA156_0<=L_native)||LA156_0==L_force||LA156_0==Float) ) {s = 15;}

                         
                        input.seek(index156_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA156_1 = input.LA(1);

                         
                        int index156_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index156_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA156_2 = input.LA(1);

                         
                        int index156_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index156_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA156_4 = input.LA(1);

                         
                        int index156_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index156_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA156_5 = input.LA(1);

                         
                        int index156_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index156_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA156_6 = input.LA(1);

                         
                        int index156_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index156_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA156_7 = input.LA(1);

                         
                        int index156_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index156_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA156_8 = input.LA(1);

                         
                        int index156_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index156_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA156_9 = input.LA(1);

                         
                        int index156_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index156_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA156_10 = input.LA(1);

                         
                        int index156_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index156_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA156_11 = input.LA(1);

                         
                        int index156_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index156_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA156_12 = input.LA(1);

                         
                        int index156_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index156_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA156_13 = input.LA(1);

                         
                        int index156_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index156_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 156, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA157_eotS =
        "\34\uffff";
    static final String DFA157_eofS =
        "\34\uffff";
    static final String DFA157_minS =
        "\1\107\2\0\1\uffff\12\0\16\uffff";
    static final String DFA157_maxS =
        "\1\u00a7\2\0\1\uffff\12\0\16\uffff";
    static final String DFA157_acceptS =
        "\3\uffff\1\1\12\uffff\1\1\1\2\14\uffff";
    static final String DFA157_specialS =
        "\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\16\uffff}>";
    static final String[] DFA157_transitionS = {
            "\1\17\2\uffff\2\17\3\uffff\2\17\2\uffff\1\17\5\uffff\1\15\2"+
            "\uffff\1\17\1\uffff\3\17\1\uffff\1\6\1\7\2\17\1\10\4\uffff\1"+
            "\17\4\uffff\1\17\1\uffff\2\17\14\uffff\1\11\17\uffff\2\16\4"+
            "\uffff\1\17\3\uffff\1\1\1\2\1\uffff\1\17\1\5\1\uffff\1\4\1\13"+
            "\1\uffff\1\12\1\uffff\1\14\1\uffff\1\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA157_eot = DFA.unpackEncodedString(DFA157_eotS);
    static final short[] DFA157_eof = DFA.unpackEncodedString(DFA157_eofS);
    static final char[] DFA157_min = DFA.unpackEncodedStringToUnsignedChars(DFA157_minS);
    static final char[] DFA157_max = DFA.unpackEncodedStringToUnsignedChars(DFA157_maxS);
    static final short[] DFA157_accept = DFA.unpackEncodedString(DFA157_acceptS);
    static final short[] DFA157_special = DFA.unpackEncodedString(DFA157_specialS);
    static final short[][] DFA157_transition;

    static {
        int numStates = DFA157_transitionS.length;
        DFA157_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA157_transition[i] = DFA.unpackEncodedString(DFA157_transitionS[i]);
        }
    }

    class DFA157 extends DFA {

        public DFA157(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = DFA157_eot;
            this.eof = DFA157_eof;
            this.min = DFA157_min;
            this.max = DFA157_max;
            this.accept = DFA157_accept;
            this.special = DFA157_special;
            this.transition = DFA157_transition;
        }
        public String getDescription() {
            return "611:1: p_lop_expr : ( ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | p_op_expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA157_0 = input.LA(1);

                         
                        int index157_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA157_0==Constr) ) {s = 1;}

                        else if ( (LA157_0==Id) ) {s = 2;}

                        else if ( (LA157_0==UNDERSCORE) && (synpred12_babel17())) {s = 3;}

                        else if ( (LA157_0==String) ) {s = 4;}

                        else if ( (LA157_0==Num) ) {s = 5;}

                        else if ( (LA157_0==L_true) ) {s = 6;}

                        else if ( (LA157_0==L_false) ) {s = 7;}

                        else if ( (LA157_0==L_nil) ) {s = 8;}

                        else if ( (LA157_0==MINUS) ) {s = 9;}

                        else if ( (LA157_0==SQUARE_BRACKET_OPEN) ) {s = 10;}

                        else if ( (LA157_0==ROUND_BRACKET_OPEN) ) {s = 11;}

                        else if ( (LA157_0==CURLY_BRACKET_OPEN) ) {s = 12;}

                        else if ( (LA157_0==L_exception) ) {s = 13;}

                        else if ( ((LA157_0>=A_ELLIPSIS && LA157_0<=U_ELLIPSIS)) && (synpred12_babel17())) {s = 14;}

                        else if ( (LA157_0==L_begin||(LA157_0>=L_with && LA157_0<=L_if)||(LA157_0>=L_while && LA157_0<=L_for)||LA157_0==L_match||LA157_0==L_try||(LA157_0>=L_concurrent && LA157_0<=L_lazy)||(LA157_0>=L_this && LA157_0<=L_random)||LA157_0==L_typeof||LA157_0==L_not||(LA157_0>=L_root && LA157_0<=L_native)||LA157_0==L_force||LA157_0==Float) ) {s = 15;}

                         
                        input.seek(index157_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA157_1 = input.LA(1);

                         
                        int index157_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index157_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA157_2 = input.LA(1);

                         
                        int index157_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index157_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA157_4 = input.LA(1);

                         
                        int index157_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index157_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA157_5 = input.LA(1);

                         
                        int index157_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index157_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA157_6 = input.LA(1);

                         
                        int index157_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index157_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA157_7 = input.LA(1);

                         
                        int index157_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index157_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA157_8 = input.LA(1);

                         
                        int index157_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index157_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA157_9 = input.LA(1);

                         
                        int index157_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index157_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA157_10 = input.LA(1);

                         
                        int index157_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index157_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA157_11 = input.LA(1);

                         
                        int index157_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index157_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA157_12 = input.LA(1);

                         
                        int index157_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index157_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA157_13 = input.LA(1);

                         
                        int index157_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index157_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 157, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA326_eotS =
        "\27\uffff";
    static final String DFA326_eofS =
        "\27\uffff";
    static final String DFA326_minS =
        "\1\107\12\uffff\1\0\13\uffff";
    static final String DFA326_maxS =
        "\1\u00a5\12\uffff\1\0\13\uffff";
    static final String DFA326_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\uffff\1\15"+
        "\1\16\6\uffff\1\17\1\13\1\14";
    static final String DFA326_specialS =
        "\13\uffff\1\0\13\uffff}>";
    static final String[] DFA326_transitionS = {
            "\1\15\2\uffff\2\15\3\uffff\2\15\2\uffff\1\15\10\uffff\1\15\5"+
            "\uffff\1\6\1\7\1\10\1\uffff\1\11\13\uffff\1\12\47\uffff\1\5"+
            "\1\4\1\uffff\1\2\1\1\1\uffff\1\3\1\13\1\uffff\1\14\1\uffff\1"+
            "\24",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA326_eot = DFA.unpackEncodedString(DFA326_eotS);
    static final short[] DFA326_eof = DFA.unpackEncodedString(DFA326_eofS);
    static final char[] DFA326_min = DFA.unpackEncodedStringToUnsignedChars(DFA326_minS);
    static final char[] DFA326_max = DFA.unpackEncodedStringToUnsignedChars(DFA326_maxS);
    static final short[] DFA326_accept = DFA.unpackEncodedString(DFA326_acceptS);
    static final short[] DFA326_special = DFA.unpackEncodedString(DFA326_specialS);
    static final short[][] DFA326_transition;

    static {
        int numStates = DFA326_transitionS.length;
        DFA326_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA326_transition[i] = DFA.unpackEncodedString(DFA326_transitionS[i]);
        }
    }

    class DFA326 extends DFA {

        public DFA326(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 326;
            this.eot = DFA326_eot;
            this.eof = DFA326_eof;
            this.min = DFA326_min;
            this.max = DFA326_max;
            this.accept = DFA326_accept;
            this.special = DFA326_special;
            this.transition = DFA326_transition;
        }
        public String getDescription() {
            return "822:1: primitive_expr : ( Num | Float | String | Id | Constr | L_true | L_false | L_this | L_nil | L_root | ( type_expr )=> type_expr | ( lambda_expr )=> lambda_expr | list_expr | with_control_expr | map_or_set_expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA326_11 = input.LA(1);

                         
                        int index326_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_babel17()) ) {s = 21;}

                        else if ( (synpred15_babel17()) ) {s = 22;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index326_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 326, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_block_in_prog260 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_prog262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_EQUAL0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_NOT_EQUAL0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_LESS_EQ0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_GREATER_EQ0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_or_in_token_OR1086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_and_in_token_AND1094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_not_in_token_NOT1102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_DOUBLE_COLON0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_DOUBLE_ARROW0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_ARROW0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_ELLIPSIS0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_typeid1752 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_NL_in_typeid1755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_PERIOD_in_typeid1758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_typeid1760 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Id_in_typeid1763 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_typeid_in_typeannotation1783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_typeannotation1788 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_protected_expr_in_typeannotation1790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_typeannotation1792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Constr_in_pattern1809 = new BitSet(new long[]{0x0000000000000002L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_pattern1812 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4C030001L});
    public static final BitSet FOLLOW_pattern_in_pattern1815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitive_pattern_in_pattern1831 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_NL_in_pattern1834 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_token_DOUBLE_COLON_in_pattern1837 = new BitSet(new long[]{0x0000000000000000L,0x0000004C00000000L,0x000000AB4A000001L});
    public static final BitSet FOLLOW_NL_in_pattern1839 = new BitSet(new long[]{0x0000000000000000L,0x0000004C00000000L,0x000000AB48000001L});
    public static final BitSet FOLLOW_primitive_pattern_in_pattern1842 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_L_exception_in_pattern1861 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_pattern1863 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4C030001L});
    public static final BitSet FOLLOW_pattern_in_pattern1866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_ELLIPSIS_in_pattern1879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitive_pattern_in_defpattern1889 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_NL_in_defpattern1892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_token_DOUBLE_COLON_in_defpattern1895 = new BitSet(new long[]{0x0000000000000000L,0x0000004C00000000L,0x000000AB4A000001L});
    public static final BitSet FOLLOW_NL_in_defpattern1897 = new BitSet(new long[]{0x0000000000000000L,0x0000004C00000000L,0x000000AB48000001L});
    public static final BitSet FOLLOW_primitive_pattern_in_defpattern1900 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_Constr_in_defpattern1918 = new BitSet(new long[]{0x0000000000000002L,0x0000004C00000000L,0x000000AB4C000001L});
    public static final BitSet FOLLOW_defpattern_in_defpattern1920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_casepattern1951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010002000000L});
    public static final BitSet FOLLOW_NL_in_casepattern1953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLON_in_casepattern1956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000020A000000L});
    public static final BitSet FOLLOW_NL_in_casepattern1958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000020A000000L});
    public static final BitSet FOLLOW_typeannotation_in_casepattern1961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_casepattern1976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_bracket_pattern2004 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2006 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_L_as_in_bracket_pattern2009 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2011 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4C030001L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_bracket_pattern2043 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002100000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_QUESTION_MARK_in_bracket_pattern2048 = new BitSet(new long[]{0x0000000000000002L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2051 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4C030001L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_bracket_pattern2086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002200000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_EXCLAMATION_MARK_in_bracket_pattern2091 = new BitSet(new long[]{0x0000000000000002L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2094 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4C030001L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_bracket_pattern2123 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4C030001L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_val_in_bracket_pattern2140 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2142 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_bracket_pattern2145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_for_in_bracket_pattern2164 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498F80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2166 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498F80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_bracket_pattern_in_bracket_pattern2170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000002040000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_bracket_pattern2177 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2179 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_bracket_pattern_in_bracket_pattern2182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000002040000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_bracket_pattern2192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_L_if_in_bracket_pattern2222 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2224 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_bracket_pattern2227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010002000000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLON_in_bracket_pattern2258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000020A000000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2260 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000020A000000L});
    public static final BitSet FOLLOW_typeannotation_in_bracket_pattern2263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_ARROW_in_arrow_or_assign2288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGN_in_arrow_or_assign2299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bracket_pattern_in_mselem_pattern2314 = new BitSet(new long[]{0x0000000200000002L,0x0000000000000000L,0x000000000200C000L});
    public static final BitSet FOLLOW_NL_in_mselem_pattern2317 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x000000000200C000L});
    public static final BitSet FOLLOW_arrow_or_assign_in_mselem_pattern2320 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_mselem_pattern2322 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_bracket_pattern_in_mselem_pattern2325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_primitive_pattern2354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNDERSCORE_in_primitive_pattern2359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_String_in_primitive_pattern2368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Num_in_primitive_pattern2373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_true_in_primitive_pattern2378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_false_in_primitive_pattern2383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_nil_in_primitive_pattern2388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_primitive_pattern2396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000042000000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_Num_in_primitive_pattern2401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_OPEN_in_primitive_pattern2414 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000BB6E430001L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2417 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000BB6C430001L});
    public static final BitSet FOLLOW_bracket_pattern_in_primitive_pattern2421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001002040000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000040000L});
    public static final BitSet FOLLOW_COMMA_in_primitive_pattern2428 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2430 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_bracket_pattern_in_primitive_pattern2433 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001002040000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000040000L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_CLOSE_in_primitive_pattern2443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_primitive_pattern2463 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AF6E430001L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2466 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AF6C430001L});
    public static final BitSet FOLLOW_bracket_pattern_in_primitive_pattern2470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000402040000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400040000L});
    public static final BitSet FOLLOW_COMMA_in_primitive_pattern2477 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2480 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_bracket_pattern_in_primitive_pattern2483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000402040000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2485 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400040000L});
    public static final BitSet FOLLOW_COMMA_in_primitive_pattern2491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000402000000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_primitive_pattern2500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_primitive_pattern2532 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000EB6E430001L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2535 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000EB6C430001L});
    public static final BitSet FOLLOW_mselem_pattern_in_primitive_pattern2539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004002040000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2541 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000040000L});
    public static final BitSet FOLLOW_COMMA_in_primitive_pattern2546 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2549 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_mselem_pattern_in_primitive_pattern2552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004002040000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000040000L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_primitive_pattern2562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_primitive_pattern2580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000200C000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_token_ARROW_in_primitive_pattern2585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004002000000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_primitive_pattern2590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_sep2606 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_sep_in_block2622 = new BitSet(new long[]{0x0000000000000000L,0x000D3E7FD2CD8E80L,0x00003EAB6C430001L});
    public static final BitSet FOLLOW_statement_in_block2625 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_sep_in_block2628 = new BitSet(new long[]{0x0000000000000000L,0x000D3E7FD2CD8E80L,0x00003EAB6C430001L});
    public static final BitSet FOLLOW_statement_in_block2630 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_sep_in_block2634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sep_in_block2650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_pure_block2667 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_sep_in_pure_block2670 = new BitSet(new long[]{0x0000000000000000L,0x000D3E7FD2CD8E80L,0x00003EAB6C430001L});
    public static final BitSet FOLLOW_statement_in_pure_block2672 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_st_typedef_in_statement2693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_val_in_statement2704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_def_in_statement2709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_yield_in_statement2714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_memoize_in_statement2719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_private_in_statement2724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_module_in_statement2729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_import_in_statement2734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_assign_in_statement2739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_PRINT_in_statement2745 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_statement2747 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_statement2750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_LOG_in_statement2764 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_statement2766 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_statement2769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_PROFILE_in_statement2783 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_statement2785 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_statement2788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_ASSERT_in_statement2802 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_statement2804 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_statement2807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_CATCH_in_statement2820 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_statement2822 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_casepattern_in_statement2825 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_statement2827 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_L_try_in_statement2830 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_statement2832 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_statement2835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_objelem_assign2855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_PERIOD_in_objelem_assign2857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Id_in_objelem_assign2859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_val_in_st_val2878 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_st_val2880 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4C030001L});
    public static final BitSet FOLLOW_pattern_in_st_val2884 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_objelem_assign_in_st_val2888 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_st_val2891 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_st_val2894 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_st_val2896 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_st_val2899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_def_in_st_def2923 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_st_def2925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Id_in_st_def2928 = new BitSet(new long[]{0x0000000200000000L,0x0000004C00000000L,0x000001AB4E000001L});
    public static final BitSet FOLLOW_NL_in_st_def2930 = new BitSet(new long[]{0x0000000200000000L,0x0000004C00000000L,0x000001AB4C000001L});
    public static final BitSet FOLLOW_defpattern_in_st_def2934 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000010002000000L});
    public static final BitSet FOLLOW_NL_in_st_def2936 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLON_in_st_def2942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_st_def2944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_typeid_in_st_def2947 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_st_def2949 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_st_def2954 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_st_def2956 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_st_def2959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_def_in_st_def2985 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_st_def2987 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_L_this_in_st_def2990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010002000000L});
    public static final BitSet FOLLOW_NL_in_st_def2992 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLON_in_st_def2995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_st_def2997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_typeid_in_st_def3000 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_st_def3002 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_st_def3005 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_st_def3007 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_st_def3010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_typedef_in_st_typedef3033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_st_typedef3035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Id_in_st_typedef3038 = new BitSet(new long[]{0x0000000000000000L,0x0000004C00000000L,0x000000AB4E000001L});
    public static final BitSet FOLLOW_NL_in_st_typedef3040 = new BitSet(new long[]{0x0000000000000000L,0x0000004C00000000L,0x000000AB4E000001L});
    public static final BitSet FOLLOW_typedef_clause_in_st_typedef3043 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002040000L});
    public static final BitSet FOLLOW_NL_in_st_typedef3046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_st_typedef3049 = new BitSet(new long[]{0x0000000000000000L,0x0000004C00000000L,0x000000AB4E000001L});
    public static final BitSet FOLLOW_NL_in_st_typedef3051 = new BitSet(new long[]{0x0000000000000000L,0x0000004C00000000L,0x000000AB4E000001L});
    public static final BitSet FOLLOW_typedef_clause_in_st_typedef3054 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002040000L});
    public static final BitSet FOLLOW_defpattern_in_typedef_clause3092 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_typedef_clause3094 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_typedef_clause3097 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_typedef_clause3099 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_typedef_clause3102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defpattern_in_typedef_clause3117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_yield_in_st_yield3136 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_st_yield3138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_memoize_in_st_memoize3159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000208000000L});
    public static final BitSet FOLLOW_memo_id_in_st_memoize3161 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002040000L});
    public static final BitSet FOLLOW_NL_in_st_memoize3164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_st_memoize3167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000020A000000L});
    public static final BitSet FOLLOW_NL_in_st_memoize3169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000208000000L});
    public static final BitSet FOLLOW_memo_id_in_st_memoize3172 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002040000L});
    public static final BitSet FOLLOW_Id_in_memo_id3201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_memo_id3214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Id_in_memo_id3216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_memo_id3218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_private_in_st_private3235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_private_id_in_st_private3237 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002040000L});
    public static final BitSet FOLLOW_NL_in_st_private3240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_st_private3243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_st_private3245 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_private_id_in_st_private3248 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002040000L});
    public static final BitSet FOLLOW_Id_in_private_id3274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_testid0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_moduleid3307 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_NL_in_moduleid3310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_PERIOD_in_moduleid3313 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_moduleid3315 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_testid_in_moduleid3318 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_L_module_in_st_module3341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_st_module3343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_moduleid_in_st_module3346 = new BitSet(new long[]{0x0000000000000000L,0x400D7E7FD2CD8F80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_block_in_st_module3348 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000100L});
    public static final BitSet FOLLOW_L_unittest_in_st_module3351 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8F80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_block_in_st_module3353 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_st_module3357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_root_in_importprefix3384 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_testid_in_importprefix3388 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_NL_in_importprefix3392 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_PERIOD_in_importprefix3395 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_importprefix3397 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_testid_in_importprefix3400 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_UNDERSCORE_in_importall3425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_testid_in_importsetclause3441 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_NL_in_importsetclause3444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_importsetclause3447 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_importsetclause3450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Id_in_importsetclause3453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_importsetclause3473 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_importsetclause3475 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_testid_in_importsetclause3478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importall_in_importsetclause3491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_importset3501 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000800A000001L});
    public static final BitSet FOLLOW_NL_in_importset3503 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000800A000001L});
    public static final BitSet FOLLOW_importsetclause_in_importset3506 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004002040000L});
    public static final BitSet FOLLOW_NL_in_importset3509 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_importset3512 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000800A000001L});
    public static final BitSet FOLLOW_NL_in_importset3514 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000800A000001L});
    public static final BitSet FOLLOW_importsetclause_in_importset3517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004002040000L});
    public static final BitSet FOLLOW_NL_in_importset3521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_importset3524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_import_in_st_import3542 = new BitSet(new long[]{0x0000000000000000L,0x0004400000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_st_import3544 = new BitSet(new long[]{0x0000000000000000L,0x0004400000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_importprefix_in_st_import3547 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002083000L});
    public static final BitSet FOLLOW_NL_in_st_import3550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002083000L});
    public static final BitSet FOLLOW_PERIOD_in_st_import3554 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000800A000001L});
    public static final BitSet FOLLOW_NL_in_st_import3556 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000800A000001L});
    public static final BitSet FOLLOW_importall_in_st_import3559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERIOD_in_st_import3563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002002000000L});
    public static final BitSet FOLLOW_NL_in_st_import3565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002002000000L});
    public static final BitSet FOLLOW_importset_in_st_import3568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_st_import3572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_st_import3574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Id_in_st_import3577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_expr_or_assign3625 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_objelem_assign_in_expr_or_assign3629 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_expr_or_assign3632 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_expr_or_assign3635 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_expr_or_assign3637 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_expr_or_assign3640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_expr_or_assign3659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lop_expr_in_expr3670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_obj_expr_in_expr3675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_expr_in_control_expr3685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_do_expr_in_control_expr3690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_match_expr_in_control_expr3695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_expr_in_control_expr3700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_expr_in_control_expr3706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_begin_end_in_control_expr3711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_control_expr_in_with_control_expr3721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_with_in_with_control_expr3726 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_with_control_expr3728 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_protected_expr_in_with_control_expr3731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_with_control_expr3733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_L_do_in_with_control_expr3736 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8F80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_block_in_with_control_expr3738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_with_control_expr3740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_lop_expr_in_protected_expr3765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_obj_expr_in_protected_expr3770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_protected_expr_nc3781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_begin_in_begin_end3791 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8F80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_block_in_begin_end3793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_begin_end3795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_parents3813 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_primitive_expr_in_parents3815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMES_in_parents3828 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_primitive_expr_in_parents3830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_obj_in_obj_expr3858 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000002000002L});
    public static final BitSet FOLLOW_NL_in_obj_expr3860 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000002000002L});
    public static final BitSet FOLLOW_parents_in_obj_expr3863 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8F80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_block_in_obj_expr3865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_obj_expr3867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_obj_in_obj_expr3895 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8F80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_block_in_obj_expr3897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_obj_expr3899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_nobrackets_in_lop_expr3929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_expr_in_lop_expr3934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_nobrackets_in_p_lop_expr3952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_op_expr_in_p_lop_expr3957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_if_in_if_expr3967 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_if_expr3969 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_protected_expr_in_if_expr3972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_if_expr3974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_L_then_in_if_expr3977 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CDEF80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_block_in_if_expr3979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000006100L});
    public static final BitSet FOLLOW_L_elseif_in_if_expr3985 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_if_expr3987 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_protected_expr_in_if_expr3990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_if_expr3992 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_L_then_in_if_expr3995 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CDEF80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_block_in_if_expr3997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000006100L});
    public static final BitSet FOLLOW_L_else_in_if_expr4005 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8F80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_block_in_if_expr4007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_if_expr4011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_while_in_while_do_expr4035 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_while_do_expr4037 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_protected_expr_in_while_do_expr4040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_while_do_expr4042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_L_do_in_while_do_expr4045 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8F80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_block_in_while_do_expr4047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_while_do_expr4049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_cases_in_cases4079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_cases4084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_NL_in_cases4086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_cases4089 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8E80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_block_in_cases4091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_expr_in_full_cases4114 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_L_case_in_case_expr4135 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_case_expr4137 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_casepattern_in_case_expr4140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_NL_in_case_expr4142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_case_expr4145 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8E80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_block_in_case_expr4147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_match_in_match_expr4168 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_match_expr4170 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_op_expr_in_match_expr4173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_match_expr4175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000002000000L});
    public static final BitSet FOLLOW_full_cases_in_match_expr4178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_match_expr4180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_try_in_try_expr4206 = new BitSet(new long[]{0x0000000000000000L,0x000D3E7FD2CD8E80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_NL_in_try_expr4208 = new BitSet(new long[]{0x0000000000000000L,0x000D3E7FD2CD8E80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_pure_block_in_try_expr4211 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_try_expr4213 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_L_catch_in_try_expr4216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_try_expr4218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000002000000L});
    public static final BitSet FOLLOW_full_cases_in_try_expr4221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_try_expr4223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_lambda_expr4247 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02100000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_lambda_expr4249 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02100000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_lambda_cases_in_lambda_expr4252 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000402000000L});
    public static final BitSet FOLLOW_NL_in_lambda_expr4254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_lambda_expr4257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_cases_nobrackets_in_lambda_expr_nobrackets4276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_lambda_cases_nobrackets4294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_NL_in_lambda_cases_nobrackets4296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_lambda_cases_nobrackets4299 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_lambda_cases_nobrackets4301 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_lop_expr_in_lambda_cases_nobrackets4304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_case_in_lambda_case_expr4332 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_lambda_case_expr4334 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_casepattern_in_lambda_case_expr4337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_NL_in_lambda_case_expr4339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_lambda_case_expr4342 = new BitSet(new long[]{0x0000000000000000L,0x000D3E7FD2CD8E80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_NL_in_lambda_case_expr4344 = new BitSet(new long[]{0x0000000000000000L,0x000D3E7FD2CD8E80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_pure_block_in_lambda_case_expr4347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_lambda_cases4368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_NL_in_lambda_cases4370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_lambda_cases4373 = new BitSet(new long[]{0x0000000000000000L,0x000D3E7FD2CD8E80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_NL_in_lambda_cases4375 = new BitSet(new long[]{0x0000000000000000L,0x000D3E7FD2CD8E80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_pure_block_in_lambda_cases4378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_case_expr_in_lambda_cases4397 = new BitSet(new long[]{0x0000000000000002L,0x0000004C02100000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_lambda_cases4400 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02100000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_lambda_case_expr_in_lambda_cases4403 = new BitSet(new long[]{0x0000000000000002L,0x0000004C02100000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_L_for_in_for_expr4421 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_for_expr4423 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4C030001L});
    public static final BitSet FOLLOW_pattern_in_for_expr4426 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_for_expr4428 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_L_in_in_for_expr4431 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_for_expr4433 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_protected_expr_in_for_expr4436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_for_expr4438 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_L_do_in_for_expr4441 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8F80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_block_in_for_expr4443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_for_expr4445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtin_primitive_in_op_expr4474 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_op_expr_in_op_expr4477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bool_expr_in_op_expr4482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtin_primitive_in_p_op_expr4492 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_op_expr4495 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_op_expr_in_p_op_expr4499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_bool_expr_in_p_op_expr4504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_builtin_primitive0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bool_or_expr_in_bool_expr4535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_bool_or_expr_in_p_bool_expr4545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bool_and_expr_in_bool_or_expr4554 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_bool_or_expr4557 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_token_OR_in_bool_or_expr4561 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_bool_or_expr4564 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_bool_and_expr_in_bool_or_expr4568 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_p_bool_and_expr_in_p_bool_or_expr4580 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_p_bool_or_expr4583 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_token_OR_in_p_bool_or_expr4587 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_bool_or_expr4590 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_bool_and_expr_in_p_bool_or_expr4594 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_bool_not_expr_in_bool_and_expr4606 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_bool_and_expr4609 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_token_AND_in_bool_and_expr4613 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_bool_and_expr4616 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_bool_not_expr_in_bool_and_expr4620 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_p_bool_not_expr_in_p_bool_and_expr4632 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_p_bool_and_expr4635 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_token_AND_in_p_bool_and_expr4639 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_bool_and_expr4642 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_bool_not_expr_in_p_bool_and_expr4646 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_token_NOT_in_bool_not_expr4658 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_bool_not_expr4661 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_bool_not_expr_in_bool_not_expr4665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_expr_in_bool_not_expr4670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_NOT_in_p_bool_not_expr4681 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_bool_not_expr4684 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_bool_not_expr_in_p_bool_not_expr4688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_rel_expr_in_p_bool_not_expr4693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relate_expr_in_rel_expr4703 = new BitSet(new long[]{0x0000000000000002L,0x3FF0000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_rel_expr4706 = new BitSet(new long[]{0x0000000000000000L,0x3FF0000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_rel_op_in_rel_expr4709 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_rel_expr4711 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_relate_expr_in_rel_expr4714 = new BitSet(new long[]{0x0000000000000002L,0x3FF0000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_p_relate_expr_in_p_rel_expr4741 = new BitSet(new long[]{0x0000000000000002L,0x3FF0000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_p_rel_expr4744 = new BitSet(new long[]{0x0000000000000000L,0x3FF0000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_rel_op_in_p_rel_expr4747 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_rel_expr4749 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_relate_expr_in_p_rel_expr4752 = new BitSet(new long[]{0x0000000000000002L,0x3FF0000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_token_EQUAL_in_rel_op4778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_NOT_EQUAL_in_rel_op4782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_in_rel_op4786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_GREATER_EQ_in_rel_op4790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_in_rel_op4794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_LESS_EQ_in_rel_op4798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_convert_expr_in_relate_expr4807 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000010L});
    public static final BitSet FOLLOW_NL_in_relate_expr4810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_TOK_RELATE_in_relate_expr4813 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_relate_expr4815 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_convert_expr_in_relate_expr4818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_convert_expr_in_p_relate_expr4837 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000010L});
    public static final BitSet FOLLOW_NL_in_p_relate_expr4840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_TOK_RELATE_in_p_relate_expr4843 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_relate_expr4845 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_convert_expr_in_p_relate_expr4848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_expr_in_convert_expr4869 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000020L});
    public static final BitSet FOLLOW_NL_in_convert_expr4872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_TOK_CONVERT_in_convert_expr4875 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000020A000000L});
    public static final BitSet FOLLOW_NL_in_convert_expr4877 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000020A000000L});
    public static final BitSet FOLLOW_typeannotation_in_convert_expr4880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_term_expr_in_p_convert_expr4902 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000020L});
    public static final BitSet FOLLOW_NL_in_p_convert_expr4905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_TOK_CONVERT_in_p_convert_expr4908 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000020A000000L});
    public static final BitSet FOLLOW_NL_in_p_convert_expr4910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000020A000000L});
    public static final BitSet FOLLOW_typeannotation_in_p_convert_expr4913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtin_fun_in_term_expr4936 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_term_expr_in_term_expr4939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arith_expr_in_term_expr4944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtin_fun_in_p_term_expr4954 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_term_expr4957 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_term_expr_in_p_term_expr4961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_arith_expr_in_p_term_expr4966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_builtin_fun0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plusplus_expr_in_arith_expr4996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_plusplus_expr_in_p_arith_expr5005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timestimes_expr_in_plusplus_expr5015 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000C00L});
    public static final BitSet FOLLOW_NL_in_plusplus_expr5018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000C00L});
    public static final BitSet FOLLOW_PLUSPLUS_in_plusplus_expr5023 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_MINUSMINUS_in_plusplus_expr5026 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_plusplus_expr5030 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_timestimes_expr_in_plusplus_expr5034 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000C00L});
    public static final BitSet FOLLOW_p_timestimes_expr_in_p_plusplus_expr5046 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000C00L});
    public static final BitSet FOLLOW_NL_in_p_plusplus_expr5049 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000C00L});
    public static final BitSet FOLLOW_PLUSPLUS_in_p_plusplus_expr5054 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_MINUSMINUS_in_p_plusplus_expr5057 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_plusplus_expr5061 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_timestimes_expr_in_p_plusplus_expr5065 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000C00L});
    public static final BitSet FOLLOW_simple_expr_in_timestimes_expr5077 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000300L});
    public static final BitSet FOLLOW_NL_in_timestimes_expr5080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000300L});
    public static final BitSet FOLLOW_TIMESTIMES_in_timestimes_expr5085 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_QUOTIENTQUOTIENT_in_timestimes_expr5088 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_timestimes_expr5092 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_simple_expr_in_timestimes_expr5096 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000300L});
    public static final BitSet FOLLOW_p_simple_expr_in_p_timestimes_expr5109 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000300L});
    public static final BitSet FOLLOW_NL_in_p_timestimes_expr5112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000300L});
    public static final BitSet FOLLOW_TIMESTIMES_in_p_timestimes_expr5117 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_QUOTIENTQUOTIENT_in_p_timestimes_expr5120 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_timestimes_expr5124 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_simple_expr_in_p_timestimes_expr5128 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000300L});
    public static final BitSet FOLLOW_cons_expr_in_simple_expr5139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_cons_expr_in_p_simple_expr5148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_expr_in_cons_expr5157 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_NL_in_cons_expr5160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_token_DOUBLE_COLON_in_cons_expr5163 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_cons_expr5165 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_to_expr_in_cons_expr5168 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_p_to_expr_in_p_cons_expr5188 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_NL_in_p_cons_expr5191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_token_DOUBLE_COLON_in_p_cons_expr5194 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_cons_expr5196 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_to_expr_in_p_cons_expr5199 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_arith_plus_expr_in_to_expr5219 = new BitSet(new long[]{0x0000000000000002L,0x000000000C000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_to_expr5222 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_L_to_in_to_expr5227 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_L_downto_in_to_expr5231 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_to_expr5235 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_arith_plus_expr_in_to_expr5239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_arith_plus_expr_in_p_to_expr5252 = new BitSet(new long[]{0x0000000000000002L,0x000000000C000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_p_to_expr5255 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_L_to_in_p_to_expr5260 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_L_downto_in_p_to_expr5264 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_to_expr5268 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_arith_plus_expr_in_p_to_expr5272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arith_uminus_expr_in_arith_plus_expr5284 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000002000001L});
    public static final BitSet FOLLOW_NL_in_arith_plus_expr5288 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_PLUS_in_arith_plus_expr5292 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_MINUS_in_arith_plus_expr5297 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_arith_plus_expr5301 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_arith_uminus_expr_in_arith_plus_expr5305 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000002000001L});
    public static final BitSet FOLLOW_p_arith_uminus_expr_in_p_arith_plus_expr5316 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000002000001L});
    public static final BitSet FOLLOW_NL_in_p_arith_plus_expr5319 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_set_in_p_arith_plus_expr5323 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_arith_plus_expr5332 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_arith_uminus_expr_in_p_arith_plus_expr5336 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000002000001L});
    public static final BitSet FOLLOW_MINUS_in_arith_uminus_expr5349 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_arith_uminus_expr5351 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_arith_mult_expr_in_arith_uminus_expr5354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arith_mult_expr_in_arith_uminus_expr5367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_p_arith_uminus_expr5378 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_arith_uminus_expr5380 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_arith_mult_expr_in_p_arith_uminus_expr5383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_arith_mult_expr_in_p_arith_uminus_expr5396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arith_pow_expr_in_arith_mult_expr5405 = new BitSet(new long[]{0x0000000000000002L,0x0000018000000000L,0x0000000002000006L});
    public static final BitSet FOLLOW_NL_in_arith_mult_expr5408 = new BitSet(new long[]{0x0000000000000000L,0x0000018000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_set_in_arith_mult_expr5412 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_arith_mult_expr5429 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_arith_pow_expr_in_arith_mult_expr5433 = new BitSet(new long[]{0x0000000000000002L,0x0000018000000000L,0x0000000002000006L});
    public static final BitSet FOLLOW_p_arith_pow_expr_in_p_arith_mult_expr5445 = new BitSet(new long[]{0x0000000000000002L,0x0000018000000000L,0x0000000002000006L});
    public static final BitSet FOLLOW_NL_in_p_arith_mult_expr5448 = new BitSet(new long[]{0x0000000000000000L,0x0000018000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_set_in_p_arith_mult_expr5452 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_arith_mult_expr5469 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_arith_pow_expr_in_p_arith_mult_expr5473 = new BitSet(new long[]{0x0000000000000002L,0x0000018000000000L,0x0000000002000006L});
    public static final BitSet FOLLOW_apply_expr_in_arith_pow_expr5484 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000008L});
    public static final BitSet FOLLOW_NL_in_arith_pow_expr5487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_POW_tok_in_arith_pow_expr5490 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_arith_pow_expr5492 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_apply_expr_in_arith_pow_expr5495 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000008L});
    public static final BitSet FOLLOW_p_apply_expr_in_p_arith_pow_expr5516 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000008L});
    public static final BitSet FOLLOW_NL_in_p_arith_pow_expr5519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_POW_tok_in_p_arith_pow_expr5522 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_arith_pow_expr5524 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_apply_expr_in_p_arith_pow_expr5527 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000008L});
    public static final BitSet FOLLOW_basic_expr_in_apply_expr5548 = new BitSet(new long[]{0x0000000000000002L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_basic_expr_in_p_apply_expr5566 = new BitSet(new long[]{0x0000000000000002L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_apply_expr5569 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_basic_expr_in_p_apply_expr5572 = new BitSet(new long[]{0x0000000000000002L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_message_send_expr_in_basic_expr5592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_message_send_expr_in_p_basic_expr5601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitive_expr_in_message_send_expr5610 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_NL_in_message_send_expr5613 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_PERIOD_in_message_send_expr5616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_message_send_expr5618 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Id_in_message_send_expr5621 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_OPEN_in_list_expr5661 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_list_expr5663 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5666 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_list_expr5668 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_SC_in_list_expr5671 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_list_expr5673 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001002000000L});
    public static final BitSet FOLLOW_NL_in_list_expr5678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_CLOSE_in_list_expr5681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_OPEN_in_list_expr5695 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000BB6E430001L});
    public static final BitSet FOLLOW_NL_in_list_expr5697 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000BB6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001002040000L});
    public static final BitSet FOLLOW_NL_in_list_expr5704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_list_expr5707 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_list_expr5709 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001002040000L});
    public static final BitSet FOLLOW_NL_in_list_expr5716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_CLOSE_in_list_expr5721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_list_expr5735 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AF6E430001L});
    public static final BitSet FOLLOW_NL_in_list_expr5737 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AF6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000402040000L});
    public static final BitSet FOLLOW_NL_in_list_expr5744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_list_expr5747 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_list_expr5749 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000402040000L});
    public static final BitSet FOLLOW_NL_in_list_expr5756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400040000L});
    public static final BitSet FOLLOW_COMMA_in_list_expr5760 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000402000000L});
    public static final BitSet FOLLOW_NL_in_list_expr5762 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_list_expr5769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_map_or_set_expr5798 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000EB6E430001L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr5800 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000EB6E430001L});
    public static final BitSet FOLLOW_map_or_set_elem_expr_in_map_or_set_expr5804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004002040000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr5806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000040000L});
    public static final BitSet FOLLOW_COMMA_in_map_or_set_expr5810 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr5812 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_map_or_set_elem_expr_in_map_or_set_expr5815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004002040000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr5817 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000040000L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_map_or_set_expr5824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_map_or_set_expr5844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000200C000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr5846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_token_ARROW_in_map_or_set_expr5849 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004002000000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr5851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_map_or_set_expr5854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_nc_in_map_or_set_elem_expr5871 = new BitSet(new long[]{0x0000000200000002L,0x0000000000000000L,0x000000000200C000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_elem_expr5874 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x000000000200C000L});
    public static final BitSet FOLLOW_arrow_or_assign_in_map_or_set_elem_expr5877 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_map_or_set_elem_expr5879 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_map_or_set_elem_expr5882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_type_expr5909 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010002000000L});
    public static final BitSet FOLLOW_NL_in_type_expr5911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLON_in_type_expr5914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_type_expr5916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_typeid_in_type_expr5919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000402000000L});
    public static final BitSet FOLLOW_NL_in_type_expr5921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_type_expr5924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Num_in_primitive_expr5942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Float_in_primitive_expr5947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_String_in_primitive_expr5952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_primitive_expr5957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Constr_in_primitive_expr5962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_true_in_primitive_expr5967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_false_in_primitive_expr5972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_this_in_primitive_expr5977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_nil_in_primitive_expr5983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_root_in_primitive_expr5988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_expr_in_primitive_expr5999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_in_primitive_expr6010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_list_expr_in_primitive_expr6016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_control_expr_in_primitive_expr6021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_or_set_expr_in_primitive_expr6026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_synpred1_babel171941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010002000000L});
    public static final BitSet FOLLOW_NL_in_synpred1_babel171943 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLON_in_synpred1_babel171946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_synpred2_babel171994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_synpred2_babel171996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_L_as_in_synpred2_babel171999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_synpred3_babel172030 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002100000L});
    public static final BitSet FOLLOW_NL_in_synpred3_babel172032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_QUESTION_MARK_in_synpred3_babel172035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_synpred4_babel172073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002200000L});
    public static final BitSet FOLLOW_NL_in_synpred4_babel172075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_EXCLAMATION_MARK_in_synpred4_babel172078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_synpred5_babel172116 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4C030001L});
    public static final BitSet FOLLOW_pattern_in_synpred5_babel172118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_synpred6_babel172207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_synpred6_babel172209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_L_if_in_synpred6_babel172212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_synpred7_babel172243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010002000000L});
    public static final BitSet FOLLOW_NL_in_synpred7_babel172245 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLON_in_synpred7_babel172248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defpattern_in_synpred8_babel173082 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_synpred8_babel173084 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred8_babel173087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_synpred9_babel173609 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_objelem_assign_in_synpred9_babel173613 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_synpred9_babel173616 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred9_babel173619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_obj_in_synpred10_babel173848 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000002000002L});
    public static final BitSet FOLLOW_NL_in_synpred10_babel173850 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000002000002L});
    public static final BitSet FOLLOW_parents_in_synpred10_babel173853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_nobrackets_in_synpred11_babel173924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_nobrackets_in_synpred12_babel173947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_OPEN_in_synpred13_babel175646 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_synpred13_babel175648 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_synpred13_babel175651 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_synpred13_babel175653 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_SC_in_synpred13_babel175656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_expr_in_synpred14_babel175994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_in_synpred15_babel176005 = new BitSet(new long[]{0x0000000000000002L});

}