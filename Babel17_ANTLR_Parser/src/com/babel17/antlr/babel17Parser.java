// $ANTLR 3.2 Sep 23, 2009 12:02:23 /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g 2011-07-19 15:40:38

package com.babel17.antlr;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class babel17Parser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "PROG", "NIL_TOKEN", "ANY", "LAMBDA", "SQUARE_LIST", "ROUND_LIST", "LIST_CONS", "COMPARE", "APPLY", "IF", "MAP_OR_SET_OR_OBJ", "EMPTY_MAP", "EXCEPTION", "MATCH", "TRY", "CASES", "OBJ", "FOR_EXPR", "WHILE_DO", "MESSAGE_SEND", "UMINUS", "POW", "PARENTS_PLUS", "PARENTS_MUL", "BLOCK", "BEGIN", "WITH", "VAL", "ASSIGN", "LENS_ASSIGN", "LENS_MODIFY_LEFT", "LENS_MODIFY_RIGHT", "ARROW", "DEF", "YIELD", "PRIVATE", "TYPEDEF", "TYPEDEF_CLAUSE", "GETTYPE", "MEMOIZE", "MEMOID_STRONG", "MEMOID_WEAK", "PRIVATEID", "IF_PATTERN", "TYPE_PATTERN", "INNERVALUE_PATTERN", "TYPEID", "TYPEVAL", "MODULEID", "TYPE_EXPR", "TYPEOF", "CONVERSION", "AUTOMATIC_CONVERSION", "CONVERT", "RELATE", "INTERVAL", "IMPORT_PREFIX", "IMPORT_ALL", "IMPORT_SET", "IMPORT_PLUS", "IMPORT_MINUS", "MESSAGE_ID", "MESSAGE_LENS", "FUNCTIONS_LENS", "Newline", "NotNewline", "COMMENT", "LINECOMMENT", "SmallLetter", "BigLetter", "Letter", "Digit", "Hex", "ML_plus", "MR_plus", "ML_plusplus", "MR_plusplus", "ML_minus", "MR_minus", "ML_minusminus", "MR_minusminus", "ML_times", "MR_times", "ML_timestimes", "MR_timestimes", "ML_slash", "MR_slash", "ML_slashslash", "MR_slashslash", "ML_pow", "MR_pow", "L_begin", "L_end", "L_obj", "L_with", "L_if", "L_then", "L_else", "L_elseif", "L_while", "L_for", "L_do", "L_yield", "L_match", "L_case", "L_as", "L_val", "L_def", "L_in", "L_exception", "L_to", "L_downto", "L_try", "L_catch", "L_concurrent", "L_choose", "L_lazy", "L_memoize", "L_true", "L_false", "L_this", "L_random", "L_nil", "L_div", "L_mod", "L_module", "L_typedef", "L_typeof", "L_private", "L_import", "L_unittest", "L_and", "L_not", "L_or", "L_xor", "L_root", "L_native", "L_min", "L_max", "L_lens", "A_EQUAL", "U_EQUAL", "A_NOT_EQUAL", "U_NOT_EQUAL", "LESS", "A_LESS_EQ", "U_LESS_EQ", "GREATER", "A_GREATER_EQ", "U_GREATER_EQ", "SC", "PLUS", "MINUS", "TIMES", "QUOTIENT", "POW_tok", "TOK_RELATE", "TOK_CONVERT", "A_DOUBLE_COLON", "U_DOUBLE_COLON", "TIMESTIMES", "QUOTIENTQUOTIENT", "PLUSPLUS", "MINUSMINUS", "A_DOUBLE_ARROW", "U_DOUBLE_ARROW", "A_ARROW", "U_ARROW", "A_ELLIPSIS", "U_ELLIPSIS", "COMMA", "PERIOD", "QUESTION_MARK", "EXCLAMATION_MARK", "L_force", "WsChar", "WS", "NL", "Constr", "Id", "Exponent", "Float", "Num", "Charcode", "String", "ROUND_BRACKET_OPEN", "ROUND_BRACKET_CLOSE", "SQUARE_BRACKET_OPEN", "SQUARE_BRACKET_CLOSE", "CURLY_BRACKET_OPEN", "CURLY_BRACKET_CLOSE", "UNDERSCORE", "COLON", "PRAGMA_LOG", "PRAGMA_PRINT", "PRAGMA_ASSERT", "PRAGMA_PROFILE", "PRAGMA_CATCH"
    };
    public static final int PRAGMA_CATCH=201;
    public static final int U_NOT_EQUAL=147;
    public static final int BigLetter=73;
    public static final int TIMESTIMES=164;
    public static final int ROUND_BRACKET_CLOSE=190;
    public static final int L_native=140;
    public static final int L_lens=143;
    public static final int ML_plusplus=79;
    public static final int Newline=68;
    public static final int SQUARE_BRACKET_CLOSE=192;
    public static final int EOF=-1;
    public static final int U_DOUBLE_ARROW=169;
    public static final int EMPTY_MAP=15;
    public static final int Num=186;
    public static final int L_false=123;
    public static final int QUOTIENTQUOTIENT=165;
    public static final int L_nil=126;
    public static final int BEGIN=29;
    public static final int QUESTION_MARK=176;
    public static final int MESSAGE_SEND=23;
    public static final int A_ARROW=170;
    public static final int TYPE_EXPR=53;
    public static final int L_this=124;
    public static final int L_root=139;
    public static final int L_force=178;
    public static final int ML_pow=93;
    public static final int NIL_TOKEN=5;
    public static final int PRAGMA_PRINT=198;
    public static final int CURLY_BRACKET_OPEN=193;
    public static final int L_typedef=130;
    public static final int UNDERSCORE=195;
    public static final int MR_slashslash=92;
    public static final int LENS_ASSIGN=33;
    public static final int L_unittest=134;
    public static final int MR_times=86;
    public static final int WS=180;
    public static final int Charcode=187;
    public static final int TYPEOF=54;
    public static final int L_match=107;
    public static final int ML_times=85;
    public static final int L_module=129;
    public static final int MESSAGE_ID=65;
    public static final int RELATE=58;
    public static final int MEMOID_WEAK=45;
    public static final int APPLY=12;
    public static final int LENS_MODIFY_LEFT=34;
    public static final int A_EQUAL=144;
    public static final int L_yield=106;
    public static final int L_div=127;
    public static final int PLUSPLUS=166;
    public static final int L_while=103;
    public static final int CASES=19;
    public static final int IF_PATTERN=47;
    public static final int A_ELLIPSIS=172;
    public static final int SQUARE_BRACKET_OPEN=191;
    public static final int MEMOIZE=43;
    public static final int L_xor=138;
    public static final int INNERVALUE_PATTERN=49;
    public static final int TYPEDEF_CLAUSE=41;
    public static final int L_max=142;
    public static final int YIELD=38;
    public static final int ML_plus=77;
    public static final int U_EQUAL=145;
    public static final int PLUS=155;
    public static final int FUNCTIONS_LENS=67;
    public static final int String=188;
    public static final int LAMBDA=7;
    public static final int L_or=137;
    public static final int MR_pow=94;
    public static final int MR_minusminus=84;
    public static final int L_then=100;
    public static final int TYPEDEF=40;
    public static final int ML_slash=89;
    public static final int IMPORT_SET=62;
    public static final int CURLY_BRACKET_CLOSE=194;
    public static final int FOR_EXPR=21;
    public static final int UMINUS=24;
    public static final int Constr=182;
    public static final int MINUS=156;
    public static final int L_memoize=121;
    public static final int MR_slash=90;
    public static final int CONVERSION=55;
    public static final int A_GREATER_EQ=152;
    public static final int ROUND_LIST=9;
    public static final int COLON=196;
    public static final int SC=154;
    public static final int L_downto=115;
    public static final int L_random=125;
    public static final int BLOCK=28;
    public static final int IMPORT_PLUS=63;
    public static final int ARROW=36;
    public static final int L_case=108;
    public static final int PARENTS_MUL=27;
    public static final int L_end=96;
    public static final int L_try=116;
    public static final int TOK_RELATE=160;
    public static final int L_mod=128;
    public static final int MR_timestimes=88;
    public static final int IMPORT_PREFIX=60;
    public static final int MINUSMINUS=167;
    public static final int LINECOMMENT=71;
    public static final int MAP_OR_SET_OR_OBJ=14;
    public static final int TYPEID=50;
    public static final int L_exception=113;
    public static final int ML_minus=81;
    public static final int GREATER=151;
    public static final int POW=25;
    public static final int L_catch=117;
    public static final int L_concurrent=118;
    public static final int LIST_CONS=10;
    public static final int L_with=98;
    public static final int AUTOMATIC_CONVERSION=56;
    public static final int LESS=148;
    public static final int ROUND_BRACKET_OPEN=189;
    public static final int MODULEID=52;
    public static final int SQUARE_LIST=8;
    public static final int VAL=31;
    public static final int L_as=109;
    public static final int NL=181;
    public static final int COMMENT=70;
    public static final int A_DOUBLE_COLON=162;
    public static final int MR_plusplus=80;
    public static final int L_def=111;
    public static final int EXCEPTION=16;
    public static final int L_and=135;
    public static final int IMPORT_ALL=61;
    public static final int L_choose=119;
    public static final int PRIVATE=39;
    public static final int PERIOD=175;
    public static final int SmallLetter=72;
    public static final int L_import=133;
    public static final int ML_timestimes=87;
    public static final int ML_slashslash=91;
    public static final int MATCH=17;
    public static final int U_LESS_EQ=150;
    public static final int TRY=18;
    public static final int L_to=114;
    public static final int Float=185;
    public static final int IMPORT_MINUS=64;
    public static final int MR_plus=78;
    public static final int L_do=105;
    public static final int L_val=110;
    public static final int TOK_CONVERT=161;
    public static final int MR_minus=82;
    public static final int L_obj=97;
    public static final int WsChar=179;
    public static final int Hex=76;
    public static final int GETTYPE=42;
    public static final int L_private=132;
    public static final int TYPE_PATTERN=48;
    public static final int L_for=104;
    public static final int Letter=74;
    public static final int EXCLAMATION_MARK=177;
    public static final int PRAGMA_ASSERT=199;
    public static final int U_ARROW=171;
    public static final int PRAGMA_LOG=197;
    public static final int PRIVATEID=46;
    public static final int L_else=101;
    public static final int DEF=37;
    public static final int L_begin=95;
    public static final int L_typeof=131;
    public static final int ML_minusminus=83;
    public static final int MEMOID_STRONG=44;
    public static final int L_min=141;
    public static final int POW_tok=159;
    public static final int Exponent=184;
    public static final int PARENTS_PLUS=26;
    public static final int A_DOUBLE_ARROW=168;
    public static final int INTERVAL=59;
    public static final int IF=13;
    public static final int L_not=136;
    public static final int PROG=4;
    public static final int OBJ=20;
    public static final int COMMA=174;
    public static final int TYPEVAL=51;
    public static final int U_ELLIPSIS=173;
    public static final int COMPARE=11;
    public static final int U_GREATER_EQ=153;
    public static final int L_true=122;
    public static final int Id=183;
    public static final int WITH=30;
    public static final int L_in=112;
    public static final int CONVERT=57;
    public static final int L_lazy=120;
    public static final int NotNewline=69;
    public static final int QUOTIENT=158;
    public static final int L_if=99;
    public static final int WHILE_DO=22;
    public static final int L_elseif=102;
    public static final int Digit=75;
    public static final int LENS_MODIFY_RIGHT=35;
    public static final int PRAGMA_PROFILE=200;
    public static final int ANY=6;
    public static final int A_NOT_EQUAL=146;
    public static final int ASSIGN=32;
    public static final int U_DOUBLE_COLON=163;
    public static final int MESSAGE_LENS=66;
    public static final int TIMES=157;
    public static final int A_LESS_EQ=149;

    // delegates
    // delegators


        public babel17Parser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public babel17Parser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return babel17Parser.tokenNames; }
    public String getGrammarFileName() { return "/Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g"; }

     

    public boolean errorDuringParsing = false;
    public ArrayList<RecognitionException> parsingErrors = new ArrayList<RecognitionException>();


    @Override
    public void reportError(RecognitionException e) {
      errorDuringParsing = true;
      parsingErrors.add(e);
    }



    public static class prog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prog"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:141:1: prog : block EOF -> ^( PROG block ) ;
    public final babel17Parser.prog_return prog() throws RecognitionException {
        babel17Parser.prog_return retval = new babel17Parser.prog_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF2=null;
        babel17Parser.block_return block1 = null;


        CommonTree EOF2_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:141:7: ( block EOF -> ^( PROG block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:141:9: block EOF
            {
            pushFollow(FOLLOW_block_in_prog280);
            block1=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block1.getTree());
            EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_prog282); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF2);



            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 141:19: -> ^( PROG block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:141:22: ^( PROG block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROG, "PROG"), root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prog"

    public static class token_EQUAL_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_EQUAL"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:300:1: token_EQUAL : ( A_EQUAL | U_EQUAL );
    public final babel17Parser.token_EQUAL_return token_EQUAL() throws RecognitionException {
        babel17Parser.token_EQUAL_return retval = new babel17Parser.token_EQUAL_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set3=null;

        CommonTree set3_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:301:2: ( A_EQUAL | U_EQUAL )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set3=(Token)input.LT(1);
            if ( (input.LA(1)>=A_EQUAL && input.LA(1)<=U_EQUAL) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set3));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_EQUAL"

    public static class token_NOT_EQUAL_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_NOT_EQUAL"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:308:1: token_NOT_EQUAL : ( A_NOT_EQUAL | U_NOT_EQUAL );
    public final babel17Parser.token_NOT_EQUAL_return token_NOT_EQUAL() throws RecognitionException {
        babel17Parser.token_NOT_EQUAL_return retval = new babel17Parser.token_NOT_EQUAL_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set4=null;

        CommonTree set4_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:309:2: ( A_NOT_EQUAL | U_NOT_EQUAL )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set4=(Token)input.LT(1);
            if ( (input.LA(1)>=A_NOT_EQUAL && input.LA(1)<=U_NOT_EQUAL) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set4));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_NOT_EQUAL"

    public static class token_LESS_EQ_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_LESS_EQ"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:317:1: token_LESS_EQ : ( A_LESS_EQ | U_LESS_EQ );
    public final babel17Parser.token_LESS_EQ_return token_LESS_EQ() throws RecognitionException {
        babel17Parser.token_LESS_EQ_return retval = new babel17Parser.token_LESS_EQ_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set5=null;

        CommonTree set5_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:318:2: ( A_LESS_EQ | U_LESS_EQ )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set5=(Token)input.LT(1);
            if ( (input.LA(1)>=A_LESS_EQ && input.LA(1)<=U_LESS_EQ) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set5));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_LESS_EQ"

    public static class token_GREATER_EQ_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_GREATER_EQ"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:327:1: token_GREATER_EQ : ( A_GREATER_EQ | U_GREATER_EQ );
    public final babel17Parser.token_GREATER_EQ_return token_GREATER_EQ() throws RecognitionException {
        babel17Parser.token_GREATER_EQ_return retval = new babel17Parser.token_GREATER_EQ_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set6=null;

        CommonTree set6_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:328:2: ( A_GREATER_EQ | U_GREATER_EQ )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set6=(Token)input.LT(1);
            if ( (input.LA(1)>=A_GREATER_EQ && input.LA(1)<=U_GREATER_EQ) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set6));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_GREATER_EQ"

    public static class token_OR_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_OR"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:343:1: token_OR : L_or ;
    public final babel17Parser.token_OR_return token_OR() throws RecognitionException {
        babel17Parser.token_OR_return retval = new babel17Parser.token_OR_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_or7=null;

        CommonTree L_or7_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:343:9: ( L_or )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:343:11: L_or
            {
            root_0 = (CommonTree)adaptor.nil();

            L_or7=(Token)match(input,L_or,FOLLOW_L_or_in_token_OR1275); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_or7_tree = (CommonTree)adaptor.create(L_or7);
            adaptor.addChild(root_0, L_or7_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_OR"

    public static class token_AND_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_AND"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:344:1: token_AND : L_and ;
    public final babel17Parser.token_AND_return token_AND() throws RecognitionException {
        babel17Parser.token_AND_return retval = new babel17Parser.token_AND_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_and8=null;

        CommonTree L_and8_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:345:2: ( L_and )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:345:4: L_and
            {
            root_0 = (CommonTree)adaptor.nil();

            L_and8=(Token)match(input,L_and,FOLLOW_L_and_in_token_AND1283); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_and8_tree = (CommonTree)adaptor.create(L_and8);
            adaptor.addChild(root_0, L_and8_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_AND"

    public static class token_NOT_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_NOT"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:346:1: token_NOT : L_not ;
    public final babel17Parser.token_NOT_return token_NOT() throws RecognitionException {
        babel17Parser.token_NOT_return retval = new babel17Parser.token_NOT_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_not9=null;

        CommonTree L_not9_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:347:2: ( L_not )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:347:4: L_not
            {
            root_0 = (CommonTree)adaptor.nil();

            L_not9=(Token)match(input,L_not,FOLLOW_L_not_in_token_NOT1291); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_not9_tree = (CommonTree)adaptor.create(L_not9);
            adaptor.addChild(root_0, L_not9_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_NOT"

    public static class token_XOR_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_XOR"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:349:1: token_XOR : L_xor ;
    public final babel17Parser.token_XOR_return token_XOR() throws RecognitionException {
        babel17Parser.token_XOR_return retval = new babel17Parser.token_XOR_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_xor10=null;

        CommonTree L_xor10_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:350:2: ( L_xor )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:350:4: L_xor
            {
            root_0 = (CommonTree)adaptor.nil();

            L_xor10=(Token)match(input,L_xor,FOLLOW_L_xor_in_token_XOR1301); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_xor10_tree = (CommonTree)adaptor.create(L_xor10);
            adaptor.addChild(root_0, L_xor10_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_XOR"

    public static class token_DOUBLE_COLON_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_DOUBLE_COLON"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:356:1: token_DOUBLE_COLON : ( A_DOUBLE_COLON | U_DOUBLE_COLON );
    public final babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON() throws RecognitionException {
        babel17Parser.token_DOUBLE_COLON_return retval = new babel17Parser.token_DOUBLE_COLON_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set11=null;

        CommonTree set11_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:357:2: ( A_DOUBLE_COLON | U_DOUBLE_COLON )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set11=(Token)input.LT(1);
            if ( (input.LA(1)>=A_DOUBLE_COLON && input.LA(1)<=U_DOUBLE_COLON) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set11));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_DOUBLE_COLON"

    public static class token_DOUBLE_ARROW_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_DOUBLE_ARROW"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:373:1: token_DOUBLE_ARROW : ( A_DOUBLE_ARROW | U_DOUBLE_ARROW );
    public final babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW() throws RecognitionException {
        babel17Parser.token_DOUBLE_ARROW_return retval = new babel17Parser.token_DOUBLE_ARROW_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set12=null;

        CommonTree set12_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:374:2: ( A_DOUBLE_ARROW | U_DOUBLE_ARROW )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set12=(Token)input.LT(1);
            if ( (input.LA(1)>=A_DOUBLE_ARROW && input.LA(1)<=U_DOUBLE_ARROW) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set12));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_DOUBLE_ARROW"

    public static class token_ARROW_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_ARROW"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:378:1: token_ARROW : ( A_ARROW | U_ARROW );
    public final babel17Parser.token_ARROW_return token_ARROW() throws RecognitionException {
        babel17Parser.token_ARROW_return retval = new babel17Parser.token_ARROW_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set13=null;

        CommonTree set13_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:379:2: ( A_ARROW | U_ARROW )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set13=(Token)input.LT(1);
            if ( (input.LA(1)>=A_ARROW && input.LA(1)<=U_ARROW) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set13));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_ARROW"

    public static class token_ELLIPSIS_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_ELLIPSIS"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:384:1: token_ELLIPSIS : ( A_ELLIPSIS | U_ELLIPSIS );
    public final babel17Parser.token_ELLIPSIS_return token_ELLIPSIS() throws RecognitionException {
        babel17Parser.token_ELLIPSIS_return retval = new babel17Parser.token_ELLIPSIS_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set14=null;

        CommonTree set14_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:385:2: ( A_ELLIPSIS | U_ELLIPSIS )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set14=(Token)input.LT(1);
            if ( (input.LA(1)>=A_ELLIPSIS && input.LA(1)<=U_ELLIPSIS) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set14));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_ELLIPSIS"

    public static class typeid_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeid"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:467:1: typeid : Id ( ( NL )? PERIOD ( NL )? Id )* -> ^( TYPEID ( Id )* ) ;
    public final babel17Parser.typeid_return typeid() throws RecognitionException {
        babel17Parser.typeid_return retval = new babel17Parser.typeid_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id15=null;
        Token NL16=null;
        Token PERIOD17=null;
        Token NL18=null;
        Token Id19=null;

        CommonTree Id15_tree=null;
        CommonTree NL16_tree=null;
        CommonTree PERIOD17_tree=null;
        CommonTree NL18_tree=null;
        CommonTree Id19_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:467:9: ( Id ( ( NL )? PERIOD ( NL )? Id )* -> ^( TYPEID ( Id )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:467:11: Id ( ( NL )? PERIOD ( NL )? Id )*
            {
            Id15=(Token)match(input,Id,FOLLOW_Id_in_typeid1951); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id15);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:467:14: ( ( NL )? PERIOD ( NL )? Id )*
            loop3:
            do {
                int alt3=2;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==NL) ) {
                    int LA3_1 = input.LA(2);

                    if ( (LA3_1==PERIOD) ) {
                        alt3=1;
                    }


                }
                else if ( (LA3_0==PERIOD) ) {
                    alt3=1;
                }


                switch (alt3) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:467:15: ( NL )? PERIOD ( NL )? Id
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:467:15: ( NL )?
            	    int alt1=2;
            	    int LA1_0 = input.LA(1);

            	    if ( (LA1_0==NL) ) {
            	        alt1=1;
            	    }
            	    switch (alt1) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:467:15: NL
            	            {
            	            NL16=(Token)match(input,NL,FOLLOW_NL_in_typeid1954); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL16);


            	            }
            	            break;

            	    }

            	    PERIOD17=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_typeid1957); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD17);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:467:26: ( NL )?
            	    int alt2=2;
            	    int LA2_0 = input.LA(1);

            	    if ( (LA2_0==NL) ) {
            	        alt2=1;
            	    }
            	    switch (alt2) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:467:26: NL
            	            {
            	            NL18=(Token)match(input,NL,FOLLOW_NL_in_typeid1959); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL18);


            	            }
            	            break;

            	    }

            	    Id19=(Token)match(input,Id,FOLLOW_Id_in_typeid1962); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_Id.add(Id19);


            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);



            // AST REWRITE
            // elements: Id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 467:35: -> ^( TYPEID ( Id )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:467:38: ^( TYPEID ( Id )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEID, "TYPEID"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:467:47: ( Id )*
                while ( stream_Id.hasNext() ) {
                    adaptor.addChild(root_1, stream_Id.nextNode());

                }
                stream_Id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeid"

    public static class typeannotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeannotation"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:469:1: typeannotation : ( typeid | '(' protected_expr ')' -> ^( TYPEVAL protected_expr ) );
    public final babel17Parser.typeannotation_return typeannotation() throws RecognitionException {
        babel17Parser.typeannotation_return retval = new babel17Parser.typeannotation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal21=null;
        Token char_literal23=null;
        babel17Parser.typeid_return typeid20 = null;

        babel17Parser.protected_expr_return protected_expr22 = null;


        CommonTree char_literal21_tree=null;
        CommonTree char_literal23_tree=null;
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:470:2: ( typeid | '(' protected_expr ')' -> ^( TYPEVAL protected_expr ) )
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==Id) ) {
                alt4=1;
            }
            else if ( (LA4_0==ROUND_BRACKET_OPEN) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:470:4: typeid
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeid_in_typeannotation1982);
                    typeid20=typeid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeid20.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:471:4: '(' protected_expr ')'
                    {
                    char_literal21=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_typeannotation1987); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal21);

                    pushFollow(FOLLOW_protected_expr_in_typeannotation1989);
                    protected_expr22=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr22.getTree());
                    char_literal23=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_typeannotation1991); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal23);



                    // AST REWRITE
                    // elements: protected_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 471:27: -> ^( TYPEVAL protected_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:471:30: ^( TYPEVAL protected_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEVAL, "TYPEVAL"), root_1);

                        adaptor.addChild(root_1, stream_protected_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeannotation"

    public static class pattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:474:1: pattern : ( Constr ( ( NL )? pattern )? -> ^( Constr ( pattern )? ) | primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )* -> ^( LIST_CONS ( primitive_pattern )* ) | L_exception ( NL )? pattern -> ^( L_exception pattern ) | token_ELLIPSIS );
    public final babel17Parser.pattern_return pattern() throws RecognitionException {
        babel17Parser.pattern_return retval = new babel17Parser.pattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Constr24=null;
        Token NL25=null;
        Token NL28=null;
        Token NL30=null;
        Token L_exception32=null;
        Token NL33=null;
        babel17Parser.pattern_return pattern26 = null;

        babel17Parser.primitive_pattern_return primitive_pattern27 = null;

        babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON29 = null;

        babel17Parser.primitive_pattern_return primitive_pattern31 = null;

        babel17Parser.pattern_return pattern34 = null;

        babel17Parser.token_ELLIPSIS_return token_ELLIPSIS35 = null;


        CommonTree Constr24_tree=null;
        CommonTree NL25_tree=null;
        CommonTree NL28_tree=null;
        CommonTree NL30_tree=null;
        CommonTree L_exception32_tree=null;
        CommonTree NL33_tree=null;
        RewriteRuleTokenStream stream_L_exception=new RewriteRuleTokenStream(adaptor,"token L_exception");
        RewriteRuleTokenStream stream_Constr=new RewriteRuleTokenStream(adaptor,"token Constr");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_primitive_pattern=new RewriteRuleSubtreeStream(adaptor,"rule primitive_pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_COLON=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_COLON");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:474:9: ( Constr ( ( NL )? pattern )? -> ^( Constr ( pattern )? ) | primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )* -> ^( LIST_CONS ( primitive_pattern )* ) | L_exception ( NL )? pattern -> ^( L_exception pattern ) | token_ELLIPSIS )
            int alt11=4;
            switch ( input.LA(1) ) {
            case Constr:
                {
                alt11=1;
                }
                break;
            case L_true:
            case L_false:
            case L_nil:
            case MINUS:
            case Id:
            case Num:
            case String:
            case ROUND_BRACKET_OPEN:
            case SQUARE_BRACKET_OPEN:
            case CURLY_BRACKET_OPEN:
            case UNDERSCORE:
                {
                alt11=2;
                }
                break;
            case L_exception:
                {
                alt11=3;
                }
                break;
            case A_ELLIPSIS:
            case U_ELLIPSIS:
                {
                alt11=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }

            switch (alt11) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:474:11: Constr ( ( NL )? pattern )?
                    {
                    Constr24=(Token)match(input,Constr,FOLLOW_Constr_in_pattern2008); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Constr.add(Constr24);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:474:18: ( ( NL )? pattern )?
                    int alt6=2;
                    int LA6_0 = input.LA(1);

                    if ( (LA6_0==NL) ) {
                        int LA6_1 = input.LA(2);

                        if ( (LA6_1==L_exception||(LA6_1>=L_true && LA6_1<=L_false)||LA6_1==L_nil||LA6_1==MINUS||(LA6_1>=A_ELLIPSIS && LA6_1<=U_ELLIPSIS)||(LA6_1>=Constr && LA6_1<=Id)||LA6_1==Num||(LA6_1>=String && LA6_1<=ROUND_BRACKET_OPEN)||LA6_1==SQUARE_BRACKET_OPEN||LA6_1==CURLY_BRACKET_OPEN||LA6_1==UNDERSCORE) ) {
                            alt6=1;
                        }
                    }
                    else if ( (LA6_0==L_exception||(LA6_0>=L_true && LA6_0<=L_false)||LA6_0==L_nil||LA6_0==MINUS||(LA6_0>=A_ELLIPSIS && LA6_0<=U_ELLIPSIS)||(LA6_0>=Constr && LA6_0<=Id)||LA6_0==Num||(LA6_0>=String && LA6_0<=ROUND_BRACKET_OPEN)||LA6_0==SQUARE_BRACKET_OPEN||LA6_0==CURLY_BRACKET_OPEN||LA6_0==UNDERSCORE) ) {
                        alt6=1;
                    }
                    switch (alt6) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:474:19: ( NL )? pattern
                            {
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:474:19: ( NL )?
                            int alt5=2;
                            int LA5_0 = input.LA(1);

                            if ( (LA5_0==NL) ) {
                                alt5=1;
                            }
                            switch (alt5) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:474:19: NL
                                    {
                                    NL25=(Token)match(input,NL,FOLLOW_NL_in_pattern2011); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL25);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_pattern_in_pattern2014);
                            pattern26=pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pattern.add(pattern26.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: Constr, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 474:33: -> ^( Constr ( pattern )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:474:36: ^( Constr ( pattern )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_Constr.nextNode(), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:474:45: ( pattern )?
                        if ( stream_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_pattern.nextTree());

                        }
                        stream_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:4: primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )*
                    {
                    pushFollow(FOLLOW_primitive_pattern_in_pattern2030);
                    primitive_pattern27=primitive_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitive_pattern.add(primitive_pattern27.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:22: ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )*
                    loop9:
                    do {
                        int alt9=2;
                        int LA9_0 = input.LA(1);

                        if ( (LA9_0==NL) ) {
                            int LA9_1 = input.LA(2);

                            if ( ((LA9_1>=A_DOUBLE_COLON && LA9_1<=U_DOUBLE_COLON)) ) {
                                alt9=1;
                            }


                        }
                        else if ( ((LA9_0>=A_DOUBLE_COLON && LA9_0<=U_DOUBLE_COLON)) ) {
                            alt9=1;
                        }


                        switch (alt9) {
                    	case 1 :
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:23: ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern
                    	    {
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:23: ( NL )?
                    	    int alt7=2;
                    	    int LA7_0 = input.LA(1);

                    	    if ( (LA7_0==NL) ) {
                    	        alt7=1;
                    	    }
                    	    switch (alt7) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:23: NL
                    	            {
                    	            NL28=(Token)match(input,NL,FOLLOW_NL_in_pattern2033); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL28);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_token_DOUBLE_COLON_in_pattern2036);
                    	    token_DOUBLE_COLON29=token_DOUBLE_COLON();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_token_DOUBLE_COLON.add(token_DOUBLE_COLON29.getTree());
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:46: ( NL )?
                    	    int alt8=2;
                    	    int LA8_0 = input.LA(1);

                    	    if ( (LA8_0==NL) ) {
                    	        alt8=1;
                    	    }
                    	    switch (alt8) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:46: NL
                    	            {
                    	            NL30=(Token)match(input,NL,FOLLOW_NL_in_pattern2038); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL30);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_primitive_pattern_in_pattern2041);
                    	    primitive_pattern31=primitive_pattern();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_primitive_pattern.add(primitive_pattern31.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop9;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: primitive_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 476:3: -> ^( LIST_CONS ( primitive_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:6: ^( LIST_CONS ( primitive_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST_CONS, "LIST_CONS"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:18: ( primitive_pattern )*
                        while ( stream_primitive_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_primitive_pattern.nextTree());

                        }
                        stream_primitive_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:477:4: L_exception ( NL )? pattern
                    {
                    L_exception32=(Token)match(input,L_exception,FOLLOW_L_exception_in_pattern2060); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_exception.add(L_exception32);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:477:16: ( NL )?
                    int alt10=2;
                    int LA10_0 = input.LA(1);

                    if ( (LA10_0==NL) ) {
                        alt10=1;
                    }
                    switch (alt10) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:477:16: NL
                            {
                            NL33=(Token)match(input,NL,FOLLOW_NL_in_pattern2062); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL33);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_pattern_in_pattern2065);
                    pattern34=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern34.getTree());


                    // AST REWRITE
                    // elements: pattern, L_exception
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 477:28: -> ^( L_exception pattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:477:31: ^( L_exception pattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_L_exception.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_pattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:4: token_ELLIPSIS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_ELLIPSIS_in_pattern2078);
                    token_ELLIPSIS35=token_ELLIPSIS();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_ELLIPSIS35.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pattern"

    public static class defpattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defpattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:1: defpattern : ( primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )* -> ^( LIST_CONS ( primitive_pattern )* ) | Constr ( defpattern )? -> ^( Constr ( defpattern )? ) );
    public final babel17Parser.defpattern_return defpattern() throws RecognitionException {
        babel17Parser.defpattern_return retval = new babel17Parser.defpattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL37=null;
        Token NL39=null;
        Token Constr41=null;
        babel17Parser.primitive_pattern_return primitive_pattern36 = null;

        babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON38 = null;

        babel17Parser.primitive_pattern_return primitive_pattern40 = null;

        babel17Parser.defpattern_return defpattern42 = null;


        CommonTree NL37_tree=null;
        CommonTree NL39_tree=null;
        CommonTree Constr41_tree=null;
        RewriteRuleTokenStream stream_Constr=new RewriteRuleTokenStream(adaptor,"token Constr");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_primitive_pattern=new RewriteRuleSubtreeStream(adaptor,"rule primitive_pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_COLON=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_COLON");
        RewriteRuleSubtreeStream stream_defpattern=new RewriteRuleSubtreeStream(adaptor,"rule defpattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:481:2: ( primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )* -> ^( LIST_CONS ( primitive_pattern )* ) | Constr ( defpattern )? -> ^( Constr ( defpattern )? ) )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( ((LA16_0>=L_true && LA16_0<=L_false)||LA16_0==L_nil||LA16_0==MINUS||LA16_0==Id||LA16_0==Num||(LA16_0>=String && LA16_0<=ROUND_BRACKET_OPEN)||LA16_0==SQUARE_BRACKET_OPEN||LA16_0==CURLY_BRACKET_OPEN||LA16_0==UNDERSCORE) ) {
                alt16=1;
            }
            else if ( (LA16_0==Constr) ) {
                alt16=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }
            switch (alt16) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:481:4: primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )*
                    {
                    pushFollow(FOLLOW_primitive_pattern_in_defpattern2088);
                    primitive_pattern36=primitive_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitive_pattern.add(primitive_pattern36.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:481:22: ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )*
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( (LA14_0==NL) ) {
                            int LA14_1 = input.LA(2);

                            if ( ((LA14_1>=A_DOUBLE_COLON && LA14_1<=U_DOUBLE_COLON)) ) {
                                alt14=1;
                            }


                        }
                        else if ( ((LA14_0>=A_DOUBLE_COLON && LA14_0<=U_DOUBLE_COLON)) ) {
                            alt14=1;
                        }


                        switch (alt14) {
                    	case 1 :
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:481:23: ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern
                    	    {
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:481:23: ( NL )?
                    	    int alt12=2;
                    	    int LA12_0 = input.LA(1);

                    	    if ( (LA12_0==NL) ) {
                    	        alt12=1;
                    	    }
                    	    switch (alt12) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:481:23: NL
                    	            {
                    	            NL37=(Token)match(input,NL,FOLLOW_NL_in_defpattern2091); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL37);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_token_DOUBLE_COLON_in_defpattern2094);
                    	    token_DOUBLE_COLON38=token_DOUBLE_COLON();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_token_DOUBLE_COLON.add(token_DOUBLE_COLON38.getTree());
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:481:46: ( NL )?
                    	    int alt13=2;
                    	    int LA13_0 = input.LA(1);

                    	    if ( (LA13_0==NL) ) {
                    	        alt13=1;
                    	    }
                    	    switch (alt13) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:481:46: NL
                    	            {
                    	            NL39=(Token)match(input,NL,FOLLOW_NL_in_defpattern2096); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL39);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_primitive_pattern_in_defpattern2099);
                    	    primitive_pattern40=primitive_pattern();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_primitive_pattern.add(primitive_pattern40.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: primitive_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 482:3: -> ^( LIST_CONS ( primitive_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:482:6: ^( LIST_CONS ( primitive_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST_CONS, "LIST_CONS"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:482:18: ( primitive_pattern )*
                        while ( stream_primitive_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_primitive_pattern.nextTree());

                        }
                        stream_primitive_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:483:4: Constr ( defpattern )?
                    {
                    Constr41=(Token)match(input,Constr,FOLLOW_Constr_in_defpattern2117); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Constr.add(Constr41);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:483:11: ( defpattern )?
                    int alt15=2;
                    int LA15_0 = input.LA(1);

                    if ( ((LA15_0>=L_true && LA15_0<=L_false)||LA15_0==L_nil||LA15_0==MINUS||(LA15_0>=Constr && LA15_0<=Id)||LA15_0==Num||(LA15_0>=String && LA15_0<=ROUND_BRACKET_OPEN)||LA15_0==SQUARE_BRACKET_OPEN||LA15_0==CURLY_BRACKET_OPEN||LA15_0==UNDERSCORE) ) {
                        alt15=1;
                    }
                    switch (alt15) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:483:11: defpattern
                            {
                            pushFollow(FOLLOW_defpattern_in_defpattern2119);
                            defpattern42=defpattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_defpattern.add(defpattern42.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: Constr, defpattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 483:23: -> ^( Constr ( defpattern )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:483:26: ^( Constr ( defpattern )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_Constr.nextNode(), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:483:35: ( defpattern )?
                        if ( stream_defpattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_defpattern.nextTree());

                        }
                        stream_defpattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "defpattern"

    public static class casepattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "casepattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:485:1: casepattern : bracket_pattern ;
    public final babel17Parser.casepattern_return casepattern() throws RecognitionException {
        babel17Parser.casepattern_return retval = new babel17Parser.casepattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.bracket_pattern_return bracket_pattern43 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:486:2: ( bracket_pattern )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:486:4: bracket_pattern
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_bracket_pattern_in_casepattern2138);
            bracket_pattern43=bracket_pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bracket_pattern43.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "casepattern"

    public static class bracket_pattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracket_pattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:1: bracket_pattern : ( ( Id ( NL )? L_as )=> Id ( NL )? L_as ( NL )? pattern -> ^( L_as Id pattern ) | ( protected_expr ( NL )? QUESTION_MARK )=> protected_expr ( NL )? QUESTION_MARK ( ( NL )? pattern )? -> ^( QUESTION_MARK protected_expr ( pattern )? ) | ( protected_expr ( NL )? EXCLAMATION_MARK )=> protected_expr ( NL )? EXCLAMATION_MARK ( ( NL )? pattern )? -> ^( EXCLAMATION_MARK protected_expr ( pattern )? ) | ( Id pattern )=> Id pattern -> ^( INNERVALUE_PATTERN Id pattern ) | L_val ( NL )? protected_expr_nc -> ^( L_val protected_expr_nc ) | L_for ( NL )? ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )? L_end -> ^( L_for ( bracket_pattern )* ) | ( pattern ( NL )? L_if )=> pattern ( NL )? L_if ( NL )? protected_expr_nc -> ^( IF_PATTERN pattern protected_expr_nc ) | ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation -> ^( TYPE_PATTERN typeannotation pattern ) | pattern );
    public final babel17Parser.bracket_pattern_return bracket_pattern() throws RecognitionException {
        babel17Parser.bracket_pattern_return retval = new babel17Parser.bracket_pattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id44=null;
        Token NL45=null;
        Token L_as46=null;
        Token NL47=null;
        Token NL50=null;
        Token QUESTION_MARK51=null;
        Token NL52=null;
        Token NL55=null;
        Token EXCLAMATION_MARK56=null;
        Token NL57=null;
        Token Id59=null;
        Token L_val61=null;
        Token NL62=null;
        Token L_for64=null;
        Token NL65=null;
        Token NL67=null;
        Token COMMA68=null;
        Token NL69=null;
        Token NL71=null;
        Token L_end72=null;
        Token NL74=null;
        Token L_if75=null;
        Token NL76=null;
        Token NL79=null;
        Token char_literal80=null;
        Token NL81=null;
        babel17Parser.pattern_return pattern48 = null;

        babel17Parser.protected_expr_return protected_expr49 = null;

        babel17Parser.pattern_return pattern53 = null;

        babel17Parser.protected_expr_return protected_expr54 = null;

        babel17Parser.pattern_return pattern58 = null;

        babel17Parser.pattern_return pattern60 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc63 = null;

        babel17Parser.bracket_pattern_return bracket_pattern66 = null;

        babel17Parser.bracket_pattern_return bracket_pattern70 = null;

        babel17Parser.pattern_return pattern73 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc77 = null;

        babel17Parser.pattern_return pattern78 = null;

        babel17Parser.typeannotation_return typeannotation82 = null;

        babel17Parser.pattern_return pattern83 = null;


        CommonTree Id44_tree=null;
        CommonTree NL45_tree=null;
        CommonTree L_as46_tree=null;
        CommonTree NL47_tree=null;
        CommonTree NL50_tree=null;
        CommonTree QUESTION_MARK51_tree=null;
        CommonTree NL52_tree=null;
        CommonTree NL55_tree=null;
        CommonTree EXCLAMATION_MARK56_tree=null;
        CommonTree NL57_tree=null;
        CommonTree Id59_tree=null;
        CommonTree L_val61_tree=null;
        CommonTree NL62_tree=null;
        CommonTree L_for64_tree=null;
        CommonTree NL65_tree=null;
        CommonTree NL67_tree=null;
        CommonTree COMMA68_tree=null;
        CommonTree NL69_tree=null;
        CommonTree NL71_tree=null;
        CommonTree L_end72_tree=null;
        CommonTree NL74_tree=null;
        CommonTree L_if75_tree=null;
        CommonTree NL76_tree=null;
        CommonTree NL79_tree=null;
        CommonTree char_literal80_tree=null;
        CommonTree NL81_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_EXCLAMATION_MARK=new RewriteRuleTokenStream(adaptor,"token EXCLAMATION_MARK");
        RewriteRuleTokenStream stream_L_for=new RewriteRuleTokenStream(adaptor,"token L_for");
        RewriteRuleTokenStream stream_L_as=new RewriteRuleTokenStream(adaptor,"token L_as");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_L_val=new RewriteRuleTokenStream(adaptor,"token L_val");
        RewriteRuleTokenStream stream_L_if=new RewriteRuleTokenStream(adaptor,"token L_if");
        RewriteRuleTokenStream stream_QUESTION_MARK=new RewriteRuleTokenStream(adaptor,"token QUESTION_MARK");
        RewriteRuleSubtreeStream stream_typeannotation=new RewriteRuleSubtreeStream(adaptor,"rule typeannotation");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_protected_expr_nc=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr_nc");
        RewriteRuleSubtreeStream stream_bracket_pattern=new RewriteRuleSubtreeStream(adaptor,"rule bracket_pattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:489:2: ( ( Id ( NL )? L_as )=> Id ( NL )? L_as ( NL )? pattern -> ^( L_as Id pattern ) | ( protected_expr ( NL )? QUESTION_MARK )=> protected_expr ( NL )? QUESTION_MARK ( ( NL )? pattern )? -> ^( QUESTION_MARK protected_expr ( pattern )? ) | ( protected_expr ( NL )? EXCLAMATION_MARK )=> protected_expr ( NL )? EXCLAMATION_MARK ( ( NL )? pattern )? -> ^( EXCLAMATION_MARK protected_expr ( pattern )? ) | ( Id pattern )=> Id pattern -> ^( INNERVALUE_PATTERN Id pattern ) | L_val ( NL )? protected_expr_nc -> ^( L_val protected_expr_nc ) | L_for ( NL )? ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )? L_end -> ^( L_for ( bracket_pattern )* ) | ( pattern ( NL )? L_if )=> pattern ( NL )? L_if ( NL )? protected_expr_nc -> ^( IF_PATTERN pattern protected_expr_nc ) | ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation -> ^( TYPE_PATTERN typeannotation pattern ) | pattern )
            int alt36=9;
            alt36 = dfa36.predict(input);
            switch (alt36) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:489:10: ( Id ( NL )? L_as )=> Id ( NL )? L_as ( NL )? pattern
                    {
                    Id44=(Token)match(input,Id,FOLLOW_Id_in_bracket_pattern2165); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id44);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:489:30: ( NL )?
                    int alt17=2;
                    int LA17_0 = input.LA(1);

                    if ( (LA17_0==NL) ) {
                        alt17=1;
                    }
                    switch (alt17) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:489:30: NL
                            {
                            NL45=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2167); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL45);


                            }
                            break;

                    }

                    L_as46=(Token)match(input,L_as,FOLLOW_L_as_in_bracket_pattern2170); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_as.add(L_as46);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:489:39: ( NL )?
                    int alt18=2;
                    int LA18_0 = input.LA(1);

                    if ( (LA18_0==NL) ) {
                        alt18=1;
                    }
                    switch (alt18) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:489:39: NL
                            {
                            NL47=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2172); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL47);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_pattern_in_bracket_pattern2175);
                    pattern48=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern48.getTree());


                    // AST REWRITE
                    // elements: L_as, Id, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 489:51: -> ^( L_as Id pattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:489:54: ^( L_as Id pattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_L_as.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());
                        adaptor.addChild(root_1, stream_pattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:490:4: ( protected_expr ( NL )? QUESTION_MARK )=> protected_expr ( NL )? QUESTION_MARK ( ( NL )? pattern )?
                    {
                    pushFollow(FOLLOW_protected_expr_in_bracket_pattern2204);
                    protected_expr49=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr49.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:491:18: ( NL )?
                    int alt19=2;
                    int LA19_0 = input.LA(1);

                    if ( (LA19_0==NL) ) {
                        alt19=1;
                    }
                    switch (alt19) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:491:18: NL
                            {
                            NL50=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2206); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL50);


                            }
                            break;

                    }

                    QUESTION_MARK51=(Token)match(input,QUESTION_MARK,FOLLOW_QUESTION_MARK_in_bracket_pattern2209); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION_MARK.add(QUESTION_MARK51);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:491:36: ( ( NL )? pattern )?
                    int alt21=2;
                    int LA21_0 = input.LA(1);

                    if ( (LA21_0==NL) ) {
                        int LA21_1 = input.LA(2);

                        if ( (LA21_1==L_exception||(LA21_1>=L_true && LA21_1<=L_false)||LA21_1==L_nil||LA21_1==MINUS||(LA21_1>=A_ELLIPSIS && LA21_1<=U_ELLIPSIS)||(LA21_1>=Constr && LA21_1<=Id)||LA21_1==Num||(LA21_1>=String && LA21_1<=ROUND_BRACKET_OPEN)||LA21_1==SQUARE_BRACKET_OPEN||LA21_1==CURLY_BRACKET_OPEN||LA21_1==UNDERSCORE) ) {
                            alt21=1;
                        }
                    }
                    else if ( (LA21_0==L_exception||(LA21_0>=L_true && LA21_0<=L_false)||LA21_0==L_nil||LA21_0==MINUS||(LA21_0>=A_ELLIPSIS && LA21_0<=U_ELLIPSIS)||(LA21_0>=Constr && LA21_0<=Id)||LA21_0==Num||(LA21_0>=String && LA21_0<=ROUND_BRACKET_OPEN)||LA21_0==SQUARE_BRACKET_OPEN||LA21_0==CURLY_BRACKET_OPEN||LA21_0==UNDERSCORE) ) {
                        alt21=1;
                    }
                    switch (alt21) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:491:37: ( NL )? pattern
                            {
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:491:37: ( NL )?
                            int alt20=2;
                            int LA20_0 = input.LA(1);

                            if ( (LA20_0==NL) ) {
                                alt20=1;
                            }
                            switch (alt20) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:491:37: NL
                                    {
                                    NL52=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2212); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL52);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_pattern_in_bracket_pattern2215);
                            pattern53=pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pattern.add(pattern53.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: QUESTION_MARK, protected_expr, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 491:51: -> ^( QUESTION_MARK protected_expr ( pattern )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:491:54: ^( QUESTION_MARK protected_expr ( pattern )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_QUESTION_MARK.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_protected_expr.nextTree());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:491:85: ( pattern )?
                        if ( stream_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_pattern.nextTree());

                        }
                        stream_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:492:4: ( protected_expr ( NL )? EXCLAMATION_MARK )=> protected_expr ( NL )? EXCLAMATION_MARK ( ( NL )? pattern )?
                    {
                    pushFollow(FOLLOW_protected_expr_in_bracket_pattern2247);
                    protected_expr54=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr54.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:493:18: ( NL )?
                    int alt22=2;
                    int LA22_0 = input.LA(1);

                    if ( (LA22_0==NL) ) {
                        alt22=1;
                    }
                    switch (alt22) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:493:18: NL
                            {
                            NL55=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2249); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL55);


                            }
                            break;

                    }

                    EXCLAMATION_MARK56=(Token)match(input,EXCLAMATION_MARK,FOLLOW_EXCLAMATION_MARK_in_bracket_pattern2252); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EXCLAMATION_MARK.add(EXCLAMATION_MARK56);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:493:39: ( ( NL )? pattern )?
                    int alt24=2;
                    int LA24_0 = input.LA(1);

                    if ( (LA24_0==NL) ) {
                        int LA24_1 = input.LA(2);

                        if ( (LA24_1==L_exception||(LA24_1>=L_true && LA24_1<=L_false)||LA24_1==L_nil||LA24_1==MINUS||(LA24_1>=A_ELLIPSIS && LA24_1<=U_ELLIPSIS)||(LA24_1>=Constr && LA24_1<=Id)||LA24_1==Num||(LA24_1>=String && LA24_1<=ROUND_BRACKET_OPEN)||LA24_1==SQUARE_BRACKET_OPEN||LA24_1==CURLY_BRACKET_OPEN||LA24_1==UNDERSCORE) ) {
                            alt24=1;
                        }
                    }
                    else if ( (LA24_0==L_exception||(LA24_0>=L_true && LA24_0<=L_false)||LA24_0==L_nil||LA24_0==MINUS||(LA24_0>=A_ELLIPSIS && LA24_0<=U_ELLIPSIS)||(LA24_0>=Constr && LA24_0<=Id)||LA24_0==Num||(LA24_0>=String && LA24_0<=ROUND_BRACKET_OPEN)||LA24_0==SQUARE_BRACKET_OPEN||LA24_0==CURLY_BRACKET_OPEN||LA24_0==UNDERSCORE) ) {
                        alt24=1;
                    }
                    switch (alt24) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:493:40: ( NL )? pattern
                            {
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:493:40: ( NL )?
                            int alt23=2;
                            int LA23_0 = input.LA(1);

                            if ( (LA23_0==NL) ) {
                                alt23=1;
                            }
                            switch (alt23) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:493:40: NL
                                    {
                                    NL57=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2255); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL57);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_pattern_in_bracket_pattern2258);
                            pattern58=pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pattern.add(pattern58.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: pattern, protected_expr, EXCLAMATION_MARK
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 493:54: -> ^( EXCLAMATION_MARK protected_expr ( pattern )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:493:57: ^( EXCLAMATION_MARK protected_expr ( pattern )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_EXCLAMATION_MARK.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_protected_expr.nextTree());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:493:91: ( pattern )?
                        if ( stream_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_pattern.nextTree());

                        }
                        stream_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:494:4: ( Id pattern )=> Id pattern
                    {
                    Id59=(Token)match(input,Id,FOLLOW_Id_in_bracket_pattern2284); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id59);

                    pushFollow(FOLLOW_pattern_in_bracket_pattern2286);
                    pattern60=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern60.getTree());


                    // AST REWRITE
                    // elements: Id, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 494:31: -> ^( INNERVALUE_PATTERN Id pattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:494:34: ^( INNERVALUE_PATTERN Id pattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERVALUE_PATTERN, "INNERVALUE_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());
                        adaptor.addChild(root_1, stream_pattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:495:4: L_val ( NL )? protected_expr_nc
                    {
                    L_val61=(Token)match(input,L_val,FOLLOW_L_val_in_bracket_pattern2301); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_val.add(L_val61);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:495:10: ( NL )?
                    int alt25=2;
                    int LA25_0 = input.LA(1);

                    if ( (LA25_0==NL) ) {
                        alt25=1;
                    }
                    switch (alt25) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:495:10: NL
                            {
                            NL62=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2303); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL62);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_bracket_pattern2306);
                    protected_expr_nc63=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc63.getTree());


                    // AST REWRITE
                    // elements: protected_expr_nc, L_val
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 495:32: -> ^( L_val protected_expr_nc )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:495:35: ^( L_val protected_expr_nc )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_L_val.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_protected_expr_nc.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:496:10: L_for ( NL )? ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )? L_end
                    {
                    L_for64=(Token)match(input,L_for,FOLLOW_L_for_in_bracket_pattern2325); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_for.add(L_for64);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:496:16: ( NL )?
                    int alt26=2;
                    int LA26_0 = input.LA(1);

                    if ( (LA26_0==NL) ) {
                        alt26=1;
                    }
                    switch (alt26) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:496:16: NL
                            {
                            NL65=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2327); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL65);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:496:20: ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )?
                    int alt31=2;
                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==L_begin||(LA31_0>=L_obj && LA31_0<=L_if)||(LA31_0>=L_while && LA31_0<=L_for)||LA31_0==L_match||LA31_0==L_val||LA31_0==L_exception||LA31_0==L_try||(LA31_0>=L_concurrent && LA31_0<=L_lazy)||(LA31_0>=L_true && LA31_0<=L_nil)||LA31_0==L_typeof||LA31_0==L_not||(LA31_0>=L_root && LA31_0<=L_lens)||LA31_0==MINUS||(LA31_0>=A_ELLIPSIS && LA31_0<=U_ELLIPSIS)||LA31_0==L_force||(LA31_0>=Constr && LA31_0<=Id)||(LA31_0>=Float && LA31_0<=Num)||(LA31_0>=String && LA31_0<=ROUND_BRACKET_OPEN)||LA31_0==SQUARE_BRACKET_OPEN||LA31_0==CURLY_BRACKET_OPEN||LA31_0==UNDERSCORE) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:496:21: bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )?
                            {
                            pushFollow(FOLLOW_bracket_pattern_in_bracket_pattern2331);
                            bracket_pattern66=bracket_pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern66.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:496:37: ( ( NL )? COMMA ( NL )? bracket_pattern )*
                            loop29:
                            do {
                                int alt29=2;
                                int LA29_0 = input.LA(1);

                                if ( (LA29_0==NL) ) {
                                    int LA29_1 = input.LA(2);

                                    if ( (LA29_1==COMMA) ) {
                                        alt29=1;
                                    }


                                }
                                else if ( (LA29_0==COMMA) ) {
                                    alt29=1;
                                }


                                switch (alt29) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:496:39: ( NL )? COMMA ( NL )? bracket_pattern
                            	    {
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:496:39: ( NL )?
                            	    int alt27=2;
                            	    int LA27_0 = input.LA(1);

                            	    if ( (LA27_0==NL) ) {
                            	        alt27=1;
                            	    }
                            	    switch (alt27) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:496:39: NL
                            	            {
                            	            NL67=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2335); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL67);


                            	            }
                            	            break;

                            	    }

                            	    COMMA68=(Token)match(input,COMMA,FOLLOW_COMMA_in_bracket_pattern2338); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA68);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:496:49: ( NL )?
                            	    int alt28=2;
                            	    int LA28_0 = input.LA(1);

                            	    if ( (LA28_0==NL) ) {
                            	        alt28=1;
                            	    }
                            	    switch (alt28) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:496:49: NL
                            	            {
                            	            NL69=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2340); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL69);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_bracket_pattern_in_bracket_pattern2343);
                            	    bracket_pattern70=bracket_pattern();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern70.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop29;
                                }
                            } while (true);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:496:72: ( NL )?
                            int alt30=2;
                            int LA30_0 = input.LA(1);

                            if ( (LA30_0==NL) ) {
                                alt30=1;
                            }
                            switch (alt30) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:496:72: NL
                                    {
                                    NL71=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2348); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL71);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    L_end72=(Token)match(input,L_end,FOLLOW_L_end_in_bracket_pattern2353); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_end.add(L_end72);



                    // AST REWRITE
                    // elements: bracket_pattern, L_for
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 496:84: -> ^( L_for ( bracket_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:496:87: ^( L_for ( bracket_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_L_for.nextNode(), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:496:95: ( bracket_pattern )*
                        while ( stream_bracket_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_bracket_pattern.nextTree());

                        }
                        stream_bracket_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:497:4: ( pattern ( NL )? L_if )=> pattern ( NL )? L_if ( NL )? protected_expr_nc
                    {
                    pushFollow(FOLLOW_pattern_in_bracket_pattern2378);
                    pattern73=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern73.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:497:34: ( NL )?
                    int alt32=2;
                    int LA32_0 = input.LA(1);

                    if ( (LA32_0==NL) ) {
                        alt32=1;
                    }
                    switch (alt32) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:497:34: NL
                            {
                            NL74=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2380); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL74);


                            }
                            break;

                    }

                    L_if75=(Token)match(input,L_if,FOLLOW_L_if_in_bracket_pattern2383); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_if.add(L_if75);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:497:43: ( NL )?
                    int alt33=2;
                    int LA33_0 = input.LA(1);

                    if ( (LA33_0==NL) ) {
                        alt33=1;
                    }
                    switch (alt33) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:497:43: NL
                            {
                            NL76=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2385); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL76);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_bracket_pattern2388);
                    protected_expr_nc77=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc77.getTree());


                    // AST REWRITE
                    // elements: pattern, protected_expr_nc
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 497:65: -> ^( IF_PATTERN pattern protected_expr_nc )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:497:68: ^( IF_PATTERN pattern protected_expr_nc )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IF_PATTERN, "IF_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_pattern.nextTree());
                        adaptor.addChild(root_1, stream_protected_expr_nc.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:498:4: ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation
                    {
                    pushFollow(FOLLOW_pattern_in_bracket_pattern2414);
                    pattern78=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern78.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:498:33: ( NL )?
                    int alt34=2;
                    int LA34_0 = input.LA(1);

                    if ( (LA34_0==NL) ) {
                        alt34=1;
                    }
                    switch (alt34) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:498:33: NL
                            {
                            NL79=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2416); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL79);


                            }
                            break;

                    }

                    char_literal80=(Token)match(input,COLON,FOLLOW_COLON_in_bracket_pattern2419); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(char_literal80);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:498:41: ( NL )?
                    int alt35=2;
                    int LA35_0 = input.LA(1);

                    if ( (LA35_0==NL) ) {
                        alt35=1;
                    }
                    switch (alt35) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:498:41: NL
                            {
                            NL81=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2421); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL81);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeannotation_in_bracket_pattern2424);
                    typeannotation82=typeannotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeannotation.add(typeannotation82.getTree());


                    // AST REWRITE
                    // elements: pattern, typeannotation
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 498:60: -> ^( TYPE_PATTERN typeannotation pattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:498:63: ^( TYPE_PATTERN typeannotation pattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_PATTERN, "TYPE_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_typeannotation.nextTree());
                        adaptor.addChild(root_1, stream_pattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:499:4: pattern
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pattern_in_bracket_pattern2439);
                    pattern83=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pattern83.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bracket_pattern"

    public static class arrow_or_assign_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrow_or_assign"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:501:1: arrow_or_assign : ( token_ARROW -> ^( ARROW ) | ASSIGN -> ^( ASSIGN ) );
    public final babel17Parser.arrow_or_assign_return arrow_or_assign() throws RecognitionException {
        babel17Parser.arrow_or_assign_return retval = new babel17Parser.arrow_or_assign_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ASSIGN85=null;
        babel17Parser.token_ARROW_return token_ARROW84 = null;


        CommonTree ASSIGN85_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_token_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_ARROW");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:502:2: ( token_ARROW -> ^( ARROW ) | ASSIGN -> ^( ASSIGN ) )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( ((LA37_0>=A_ARROW && LA37_0<=U_ARROW)) ) {
                alt37=1;
            }
            else if ( (LA37_0==ASSIGN) ) {
                alt37=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;
            }
            switch (alt37) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:502:4: token_ARROW
                    {
                    pushFollow(FOLLOW_token_ARROW_in_arrow_or_assign2449);
                    token_ARROW84=token_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_ARROW.add(token_ARROW84.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 502:16: -> ^( ARROW )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:502:19: ^( ARROW )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARROW, "ARROW"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:503:4: ASSIGN
                    {
                    ASSIGN85=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_arrow_or_assign2460); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN85);



                    // AST REWRITE
                    // elements: ASSIGN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 503:11: -> ^( ASSIGN )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:503:14: ^( ASSIGN )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_ASSIGN.nextNode(), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrow_or_assign"

    public static class mselem_pattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mselem_pattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:505:1: mselem_pattern : bracket_pattern ( ( NL )? arrow_or_assign ( NL )? bracket_pattern )? -> ^( NIL_TOKEN ^( NIL_TOKEN ( bracket_pattern )* ) ( arrow_or_assign )* ) ;
    public final babel17Parser.mselem_pattern_return mselem_pattern() throws RecognitionException {
        babel17Parser.mselem_pattern_return retval = new babel17Parser.mselem_pattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL87=null;
        Token NL89=null;
        babel17Parser.bracket_pattern_return bracket_pattern86 = null;

        babel17Parser.arrow_or_assign_return arrow_or_assign88 = null;

        babel17Parser.bracket_pattern_return bracket_pattern90 = null;


        CommonTree NL87_tree=null;
        CommonTree NL89_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_arrow_or_assign=new RewriteRuleSubtreeStream(adaptor,"rule arrow_or_assign");
        RewriteRuleSubtreeStream stream_bracket_pattern=new RewriteRuleSubtreeStream(adaptor,"rule bracket_pattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:2: ( bracket_pattern ( ( NL )? arrow_or_assign ( NL )? bracket_pattern )? -> ^( NIL_TOKEN ^( NIL_TOKEN ( bracket_pattern )* ) ( arrow_or_assign )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:4: bracket_pattern ( ( NL )? arrow_or_assign ( NL )? bracket_pattern )?
            {
            pushFollow(FOLLOW_bracket_pattern_in_mselem_pattern2475);
            bracket_pattern86=bracket_pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern86.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:20: ( ( NL )? arrow_or_assign ( NL )? bracket_pattern )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==NL) ) {
                int LA40_1 = input.LA(2);

                if ( (LA40_1==ASSIGN||(LA40_1>=A_ARROW && LA40_1<=U_ARROW)) ) {
                    alt40=1;
                }
            }
            else if ( (LA40_0==ASSIGN||(LA40_0>=A_ARROW && LA40_0<=U_ARROW)) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:21: ( NL )? arrow_or_assign ( NL )? bracket_pattern
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:21: ( NL )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==NL) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:21: NL
                            {
                            NL87=(Token)match(input,NL,FOLLOW_NL_in_mselem_pattern2478); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL87);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_arrow_or_assign_in_mselem_pattern2481);
                    arrow_or_assign88=arrow_or_assign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrow_or_assign.add(arrow_or_assign88.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:41: ( NL )?
                    int alt39=2;
                    int LA39_0 = input.LA(1);

                    if ( (LA39_0==NL) ) {
                        alt39=1;
                    }
                    switch (alt39) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:41: NL
                            {
                            NL89=(Token)match(input,NL,FOLLOW_NL_in_mselem_pattern2483); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL89);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_bracket_pattern_in_mselem_pattern2486);
                    bracket_pattern90=bracket_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern90.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: bracket_pattern, arrow_or_assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 507:3: -> ^( NIL_TOKEN ^( NIL_TOKEN ( bracket_pattern )* ) ( arrow_or_assign )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:507:6: ^( NIL_TOKEN ^( NIL_TOKEN ( bracket_pattern )* ) ( arrow_or_assign )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:507:18: ^( NIL_TOKEN ( bracket_pattern )* )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:507:30: ( bracket_pattern )*
                while ( stream_bracket_pattern.hasNext() ) {
                    adaptor.addChild(root_2, stream_bracket_pattern.nextTree());

                }
                stream_bracket_pattern.reset();

                adaptor.addChild(root_1, root_2);
                }
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:507:48: ( arrow_or_assign )*
                while ( stream_arrow_or_assign.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrow_or_assign.nextTree());

                }
                stream_arrow_or_assign.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mselem_pattern"

    public static class primitive_pattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitive_pattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:509:1: primitive_pattern : ( Id | '_' -> ANY | String | Num | L_true | L_false | L_nil | '-' ( NL )? Num -> ^( UMINUS Num ) | '[' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )? ']' -> ^( SQUARE_LIST ( bracket_pattern )* ) | '(' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) ) | '{' ( NL )? ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) );
    public final babel17Parser.primitive_pattern_return primitive_pattern() throws RecognitionException {
        babel17Parser.primitive_pattern_return retval = new babel17Parser.primitive_pattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id91=null;
        Token char_literal92=null;
        Token String93=null;
        Token Num94=null;
        Token L_true95=null;
        Token L_false96=null;
        Token L_nil97=null;
        Token char_literal98=null;
        Token NL99=null;
        Token Num100=null;
        Token char_literal101=null;
        Token NL102=null;
        Token NL104=null;
        Token COMMA105=null;
        Token NL106=null;
        Token NL108=null;
        Token char_literal109=null;
        Token char_literal110=null;
        Token NL111=null;
        Token NL113=null;
        Token COMMA114=null;
        Token NL115=null;
        Token NL117=null;
        Token COMMA118=null;
        Token NL119=null;
        Token char_literal120=null;
        Token char_literal121=null;
        Token NL122=null;
        Token NL124=null;
        Token COMMA125=null;
        Token NL126=null;
        Token NL128=null;
        Token char_literal129=null;
        Token char_literal130=null;
        Token NL131=null;
        Token NL133=null;
        Token char_literal134=null;
        babel17Parser.bracket_pattern_return bracket_pattern103 = null;

        babel17Parser.bracket_pattern_return bracket_pattern107 = null;

        babel17Parser.bracket_pattern_return bracket_pattern112 = null;

        babel17Parser.bracket_pattern_return bracket_pattern116 = null;

        babel17Parser.mselem_pattern_return mselem_pattern123 = null;

        babel17Parser.mselem_pattern_return mselem_pattern127 = null;

        babel17Parser.token_ARROW_return token_ARROW132 = null;


        CommonTree Id91_tree=null;
        CommonTree char_literal92_tree=null;
        CommonTree String93_tree=null;
        CommonTree Num94_tree=null;
        CommonTree L_true95_tree=null;
        CommonTree L_false96_tree=null;
        CommonTree L_nil97_tree=null;
        CommonTree char_literal98_tree=null;
        CommonTree NL99_tree=null;
        CommonTree Num100_tree=null;
        CommonTree char_literal101_tree=null;
        CommonTree NL102_tree=null;
        CommonTree NL104_tree=null;
        CommonTree COMMA105_tree=null;
        CommonTree NL106_tree=null;
        CommonTree NL108_tree=null;
        CommonTree char_literal109_tree=null;
        CommonTree char_literal110_tree=null;
        CommonTree NL111_tree=null;
        CommonTree NL113_tree=null;
        CommonTree COMMA114_tree=null;
        CommonTree NL115_tree=null;
        CommonTree NL117_tree=null;
        CommonTree COMMA118_tree=null;
        CommonTree NL119_tree=null;
        CommonTree char_literal120_tree=null;
        CommonTree char_literal121_tree=null;
        CommonTree NL122_tree=null;
        CommonTree NL124_tree=null;
        CommonTree COMMA125_tree=null;
        CommonTree NL126_tree=null;
        CommonTree NL128_tree=null;
        CommonTree char_literal129_tree=null;
        CommonTree char_literal130_tree=null;
        CommonTree NL131_tree=null;
        CommonTree NL133_tree=null;
        CommonTree char_literal134_tree=null;
        RewriteRuleTokenStream stream_CURLY_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_OPEN");
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_CURLY_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_UNDERSCORE=new RewriteRuleTokenStream(adaptor,"token UNDERSCORE");
        RewriteRuleTokenStream stream_Num=new RewriteRuleTokenStream(adaptor,"token Num");
        RewriteRuleTokenStream stream_SQUARE_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token SQUARE_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_SQUARE_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token SQUARE_BRACKET_OPEN");
        RewriteRuleSubtreeStream stream_mselem_pattern=new RewriteRuleSubtreeStream(adaptor,"rule mselem_pattern");
        RewriteRuleSubtreeStream stream_token_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_ARROW");
        RewriteRuleSubtreeStream stream_bracket_pattern=new RewriteRuleSubtreeStream(adaptor,"rule bracket_pattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:2: ( Id | '_' -> ANY | String | Num | L_true | L_false | L_nil | '-' ( NL )? Num -> ^( UMINUS Num ) | '[' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )? ']' -> ^( SQUARE_LIST ( bracket_pattern )* ) | '(' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) ) | '{' ( NL )? ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) )
            int alt64=12;
            alt64 = dfa64.predict(input);
            switch (alt64) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:4: Id
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Id91=(Token)match(input,Id,FOLLOW_Id_in_primitive_pattern2515); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Id91_tree = (CommonTree)adaptor.create(Id91);
                    adaptor.addChild(root_0, Id91_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:511:4: '_'
                    {
                    char_literal92=(Token)match(input,UNDERSCORE,FOLLOW_UNDERSCORE_in_primitive_pattern2520); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNDERSCORE.add(char_literal92);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 511:8: -> ANY
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(ANY, "ANY"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:4: String
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    String93=(Token)match(input,String,FOLLOW_String_in_primitive_pattern2529); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    String93_tree = (CommonTree)adaptor.create(String93);
                    adaptor.addChild(root_0, String93_tree);
                    }

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:513:4: Num
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Num94=(Token)match(input,Num,FOLLOW_Num_in_primitive_pattern2534); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Num94_tree = (CommonTree)adaptor.create(Num94);
                    adaptor.addChild(root_0, Num94_tree);
                    }

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:4: L_true
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_true95=(Token)match(input,L_true,FOLLOW_L_true_in_primitive_pattern2539); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_true95_tree = (CommonTree)adaptor.create(L_true95);
                    adaptor.addChild(root_0, L_true95_tree);
                    }

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:515:4: L_false
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_false96=(Token)match(input,L_false,FOLLOW_L_false_in_primitive_pattern2544); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_false96_tree = (CommonTree)adaptor.create(L_false96);
                    adaptor.addChild(root_0, L_false96_tree);
                    }

                    }
                    break;
                case 7 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:516:4: L_nil
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_nil97=(Token)match(input,L_nil,FOLLOW_L_nil_in_primitive_pattern2549); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_nil97_tree = (CommonTree)adaptor.create(L_nil97);
                    adaptor.addChild(root_0, L_nil97_tree);
                    }

                    }
                    break;
                case 8 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:4: '-' ( NL )? Num
                    {
                    char_literal98=(Token)match(input,MINUS,FOLLOW_MINUS_in_primitive_pattern2557); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(char_literal98);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:8: ( NL )?
                    int alt41=2;
                    int LA41_0 = input.LA(1);

                    if ( (LA41_0==NL) ) {
                        alt41=1;
                    }
                    switch (alt41) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:8: NL
                            {
                            NL99=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2559); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL99);


                            }
                            break;

                    }

                    Num100=(Token)match(input,Num,FOLLOW_Num_in_primitive_pattern2562); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Num.add(Num100);



                    // AST REWRITE
                    // elements: Num
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 519:16: -> ^( UMINUS Num )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:19: ^( UMINUS Num )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UMINUS, "UMINUS"), root_1);

                        adaptor.addChild(root_1, stream_Num.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:4: '[' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )? ']'
                    {
                    char_literal101=(Token)match(input,SQUARE_BRACKET_OPEN,FOLLOW_SQUARE_BRACKET_OPEN_in_primitive_pattern2575); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_OPEN.add(char_literal101);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:9: ( NL )?
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==NL) ) {
                        alt42=1;
                    }
                    switch (alt42) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:9: NL
                            {
                            NL102=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2578); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL102);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:13: ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )?
                    int alt47=2;
                    int LA47_0 = input.LA(1);

                    if ( (LA47_0==L_begin||(LA47_0>=L_obj && LA47_0<=L_if)||(LA47_0>=L_while && LA47_0<=L_for)||LA47_0==L_match||LA47_0==L_val||LA47_0==L_exception||LA47_0==L_try||(LA47_0>=L_concurrent && LA47_0<=L_lazy)||(LA47_0>=L_true && LA47_0<=L_nil)||LA47_0==L_typeof||LA47_0==L_not||(LA47_0>=L_root && LA47_0<=L_lens)||LA47_0==MINUS||(LA47_0>=A_ELLIPSIS && LA47_0<=U_ELLIPSIS)||LA47_0==L_force||(LA47_0>=Constr && LA47_0<=Id)||(LA47_0>=Float && LA47_0<=Num)||(LA47_0>=String && LA47_0<=ROUND_BRACKET_OPEN)||LA47_0==SQUARE_BRACKET_OPEN||LA47_0==CURLY_BRACKET_OPEN||LA47_0==UNDERSCORE) ) {
                        alt47=1;
                    }
                    switch (alt47) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:14: bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )*
                            {
                            pushFollow(FOLLOW_bracket_pattern_in_primitive_pattern2582);
                            bracket_pattern103=bracket_pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern103.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:30: ( NL )?
                            int alt43=2;
                            int LA43_0 = input.LA(1);

                            if ( (LA43_0==NL) ) {
                                alt43=1;
                            }
                            switch (alt43) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:30: NL
                                    {
                                    NL104=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2584); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL104);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:34: ( COMMA ( NL )? bracket_pattern ( NL )? )*
                            loop46:
                            do {
                                int alt46=2;
                                int LA46_0 = input.LA(1);

                                if ( (LA46_0==COMMA) ) {
                                    alt46=1;
                                }


                                switch (alt46) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:36: COMMA ( NL )? bracket_pattern ( NL )?
                            	    {
                            	    COMMA105=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitive_pattern2589); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA105);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:42: ( NL )?
                            	    int alt44=2;
                            	    int LA44_0 = input.LA(1);

                            	    if ( (LA44_0==NL) ) {
                            	        alt44=1;
                            	    }
                            	    switch (alt44) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:42: NL
                            	            {
                            	            NL106=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2591); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL106);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_bracket_pattern_in_primitive_pattern2594);
                            	    bracket_pattern107=bracket_pattern();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern107.getTree());
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:62: ( NL )?
                            	    int alt45=2;
                            	    int LA45_0 = input.LA(1);

                            	    if ( (LA45_0==NL) ) {
                            	        alt45=1;
                            	    }
                            	    switch (alt45) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:62: NL
                            	            {
                            	            NL108=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2596); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL108);


                            	            }
                            	            break;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop46;
                                }
                            } while (true);


                            }
                            break;

                    }

                    char_literal109=(Token)match(input,SQUARE_BRACKET_CLOSE,FOLLOW_SQUARE_BRACKET_CLOSE_in_primitive_pattern2604); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_CLOSE.add(char_literal109);



                    // AST REWRITE
                    // elements: bracket_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 521:6: -> ^( SQUARE_LIST ( bracket_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:9: ^( SQUARE_LIST ( bracket_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SQUARE_LIST, "SQUARE_LIST"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:23: ( bracket_pattern )*
                        while ( stream_bracket_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_bracket_pattern.nextTree());

                        }
                        stream_bracket_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:4: '(' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )? ')'
                    {
                    char_literal110=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_primitive_pattern2624); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal110);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:9: ( NL )?
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==NL) ) {
                        alt48=1;
                    }
                    switch (alt48) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:9: NL
                            {
                            NL111=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2627); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL111);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:13: ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )?
                    int alt55=2;
                    int LA55_0 = input.LA(1);

                    if ( (LA55_0==L_begin||(LA55_0>=L_obj && LA55_0<=L_if)||(LA55_0>=L_while && LA55_0<=L_for)||LA55_0==L_match||LA55_0==L_val||LA55_0==L_exception||LA55_0==L_try||(LA55_0>=L_concurrent && LA55_0<=L_lazy)||(LA55_0>=L_true && LA55_0<=L_nil)||LA55_0==L_typeof||LA55_0==L_not||(LA55_0>=L_root && LA55_0<=L_lens)||LA55_0==MINUS||(LA55_0>=A_ELLIPSIS && LA55_0<=U_ELLIPSIS)||LA55_0==L_force||(LA55_0>=Constr && LA55_0<=Id)||(LA55_0>=Float && LA55_0<=Num)||(LA55_0>=String && LA55_0<=ROUND_BRACKET_OPEN)||LA55_0==SQUARE_BRACKET_OPEN||LA55_0==CURLY_BRACKET_OPEN||LA55_0==UNDERSCORE) ) {
                        alt55=1;
                    }
                    switch (alt55) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:14: bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )?
                            {
                            pushFollow(FOLLOW_bracket_pattern_in_primitive_pattern2631);
                            bracket_pattern112=bracket_pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern112.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:30: ( NL )?
                            int alt49=2;
                            int LA49_0 = input.LA(1);

                            if ( (LA49_0==NL) ) {
                                alt49=1;
                            }
                            switch (alt49) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:30: NL
                                    {
                                    NL113=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2633); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL113);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:34: ( COMMA ( NL )? bracket_pattern ( NL )? )*
                            loop52:
                            do {
                                int alt52=2;
                                int LA52_0 = input.LA(1);

                                if ( (LA52_0==COMMA) ) {
                                    int LA52_1 = input.LA(2);

                                    if ( (LA52_1==NL) ) {
                                        int LA52_3 = input.LA(3);

                                        if ( (LA52_3==L_begin||(LA52_3>=L_obj && LA52_3<=L_if)||(LA52_3>=L_while && LA52_3<=L_for)||LA52_3==L_match||LA52_3==L_val||LA52_3==L_exception||LA52_3==L_try||(LA52_3>=L_concurrent && LA52_3<=L_lazy)||(LA52_3>=L_true && LA52_3<=L_nil)||LA52_3==L_typeof||LA52_3==L_not||(LA52_3>=L_root && LA52_3<=L_lens)||LA52_3==MINUS||(LA52_3>=A_ELLIPSIS && LA52_3<=U_ELLIPSIS)||LA52_3==L_force||(LA52_3>=Constr && LA52_3<=Id)||(LA52_3>=Float && LA52_3<=Num)||(LA52_3>=String && LA52_3<=ROUND_BRACKET_OPEN)||LA52_3==SQUARE_BRACKET_OPEN||LA52_3==CURLY_BRACKET_OPEN||LA52_3==UNDERSCORE) ) {
                                            alt52=1;
                                        }


                                    }
                                    else if ( (LA52_1==L_begin||(LA52_1>=L_obj && LA52_1<=L_if)||(LA52_1>=L_while && LA52_1<=L_for)||LA52_1==L_match||LA52_1==L_val||LA52_1==L_exception||LA52_1==L_try||(LA52_1>=L_concurrent && LA52_1<=L_lazy)||(LA52_1>=L_true && LA52_1<=L_nil)||LA52_1==L_typeof||LA52_1==L_not||(LA52_1>=L_root && LA52_1<=L_lens)||LA52_1==MINUS||(LA52_1>=A_ELLIPSIS && LA52_1<=U_ELLIPSIS)||LA52_1==L_force||(LA52_1>=Constr && LA52_1<=Id)||(LA52_1>=Float && LA52_1<=Num)||(LA52_1>=String && LA52_1<=ROUND_BRACKET_OPEN)||LA52_1==SQUARE_BRACKET_OPEN||LA52_1==CURLY_BRACKET_OPEN||LA52_1==UNDERSCORE) ) {
                                        alt52=1;
                                    }


                                }


                                switch (alt52) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:36: COMMA ( NL )? bracket_pattern ( NL )?
                            	    {
                            	    COMMA114=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitive_pattern2638); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA114);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:43: ( NL )?
                            	    int alt50=2;
                            	    int LA50_0 = input.LA(1);

                            	    if ( (LA50_0==NL) ) {
                            	        alt50=1;
                            	    }
                            	    switch (alt50) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:43: NL
                            	            {
                            	            NL115=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2641); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL115);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_bracket_pattern_in_primitive_pattern2644);
                            	    bracket_pattern116=bracket_pattern();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern116.getTree());
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:63: ( NL )?
                            	    int alt51=2;
                            	    int LA51_0 = input.LA(1);

                            	    if ( (LA51_0==NL) ) {
                            	        alt51=1;
                            	    }
                            	    switch (alt51) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:63: NL
                            	            {
                            	            NL117=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2646); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL117);


                            	            }
                            	            break;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop52;
                                }
                            } while (true);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:69: ( COMMA ( NL )? )?
                            int alt54=2;
                            int LA54_0 = input.LA(1);

                            if ( (LA54_0==COMMA) ) {
                                alt54=1;
                            }
                            switch (alt54) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:70: COMMA ( NL )?
                                    {
                                    COMMA118=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitive_pattern2652); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA118);

                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:76: ( NL )?
                                    int alt53=2;
                                    int LA53_0 = input.LA(1);

                                    if ( (LA53_0==NL) ) {
                                        alt53=1;
                                    }
                                    switch (alt53) {
                                        case 1 :
                                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:76: NL
                                            {
                                            NL119=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2654); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_NL.add(NL119);


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    char_literal120=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_primitive_pattern2661); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal120);



                    // AST REWRITE
                    // elements: COMMA, bracket_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 523:5: -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:523:8: ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROUND_LIST, "ROUND_LIST"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:523:21: ^( NIL_TOKEN ( COMMA )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:523:33: ( COMMA )*
                        while ( stream_COMMA.hasNext() ) {
                            adaptor.addChild(root_2, stream_COMMA.nextNode());

                        }
                        stream_COMMA.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:523:41: ^( NIL_TOKEN ( bracket_pattern )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:523:53: ( bracket_pattern )*
                        while ( stream_bracket_pattern.hasNext() ) {
                            adaptor.addChild(root_2, stream_bracket_pattern.nextTree());

                        }
                        stream_bracket_pattern.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:4: '{' ( NL )? ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )? '}'
                    {
                    char_literal121=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_primitive_pattern2693); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal121);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:9: ( NL )?
                    int alt56=2;
                    int LA56_0 = input.LA(1);

                    if ( (LA56_0==NL) ) {
                        alt56=1;
                    }
                    switch (alt56) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:9: NL
                            {
                            NL122=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2696); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL122);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:13: ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )?
                    int alt61=2;
                    int LA61_0 = input.LA(1);

                    if ( (LA61_0==L_begin||(LA61_0>=L_obj && LA61_0<=L_if)||(LA61_0>=L_while && LA61_0<=L_for)||LA61_0==L_match||LA61_0==L_val||LA61_0==L_exception||LA61_0==L_try||(LA61_0>=L_concurrent && LA61_0<=L_lazy)||(LA61_0>=L_true && LA61_0<=L_nil)||LA61_0==L_typeof||LA61_0==L_not||(LA61_0>=L_root && LA61_0<=L_lens)||LA61_0==MINUS||(LA61_0>=A_ELLIPSIS && LA61_0<=U_ELLIPSIS)||LA61_0==L_force||(LA61_0>=Constr && LA61_0<=Id)||(LA61_0>=Float && LA61_0<=Num)||(LA61_0>=String && LA61_0<=ROUND_BRACKET_OPEN)||LA61_0==SQUARE_BRACKET_OPEN||LA61_0==CURLY_BRACKET_OPEN||LA61_0==UNDERSCORE) ) {
                        alt61=1;
                    }
                    switch (alt61) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:14: mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )*
                            {
                            pushFollow(FOLLOW_mselem_pattern_in_primitive_pattern2700);
                            mselem_pattern123=mselem_pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_mselem_pattern.add(mselem_pattern123.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:29: ( NL )?
                            int alt57=2;
                            int LA57_0 = input.LA(1);

                            if ( (LA57_0==NL) ) {
                                alt57=1;
                            }
                            switch (alt57) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:29: NL
                                    {
                                    NL124=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2702); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL124);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:33: ( COMMA ( NL )? mselem_pattern ( NL )? )*
                            loop60:
                            do {
                                int alt60=2;
                                int LA60_0 = input.LA(1);

                                if ( (LA60_0==COMMA) ) {
                                    alt60=1;
                                }


                                switch (alt60) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:35: COMMA ( NL )? mselem_pattern ( NL )?
                            	    {
                            	    COMMA125=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitive_pattern2707); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA125);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:42: ( NL )?
                            	    int alt58=2;
                            	    int LA58_0 = input.LA(1);

                            	    if ( (LA58_0==NL) ) {
                            	        alt58=1;
                            	    }
                            	    switch (alt58) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:42: NL
                            	            {
                            	            NL126=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2710); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL126);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_mselem_pattern_in_primitive_pattern2713);
                            	    mselem_pattern127=mselem_pattern();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_mselem_pattern.add(mselem_pattern127.getTree());
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:61: ( NL )?
                            	    int alt59=2;
                            	    int LA59_0 = input.LA(1);

                            	    if ( (LA59_0==NL) ) {
                            	        alt59=1;
                            	    }
                            	    switch (alt59) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:61: NL
                            	            {
                            	            NL128=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2715); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL128);


                            	            }
                            	            break;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop60;
                                }
                            } while (true);


                            }
                            break;

                    }

                    char_literal129=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_primitive_pattern2723); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal129);



                    // AST REWRITE
                    // elements: mselem_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 525:5: -> ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:525:8: ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MAP_OR_SET_OR_OBJ, "MAP_OR_SET_OR_OBJ"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:525:28: ( mselem_pattern )*
                        while ( stream_mselem_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_mselem_pattern.nextTree());

                        }
                        stream_mselem_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:526:4: '{' ( NL )? token_ARROW ( NL )? '}'
                    {
                    char_literal130=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_primitive_pattern2741); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal130);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:526:8: ( NL )?
                    int alt62=2;
                    int LA62_0 = input.LA(1);

                    if ( (LA62_0==NL) ) {
                        alt62=1;
                    }
                    switch (alt62) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:526:8: NL
                            {
                            NL131=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2743); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL131);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_token_ARROW_in_primitive_pattern2746);
                    token_ARROW132=token_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_ARROW.add(token_ARROW132.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:526:24: ( NL )?
                    int alt63=2;
                    int LA63_0 = input.LA(1);

                    if ( (LA63_0==NL) ) {
                        alt63=1;
                    }
                    switch (alt63) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:526:24: NL
                            {
                            NL133=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2748); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL133);


                            }
                            break;

                    }

                    char_literal134=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_primitive_pattern2751); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal134);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 526:32: -> ^( EMPTY_MAP )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:526:35: ^( EMPTY_MAP )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EMPTY_MAP, "EMPTY_MAP"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "primitive_pattern"

    public static class sep_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sep"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:529:1: sep : ( NL | SC )+ ;
    public final babel17Parser.sep_return sep() throws RecognitionException {
        babel17Parser.sep_return retval = new babel17Parser.sep_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set135=null;

        CommonTree set135_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:529:5: ( ( NL | SC )+ )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:529:7: ( NL | SC )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:529:7: ( NL | SC )+
            int cnt65=0;
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==SC||LA65_0==NL) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            	    {
            	    set135=(Token)input.LT(1);
            	    if ( input.LA(1)==SC||input.LA(1)==NL ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set135));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt65 >= 1 ) break loop65;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(65, input);
                        throw eee;
                }
                cnt65++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sep"

    public static class block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:531:1: block : ( ( sep )? statement ( sep statement )* ( sep )? -> ^( BLOCK ( statement )* ) | ( sep )? -> ^( BLOCK ) );
    public final babel17Parser.block_return block() throws RecognitionException {
        babel17Parser.block_return retval = new babel17Parser.block_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.sep_return sep136 = null;

        babel17Parser.statement_return statement137 = null;

        babel17Parser.sep_return sep138 = null;

        babel17Parser.statement_return statement139 = null;

        babel17Parser.sep_return sep140 = null;

        babel17Parser.sep_return sep141 = null;


        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_sep=new RewriteRuleSubtreeStream(adaptor,"rule sep");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:531:8: ( ( sep )? statement ( sep statement )* ( sep )? -> ^( BLOCK ( statement )* ) | ( sep )? -> ^( BLOCK ) )
            int alt70=2;
            alt70 = dfa70.predict(input);
            switch (alt70) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:531:10: ( sep )? statement ( sep statement )* ( sep )?
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:531:10: ( sep )?
                    int alt66=2;
                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==SC||LA66_0==NL) ) {
                        alt66=1;
                    }
                    switch (alt66) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:531:10: sep
                            {
                            pushFollow(FOLLOW_sep_in_block2783);
                            sep136=sep();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_sep.add(sep136.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_statement_in_block2786);
                    statement137=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement137.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:531:25: ( sep statement )*
                    loop67:
                    do {
                        int alt67=2;
                        alt67 = dfa67.predict(input);
                        switch (alt67) {
                    	case 1 :
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:531:26: sep statement
                    	    {
                    	    pushFollow(FOLLOW_sep_in_block2789);
                    	    sep138=sep();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_sep.add(sep138.getTree());
                    	    pushFollow(FOLLOW_statement_in_block2791);
                    	    statement139=statement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_statement.add(statement139.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop67;
                        }
                    } while (true);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:531:42: ( sep )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==SC||LA68_0==NL) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:531:42: sep
                            {
                            pushFollow(FOLLOW_sep_in_block2795);
                            sep140=sep();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_sep.add(sep140.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 531:47: -> ^( BLOCK ( statement )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:531:50: ^( BLOCK ( statement )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK, "BLOCK"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:531:58: ( statement )*
                        while ( stream_statement.hasNext() ) {
                            adaptor.addChild(root_1, stream_statement.nextTree());

                        }
                        stream_statement.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:532:4: ( sep )?
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:532:4: ( sep )?
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==SC||LA69_0==NL) ) {
                        alt69=1;
                    }
                    switch (alt69) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:532:4: sep
                            {
                            pushFollow(FOLLOW_sep_in_block2811);
                            sep141=sep();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_sep.add(sep141.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 532:9: -> ^( BLOCK )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:532:12: ^( BLOCK )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK, "BLOCK"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class pure_block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pure_block"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:534:1: pure_block : statement ( sep statement )* -> ^( BLOCK ( statement )* ) ;
    public final babel17Parser.pure_block_return pure_block() throws RecognitionException {
        babel17Parser.pure_block_return retval = new babel17Parser.pure_block_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.statement_return statement142 = null;

        babel17Parser.sep_return sep143 = null;

        babel17Parser.statement_return statement144 = null;


        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_sep=new RewriteRuleSubtreeStream(adaptor,"rule sep");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:535:2: ( statement ( sep statement )* -> ^( BLOCK ( statement )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:535:4: statement ( sep statement )*
            {
            pushFollow(FOLLOW_statement_in_pure_block2828);
            statement142=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_statement.add(statement142.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:535:14: ( sep statement )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==NL) ) {
                    int LA71_1 = input.LA(2);

                    if ( (LA71_1==L_begin||(LA71_1>=L_obj && LA71_1<=L_if)||(LA71_1>=L_while && LA71_1<=L_for)||(LA71_1>=L_yield && LA71_1<=L_match)||(LA71_1>=L_val && LA71_1<=L_def)||LA71_1==L_exception||LA71_1==L_try||(LA71_1>=L_concurrent && LA71_1<=L_nil)||(LA71_1>=L_module && LA71_1<=L_import)||LA71_1==L_not||(LA71_1>=L_root && LA71_1<=L_lens)||LA71_1==SC||LA71_1==MINUS||(LA71_1>=A_ELLIPSIS && LA71_1<=U_ELLIPSIS)||LA71_1==L_force||(LA71_1>=NL && LA71_1<=Id)||(LA71_1>=Float && LA71_1<=Num)||(LA71_1>=String && LA71_1<=ROUND_BRACKET_OPEN)||LA71_1==SQUARE_BRACKET_OPEN||LA71_1==CURLY_BRACKET_OPEN||LA71_1==UNDERSCORE||(LA71_1>=PRAGMA_LOG && LA71_1<=PRAGMA_CATCH)) ) {
                        alt71=1;
                    }


                }
                else if ( (LA71_0==SC) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:535:15: sep statement
            	    {
            	    pushFollow(FOLLOW_sep_in_pure_block2831);
            	    sep143=sep();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sep.add(sep143.getTree());
            	    pushFollow(FOLLOW_statement_in_pure_block2833);
            	    statement144=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_statement.add(statement144.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);



            // AST REWRITE
            // elements: statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 535:31: -> ^( BLOCK ( statement )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:535:34: ^( BLOCK ( statement )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK, "BLOCK"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:535:42: ( statement )*
                while ( stream_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_statement.nextTree());

                }
                stream_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pure_block"

    public static class statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:537:1: statement : ( st_typedef | st_val | st_def | st_yield | st_memoize | st_private | st_module | st_import | expr_or_assign | PRAGMA_PRINT ( NL )? expr -> ^( PRAGMA_PRINT expr ) | PRAGMA_LOG ( NL )? expr -> ^( PRAGMA_LOG expr ) | PRAGMA_PROFILE ( NL )? expr -> ^( PRAGMA_PROFILE expr ) | PRAGMA_ASSERT ( NL )? expr -> ^( PRAGMA_ASSERT expr ) | PRAGMA_CATCH ( NL )? casepattern ( NL )? L_try ( NL )? COLON ( NL )? expr -> ^( PRAGMA_CATCH expr casepattern ) );
    public final babel17Parser.statement_return statement() throws RecognitionException {
        babel17Parser.statement_return retval = new babel17Parser.statement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PRAGMA_PRINT154=null;
        Token NL155=null;
        Token PRAGMA_LOG157=null;
        Token NL158=null;
        Token PRAGMA_PROFILE160=null;
        Token NL161=null;
        Token PRAGMA_ASSERT163=null;
        Token NL164=null;
        Token PRAGMA_CATCH166=null;
        Token NL167=null;
        Token NL169=null;
        Token L_try170=null;
        Token NL171=null;
        Token COLON172=null;
        Token NL173=null;
        babel17Parser.st_typedef_return st_typedef145 = null;

        babel17Parser.st_val_return st_val146 = null;

        babel17Parser.st_def_return st_def147 = null;

        babel17Parser.st_yield_return st_yield148 = null;

        babel17Parser.st_memoize_return st_memoize149 = null;

        babel17Parser.st_private_return st_private150 = null;

        babel17Parser.st_module_return st_module151 = null;

        babel17Parser.st_import_return st_import152 = null;

        babel17Parser.expr_or_assign_return expr_or_assign153 = null;

        babel17Parser.expr_return expr156 = null;

        babel17Parser.expr_return expr159 = null;

        babel17Parser.expr_return expr162 = null;

        babel17Parser.expr_return expr165 = null;

        babel17Parser.casepattern_return casepattern168 = null;

        babel17Parser.expr_return expr174 = null;


        CommonTree PRAGMA_PRINT154_tree=null;
        CommonTree NL155_tree=null;
        CommonTree PRAGMA_LOG157_tree=null;
        CommonTree NL158_tree=null;
        CommonTree PRAGMA_PROFILE160_tree=null;
        CommonTree NL161_tree=null;
        CommonTree PRAGMA_ASSERT163_tree=null;
        CommonTree NL164_tree=null;
        CommonTree PRAGMA_CATCH166_tree=null;
        CommonTree NL167_tree=null;
        CommonTree NL169_tree=null;
        CommonTree L_try170_tree=null;
        CommonTree NL171_tree=null;
        CommonTree COLON172_tree=null;
        CommonTree NL173_tree=null;
        RewriteRuleTokenStream stream_PRAGMA_CATCH=new RewriteRuleTokenStream(adaptor,"token PRAGMA_CATCH");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_PRAGMA_PROFILE=new RewriteRuleTokenStream(adaptor,"token PRAGMA_PROFILE");
        RewriteRuleTokenStream stream_PRAGMA_ASSERT=new RewriteRuleTokenStream(adaptor,"token PRAGMA_ASSERT");
        RewriteRuleTokenStream stream_PRAGMA_LOG=new RewriteRuleTokenStream(adaptor,"token PRAGMA_LOG");
        RewriteRuleTokenStream stream_L_try=new RewriteRuleTokenStream(adaptor,"token L_try");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_PRAGMA_PRINT=new RewriteRuleTokenStream(adaptor,"token PRAGMA_PRINT");
        RewriteRuleSubtreeStream stream_casepattern=new RewriteRuleSubtreeStream(adaptor,"rule casepattern");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:538:2: ( st_typedef | st_val | st_def | st_yield | st_memoize | st_private | st_module | st_import | expr_or_assign | PRAGMA_PRINT ( NL )? expr -> ^( PRAGMA_PRINT expr ) | PRAGMA_LOG ( NL )? expr -> ^( PRAGMA_LOG expr ) | PRAGMA_PROFILE ( NL )? expr -> ^( PRAGMA_PROFILE expr ) | PRAGMA_ASSERT ( NL )? expr -> ^( PRAGMA_ASSERT expr ) | PRAGMA_CATCH ( NL )? casepattern ( NL )? L_try ( NL )? COLON ( NL )? expr -> ^( PRAGMA_CATCH expr casepattern ) )
            int alt80=14;
            alt80 = dfa80.predict(input);
            switch (alt80) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:538:4: st_typedef
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_typedef_in_statement2854);
                    st_typedef145=st_typedef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_typedef145.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:539:10: st_val
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_val_in_statement2865);
                    st_val146=st_val();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_val146.getTree());

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:540:4: st_def
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_def_in_statement2870);
                    st_def147=st_def();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_def147.getTree());

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:541:4: st_yield
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_yield_in_statement2875);
                    st_yield148=st_yield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_yield148.getTree());

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:542:4: st_memoize
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_memoize_in_statement2880);
                    st_memoize149=st_memoize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_memoize149.getTree());

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:4: st_private
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_private_in_statement2885);
                    st_private150=st_private();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_private150.getTree());

                    }
                    break;
                case 7 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:544:4: st_module
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_module_in_statement2890);
                    st_module151=st_module();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_module151.getTree());

                    }
                    break;
                case 8 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:545:4: st_import
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_import_in_statement2895);
                    st_import152=st_import();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_import152.getTree());

                    }
                    break;
                case 9 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:546:4: expr_or_assign
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expr_or_assign_in_statement2900);
                    expr_or_assign153=expr_or_assign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_or_assign153.getTree());

                    }
                    break;
                case 10 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:547:5: PRAGMA_PRINT ( NL )? expr
                    {
                    PRAGMA_PRINT154=(Token)match(input,PRAGMA_PRINT,FOLLOW_PRAGMA_PRINT_in_statement2906); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRAGMA_PRINT.add(PRAGMA_PRINT154);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:547:18: ( NL )?
                    int alt72=2;
                    int LA72_0 = input.LA(1);

                    if ( (LA72_0==NL) ) {
                        alt72=1;
                    }
                    switch (alt72) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:547:18: NL
                            {
                            NL155=(Token)match(input,NL,FOLLOW_NL_in_statement2908); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL155);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_statement2911);
                    expr156=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr156.getTree());


                    // AST REWRITE
                    // elements: PRAGMA_PRINT, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 547:27: -> ^( PRAGMA_PRINT expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:547:30: ^( PRAGMA_PRINT expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PRAGMA_PRINT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:548:5: PRAGMA_LOG ( NL )? expr
                    {
                    PRAGMA_LOG157=(Token)match(input,PRAGMA_LOG,FOLLOW_PRAGMA_LOG_in_statement2925); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRAGMA_LOG.add(PRAGMA_LOG157);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:548:16: ( NL )?
                    int alt73=2;
                    int LA73_0 = input.LA(1);

                    if ( (LA73_0==NL) ) {
                        alt73=1;
                    }
                    switch (alt73) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:548:16: NL
                            {
                            NL158=(Token)match(input,NL,FOLLOW_NL_in_statement2927); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL158);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_statement2930);
                    expr159=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr159.getTree());


                    // AST REWRITE
                    // elements: expr, PRAGMA_LOG
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 548:25: -> ^( PRAGMA_LOG expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:548:28: ^( PRAGMA_LOG expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PRAGMA_LOG.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:5: PRAGMA_PROFILE ( NL )? expr
                    {
                    PRAGMA_PROFILE160=(Token)match(input,PRAGMA_PROFILE,FOLLOW_PRAGMA_PROFILE_in_statement2944); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRAGMA_PROFILE.add(PRAGMA_PROFILE160);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:20: ( NL )?
                    int alt74=2;
                    int LA74_0 = input.LA(1);

                    if ( (LA74_0==NL) ) {
                        alt74=1;
                    }
                    switch (alt74) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:20: NL
                            {
                            NL161=(Token)match(input,NL,FOLLOW_NL_in_statement2946); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL161);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_statement2949);
                    expr162=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr162.getTree());


                    // AST REWRITE
                    // elements: PRAGMA_PROFILE, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 549:29: -> ^( PRAGMA_PROFILE expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:32: ^( PRAGMA_PROFILE expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PRAGMA_PROFILE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:550:5: PRAGMA_ASSERT ( NL )? expr
                    {
                    PRAGMA_ASSERT163=(Token)match(input,PRAGMA_ASSERT,FOLLOW_PRAGMA_ASSERT_in_statement2963); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRAGMA_ASSERT.add(PRAGMA_ASSERT163);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:550:19: ( NL )?
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==NL) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:550:19: NL
                            {
                            NL164=(Token)match(input,NL,FOLLOW_NL_in_statement2965); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL164);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_statement2968);
                    expr165=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr165.getTree());


                    // AST REWRITE
                    // elements: PRAGMA_ASSERT, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 550:28: -> ^( PRAGMA_ASSERT expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:550:31: ^( PRAGMA_ASSERT expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PRAGMA_ASSERT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 14 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:551:4: PRAGMA_CATCH ( NL )? casepattern ( NL )? L_try ( NL )? COLON ( NL )? expr
                    {
                    PRAGMA_CATCH166=(Token)match(input,PRAGMA_CATCH,FOLLOW_PRAGMA_CATCH_in_statement2981); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRAGMA_CATCH.add(PRAGMA_CATCH166);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:551:17: ( NL )?
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==NL) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:551:17: NL
                            {
                            NL167=(Token)match(input,NL,FOLLOW_NL_in_statement2983); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL167);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_casepattern_in_statement2986);
                    casepattern168=casepattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_casepattern.add(casepattern168.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:551:33: ( NL )?
                    int alt77=2;
                    int LA77_0 = input.LA(1);

                    if ( (LA77_0==NL) ) {
                        alt77=1;
                    }
                    switch (alt77) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:551:33: NL
                            {
                            NL169=(Token)match(input,NL,FOLLOW_NL_in_statement2988); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL169);


                            }
                            break;

                    }

                    L_try170=(Token)match(input,L_try,FOLLOW_L_try_in_statement2991); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_try.add(L_try170);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:551:43: ( NL )?
                    int alt78=2;
                    int LA78_0 = input.LA(1);

                    if ( (LA78_0==NL) ) {
                        alt78=1;
                    }
                    switch (alt78) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:551:43: NL
                            {
                            NL171=(Token)match(input,NL,FOLLOW_NL_in_statement2993); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL171);


                            }
                            break;

                    }

                    COLON172=(Token)match(input,COLON,FOLLOW_COLON_in_statement2996); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON172);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:551:53: ( NL )?
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==NL) ) {
                        alt79=1;
                    }
                    switch (alt79) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:551:53: NL
                            {
                            NL173=(Token)match(input,NL,FOLLOW_NL_in_statement2998); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL173);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_statement3001);
                    expr174=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr174.getTree());


                    // AST REWRITE
                    // elements: PRAGMA_CATCH, casepattern, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 551:62: -> ^( PRAGMA_CATCH expr casepattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:551:65: ^( PRAGMA_CATCH expr casepattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PRAGMA_CATCH.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());
                        adaptor.addChild(root_1, stream_casepattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class st_val_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_val"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:1: st_val : L_val ( NL )? pattern ( NL )? '=' ( NL )? expr -> ^( VAL pattern expr ) ;
    public final babel17Parser.st_val_return st_val() throws RecognitionException {
        babel17Parser.st_val_return retval = new babel17Parser.st_val_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_val175=null;
        Token NL176=null;
        Token NL178=null;
        Token char_literal179=null;
        Token NL180=null;
        babel17Parser.pattern_return pattern177 = null;

        babel17Parser.expr_return expr181 = null;


        CommonTree L_val175_tree=null;
        CommonTree NL176_tree=null;
        CommonTree NL178_tree=null;
        CommonTree char_literal179_tree=null;
        CommonTree NL180_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_val=new RewriteRuleTokenStream(adaptor,"token L_val");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:8: ( L_val ( NL )? pattern ( NL )? '=' ( NL )? expr -> ^( VAL pattern expr ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:10: L_val ( NL )? pattern ( NL )? '=' ( NL )? expr
            {
            L_val175=(Token)match(input,L_val,FOLLOW_L_val_in_st_val3020); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_val.add(L_val175);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:16: ( NL )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==NL) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:16: NL
                    {
                    NL176=(Token)match(input,NL,FOLLOW_NL_in_st_val3022); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL176);


                    }
                    break;

            }

            pushFollow(FOLLOW_pattern_in_st_val3025);
            pattern177=pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pattern.add(pattern177.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:28: ( NL )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==NL) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:28: NL
                    {
                    NL178=(Token)match(input,NL,FOLLOW_NL_in_st_val3027); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL178);


                    }
                    break;

            }

            char_literal179=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_st_val3030); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal179);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:36: ( NL )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==NL) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:36: NL
                    {
                    NL180=(Token)match(input,NL,FOLLOW_NL_in_st_val3032); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL180);


                    }
                    break;

            }

            pushFollow(FOLLOW_expr_in_st_val3035);
            expr181=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr181.getTree());


            // AST REWRITE
            // elements: expr, pattern
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 553:45: -> ^( VAL pattern expr )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:48: ^( VAL pattern expr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAL, "VAL"), root_1);

                adaptor.addChild(root_1, stream_pattern.nextTree());
                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_val"

    public static class st_def_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_def"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:1: st_def : ( L_def ( NL )? Id ( NL )? ( defpattern ( NL )? )? ( ':' ( NL )? typeid ( NL )? )? '=' ( NL )? expr -> ^( DEF Id ( typeid )? ( defpattern )? expr ) | L_def ( NL )? L_this ( NL )? ':' ( NL )? typeid ( NL )? '=' ( NL )? expr -> ^( AUTOMATIC_CONVERSION typeid expr ) | L_def ( NL )? L_this ( NL )? ':>' ( NL )? typeid ( NL )? '=' ( NL )? expr -> ^( CONVERSION typeid expr ) );
    public final babel17Parser.st_def_return st_def() throws RecognitionException {
        babel17Parser.st_def_return retval = new babel17Parser.st_def_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_def182=null;
        Token NL183=null;
        Token Id184=null;
        Token NL185=null;
        Token NL187=null;
        Token char_literal188=null;
        Token NL189=null;
        Token NL191=null;
        Token char_literal192=null;
        Token NL193=null;
        Token L_def195=null;
        Token NL196=null;
        Token L_this197=null;
        Token NL198=null;
        Token char_literal199=null;
        Token NL200=null;
        Token NL202=null;
        Token char_literal203=null;
        Token NL204=null;
        Token L_def206=null;
        Token NL207=null;
        Token L_this208=null;
        Token NL209=null;
        Token string_literal210=null;
        Token NL211=null;
        Token NL213=null;
        Token char_literal214=null;
        Token NL215=null;
        babel17Parser.defpattern_return defpattern186 = null;

        babel17Parser.typeid_return typeid190 = null;

        babel17Parser.expr_return expr194 = null;

        babel17Parser.typeid_return typeid201 = null;

        babel17Parser.expr_return expr205 = null;

        babel17Parser.typeid_return typeid212 = null;

        babel17Parser.expr_return expr216 = null;


        CommonTree L_def182_tree=null;
        CommonTree NL183_tree=null;
        CommonTree Id184_tree=null;
        CommonTree NL185_tree=null;
        CommonTree NL187_tree=null;
        CommonTree char_literal188_tree=null;
        CommonTree NL189_tree=null;
        CommonTree NL191_tree=null;
        CommonTree char_literal192_tree=null;
        CommonTree NL193_tree=null;
        CommonTree L_def195_tree=null;
        CommonTree NL196_tree=null;
        CommonTree L_this197_tree=null;
        CommonTree NL198_tree=null;
        CommonTree char_literal199_tree=null;
        CommonTree NL200_tree=null;
        CommonTree NL202_tree=null;
        CommonTree char_literal203_tree=null;
        CommonTree NL204_tree=null;
        CommonTree L_def206_tree=null;
        CommonTree NL207_tree=null;
        CommonTree L_this208_tree=null;
        CommonTree NL209_tree=null;
        CommonTree string_literal210_tree=null;
        CommonTree NL211_tree=null;
        CommonTree NL213_tree=null;
        CommonTree char_literal214_tree=null;
        CommonTree NL215_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_L_this=new RewriteRuleTokenStream(adaptor,"token L_this");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_L_def=new RewriteRuleTokenStream(adaptor,"token L_def");
        RewriteRuleTokenStream stream_TOK_CONVERT=new RewriteRuleTokenStream(adaptor,"token TOK_CONVERT");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_typeid=new RewriteRuleSubtreeStream(adaptor,"rule typeid");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_defpattern=new RewriteRuleSubtreeStream(adaptor,"rule defpattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:8: ( L_def ( NL )? Id ( NL )? ( defpattern ( NL )? )? ( ':' ( NL )? typeid ( NL )? )? '=' ( NL )? expr -> ^( DEF Id ( typeid )? ( defpattern )? expr ) | L_def ( NL )? L_this ( NL )? ':' ( NL )? typeid ( NL )? '=' ( NL )? expr -> ^( AUTOMATIC_CONVERSION typeid expr ) | L_def ( NL )? L_this ( NL )? ':>' ( NL )? typeid ( NL )? '=' ( NL )? expr -> ^( CONVERSION typeid expr ) )
            int alt102=3;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==L_def) ) {
                switch ( input.LA(2) ) {
                case NL:
                    {
                    int LA102_2 = input.LA(3);

                    if ( (LA102_2==Id) ) {
                        alt102=1;
                    }
                    else if ( (LA102_2==L_this) ) {
                        switch ( input.LA(4) ) {
                        case NL:
                            {
                            int LA102_5 = input.LA(5);

                            if ( (LA102_5==COLON) ) {
                                alt102=2;
                            }
                            else if ( (LA102_5==TOK_CONVERT) ) {
                                alt102=3;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 102, 5, input);

                                throw nvae;
                            }
                            }
                            break;
                        case COLON:
                            {
                            alt102=2;
                            }
                            break;
                        case TOK_CONVERT:
                            {
                            alt102=3;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 102, 4, input);

                            throw nvae;
                        }

                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 102, 2, input);

                        throw nvae;
                    }
                    }
                    break;
                case Id:
                    {
                    alt102=1;
                    }
                    break;
                case L_this:
                    {
                    switch ( input.LA(3) ) {
                    case NL:
                        {
                        int LA102_5 = input.LA(4);

                        if ( (LA102_5==COLON) ) {
                            alt102=2;
                        }
                        else if ( (LA102_5==TOK_CONVERT) ) {
                            alt102=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 102, 5, input);

                            throw nvae;
                        }
                        }
                        break;
                    case COLON:
                        {
                        alt102=2;
                        }
                        break;
                    case TOK_CONVERT:
                        {
                        alt102=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 102, 4, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 102, 1, input);

                    throw nvae;
                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 102, 0, input);

                throw nvae;
            }
            switch (alt102) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:10: L_def ( NL )? Id ( NL )? ( defpattern ( NL )? )? ( ':' ( NL )? typeid ( NL )? )? '=' ( NL )? expr
                    {
                    L_def182=(Token)match(input,L_def,FOLLOW_L_def_in_st_def3055); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_def.add(L_def182);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:16: ( NL )?
                    int alt84=2;
                    int LA84_0 = input.LA(1);

                    if ( (LA84_0==NL) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:16: NL
                            {
                            NL183=(Token)match(input,NL,FOLLOW_NL_in_st_def3057); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL183);


                            }
                            break;

                    }

                    Id184=(Token)match(input,Id,FOLLOW_Id_in_st_def3060); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id184);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:23: ( NL )?
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==NL) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:23: NL
                            {
                            NL185=(Token)match(input,NL,FOLLOW_NL_in_st_def3062); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL185);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:27: ( defpattern ( NL )? )?
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( ((LA87_0>=L_true && LA87_0<=L_false)||LA87_0==L_nil||LA87_0==MINUS||(LA87_0>=Constr && LA87_0<=Id)||LA87_0==Num||(LA87_0>=String && LA87_0<=ROUND_BRACKET_OPEN)||LA87_0==SQUARE_BRACKET_OPEN||LA87_0==CURLY_BRACKET_OPEN||LA87_0==UNDERSCORE) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:28: defpattern ( NL )?
                            {
                            pushFollow(FOLLOW_defpattern_in_st_def3066);
                            defpattern186=defpattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_defpattern.add(defpattern186.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:39: ( NL )?
                            int alt86=2;
                            int LA86_0 = input.LA(1);

                            if ( (LA86_0==NL) ) {
                                alt86=1;
                            }
                            switch (alt86) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:39: NL
                                    {
                                    NL187=(Token)match(input,NL,FOLLOW_NL_in_st_def3068); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL187);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:45: ( ':' ( NL )? typeid ( NL )? )?
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==COLON) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:46: ':' ( NL )? typeid ( NL )?
                            {
                            char_literal188=(Token)match(input,COLON,FOLLOW_COLON_in_st_def3074); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(char_literal188);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:50: ( NL )?
                            int alt88=2;
                            int LA88_0 = input.LA(1);

                            if ( (LA88_0==NL) ) {
                                alt88=1;
                            }
                            switch (alt88) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:50: NL
                                    {
                                    NL189=(Token)match(input,NL,FOLLOW_NL_in_st_def3076); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL189);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_typeid_in_st_def3079);
                            typeid190=typeid();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typeid.add(typeid190.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:61: ( NL )?
                            int alt89=2;
                            int LA89_0 = input.LA(1);

                            if ( (LA89_0==NL) ) {
                                alt89=1;
                            }
                            switch (alt89) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:61: NL
                                    {
                                    NL191=(Token)match(input,NL,FOLLOW_NL_in_st_def3081); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL191);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    char_literal192=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_st_def3086); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal192);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:71: ( NL )?
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==NL) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:71: NL
                            {
                            NL193=(Token)match(input,NL,FOLLOW_NL_in_st_def3088); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL193);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_st_def3091);
                    expr194=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr194.getTree());


                    // AST REWRITE
                    // elements: expr, defpattern, typeid, Id
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 556:5: -> ^( DEF Id ( typeid )? ( defpattern )? expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:556:8: ^( DEF Id ( typeid )? ( defpattern )? expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DEF, "DEF"), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:556:17: ( typeid )?
                        if ( stream_typeid.hasNext() ) {
                            adaptor.addChild(root_1, stream_typeid.nextTree());

                        }
                        stream_typeid.reset();
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:556:25: ( defpattern )?
                        if ( stream_defpattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_defpattern.nextTree());

                        }
                        stream_defpattern.reset();
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:4: L_def ( NL )? L_this ( NL )? ':' ( NL )? typeid ( NL )? '=' ( NL )? expr
                    {
                    L_def195=(Token)match(input,L_def,FOLLOW_L_def_in_st_def3117); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_def.add(L_def195);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:10: ( NL )?
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( (LA92_0==NL) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:10: NL
                            {
                            NL196=(Token)match(input,NL,FOLLOW_NL_in_st_def3119); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL196);


                            }
                            break;

                    }

                    L_this197=(Token)match(input,L_this,FOLLOW_L_this_in_st_def3122); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_this.add(L_this197);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:21: ( NL )?
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==NL) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:21: NL
                            {
                            NL198=(Token)match(input,NL,FOLLOW_NL_in_st_def3124); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL198);


                            }
                            break;

                    }

                    char_literal199=(Token)match(input,COLON,FOLLOW_COLON_in_st_def3127); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(char_literal199);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:29: ( NL )?
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==NL) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:29: NL
                            {
                            NL200=(Token)match(input,NL,FOLLOW_NL_in_st_def3129); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL200);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeid_in_st_def3132);
                    typeid201=typeid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeid.add(typeid201.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:40: ( NL )?
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==NL) ) {
                        alt95=1;
                    }
                    switch (alt95) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:40: NL
                            {
                            NL202=(Token)match(input,NL,FOLLOW_NL_in_st_def3134); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL202);


                            }
                            break;

                    }

                    char_literal203=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_st_def3137); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal203);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:48: ( NL )?
                    int alt96=2;
                    int LA96_0 = input.LA(1);

                    if ( (LA96_0==NL) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:48: NL
                            {
                            NL204=(Token)match(input,NL,FOLLOW_NL_in_st_def3139); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL204);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_st_def3142);
                    expr205=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr205.getTree());


                    // AST REWRITE
                    // elements: expr, typeid
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 557:57: -> ^( AUTOMATIC_CONVERSION typeid expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:60: ^( AUTOMATIC_CONVERSION typeid expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AUTOMATIC_CONVERSION, "AUTOMATIC_CONVERSION"), root_1);

                        adaptor.addChild(root_1, stream_typeid.nextTree());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:4: L_def ( NL )? L_this ( NL )? ':>' ( NL )? typeid ( NL )? '=' ( NL )? expr
                    {
                    L_def206=(Token)match(input,L_def,FOLLOW_L_def_in_st_def3157); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_def.add(L_def206);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:10: ( NL )?
                    int alt97=2;
                    int LA97_0 = input.LA(1);

                    if ( (LA97_0==NL) ) {
                        alt97=1;
                    }
                    switch (alt97) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:10: NL
                            {
                            NL207=(Token)match(input,NL,FOLLOW_NL_in_st_def3159); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL207);


                            }
                            break;

                    }

                    L_this208=(Token)match(input,L_this,FOLLOW_L_this_in_st_def3162); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_this.add(L_this208);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:21: ( NL )?
                    int alt98=2;
                    int LA98_0 = input.LA(1);

                    if ( (LA98_0==NL) ) {
                        alt98=1;
                    }
                    switch (alt98) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:21: NL
                            {
                            NL209=(Token)match(input,NL,FOLLOW_NL_in_st_def3164); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL209);


                            }
                            break;

                    }

                    string_literal210=(Token)match(input,TOK_CONVERT,FOLLOW_TOK_CONVERT_in_st_def3167); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TOK_CONVERT.add(string_literal210);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:30: ( NL )?
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( (LA99_0==NL) ) {
                        alt99=1;
                    }
                    switch (alt99) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:30: NL
                            {
                            NL211=(Token)match(input,NL,FOLLOW_NL_in_st_def3169); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL211);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeid_in_st_def3172);
                    typeid212=typeid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeid.add(typeid212.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:41: ( NL )?
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==NL) ) {
                        alt100=1;
                    }
                    switch (alt100) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:41: NL
                            {
                            NL213=(Token)match(input,NL,FOLLOW_NL_in_st_def3174); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL213);


                            }
                            break;

                    }

                    char_literal214=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_st_def3177); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal214);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:49: ( NL )?
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==NL) ) {
                        alt101=1;
                    }
                    switch (alt101) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:49: NL
                            {
                            NL215=(Token)match(input,NL,FOLLOW_NL_in_st_def3179); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL215);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_st_def3182);
                    expr216=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr216.getTree());


                    // AST REWRITE
                    // elements: expr, typeid
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 558:58: -> ^( CONVERSION typeid expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:61: ^( CONVERSION typeid expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONVERSION, "CONVERSION"), root_1);

                        adaptor.addChild(root_1, stream_typeid.nextTree());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_def"

    public static class st_typedef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_typedef"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:1: st_typedef : L_typedef ( NL )? Id ( NL )? typedef_clause ( ( NL )? COMMA ( NL )? typedef_clause )* -> ^( TYPEDEF Id ^( NIL_TOKEN ( typedef_clause )* ) ) ;
    public final babel17Parser.st_typedef_return st_typedef() throws RecognitionException {
        babel17Parser.st_typedef_return retval = new babel17Parser.st_typedef_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_typedef217=null;
        Token NL218=null;
        Token Id219=null;
        Token NL220=null;
        Token NL222=null;
        Token COMMA223=null;
        Token NL224=null;
        babel17Parser.typedef_clause_return typedef_clause221 = null;

        babel17Parser.typedef_clause_return typedef_clause225 = null;


        CommonTree L_typedef217_tree=null;
        CommonTree NL218_tree=null;
        CommonTree Id219_tree=null;
        CommonTree NL220_tree=null;
        CommonTree NL222_tree=null;
        CommonTree COMMA223_tree=null;
        CommonTree NL224_tree=null;
        RewriteRuleTokenStream stream_L_typedef=new RewriteRuleTokenStream(adaptor,"token L_typedef");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleSubtreeStream stream_typedef_clause=new RewriteRuleSubtreeStream(adaptor,"rule typedef_clause");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:2: ( L_typedef ( NL )? Id ( NL )? typedef_clause ( ( NL )? COMMA ( NL )? typedef_clause )* -> ^( TYPEDEF Id ^( NIL_TOKEN ( typedef_clause )* ) ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:4: L_typedef ( NL )? Id ( NL )? typedef_clause ( ( NL )? COMMA ( NL )? typedef_clause )*
            {
            L_typedef217=(Token)match(input,L_typedef,FOLLOW_L_typedef_in_st_typedef3205); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_typedef.add(L_typedef217);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:14: ( NL )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==NL) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:14: NL
                    {
                    NL218=(Token)match(input,NL,FOLLOW_NL_in_st_typedef3207); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL218);


                    }
                    break;

            }

            Id219=(Token)match(input,Id,FOLLOW_Id_in_st_typedef3210); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id219);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:21: ( NL )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==NL) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:21: NL
                    {
                    NL220=(Token)match(input,NL,FOLLOW_NL_in_st_typedef3212); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL220);


                    }
                    break;

            }

            pushFollow(FOLLOW_typedef_clause_in_st_typedef3215);
            typedef_clause221=typedef_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_clause.add(typedef_clause221.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:40: ( ( NL )? COMMA ( NL )? typedef_clause )*
            loop107:
            do {
                int alt107=2;
                int LA107_0 = input.LA(1);

                if ( (LA107_0==NL) ) {
                    int LA107_1 = input.LA(2);

                    if ( (LA107_1==COMMA) ) {
                        alt107=1;
                    }


                }
                else if ( (LA107_0==COMMA) ) {
                    alt107=1;
                }


                switch (alt107) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:41: ( NL )? COMMA ( NL )? typedef_clause
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:41: ( NL )?
            	    int alt105=2;
            	    int LA105_0 = input.LA(1);

            	    if ( (LA105_0==NL) ) {
            	        alt105=1;
            	    }
            	    switch (alt105) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:41: NL
            	            {
            	            NL222=(Token)match(input,NL,FOLLOW_NL_in_st_typedef3218); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL222);


            	            }
            	            break;

            	    }

            	    COMMA223=(Token)match(input,COMMA,FOLLOW_COMMA_in_st_typedef3221); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA223);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:51: ( NL )?
            	    int alt106=2;
            	    int LA106_0 = input.LA(1);

            	    if ( (LA106_0==NL) ) {
            	        alt106=1;
            	    }
            	    switch (alt106) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:51: NL
            	            {
            	            NL224=(Token)match(input,NL,FOLLOW_NL_in_st_typedef3223); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL224);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_typedef_clause_in_st_typedef3226);
            	    typedef_clause225=typedef_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typedef_clause.add(typedef_clause225.getTree());

            	    }
            	    break;

            	default :
            	    break loop107;
                }
            } while (true);



            // AST REWRITE
            // elements: Id, typedef_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 561:72: -> ^( TYPEDEF Id ^( NIL_TOKEN ( typedef_clause )* ) )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:75: ^( TYPEDEF Id ^( NIL_TOKEN ( typedef_clause )* ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEDEF, "TYPEDEF"), root_1);

                adaptor.addChild(root_1, stream_Id.nextNode());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:88: ^( NIL_TOKEN ( typedef_clause )* )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:100: ( typedef_clause )*
                while ( stream_typedef_clause.hasNext() ) {
                    adaptor.addChild(root_2, stream_typedef_clause.nextTree());

                }
                stream_typedef_clause.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_typedef"

    public static class typedef_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typedef_clause"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:563:1: typedef_clause : ( ( defpattern ( NL )? '=' )=> defpattern ( NL )? '=' ( NL )? expr -> ^( TYPEDEF_CLAUSE defpattern expr ) | defpattern -> ^( TYPEDEF_CLAUSE defpattern ) );
    public final babel17Parser.typedef_clause_return typedef_clause() throws RecognitionException {
        babel17Parser.typedef_clause_return retval = new babel17Parser.typedef_clause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL227=null;
        Token char_literal228=null;
        Token NL229=null;
        babel17Parser.defpattern_return defpattern226 = null;

        babel17Parser.expr_return expr230 = null;

        babel17Parser.defpattern_return defpattern231 = null;


        CommonTree NL227_tree=null;
        CommonTree char_literal228_tree=null;
        CommonTree NL229_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_defpattern=new RewriteRuleSubtreeStream(adaptor,"rule defpattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:2: ( ( defpattern ( NL )? '=' )=> defpattern ( NL )? '=' ( NL )? expr -> ^( TYPEDEF_CLAUSE defpattern expr ) | defpattern -> ^( TYPEDEF_CLAUSE defpattern ) )
            int alt110=2;
            alt110 = dfa110.predict(input);
            switch (alt110) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:4: ( defpattern ( NL )? '=' )=> defpattern ( NL )? '=' ( NL )? expr
                    {
                    pushFollow(FOLLOW_defpattern_in_typedef_clause3264);
                    defpattern226=defpattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_defpattern.add(defpattern226.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:39: ( NL )?
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==NL) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:39: NL
                            {
                            NL227=(Token)match(input,NL,FOLLOW_NL_in_typedef_clause3266); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL227);


                            }
                            break;

                    }

                    char_literal228=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_typedef_clause3269); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal228);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:47: ( NL )?
                    int alt109=2;
                    int LA109_0 = input.LA(1);

                    if ( (LA109_0==NL) ) {
                        alt109=1;
                    }
                    switch (alt109) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:47: NL
                            {
                            NL229=(Token)match(input,NL,FOLLOW_NL_in_typedef_clause3271); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL229);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_typedef_clause3274);
                    expr230=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr230.getTree());


                    // AST REWRITE
                    // elements: expr, defpattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 564:56: -> ^( TYPEDEF_CLAUSE defpattern expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:59: ^( TYPEDEF_CLAUSE defpattern expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEDEF_CLAUSE, "TYPEDEF_CLAUSE"), root_1);

                        adaptor.addChild(root_1, stream_defpattern.nextTree());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:4: defpattern
                    {
                    pushFollow(FOLLOW_defpattern_in_typedef_clause3289);
                    defpattern231=defpattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_defpattern.add(defpattern231.getTree());


                    // AST REWRITE
                    // elements: defpattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 565:15: -> ^( TYPEDEF_CLAUSE defpattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:18: ^( TYPEDEF_CLAUSE defpattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEDEF_CLAUSE, "TYPEDEF_CLAUSE"), root_1);

                        adaptor.addChild(root_1, stream_defpattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typedef_clause"

    public static class st_yield_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_yield"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:567:1: st_yield : L_yield expr -> ^( YIELD expr ) ;
    public final babel17Parser.st_yield_return st_yield() throws RecognitionException {
        babel17Parser.st_yield_return retval = new babel17Parser.st_yield_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_yield232=null;
        babel17Parser.expr_return expr233 = null;


        CommonTree L_yield232_tree=null;
        RewriteRuleTokenStream stream_L_yield=new RewriteRuleTokenStream(adaptor,"token L_yield");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:567:9: ( L_yield expr -> ^( YIELD expr ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:567:11: L_yield expr
            {
            L_yield232=(Token)match(input,L_yield,FOLLOW_L_yield_in_st_yield3308); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_yield.add(L_yield232);

            pushFollow(FOLLOW_expr_in_st_yield3310);
            expr233=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr233.getTree());


            // AST REWRITE
            // elements: expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 567:24: -> ^( YIELD expr )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:567:27: ^( YIELD expr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YIELD, "YIELD"), root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_yield"

    public static class st_memoize_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_memoize"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:569:1: st_memoize : L_memoize memo_id ( ( NL )? COMMA ( NL )? memo_id )* -> ^( MEMOIZE ( memo_id )* ) ;
    public final babel17Parser.st_memoize_return st_memoize() throws RecognitionException {
        babel17Parser.st_memoize_return retval = new babel17Parser.st_memoize_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_memoize234=null;
        Token NL236=null;
        Token COMMA237=null;
        Token NL238=null;
        babel17Parser.memo_id_return memo_id235 = null;

        babel17Parser.memo_id_return memo_id239 = null;


        CommonTree L_memoize234_tree=null;
        CommonTree NL236_tree=null;
        CommonTree COMMA237_tree=null;
        CommonTree NL238_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_memoize=new RewriteRuleTokenStream(adaptor,"token L_memoize");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_memo_id=new RewriteRuleSubtreeStream(adaptor,"rule memo_id");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:570:2: ( L_memoize memo_id ( ( NL )? COMMA ( NL )? memo_id )* -> ^( MEMOIZE ( memo_id )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:570:4: L_memoize memo_id ( ( NL )? COMMA ( NL )? memo_id )*
            {
            L_memoize234=(Token)match(input,L_memoize,FOLLOW_L_memoize_in_st_memoize3331); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_memoize.add(L_memoize234);

            pushFollow(FOLLOW_memo_id_in_st_memoize3333);
            memo_id235=memo_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_memo_id.add(memo_id235.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:570:22: ( ( NL )? COMMA ( NL )? memo_id )*
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==NL) ) {
                    int LA113_1 = input.LA(2);

                    if ( (LA113_1==COMMA) ) {
                        alt113=1;
                    }


                }
                else if ( (LA113_0==COMMA) ) {
                    alt113=1;
                }


                switch (alt113) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:570:23: ( NL )? COMMA ( NL )? memo_id
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:570:23: ( NL )?
            	    int alt111=2;
            	    int LA111_0 = input.LA(1);

            	    if ( (LA111_0==NL) ) {
            	        alt111=1;
            	    }
            	    switch (alt111) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:570:23: NL
            	            {
            	            NL236=(Token)match(input,NL,FOLLOW_NL_in_st_memoize3336); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL236);


            	            }
            	            break;

            	    }

            	    COMMA237=(Token)match(input,COMMA,FOLLOW_COMMA_in_st_memoize3339); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA237);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:570:33: ( NL )?
            	    int alt112=2;
            	    int LA112_0 = input.LA(1);

            	    if ( (LA112_0==NL) ) {
            	        alt112=1;
            	    }
            	    switch (alt112) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:570:33: NL
            	            {
            	            NL238=(Token)match(input,NL,FOLLOW_NL_in_st_memoize3341); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL238);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_memo_id_in_st_memoize3344);
            	    memo_id239=memo_id();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_memo_id.add(memo_id239.getTree());

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);



            // AST REWRITE
            // elements: memo_id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 571:5: -> ^( MEMOIZE ( memo_id )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:571:8: ^( MEMOIZE ( memo_id )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MEMOIZE, "MEMOIZE"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:571:18: ( memo_id )*
                while ( stream_memo_id.hasNext() ) {
                    adaptor.addChild(root_1, stream_memo_id.nextTree());

                }
                stream_memo_id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_memoize"

    public static class memo_id_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "memo_id"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:1: memo_id : ( Id -> ^( MEMOID_STRONG Id ) | '(' Id ')' -> ^( MEMOID_WEAK Id ) );
    public final babel17Parser.memo_id_return memo_id() throws RecognitionException {
        babel17Parser.memo_id_return retval = new babel17Parser.memo_id_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id240=null;
        Token char_literal241=null;
        Token Id242=null;
        Token char_literal243=null;

        CommonTree Id240_tree=null;
        CommonTree char_literal241_tree=null;
        CommonTree Id242_tree=null;
        CommonTree char_literal243_tree=null;
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:9: ( Id -> ^( MEMOID_STRONG Id ) | '(' Id ')' -> ^( MEMOID_WEAK Id ) )
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==Id) ) {
                alt114=1;
            }
            else if ( (LA114_0==ROUND_BRACKET_OPEN) ) {
                alt114=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;
            }
            switch (alt114) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:11: Id
                    {
                    Id240=(Token)match(input,Id,FOLLOW_Id_in_memo_id3373); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id240);



                    // AST REWRITE
                    // elements: Id
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 573:14: -> ^( MEMOID_STRONG Id )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:17: ^( MEMOID_STRONG Id )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MEMOID_STRONG, "MEMOID_STRONG"), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:574:4: '(' Id ')'
                    {
                    char_literal241=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_memo_id3386); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal241);

                    Id242=(Token)match(input,Id,FOLLOW_Id_in_memo_id3388); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id242);

                    char_literal243=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_memo_id3390); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal243);



                    // AST REWRITE
                    // elements: Id
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 574:15: -> ^( MEMOID_WEAK Id )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:574:18: ^( MEMOID_WEAK Id )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MEMOID_WEAK, "MEMOID_WEAK"), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "memo_id"

    public static class st_private_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_private"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:576:1: st_private : L_private private_id ( ( NL )? COMMA ( NL )? private_id )* -> ^( PRIVATE ( private_id )* ) ;
    public final babel17Parser.st_private_return st_private() throws RecognitionException {
        babel17Parser.st_private_return retval = new babel17Parser.st_private_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_private244=null;
        Token NL246=null;
        Token COMMA247=null;
        Token NL248=null;
        babel17Parser.private_id_return private_id245 = null;

        babel17Parser.private_id_return private_id249 = null;


        CommonTree L_private244_tree=null;
        CommonTree NL246_tree=null;
        CommonTree COMMA247_tree=null;
        CommonTree NL248_tree=null;
        RewriteRuleTokenStream stream_L_private=new RewriteRuleTokenStream(adaptor,"token L_private");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_private_id=new RewriteRuleSubtreeStream(adaptor,"rule private_id");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:2: ( L_private private_id ( ( NL )? COMMA ( NL )? private_id )* -> ^( PRIVATE ( private_id )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:4: L_private private_id ( ( NL )? COMMA ( NL )? private_id )*
            {
            L_private244=(Token)match(input,L_private,FOLLOW_L_private_in_st_private3407); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_private.add(L_private244);

            pushFollow(FOLLOW_private_id_in_st_private3409);
            private_id245=private_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_private_id.add(private_id245.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:25: ( ( NL )? COMMA ( NL )? private_id )*
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);

                if ( (LA117_0==NL) ) {
                    int LA117_1 = input.LA(2);

                    if ( (LA117_1==COMMA) ) {
                        alt117=1;
                    }


                }
                else if ( (LA117_0==COMMA) ) {
                    alt117=1;
                }


                switch (alt117) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:26: ( NL )? COMMA ( NL )? private_id
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:26: ( NL )?
            	    int alt115=2;
            	    int LA115_0 = input.LA(1);

            	    if ( (LA115_0==NL) ) {
            	        alt115=1;
            	    }
            	    switch (alt115) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:26: NL
            	            {
            	            NL246=(Token)match(input,NL,FOLLOW_NL_in_st_private3412); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL246);


            	            }
            	            break;

            	    }

            	    COMMA247=(Token)match(input,COMMA,FOLLOW_COMMA_in_st_private3415); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA247);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:36: ( NL )?
            	    int alt116=2;
            	    int LA116_0 = input.LA(1);

            	    if ( (LA116_0==NL) ) {
            	        alt116=1;
            	    }
            	    switch (alt116) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:36: NL
            	            {
            	            NL248=(Token)match(input,NL,FOLLOW_NL_in_st_private3417); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL248);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_private_id_in_st_private3420);
            	    private_id249=private_id();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_private_id.add(private_id249.getTree());

            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);



            // AST REWRITE
            // elements: private_id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 578:5: -> ^( PRIVATE ( private_id )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:578:8: ^( PRIVATE ( private_id )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRIVATE, "PRIVATE"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:578:18: ( private_id )*
                while ( stream_private_id.hasNext() ) {
                    adaptor.addChild(root_1, stream_private_id.nextTree());

                }
                stream_private_id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_private"

    public static class private_id_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "private_id"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:580:1: private_id : Id -> ^( PRIVATEID Id ) ;
    public final babel17Parser.private_id_return private_id() throws RecognitionException {
        babel17Parser.private_id_return retval = new babel17Parser.private_id_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id250=null;

        CommonTree Id250_tree=null;
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:581:2: ( Id -> ^( PRIVATEID Id ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:581:4: Id
            {
            Id250=(Token)match(input,Id,FOLLOW_Id_in_private_id3446); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id250);



            // AST REWRITE
            // elements: Id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 581:7: -> ^( PRIVATEID Id )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:581:10: ^( PRIVATEID Id )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRIVATEID, "PRIVATEID"), root_1);

                adaptor.addChild(root_1, stream_Id.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "private_id"

    public static class testid_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "testid"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:583:1: testid : ( Id | L_unittest );
    public final babel17Parser.testid_return testid() throws RecognitionException {
        babel17Parser.testid_return retval = new babel17Parser.testid_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set251=null;

        CommonTree set251_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:583:8: ( Id | L_unittest )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set251=(Token)input.LT(1);
            if ( input.LA(1)==L_unittest||input.LA(1)==Id ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set251));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "testid"

    public static class moduleid_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moduleid"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:586:1: moduleid : Id ( ( NL )? PERIOD ( NL )? testid )* -> ^( MODULEID ( Id )? ( testid )* ) ;
    public final babel17Parser.moduleid_return moduleid() throws RecognitionException {
        babel17Parser.moduleid_return retval = new babel17Parser.moduleid_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id252=null;
        Token NL253=null;
        Token PERIOD254=null;
        Token NL255=null;
        babel17Parser.testid_return testid256 = null;


        CommonTree Id252_tree=null;
        CommonTree NL253_tree=null;
        CommonTree PERIOD254_tree=null;
        CommonTree NL255_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_testid=new RewriteRuleSubtreeStream(adaptor,"rule testid");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:587:2: ( Id ( ( NL )? PERIOD ( NL )? testid )* -> ^( MODULEID ( Id )? ( testid )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:587:4: Id ( ( NL )? PERIOD ( NL )? testid )*
            {
            Id252=(Token)match(input,Id,FOLLOW_Id_in_moduleid3479); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id252);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:587:7: ( ( NL )? PERIOD ( NL )? testid )*
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==NL) ) {
                    int LA120_1 = input.LA(2);

                    if ( (LA120_1==PERIOD) ) {
                        alt120=1;
                    }


                }
                else if ( (LA120_0==PERIOD) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:587:8: ( NL )? PERIOD ( NL )? testid
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:587:8: ( NL )?
            	    int alt118=2;
            	    int LA118_0 = input.LA(1);

            	    if ( (LA118_0==NL) ) {
            	        alt118=1;
            	    }
            	    switch (alt118) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:587:8: NL
            	            {
            	            NL253=(Token)match(input,NL,FOLLOW_NL_in_moduleid3482); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL253);


            	            }
            	            break;

            	    }

            	    PERIOD254=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_moduleid3485); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD254);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:587:19: ( NL )?
            	    int alt119=2;
            	    int LA119_0 = input.LA(1);

            	    if ( (LA119_0==NL) ) {
            	        alt119=1;
            	    }
            	    switch (alt119) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:587:19: NL
            	            {
            	            NL255=(Token)match(input,NL,FOLLOW_NL_in_moduleid3487); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL255);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_testid_in_moduleid3490);
            	    testid256=testid();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_testid.add(testid256.getTree());

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);



            // AST REWRITE
            // elements: Id, testid
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 587:32: -> ^( MODULEID ( Id )? ( testid )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:587:35: ^( MODULEID ( Id )? ( testid )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MODULEID, "MODULEID"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:587:46: ( Id )?
                if ( stream_Id.hasNext() ) {
                    adaptor.addChild(root_1, stream_Id.nextNode());

                }
                stream_Id.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:587:50: ( testid )*
                while ( stream_testid.hasNext() ) {
                    adaptor.addChild(root_1, stream_testid.nextTree());

                }
                stream_testid.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moduleid"

    public static class st_module_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_module"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:589:1: st_module : L_module ( NL )? moduleid block ( L_unittest block )? L_end -> ^( L_module moduleid block ( L_unittest )? ( block )? ) ;
    public final babel17Parser.st_module_return st_module() throws RecognitionException {
        babel17Parser.st_module_return retval = new babel17Parser.st_module_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_module257=null;
        Token NL258=null;
        Token L_unittest261=null;
        Token L_end263=null;
        babel17Parser.moduleid_return moduleid259 = null;

        babel17Parser.block_return block260 = null;

        babel17Parser.block_return block262 = null;


        CommonTree L_module257_tree=null;
        CommonTree NL258_tree=null;
        CommonTree L_unittest261_tree=null;
        CommonTree L_end263_tree=null;
        RewriteRuleTokenStream stream_L_module=new RewriteRuleTokenStream(adaptor,"token L_module");
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_unittest=new RewriteRuleTokenStream(adaptor,"token L_unittest");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_moduleid=new RewriteRuleSubtreeStream(adaptor,"rule moduleid");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:590:2: ( L_module ( NL )? moduleid block ( L_unittest block )? L_end -> ^( L_module moduleid block ( L_unittest )? ( block )? ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:590:4: L_module ( NL )? moduleid block ( L_unittest block )? L_end
            {
            L_module257=(Token)match(input,L_module,FOLLOW_L_module_in_st_module3513); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_module.add(L_module257);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:590:13: ( NL )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==NL) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:590:13: NL
                    {
                    NL258=(Token)match(input,NL,FOLLOW_NL_in_st_module3515); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL258);


                    }
                    break;

            }

            pushFollow(FOLLOW_moduleid_in_st_module3518);
            moduleid259=moduleid();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moduleid.add(moduleid259.getTree());
            pushFollow(FOLLOW_block_in_st_module3520);
            block260=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block260.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:590:32: ( L_unittest block )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==L_unittest) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:590:33: L_unittest block
                    {
                    L_unittest261=(Token)match(input,L_unittest,FOLLOW_L_unittest_in_st_module3523); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_unittest.add(L_unittest261);

                    pushFollow(FOLLOW_block_in_st_module3525);
                    block262=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block262.getTree());

                    }
                    break;

            }

            L_end263=(Token)match(input,L_end,FOLLOW_L_end_in_st_module3529); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end263);



            // AST REWRITE
            // elements: block, L_module, block, L_unittest, moduleid
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 590:58: -> ^( L_module moduleid block ( L_unittest )? ( block )? )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:590:61: ^( L_module moduleid block ( L_unittest )? ( block )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_L_module.nextNode(), root_1);

                adaptor.addChild(root_1, stream_moduleid.nextTree());
                adaptor.addChild(root_1, stream_block.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:590:87: ( L_unittest )?
                if ( stream_L_unittest.hasNext() ) {
                    adaptor.addChild(root_1, stream_L_unittest.nextNode());

                }
                stream_L_unittest.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:590:99: ( block )?
                if ( stream_block.hasNext() ) {
                    adaptor.addChild(root_1, stream_block.nextTree());

                }
                stream_block.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_module"

    public static class importprefix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importprefix"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:592:1: importprefix : ( L_root | testid ) ( ( NL )? PERIOD ( NL )? testid )* -> ^( IMPORT_PREFIX ( L_root )? ( testid )* ) ;
    public final babel17Parser.importprefix_return importprefix() throws RecognitionException {
        babel17Parser.importprefix_return retval = new babel17Parser.importprefix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_root264=null;
        Token NL266=null;
        Token PERIOD267=null;
        Token NL268=null;
        babel17Parser.testid_return testid265 = null;

        babel17Parser.testid_return testid269 = null;


        CommonTree L_root264_tree=null;
        CommonTree NL266_tree=null;
        CommonTree PERIOD267_tree=null;
        CommonTree NL268_tree=null;
        RewriteRuleTokenStream stream_L_root=new RewriteRuleTokenStream(adaptor,"token L_root");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_testid=new RewriteRuleSubtreeStream(adaptor,"rule testid");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:593:2: ( ( L_root | testid ) ( ( NL )? PERIOD ( NL )? testid )* -> ^( IMPORT_PREFIX ( L_root )? ( testid )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:593:4: ( L_root | testid ) ( ( NL )? PERIOD ( NL )? testid )*
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:593:4: ( L_root | testid )
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==L_root) ) {
                alt123=1;
            }
            else if ( (LA123_0==L_unittest||LA123_0==Id) ) {
                alt123=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;
            }
            switch (alt123) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:593:5: L_root
                    {
                    L_root264=(Token)match(input,L_root,FOLLOW_L_root_in_importprefix3556); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_root.add(L_root264);


                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:593:14: testid
                    {
                    pushFollow(FOLLOW_testid_in_importprefix3560);
                    testid265=testid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_testid.add(testid265.getTree());

                    }
                    break;

            }

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:593:22: ( ( NL )? PERIOD ( NL )? testid )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==NL) ) {
                    int LA126_1 = input.LA(2);

                    if ( (LA126_1==PERIOD) ) {
                        int LA126_2 = input.LA(3);

                        if ( (LA126_2==NL) ) {
                            int LA126_4 = input.LA(4);

                            if ( (LA126_4==L_unittest||LA126_4==Id) ) {
                                alt126=1;
                            }


                        }
                        else if ( (LA126_2==L_unittest||LA126_2==Id) ) {
                            alt126=1;
                        }


                    }


                }
                else if ( (LA126_0==PERIOD) ) {
                    int LA126_2 = input.LA(2);

                    if ( (LA126_2==NL) ) {
                        int LA126_4 = input.LA(3);

                        if ( (LA126_4==L_unittest||LA126_4==Id) ) {
                            alt126=1;
                        }


                    }
                    else if ( (LA126_2==L_unittest||LA126_2==Id) ) {
                        alt126=1;
                    }


                }


                switch (alt126) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:593:23: ( NL )? PERIOD ( NL )? testid
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:593:23: ( NL )?
            	    int alt124=2;
            	    int LA124_0 = input.LA(1);

            	    if ( (LA124_0==NL) ) {
            	        alt124=1;
            	    }
            	    switch (alt124) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:593:23: NL
            	            {
            	            NL266=(Token)match(input,NL,FOLLOW_NL_in_importprefix3564); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL266);


            	            }
            	            break;

            	    }

            	    PERIOD267=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_importprefix3567); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD267);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:593:34: ( NL )?
            	    int alt125=2;
            	    int LA125_0 = input.LA(1);

            	    if ( (LA125_0==NL) ) {
            	        alt125=1;
            	    }
            	    switch (alt125) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:593:34: NL
            	            {
            	            NL268=(Token)match(input,NL,FOLLOW_NL_in_importprefix3569); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL268);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_testid_in_importprefix3572);
            	    testid269=testid();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_testid.add(testid269.getTree());

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);



            // AST REWRITE
            // elements: testid, L_root
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 593:47: -> ^( IMPORT_PREFIX ( L_root )? ( testid )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:593:50: ^( IMPORT_PREFIX ( L_root )? ( testid )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_PREFIX, "IMPORT_PREFIX"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:593:66: ( L_root )?
                if ( stream_L_root.hasNext() ) {
                    adaptor.addChild(root_1, stream_L_root.nextNode());

                }
                stream_L_root.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:593:74: ( testid )*
                while ( stream_testid.hasNext() ) {
                    adaptor.addChild(root_1, stream_testid.nextTree());

                }
                stream_testid.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "importprefix"

    public static class importall_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importall"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:595:1: importall : UNDERSCORE -> ^( IMPORT_ALL ) ;
    public final babel17Parser.importall_return importall() throws RecognitionException {
        babel17Parser.importall_return retval = new babel17Parser.importall_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token UNDERSCORE270=null;

        CommonTree UNDERSCORE270_tree=null;
        RewriteRuleTokenStream stream_UNDERSCORE=new RewriteRuleTokenStream(adaptor,"token UNDERSCORE");

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:596:2: ( UNDERSCORE -> ^( IMPORT_ALL ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:596:4: UNDERSCORE
            {
            UNDERSCORE270=(Token)match(input,UNDERSCORE,FOLLOW_UNDERSCORE_in_importall3597); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UNDERSCORE.add(UNDERSCORE270);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 596:15: -> ^( IMPORT_ALL )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:596:18: ^( IMPORT_ALL )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_ALL, "IMPORT_ALL"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "importall"

    public static class importsetclause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importsetclause"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:598:1: importsetclause : ( testid ( ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )? )? -> ^( IMPORT_PLUS testid ( Id )? ) | '-' ( NL )? testid -> ^( IMPORT_MINUS testid ) | importall );
    public final babel17Parser.importsetclause_return importsetclause() throws RecognitionException {
        babel17Parser.importsetclause_return retval = new babel17Parser.importsetclause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL272=null;
        Token NL274=null;
        Token Id275=null;
        Token char_literal276=null;
        Token NL277=null;
        babel17Parser.testid_return testid271 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW273 = null;

        babel17Parser.testid_return testid278 = null;

        babel17Parser.importall_return importall279 = null;


        CommonTree NL272_tree=null;
        CommonTree NL274_tree=null;
        CommonTree Id275_tree=null;
        CommonTree char_literal276_tree=null;
        CommonTree NL277_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_testid=new RewriteRuleSubtreeStream(adaptor,"rule testid");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:2: ( testid ( ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )? )? -> ^( IMPORT_PLUS testid ( Id )? ) | '-' ( NL )? testid -> ^( IMPORT_MINUS testid ) | importall )
            int alt132=3;
            switch ( input.LA(1) ) {
            case L_unittest:
            case Id:
                {
                alt132=1;
                }
                break;
            case MINUS:
                {
                alt132=2;
                }
                break;
            case UNDERSCORE:
                {
                alt132=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 132, 0, input);

                throw nvae;
            }

            switch (alt132) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:4: testid ( ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )? )?
                    {
                    pushFollow(FOLLOW_testid_in_importsetclause3613);
                    testid271=testid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_testid.add(testid271.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:11: ( ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )? )?
                    int alt130=2;
                    int LA130_0 = input.LA(1);

                    if ( (LA130_0==NL) ) {
                        int LA130_1 = input.LA(2);

                        if ( ((LA130_1>=A_DOUBLE_ARROW && LA130_1<=U_DOUBLE_ARROW)) ) {
                            alt130=1;
                        }
                    }
                    else if ( ((LA130_0>=A_DOUBLE_ARROW && LA130_0<=U_DOUBLE_ARROW)) ) {
                        alt130=1;
                    }
                    switch (alt130) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:12: ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )?
                            {
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:12: ( NL )?
                            int alt127=2;
                            int LA127_0 = input.LA(1);

                            if ( (LA127_0==NL) ) {
                                alt127=1;
                            }
                            switch (alt127) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:12: NL
                                    {
                                    NL272=(Token)match(input,NL,FOLLOW_NL_in_importsetclause3616); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL272);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_importsetclause3619);
                            token_DOUBLE_ARROW273=token_DOUBLE_ARROW();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW273.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:35: ( ( NL )? Id )?
                            int alt129=2;
                            int LA129_0 = input.LA(1);

                            if ( (LA129_0==NL) ) {
                                int LA129_1 = input.LA(2);

                                if ( (LA129_1==Id) ) {
                                    alt129=1;
                                }
                            }
                            else if ( (LA129_0==Id) ) {
                                alt129=1;
                            }
                            switch (alt129) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:36: ( NL )? Id
                                    {
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:36: ( NL )?
                                    int alt128=2;
                                    int LA128_0 = input.LA(1);

                                    if ( (LA128_0==NL) ) {
                                        alt128=1;
                                    }
                                    switch (alt128) {
                                        case 1 :
                                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:36: NL
                                            {
                                            NL274=(Token)match(input,NL,FOLLOW_NL_in_importsetclause3622); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_NL.add(NL274);


                                            }
                                            break;

                                    }

                                    Id275=(Token)match(input,Id,FOLLOW_Id_in_importsetclause3625); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_Id.add(Id275);


                                    }
                                    break;

                            }


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: testid, Id
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 599:47: -> ^( IMPORT_PLUS testid ( Id )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:50: ^( IMPORT_PLUS testid ( Id )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_PLUS, "IMPORT_PLUS"), root_1);

                        adaptor.addChild(root_1, stream_testid.nextTree());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:71: ( Id )?
                        if ( stream_Id.hasNext() ) {
                            adaptor.addChild(root_1, stream_Id.nextNode());

                        }
                        stream_Id.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:600:4: '-' ( NL )? testid
                    {
                    char_literal276=(Token)match(input,MINUS,FOLLOW_MINUS_in_importsetclause3645); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(char_literal276);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:600:8: ( NL )?
                    int alt131=2;
                    int LA131_0 = input.LA(1);

                    if ( (LA131_0==NL) ) {
                        alt131=1;
                    }
                    switch (alt131) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:600:8: NL
                            {
                            NL277=(Token)match(input,NL,FOLLOW_NL_in_importsetclause3647); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL277);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_testid_in_importsetclause3650);
                    testid278=testid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_testid.add(testid278.getTree());


                    // AST REWRITE
                    // elements: testid
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 600:19: -> ^( IMPORT_MINUS testid )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:600:22: ^( IMPORT_MINUS testid )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_MINUS, "IMPORT_MINUS"), root_1);

                        adaptor.addChild(root_1, stream_testid.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:601:4: importall
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_importall_in_importsetclause3663);
                    importall279=importall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, importall279.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "importsetclause"

    public static class importset_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importset"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:603:1: importset : '{' ( NL )? importsetclause ( ( NL )? ',' ( NL )? importsetclause )* ( NL )? '}' -> ^( IMPORT_SET ( importsetclause )* ) ;
    public final babel17Parser.importset_return importset() throws RecognitionException {
        babel17Parser.importset_return retval = new babel17Parser.importset_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal280=null;
        Token NL281=null;
        Token NL283=null;
        Token char_literal284=null;
        Token NL285=null;
        Token NL287=null;
        Token char_literal288=null;
        babel17Parser.importsetclause_return importsetclause282 = null;

        babel17Parser.importsetclause_return importsetclause286 = null;


        CommonTree char_literal280_tree=null;
        CommonTree NL281_tree=null;
        CommonTree NL283_tree=null;
        CommonTree char_literal284_tree=null;
        CommonTree NL285_tree=null;
        CommonTree NL287_tree=null;
        CommonTree char_literal288_tree=null;
        RewriteRuleTokenStream stream_CURLY_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_OPEN");
        RewriteRuleTokenStream stream_CURLY_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_importsetclause=new RewriteRuleSubtreeStream(adaptor,"rule importsetclause");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:604:2: ( '{' ( NL )? importsetclause ( ( NL )? ',' ( NL )? importsetclause )* ( NL )? '}' -> ^( IMPORT_SET ( importsetclause )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:604:4: '{' ( NL )? importsetclause ( ( NL )? ',' ( NL )? importsetclause )* ( NL )? '}'
            {
            char_literal280=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_importset3673); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal280);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:604:8: ( NL )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==NL) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:604:8: NL
                    {
                    NL281=(Token)match(input,NL,FOLLOW_NL_in_importset3675); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL281);


                    }
                    break;

            }

            pushFollow(FOLLOW_importsetclause_in_importset3678);
            importsetclause282=importsetclause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importsetclause.add(importsetclause282.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:604:28: ( ( NL )? ',' ( NL )? importsetclause )*
            loop136:
            do {
                int alt136=2;
                int LA136_0 = input.LA(1);

                if ( (LA136_0==NL) ) {
                    int LA136_1 = input.LA(2);

                    if ( (LA136_1==COMMA) ) {
                        alt136=1;
                    }


                }
                else if ( (LA136_0==COMMA) ) {
                    alt136=1;
                }


                switch (alt136) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:604:29: ( NL )? ',' ( NL )? importsetclause
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:604:29: ( NL )?
            	    int alt134=2;
            	    int LA134_0 = input.LA(1);

            	    if ( (LA134_0==NL) ) {
            	        alt134=1;
            	    }
            	    switch (alt134) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:604:29: NL
            	            {
            	            NL283=(Token)match(input,NL,FOLLOW_NL_in_importset3681); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL283);


            	            }
            	            break;

            	    }

            	    char_literal284=(Token)match(input,COMMA,FOLLOW_COMMA_in_importset3684); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal284);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:604:37: ( NL )?
            	    int alt135=2;
            	    int LA135_0 = input.LA(1);

            	    if ( (LA135_0==NL) ) {
            	        alt135=1;
            	    }
            	    switch (alt135) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:604:37: NL
            	            {
            	            NL285=(Token)match(input,NL,FOLLOW_NL_in_importset3686); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL285);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_importsetclause_in_importset3689);
            	    importsetclause286=importsetclause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_importsetclause.add(importsetclause286.getTree());

            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:604:59: ( NL )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==NL) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:604:59: NL
                    {
                    NL287=(Token)match(input,NL,FOLLOW_NL_in_importset3693); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL287);


                    }
                    break;

            }

            char_literal288=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_importset3696); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal288);



            // AST REWRITE
            // elements: importsetclause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 604:67: -> ^( IMPORT_SET ( importsetclause )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:604:70: ^( IMPORT_SET ( importsetclause )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_SET, "IMPORT_SET"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:604:83: ( importsetclause )*
                while ( stream_importsetclause.hasNext() ) {
                    adaptor.addChild(root_1, stream_importsetclause.nextTree());

                }
                stream_importsetclause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "importset"

    public static class st_import_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_import"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:606:1: st_import : L_import ( NL )? importprefix ( ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id ) )? -> ^( L_import importprefix ( importall )? ( importset )? ( Id )? ) ;
    public final babel17Parser.st_import_return st_import() throws RecognitionException {
        babel17Parser.st_import_return retval = new babel17Parser.st_import_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_import289=null;
        Token NL290=null;
        Token NL292=null;
        Token PERIOD293=null;
        Token NL294=null;
        Token PERIOD296=null;
        Token NL297=null;
        Token NL300=null;
        Token Id301=null;
        babel17Parser.importprefix_return importprefix291 = null;

        babel17Parser.importall_return importall295 = null;

        babel17Parser.importset_return importset298 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW299 = null;


        CommonTree L_import289_tree=null;
        CommonTree NL290_tree=null;
        CommonTree NL292_tree=null;
        CommonTree PERIOD293_tree=null;
        CommonTree NL294_tree=null;
        CommonTree PERIOD296_tree=null;
        CommonTree NL297_tree=null;
        CommonTree NL300_tree=null;
        CommonTree Id301_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_L_import=new RewriteRuleTokenStream(adaptor,"token L_import");
        RewriteRuleSubtreeStream stream_importprefix=new RewriteRuleSubtreeStream(adaptor,"rule importprefix");
        RewriteRuleSubtreeStream stream_importset=new RewriteRuleSubtreeStream(adaptor,"rule importset");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_importall=new RewriteRuleSubtreeStream(adaptor,"rule importall");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:607:2: ( L_import ( NL )? importprefix ( ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id ) )? -> ^( L_import importprefix ( importall )? ( importset )? ( Id )? ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:607:4: L_import ( NL )? importprefix ( ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id ) )?
            {
            L_import289=(Token)match(input,L_import,FOLLOW_L_import_in_st_import3714); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_import.add(L_import289);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:607:13: ( NL )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==NL) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:607:13: NL
                    {
                    NL290=(Token)match(input,NL,FOLLOW_NL_in_st_import3716); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL290);


                    }
                    break;

            }

            pushFollow(FOLLOW_importprefix_in_st_import3719);
            importprefix291=importprefix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importprefix.add(importprefix291.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:607:30: ( ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id ) )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==NL) ) {
                int LA144_1 = input.LA(2);

                if ( ((LA144_1>=A_DOUBLE_ARROW && LA144_1<=U_DOUBLE_ARROW)||LA144_1==PERIOD) ) {
                    alt144=1;
                }
            }
            else if ( ((LA144_0>=A_DOUBLE_ARROW && LA144_0<=U_DOUBLE_ARROW)||LA144_0==PERIOD) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:607:31: ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id )
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:607:31: ( NL )?
                    int alt139=2;
                    int LA139_0 = input.LA(1);

                    if ( (LA139_0==NL) ) {
                        alt139=1;
                    }
                    switch (alt139) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:607:31: NL
                            {
                            NL292=(Token)match(input,NL,FOLLOW_NL_in_st_import3722); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL292);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:607:35: ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id )
                    int alt143=3;
                    int LA143_0 = input.LA(1);

                    if ( (LA143_0==PERIOD) ) {
                        switch ( input.LA(2) ) {
                        case NL:
                            {
                            int LA143_3 = input.LA(3);

                            if ( (LA143_3==CURLY_BRACKET_OPEN) ) {
                                alt143=2;
                            }
                            else if ( (LA143_3==UNDERSCORE) ) {
                                alt143=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 143, 3, input);

                                throw nvae;
                            }
                            }
                            break;
                        case CURLY_BRACKET_OPEN:
                            {
                            alt143=2;
                            }
                            break;
                        case UNDERSCORE:
                            {
                            alt143=1;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 143, 1, input);

                            throw nvae;
                        }

                    }
                    else if ( ((LA143_0>=A_DOUBLE_ARROW && LA143_0<=U_DOUBLE_ARROW)) ) {
                        alt143=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 143, 0, input);

                        throw nvae;
                    }
                    switch (alt143) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:607:36: PERIOD ( NL )? importall
                            {
                            PERIOD293=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_st_import3726); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD293);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:607:43: ( NL )?
                            int alt140=2;
                            int LA140_0 = input.LA(1);

                            if ( (LA140_0==NL) ) {
                                alt140=1;
                            }
                            switch (alt140) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:607:43: NL
                                    {
                                    NL294=(Token)match(input,NL,FOLLOW_NL_in_st_import3728); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL294);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_importall_in_st_import3731);
                            importall295=importall();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_importall.add(importall295.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:607:59: PERIOD ( NL )? importset
                            {
                            PERIOD296=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_st_import3735); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD296);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:607:66: ( NL )?
                            int alt141=2;
                            int LA141_0 = input.LA(1);

                            if ( (LA141_0==NL) ) {
                                alt141=1;
                            }
                            switch (alt141) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:607:66: NL
                                    {
                                    NL297=(Token)match(input,NL,FOLLOW_NL_in_st_import3737); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL297);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_importset_in_st_import3740);
                            importset298=importset();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_importset.add(importset298.getTree());

                            }
                            break;
                        case 3 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:607:82: token_DOUBLE_ARROW ( NL )? Id
                            {
                            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_st_import3744);
                            token_DOUBLE_ARROW299=token_DOUBLE_ARROW();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW299.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:607:101: ( NL )?
                            int alt142=2;
                            int LA142_0 = input.LA(1);

                            if ( (LA142_0==NL) ) {
                                alt142=1;
                            }
                            switch (alt142) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:607:101: NL
                                    {
                                    NL300=(Token)match(input,NL,FOLLOW_NL_in_st_import3746); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL300);


                                    }
                                    break;

                            }

                            Id301=(Token)match(input,Id,FOLLOW_Id_in_st_import3749); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Id.add(Id301);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: importall, L_import, Id, importset, importprefix
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 607:111: -> ^( L_import importprefix ( importall )? ( importset )? ( Id )? )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:607:114: ^( L_import importprefix ( importall )? ( importset )? ( Id )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_L_import.nextNode(), root_1);

                adaptor.addChild(root_1, stream_importprefix.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:607:138: ( importall )?
                if ( stream_importall.hasNext() ) {
                    adaptor.addChild(root_1, stream_importall.nextTree());

                }
                stream_importall.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:607:149: ( importset )?
                if ( stream_importset.hasNext() ) {
                    adaptor.addChild(root_1, stream_importset.nextTree());

                }
                stream_importset.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:607:160: ( Id )?
                if ( stream_Id.hasNext() ) {
                    adaptor.addChild(root_1, stream_Id.nextNode());

                }
                stream_Id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_import"

    public static class expr_or_assign_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_or_assign"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:609:1: expr_or_assign : ( ( Id ( NL )? left_modify )=> Id ( NL )? left_modify ( NL )? expr -> ^( LENS_MODIFY_LEFT left_modify Id expr ) | ( Id ( NL )? right_modify )=> Id ( NL )? right_modify ( NL )? expr -> ^( LENS_MODIFY_RIGHT right_modify Id expr ) | ( Id ( NL )? '=' )=> Id ( NL )? '=' ( NL )? expr -> ^( LENS_ASSIGN Id expr ) | ( pattern ( NL )? '=' )=> pattern ( NL )? '=' ( NL )? expr -> ^( ASSIGN pattern expr ) | ( term_expr ( NL )? left_modify )=> term_expr ( NL )? left_modify ( NL )? expr -> ^( LENS_MODIFY_LEFT left_modify term_expr expr ) | ( term_expr ( NL )? right_modify )=> term_expr ( NL )? right_modify ( NL )? expr -> ^( LENS_MODIFY_RIGHT right_modify term_expr expr ) | ( term_expr ( NL )? '=' )=> term_expr ( NL )? '=' ( NL )? expr -> ^( LENS_ASSIGN term_expr expr ) | expr );
    public final babel17Parser.expr_or_assign_return expr_or_assign() throws RecognitionException {
        babel17Parser.expr_or_assign_return retval = new babel17Parser.expr_or_assign_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id302=null;
        Token NL303=null;
        Token NL305=null;
        Token Id307=null;
        Token NL308=null;
        Token NL310=null;
        Token Id312=null;
        Token NL313=null;
        Token char_literal314=null;
        Token NL315=null;
        Token NL318=null;
        Token char_literal319=null;
        Token NL320=null;
        Token NL323=null;
        Token NL325=null;
        Token NL328=null;
        Token NL330=null;
        Token NL333=null;
        Token char_literal334=null;
        Token NL335=null;
        babel17Parser.left_modify_return left_modify304 = null;

        babel17Parser.expr_return expr306 = null;

        babel17Parser.right_modify_return right_modify309 = null;

        babel17Parser.expr_return expr311 = null;

        babel17Parser.expr_return expr316 = null;

        babel17Parser.pattern_return pattern317 = null;

        babel17Parser.expr_return expr321 = null;

        babel17Parser.term_expr_return term_expr322 = null;

        babel17Parser.left_modify_return left_modify324 = null;

        babel17Parser.expr_return expr326 = null;

        babel17Parser.term_expr_return term_expr327 = null;

        babel17Parser.right_modify_return right_modify329 = null;

        babel17Parser.expr_return expr331 = null;

        babel17Parser.term_expr_return term_expr332 = null;

        babel17Parser.expr_return expr336 = null;

        babel17Parser.expr_return expr337 = null;


        CommonTree Id302_tree=null;
        CommonTree NL303_tree=null;
        CommonTree NL305_tree=null;
        CommonTree Id307_tree=null;
        CommonTree NL308_tree=null;
        CommonTree NL310_tree=null;
        CommonTree Id312_tree=null;
        CommonTree NL313_tree=null;
        CommonTree char_literal314_tree=null;
        CommonTree NL315_tree=null;
        CommonTree NL318_tree=null;
        CommonTree char_literal319_tree=null;
        CommonTree NL320_tree=null;
        CommonTree NL323_tree=null;
        CommonTree NL325_tree=null;
        CommonTree NL328_tree=null;
        CommonTree NL330_tree=null;
        CommonTree NL333_tree=null;
        CommonTree char_literal334_tree=null;
        CommonTree NL335_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_right_modify=new RewriteRuleSubtreeStream(adaptor,"rule right_modify");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_left_modify=new RewriteRuleSubtreeStream(adaptor,"rule left_modify");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_term_expr=new RewriteRuleSubtreeStream(adaptor,"rule term_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:611:2: ( ( Id ( NL )? left_modify )=> Id ( NL )? left_modify ( NL )? expr -> ^( LENS_MODIFY_LEFT left_modify Id expr ) | ( Id ( NL )? right_modify )=> Id ( NL )? right_modify ( NL )? expr -> ^( LENS_MODIFY_RIGHT right_modify Id expr ) | ( Id ( NL )? '=' )=> Id ( NL )? '=' ( NL )? expr -> ^( LENS_ASSIGN Id expr ) | ( pattern ( NL )? '=' )=> pattern ( NL )? '=' ( NL )? expr -> ^( ASSIGN pattern expr ) | ( term_expr ( NL )? left_modify )=> term_expr ( NL )? left_modify ( NL )? expr -> ^( LENS_MODIFY_LEFT left_modify term_expr expr ) | ( term_expr ( NL )? right_modify )=> term_expr ( NL )? right_modify ( NL )? expr -> ^( LENS_MODIFY_RIGHT right_modify term_expr expr ) | ( term_expr ( NL )? '=' )=> term_expr ( NL )? '=' ( NL )? expr -> ^( LENS_ASSIGN term_expr expr ) | expr )
            int alt159=8;
            alt159 = dfa159.predict(input);
            switch (alt159) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:611:4: ( Id ( NL )? left_modify )=> Id ( NL )? left_modify ( NL )? expr
                    {
                    Id302=(Token)match(input,Id,FOLLOW_Id_in_expr_or_assign3792); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id302);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:611:31: ( NL )?
                    int alt145=2;
                    int LA145_0 = input.LA(1);

                    if ( (LA145_0==NL) ) {
                        alt145=1;
                    }
                    switch (alt145) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:611:31: NL
                            {
                            NL303=(Token)match(input,NL,FOLLOW_NL_in_expr_or_assign3794); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL303);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_left_modify_in_expr_or_assign3797);
                    left_modify304=left_modify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_left_modify.add(left_modify304.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:611:47: ( NL )?
                    int alt146=2;
                    int LA146_0 = input.LA(1);

                    if ( (LA146_0==NL) ) {
                        alt146=1;
                    }
                    switch (alt146) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:611:47: NL
                            {
                            NL305=(Token)match(input,NL,FOLLOW_NL_in_expr_or_assign3799); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL305);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_expr_or_assign3802);
                    expr306=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr306.getTree());


                    // AST REWRITE
                    // elements: Id, expr, left_modify
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 611:56: -> ^( LENS_MODIFY_LEFT left_modify Id expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:611:59: ^( LENS_MODIFY_LEFT left_modify Id expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LENS_MODIFY_LEFT, "LENS_MODIFY_LEFT"), root_1);

                        adaptor.addChild(root_1, stream_left_modify.nextTree());
                        adaptor.addChild(root_1, stream_Id.nextNode());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:612:4: ( Id ( NL )? right_modify )=> Id ( NL )? right_modify ( NL )? expr
                    {
                    Id307=(Token)match(input,Id,FOLLOW_Id_in_expr_or_assign3831); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id307);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:612:32: ( NL )?
                    int alt147=2;
                    int LA147_0 = input.LA(1);

                    if ( (LA147_0==NL) ) {
                        alt147=1;
                    }
                    switch (alt147) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:612:32: NL
                            {
                            NL308=(Token)match(input,NL,FOLLOW_NL_in_expr_or_assign3833); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL308);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_right_modify_in_expr_or_assign3836);
                    right_modify309=right_modify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_right_modify.add(right_modify309.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:612:49: ( NL )?
                    int alt148=2;
                    int LA148_0 = input.LA(1);

                    if ( (LA148_0==NL) ) {
                        alt148=1;
                    }
                    switch (alt148) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:612:49: NL
                            {
                            NL310=(Token)match(input,NL,FOLLOW_NL_in_expr_or_assign3838); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL310);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_expr_or_assign3841);
                    expr311=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr311.getTree());


                    // AST REWRITE
                    // elements: Id, expr, right_modify
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 612:58: -> ^( LENS_MODIFY_RIGHT right_modify Id expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:612:61: ^( LENS_MODIFY_RIGHT right_modify Id expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LENS_MODIFY_RIGHT, "LENS_MODIFY_RIGHT"), root_1);

                        adaptor.addChild(root_1, stream_right_modify.nextTree());
                        adaptor.addChild(root_1, stream_Id.nextNode());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:4: ( Id ( NL )? '=' )=> Id ( NL )? '=' ( NL )? expr
                    {
                    Id312=(Token)match(input,Id,FOLLOW_Id_in_expr_or_assign3872); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id312);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:24: ( NL )?
                    int alt149=2;
                    int LA149_0 = input.LA(1);

                    if ( (LA149_0==NL) ) {
                        alt149=1;
                    }
                    switch (alt149) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:24: NL
                            {
                            NL313=(Token)match(input,NL,FOLLOW_NL_in_expr_or_assign3874); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL313);


                            }
                            break;

                    }

                    char_literal314=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_expr_or_assign3877); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal314);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:32: ( NL )?
                    int alt150=2;
                    int LA150_0 = input.LA(1);

                    if ( (LA150_0==NL) ) {
                        alt150=1;
                    }
                    switch (alt150) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:32: NL
                            {
                            NL315=(Token)match(input,NL,FOLLOW_NL_in_expr_or_assign3879); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL315);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_expr_or_assign3882);
                    expr316=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr316.getTree());


                    // AST REWRITE
                    // elements: expr, Id
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 613:41: -> ^( LENS_ASSIGN Id expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:44: ^( LENS_ASSIGN Id expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LENS_ASSIGN, "LENS_ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:614:4: ( pattern ( NL )? '=' )=> pattern ( NL )? '=' ( NL )? expr
                    {
                    pushFollow(FOLLOW_pattern_in_expr_or_assign3909);
                    pattern317=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern317.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:614:34: ( NL )?
                    int alt151=2;
                    int LA151_0 = input.LA(1);

                    if ( (LA151_0==NL) ) {
                        alt151=1;
                    }
                    switch (alt151) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:614:34: NL
                            {
                            NL318=(Token)match(input,NL,FOLLOW_NL_in_expr_or_assign3911); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL318);


                            }
                            break;

                    }

                    char_literal319=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_expr_or_assign3914); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal319);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:614:42: ( NL )?
                    int alt152=2;
                    int LA152_0 = input.LA(1);

                    if ( (LA152_0==NL) ) {
                        alt152=1;
                    }
                    switch (alt152) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:614:42: NL
                            {
                            NL320=(Token)match(input,NL,FOLLOW_NL_in_expr_or_assign3916); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL320);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_expr_or_assign3919);
                    expr321=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr321.getTree());


                    // AST REWRITE
                    // elements: pattern, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 614:51: -> ^( ASSIGN pattern expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:614:54: ^( ASSIGN pattern expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_pattern.nextTree());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:615:4: ( term_expr ( NL )? left_modify )=> term_expr ( NL )? left_modify ( NL )? expr
                    {
                    pushFollow(FOLLOW_term_expr_in_expr_or_assign3945);
                    term_expr322=term_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_term_expr.add(term_expr322.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:615:45: ( NL )?
                    int alt153=2;
                    int LA153_0 = input.LA(1);

                    if ( (LA153_0==NL) ) {
                        alt153=1;
                    }
                    switch (alt153) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:615:45: NL
                            {
                            NL323=(Token)match(input,NL,FOLLOW_NL_in_expr_or_assign3947); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL323);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_left_modify_in_expr_or_assign3950);
                    left_modify324=left_modify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_left_modify.add(left_modify324.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:615:61: ( NL )?
                    int alt154=2;
                    int LA154_0 = input.LA(1);

                    if ( (LA154_0==NL) ) {
                        alt154=1;
                    }
                    switch (alt154) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:615:61: NL
                            {
                            NL325=(Token)match(input,NL,FOLLOW_NL_in_expr_or_assign3952); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL325);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_expr_or_assign3955);
                    expr326=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr326.getTree());


                    // AST REWRITE
                    // elements: left_modify, term_expr, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 615:70: -> ^( LENS_MODIFY_LEFT left_modify term_expr expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:615:73: ^( LENS_MODIFY_LEFT left_modify term_expr expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LENS_MODIFY_LEFT, "LENS_MODIFY_LEFT"), root_1);

                        adaptor.addChild(root_1, stream_left_modify.nextTree());
                        adaptor.addChild(root_1, stream_term_expr.nextTree());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:616:4: ( term_expr ( NL )? right_modify )=> term_expr ( NL )? right_modify ( NL )? expr
                    {
                    pushFollow(FOLLOW_term_expr_in_expr_or_assign3984);
                    term_expr327=term_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_term_expr.add(term_expr327.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:616:46: ( NL )?
                    int alt155=2;
                    int LA155_0 = input.LA(1);

                    if ( (LA155_0==NL) ) {
                        alt155=1;
                    }
                    switch (alt155) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:616:46: NL
                            {
                            NL328=(Token)match(input,NL,FOLLOW_NL_in_expr_or_assign3986); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL328);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_right_modify_in_expr_or_assign3989);
                    right_modify329=right_modify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_right_modify.add(right_modify329.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:616:63: ( NL )?
                    int alt156=2;
                    int LA156_0 = input.LA(1);

                    if ( (LA156_0==NL) ) {
                        alt156=1;
                    }
                    switch (alt156) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:616:63: NL
                            {
                            NL330=(Token)match(input,NL,FOLLOW_NL_in_expr_or_assign3991); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL330);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_expr_or_assign3994);
                    expr331=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr331.getTree());


                    // AST REWRITE
                    // elements: expr, term_expr, right_modify
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 616:72: -> ^( LENS_MODIFY_RIGHT right_modify term_expr expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:616:75: ^( LENS_MODIFY_RIGHT right_modify term_expr expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LENS_MODIFY_RIGHT, "LENS_MODIFY_RIGHT"), root_1);

                        adaptor.addChild(root_1, stream_right_modify.nextTree());
                        adaptor.addChild(root_1, stream_term_expr.nextTree());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:617:4: ( term_expr ( NL )? '=' )=> term_expr ( NL )? '=' ( NL )? expr
                    {
                    pushFollow(FOLLOW_term_expr_in_expr_or_assign4024);
                    term_expr332=term_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_term_expr.add(term_expr332.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:617:38: ( NL )?
                    int alt157=2;
                    int LA157_0 = input.LA(1);

                    if ( (LA157_0==NL) ) {
                        alt157=1;
                    }
                    switch (alt157) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:617:38: NL
                            {
                            NL333=(Token)match(input,NL,FOLLOW_NL_in_expr_or_assign4026); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL333);


                            }
                            break;

                    }

                    char_literal334=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_expr_or_assign4029); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal334);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:617:46: ( NL )?
                    int alt158=2;
                    int LA158_0 = input.LA(1);

                    if ( (LA158_0==NL) ) {
                        alt158=1;
                    }
                    switch (alt158) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:617:46: NL
                            {
                            NL335=(Token)match(input,NL,FOLLOW_NL_in_expr_or_assign4031); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL335);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_expr_or_assign4034);
                    expr336=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr336.getTree());


                    // AST REWRITE
                    // elements: term_expr, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 617:55: -> ^( LENS_ASSIGN term_expr expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:617:58: ^( LENS_ASSIGN term_expr expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LENS_ASSIGN, "LENS_ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_term_expr.nextTree());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:618:4: expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expr_in_expr_or_assign4049);
                    expr337=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr337.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expr_or_assign"

    public static class left_modify_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "left_modify"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:620:1: left_modify : ( ML_plus | ML_plusplus | ML_minus | ML_minusminus | ML_times | ML_timestimes | ML_slash | ML_slashslash | ML_pow | left_modify_op '=' );
    public final babel17Parser.left_modify_return left_modify() throws RecognitionException {
        babel17Parser.left_modify_return retval = new babel17Parser.left_modify_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ML_plus338=null;
        Token ML_plusplus339=null;
        Token ML_minus340=null;
        Token ML_minusminus341=null;
        Token ML_times342=null;
        Token ML_timestimes343=null;
        Token ML_slash344=null;
        Token ML_slashslash345=null;
        Token ML_pow346=null;
        Token char_literal348=null;
        babel17Parser.left_modify_op_return left_modify_op347 = null;


        CommonTree ML_plus338_tree=null;
        CommonTree ML_plusplus339_tree=null;
        CommonTree ML_minus340_tree=null;
        CommonTree ML_minusminus341_tree=null;
        CommonTree ML_times342_tree=null;
        CommonTree ML_timestimes343_tree=null;
        CommonTree ML_slash344_tree=null;
        CommonTree ML_slashslash345_tree=null;
        CommonTree ML_pow346_tree=null;
        CommonTree char_literal348_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:621:2: ( ML_plus | ML_plusplus | ML_minus | ML_minusminus | ML_times | ML_timestimes | ML_slash | ML_slashslash | ML_pow | left_modify_op '=' )
            int alt160=10;
            switch ( input.LA(1) ) {
            case ML_plus:
                {
                alt160=1;
                }
                break;
            case ML_plusplus:
                {
                alt160=2;
                }
                break;
            case ML_minus:
                {
                alt160=3;
                }
                break;
            case ML_minusminus:
                {
                alt160=4;
                }
                break;
            case ML_times:
                {
                alt160=5;
                }
                break;
            case ML_timestimes:
                {
                alt160=6;
                }
                break;
            case ML_slash:
                {
                alt160=7;
                }
                break;
            case ML_slashslash:
                {
                alt160=8;
                }
                break;
            case ML_pow:
                {
                alt160=9;
                }
                break;
            case L_div:
            case L_mod:
            case L_and:
            case L_or:
            case L_xor:
            case L_min:
            case L_max:
                {
                alt160=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);

                throw nvae;
            }

            switch (alt160) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:621:4: ML_plus
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ML_plus338=(Token)match(input,ML_plus,FOLLOW_ML_plus_in_left_modify4059); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ML_plus338_tree = (CommonTree)adaptor.create(ML_plus338);
                    adaptor.addChild(root_0, ML_plus338_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:621:14: ML_plusplus
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ML_plusplus339=(Token)match(input,ML_plusplus,FOLLOW_ML_plusplus_in_left_modify4063); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ML_plusplus339_tree = (CommonTree)adaptor.create(ML_plusplus339);
                    adaptor.addChild(root_0, ML_plusplus339_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:621:28: ML_minus
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ML_minus340=(Token)match(input,ML_minus,FOLLOW_ML_minus_in_left_modify4067); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ML_minus340_tree = (CommonTree)adaptor.create(ML_minus340);
                    adaptor.addChild(root_0, ML_minus340_tree);
                    }

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:621:39: ML_minusminus
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ML_minusminus341=(Token)match(input,ML_minusminus,FOLLOW_ML_minusminus_in_left_modify4071); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ML_minusminus341_tree = (CommonTree)adaptor.create(ML_minusminus341);
                    adaptor.addChild(root_0, ML_minusminus341_tree);
                    }

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:621:55: ML_times
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ML_times342=(Token)match(input,ML_times,FOLLOW_ML_times_in_left_modify4075); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ML_times342_tree = (CommonTree)adaptor.create(ML_times342);
                    adaptor.addChild(root_0, ML_times342_tree);
                    }

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:621:66: ML_timestimes
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ML_timestimes343=(Token)match(input,ML_timestimes,FOLLOW_ML_timestimes_in_left_modify4079); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ML_timestimes343_tree = (CommonTree)adaptor.create(ML_timestimes343);
                    adaptor.addChild(root_0, ML_timestimes343_tree);
                    }

                    }
                    break;
                case 7 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:621:82: ML_slash
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ML_slash344=(Token)match(input,ML_slash,FOLLOW_ML_slash_in_left_modify4083); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ML_slash344_tree = (CommonTree)adaptor.create(ML_slash344);
                    adaptor.addChild(root_0, ML_slash344_tree);
                    }

                    }
                    break;
                case 8 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:621:93: ML_slashslash
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ML_slashslash345=(Token)match(input,ML_slashslash,FOLLOW_ML_slashslash_in_left_modify4087); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ML_slashslash345_tree = (CommonTree)adaptor.create(ML_slashslash345);
                    adaptor.addChild(root_0, ML_slashslash345_tree);
                    }

                    }
                    break;
                case 9 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:621:109: ML_pow
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ML_pow346=(Token)match(input,ML_pow,FOLLOW_ML_pow_in_left_modify4091); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ML_pow346_tree = (CommonTree)adaptor.create(ML_pow346);
                    adaptor.addChild(root_0, ML_pow346_tree);
                    }

                    }
                    break;
                case 10 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:621:118: left_modify_op '='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_left_modify_op_in_left_modify4095);
                    left_modify_op347=left_modify_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(left_modify_op347.getTree(), root_0);
                    char_literal348=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_left_modify4098); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "left_modify"

    public static class right_modify_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "right_modify"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:623:1: right_modify : ( MR_plus | MR_plusplus | MR_minus | MR_minusminus | MR_times | MR_timestimes | MR_slash | MR_slashslash | MR_pow | '=' right_modify_op );
    public final babel17Parser.right_modify_return right_modify() throws RecognitionException {
        babel17Parser.right_modify_return retval = new babel17Parser.right_modify_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MR_plus349=null;
        Token MR_plusplus350=null;
        Token MR_minus351=null;
        Token MR_minusminus352=null;
        Token MR_times353=null;
        Token MR_timestimes354=null;
        Token MR_slash355=null;
        Token MR_slashslash356=null;
        Token MR_pow357=null;
        Token char_literal358=null;
        babel17Parser.right_modify_op_return right_modify_op359 = null;


        CommonTree MR_plus349_tree=null;
        CommonTree MR_plusplus350_tree=null;
        CommonTree MR_minus351_tree=null;
        CommonTree MR_minusminus352_tree=null;
        CommonTree MR_times353_tree=null;
        CommonTree MR_timestimes354_tree=null;
        CommonTree MR_slash355_tree=null;
        CommonTree MR_slashslash356_tree=null;
        CommonTree MR_pow357_tree=null;
        CommonTree char_literal358_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:624:2: ( MR_plus | MR_plusplus | MR_minus | MR_minusminus | MR_times | MR_timestimes | MR_slash | MR_slashslash | MR_pow | '=' right_modify_op )
            int alt161=10;
            switch ( input.LA(1) ) {
            case MR_plus:
                {
                alt161=1;
                }
                break;
            case MR_plusplus:
                {
                alt161=2;
                }
                break;
            case MR_minus:
                {
                alt161=3;
                }
                break;
            case MR_minusminus:
                {
                alt161=4;
                }
                break;
            case MR_times:
                {
                alt161=5;
                }
                break;
            case MR_timestimes:
                {
                alt161=6;
                }
                break;
            case MR_slash:
                {
                alt161=7;
                }
                break;
            case MR_slashslash:
                {
                alt161=8;
                }
                break;
            case MR_pow:
                {
                alt161=9;
                }
                break;
            case ASSIGN:
                {
                alt161=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);

                throw nvae;
            }

            switch (alt161) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:624:4: MR_plus
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MR_plus349=(Token)match(input,MR_plus,FOLLOW_MR_plus_in_right_modify4108); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MR_plus349_tree = (CommonTree)adaptor.create(MR_plus349);
                    adaptor.addChild(root_0, MR_plus349_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:624:14: MR_plusplus
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MR_plusplus350=(Token)match(input,MR_plusplus,FOLLOW_MR_plusplus_in_right_modify4112); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MR_plusplus350_tree = (CommonTree)adaptor.create(MR_plusplus350);
                    adaptor.addChild(root_0, MR_plusplus350_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:624:28: MR_minus
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MR_minus351=(Token)match(input,MR_minus,FOLLOW_MR_minus_in_right_modify4116); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MR_minus351_tree = (CommonTree)adaptor.create(MR_minus351);
                    adaptor.addChild(root_0, MR_minus351_tree);
                    }

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:624:39: MR_minusminus
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MR_minusminus352=(Token)match(input,MR_minusminus,FOLLOW_MR_minusminus_in_right_modify4120); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MR_minusminus352_tree = (CommonTree)adaptor.create(MR_minusminus352);
                    adaptor.addChild(root_0, MR_minusminus352_tree);
                    }

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:624:55: MR_times
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MR_times353=(Token)match(input,MR_times,FOLLOW_MR_times_in_right_modify4124); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MR_times353_tree = (CommonTree)adaptor.create(MR_times353);
                    adaptor.addChild(root_0, MR_times353_tree);
                    }

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:624:66: MR_timestimes
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MR_timestimes354=(Token)match(input,MR_timestimes,FOLLOW_MR_timestimes_in_right_modify4128); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MR_timestimes354_tree = (CommonTree)adaptor.create(MR_timestimes354);
                    adaptor.addChild(root_0, MR_timestimes354_tree);
                    }

                    }
                    break;
                case 7 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:624:82: MR_slash
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MR_slash355=(Token)match(input,MR_slash,FOLLOW_MR_slash_in_right_modify4132); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MR_slash355_tree = (CommonTree)adaptor.create(MR_slash355);
                    adaptor.addChild(root_0, MR_slash355_tree);
                    }

                    }
                    break;
                case 8 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:624:93: MR_slashslash
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MR_slashslash356=(Token)match(input,MR_slashslash,FOLLOW_MR_slashslash_in_right_modify4136); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MR_slashslash356_tree = (CommonTree)adaptor.create(MR_slashslash356);
                    adaptor.addChild(root_0, MR_slashslash356_tree);
                    }

                    }
                    break;
                case 9 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:624:109: MR_pow
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MR_pow357=(Token)match(input,MR_pow,FOLLOW_MR_pow_in_right_modify4140); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MR_pow357_tree = (CommonTree)adaptor.create(MR_pow357);
                    adaptor.addChild(root_0, MR_pow357_tree);
                    }

                    }
                    break;
                case 10 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:624:118: '=' right_modify_op
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal358=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_right_modify4144); if (state.failed) return retval;
                    pushFollow(FOLLOW_right_modify_op_in_right_modify4147);
                    right_modify_op359=right_modify_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(right_modify_op359.getTree(), root_0);

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "right_modify"

    public static class right_modify_op_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "right_modify_op"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:626:1: right_modify_op : ( token_AND | token_OR | token_XOR | L_div | L_mod );
    public final babel17Parser.right_modify_op_return right_modify_op() throws RecognitionException {
        babel17Parser.right_modify_op_return retval = new babel17Parser.right_modify_op_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_div363=null;
        Token L_mod364=null;
        babel17Parser.token_AND_return token_AND360 = null;

        babel17Parser.token_OR_return token_OR361 = null;

        babel17Parser.token_XOR_return token_XOR362 = null;


        CommonTree L_div363_tree=null;
        CommonTree L_mod364_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:627:2: ( token_AND | token_OR | token_XOR | L_div | L_mod )
            int alt162=5;
            switch ( input.LA(1) ) {
            case L_and:
                {
                alt162=1;
                }
                break;
            case L_or:
                {
                alt162=2;
                }
                break;
            case L_xor:
                {
                alt162=3;
                }
                break;
            case L_div:
                {
                alt162=4;
                }
                break;
            case L_mod:
                {
                alt162=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                throw nvae;
            }

            switch (alt162) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:627:4: token_AND
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_AND_in_right_modify_op4157);
                    token_AND360=token_AND();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_AND360.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:627:16: token_OR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_OR_in_right_modify_op4161);
                    token_OR361=token_OR();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_OR361.getTree());

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:627:27: token_XOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_XOR_in_right_modify_op4165);
                    token_XOR362=token_XOR();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_XOR362.getTree());

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:627:39: L_div
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_div363=(Token)match(input,L_div,FOLLOW_L_div_in_right_modify_op4169); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_div363_tree = (CommonTree)adaptor.create(L_div363);
                    adaptor.addChild(root_0, L_div363_tree);
                    }

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:627:47: L_mod
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_mod364=(Token)match(input,L_mod,FOLLOW_L_mod_in_right_modify_op4173); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_mod364_tree = (CommonTree)adaptor.create(L_mod364);
                    adaptor.addChild(root_0, L_mod364_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "right_modify_op"

    public static class left_modify_op_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "left_modify_op"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:629:1: left_modify_op : ( right_modify_op | L_min | L_max );
    public final babel17Parser.left_modify_op_return left_modify_op() throws RecognitionException {
        babel17Parser.left_modify_op_return retval = new babel17Parser.left_modify_op_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_min366=null;
        Token L_max367=null;
        babel17Parser.right_modify_op_return right_modify_op365 = null;


        CommonTree L_min366_tree=null;
        CommonTree L_max367_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:630:2: ( right_modify_op | L_min | L_max )
            int alt163=3;
            switch ( input.LA(1) ) {
            case L_div:
            case L_mod:
            case L_and:
            case L_or:
            case L_xor:
                {
                alt163=1;
                }
                break;
            case L_min:
                {
                alt163=2;
                }
                break;
            case L_max:
                {
                alt163=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 163, 0, input);

                throw nvae;
            }

            switch (alt163) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:630:4: right_modify_op
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_right_modify_op_in_left_modify_op4182);
                    right_modify_op365=right_modify_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, right_modify_op365.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:630:22: L_min
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_min366=(Token)match(input,L_min,FOLLOW_L_min_in_left_modify_op4186); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_min366_tree = (CommonTree)adaptor.create(L_min366);
                    adaptor.addChild(root_0, L_min366_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:630:30: L_max
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_max367=(Token)match(input,L_max,FOLLOW_L_max_in_left_modify_op4190); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_max367_tree = (CommonTree)adaptor.create(L_max367);
                    adaptor.addChild(root_0, L_max367_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "left_modify_op"

    public static class expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:632:1: expr : lop_expr ;
    public final babel17Parser.expr_return expr() throws RecognitionException {
        babel17Parser.expr_return retval = new babel17Parser.expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.lop_expr_return lop_expr368 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:633:2: ( lop_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:633:4: lop_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_lop_expr_in_expr4202);
            lop_expr368=lop_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lop_expr368.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expr"

    public static class control_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "control_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:636:1: control_expr : ( if_expr | while_do_expr | match_expr | for_expr | try_expr | begin_end );
    public final babel17Parser.control_expr_return control_expr() throws RecognitionException {
        babel17Parser.control_expr_return retval = new babel17Parser.control_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.if_expr_return if_expr369 = null;

        babel17Parser.while_do_expr_return while_do_expr370 = null;

        babel17Parser.match_expr_return match_expr371 = null;

        babel17Parser.for_expr_return for_expr372 = null;

        babel17Parser.try_expr_return try_expr373 = null;

        babel17Parser.begin_end_return begin_end374 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:637:2: ( if_expr | while_do_expr | match_expr | for_expr | try_expr | begin_end )
            int alt164=6;
            switch ( input.LA(1) ) {
            case L_if:
                {
                alt164=1;
                }
                break;
            case L_while:
                {
                alt164=2;
                }
                break;
            case L_match:
                {
                alt164=3;
                }
                break;
            case L_for:
                {
                alt164=4;
                }
                break;
            case L_try:
                {
                alt164=5;
                }
                break;
            case L_begin:
                {
                alt164=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 164, 0, input);

                throw nvae;
            }

            switch (alt164) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:637:4: if_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_if_expr_in_control_expr4214);
                    if_expr369=if_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_expr369.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:638:4: while_do_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_while_do_expr_in_control_expr4219);
                    while_do_expr370=while_do_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_do_expr370.getTree());

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:639:4: match_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_match_expr_in_control_expr4224);
                    match_expr371=match_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, match_expr371.getTree());

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:640:4: for_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_for_expr_in_control_expr4229);
                    for_expr372=for_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_expr372.getTree());

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:641:5: try_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_try_expr_in_control_expr4235);
                    try_expr373=try_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, try_expr373.getTree());

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:642:4: begin_end
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_begin_end_in_control_expr4240);
                    begin_end374=begin_end();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, begin_end374.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "control_expr"

    public static class with_control_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "with_control_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:644:1: with_control_expr : ( control_expr | L_with ( NL )? protected_expr ( NL )? L_do block L_end -> ^( WITH protected_expr ^( BEGIN block ) ) );
    public final babel17Parser.with_control_expr_return with_control_expr() throws RecognitionException {
        babel17Parser.with_control_expr_return retval = new babel17Parser.with_control_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_with376=null;
        Token NL377=null;
        Token NL379=null;
        Token L_do380=null;
        Token L_end382=null;
        babel17Parser.control_expr_return control_expr375 = null;

        babel17Parser.protected_expr_return protected_expr378 = null;

        babel17Parser.block_return block381 = null;


        CommonTree L_with376_tree=null;
        CommonTree NL377_tree=null;
        CommonTree NL379_tree=null;
        CommonTree L_do380_tree=null;
        CommonTree L_end382_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_do=new RewriteRuleTokenStream(adaptor,"token L_do");
        RewriteRuleTokenStream stream_L_with=new RewriteRuleTokenStream(adaptor,"token L_with");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:645:2: ( control_expr | L_with ( NL )? protected_expr ( NL )? L_do block L_end -> ^( WITH protected_expr ^( BEGIN block ) ) )
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==L_begin||LA167_0==L_if||(LA167_0>=L_while && LA167_0<=L_for)||LA167_0==L_match||LA167_0==L_try) ) {
                alt167=1;
            }
            else if ( (LA167_0==L_with) ) {
                alt167=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;
            }
            switch (alt167) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:645:4: control_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_control_expr_in_with_control_expr4250);
                    control_expr375=control_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, control_expr375.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:646:4: L_with ( NL )? protected_expr ( NL )? L_do block L_end
                    {
                    L_with376=(Token)match(input,L_with,FOLLOW_L_with_in_with_control_expr4255); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_with.add(L_with376);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:646:11: ( NL )?
                    int alt165=2;
                    int LA165_0 = input.LA(1);

                    if ( (LA165_0==NL) ) {
                        alt165=1;
                    }
                    switch (alt165) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:646:11: NL
                            {
                            NL377=(Token)match(input,NL,FOLLOW_NL_in_with_control_expr4257); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL377);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_in_with_control_expr4260);
                    protected_expr378=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr378.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:646:30: ( NL )?
                    int alt166=2;
                    int LA166_0 = input.LA(1);

                    if ( (LA166_0==NL) ) {
                        alt166=1;
                    }
                    switch (alt166) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:646:30: NL
                            {
                            NL379=(Token)match(input,NL,FOLLOW_NL_in_with_control_expr4262); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL379);


                            }
                            break;

                    }

                    L_do380=(Token)match(input,L_do,FOLLOW_L_do_in_with_control_expr4265); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_do.add(L_do380);

                    pushFollow(FOLLOW_block_in_with_control_expr4267);
                    block381=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block381.getTree());
                    L_end382=(Token)match(input,L_end,FOLLOW_L_end_in_with_control_expr4269); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_end.add(L_end382);



                    // AST REWRITE
                    // elements: block, protected_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 646:51: -> ^( WITH protected_expr ^( BEGIN block ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:646:54: ^( WITH protected_expr ^( BEGIN block ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WITH, "WITH"), root_1);

                        adaptor.addChild(root_1, stream_protected_expr.nextTree());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:646:76: ^( BEGIN block )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BEGIN, "BEGIN"), root_2);

                        adaptor.addChild(root_2, stream_block.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "with_control_expr"

    public static class protected_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "protected_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:649:1: protected_expr : p_lop_expr ;
    public final babel17Parser.protected_expr_return protected_expr() throws RecognitionException {
        babel17Parser.protected_expr_return retval = new babel17Parser.protected_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.p_lop_expr_return p_lop_expr383 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:650:2: ( p_lop_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:650:4: p_lop_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_lop_expr_in_protected_expr4294);
            p_lop_expr383=p_lop_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_lop_expr383.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "protected_expr"

    public static class protected_expr_nc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "protected_expr_nc"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:653:1: protected_expr_nc : protected_expr ;
    public final babel17Parser.protected_expr_nc_return protected_expr_nc() throws RecognitionException {
        babel17Parser.protected_expr_nc_return retval = new babel17Parser.protected_expr_nc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.protected_expr_return protected_expr384 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:654:2: ( protected_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:654:4: protected_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_protected_expr_in_protected_expr_nc4307);
            protected_expr384=protected_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, protected_expr384.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "protected_expr_nc"

    public static class begin_end_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "begin_end"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:656:1: begin_end : L_begin block L_end -> ^( BEGIN block ) ;
    public final babel17Parser.begin_end_return begin_end() throws RecognitionException {
        babel17Parser.begin_end_return retval = new babel17Parser.begin_end_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_begin385=null;
        Token L_end387=null;
        babel17Parser.block_return block386 = null;


        CommonTree L_begin385_tree=null;
        CommonTree L_end387_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_begin=new RewriteRuleTokenStream(adaptor,"token L_begin");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:657:2: ( L_begin block L_end -> ^( BEGIN block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:657:4: L_begin block L_end
            {
            L_begin385=(Token)match(input,L_begin,FOLLOW_L_begin_in_begin_end4317); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_begin.add(L_begin385);

            pushFollow(FOLLOW_block_in_begin_end4319);
            block386=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block386.getTree());
            L_end387=(Token)match(input,L_end,FOLLOW_L_end_in_begin_end4321); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end387);



            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 657:24: -> ^( BEGIN block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:657:27: ^( BEGIN block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BEGIN, "BEGIN"), root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "begin_end"

    public static class parents_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parents"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:660:1: parents : ( '+' primitive_expr -> ^( PARENTS_PLUS primitive_expr ) | '*' primitive_expr -> ^( PARENTS_MUL primitive_expr ) );
    public final babel17Parser.parents_return parents() throws RecognitionException {
        babel17Parser.parents_return retval = new babel17Parser.parents_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal388=null;
        Token char_literal390=null;
        babel17Parser.primitive_expr_return primitive_expr389 = null;

        babel17Parser.primitive_expr_return primitive_expr391 = null;


        CommonTree char_literal388_tree=null;
        CommonTree char_literal390_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_TIMES=new RewriteRuleTokenStream(adaptor,"token TIMES");
        RewriteRuleSubtreeStream stream_primitive_expr=new RewriteRuleSubtreeStream(adaptor,"rule primitive_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:660:9: ( '+' primitive_expr -> ^( PARENTS_PLUS primitive_expr ) | '*' primitive_expr -> ^( PARENTS_MUL primitive_expr ) )
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==PLUS) ) {
                alt168=1;
            }
            else if ( (LA168_0==TIMES) ) {
                alt168=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);

                throw nvae;
            }
            switch (alt168) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:660:11: '+' primitive_expr
                    {
                    char_literal388=(Token)match(input,PLUS,FOLLOW_PLUS_in_parents4339); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(char_literal388);

                    pushFollow(FOLLOW_primitive_expr_in_parents4341);
                    primitive_expr389=primitive_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitive_expr.add(primitive_expr389.getTree());


                    // AST REWRITE
                    // elements: primitive_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 660:30: -> ^( PARENTS_PLUS primitive_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:660:33: ^( PARENTS_PLUS primitive_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARENTS_PLUS, "PARENTS_PLUS"), root_1);

                        adaptor.addChild(root_1, stream_primitive_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:661:4: '*' primitive_expr
                    {
                    char_literal390=(Token)match(input,TIMES,FOLLOW_TIMES_in_parents4354); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMES.add(char_literal390);

                    pushFollow(FOLLOW_primitive_expr_in_parents4356);
                    primitive_expr391=primitive_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitive_expr.add(primitive_expr391.getTree());


                    // AST REWRITE
                    // elements: primitive_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 661:23: -> ^( PARENTS_MUL primitive_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:661:26: ^( PARENTS_MUL primitive_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARENTS_MUL, "PARENTS_MUL"), root_1);

                        adaptor.addChild(root_1, stream_primitive_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parents"

    public static class obj_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "obj_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:664:1: obj_expr : ( ( L_obj ( NL )? parents )=> L_obj ( NL )? parents block L_end -> ^( OBJ block parents ) | L_obj block L_end -> ^( OBJ block ) );
    public final babel17Parser.obj_expr_return obj_expr() throws RecognitionException {
        babel17Parser.obj_expr_return retval = new babel17Parser.obj_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_obj392=null;
        Token NL393=null;
        Token L_end396=null;
        Token L_obj397=null;
        Token L_end399=null;
        babel17Parser.parents_return parents394 = null;

        babel17Parser.block_return block395 = null;

        babel17Parser.block_return block398 = null;


        CommonTree L_obj392_tree=null;
        CommonTree NL393_tree=null;
        CommonTree L_end396_tree=null;
        CommonTree L_obj397_tree=null;
        CommonTree L_end399_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_obj=new RewriteRuleTokenStream(adaptor,"token L_obj");
        RewriteRuleSubtreeStream stream_parents=new RewriteRuleSubtreeStream(adaptor,"rule parents");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:664:9: ( ( L_obj ( NL )? parents )=> L_obj ( NL )? parents block L_end -> ^( OBJ block parents ) | L_obj block L_end -> ^( OBJ block ) )
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==L_obj) ) {
                int LA170_1 = input.LA(2);

                if ( (LA170_1==NL) ) {
                    int LA170_2 = input.LA(3);

                    if ( ((LA170_2>=L_begin && LA170_2<=L_if)||(LA170_2>=L_while && LA170_2<=L_for)||(LA170_2>=L_yield && LA170_2<=L_match)||(LA170_2>=L_val && LA170_2<=L_def)||LA170_2==L_exception||LA170_2==L_try||(LA170_2>=L_concurrent && LA170_2<=L_nil)||(LA170_2>=L_module && LA170_2<=L_import)||LA170_2==L_not||(LA170_2>=L_root && LA170_2<=L_lens)||LA170_2==SC||LA170_2==MINUS||(LA170_2>=A_ELLIPSIS && LA170_2<=U_ELLIPSIS)||LA170_2==L_force||(LA170_2>=NL && LA170_2<=Id)||(LA170_2>=Float && LA170_2<=Num)||(LA170_2>=String && LA170_2<=ROUND_BRACKET_OPEN)||LA170_2==SQUARE_BRACKET_OPEN||LA170_2==CURLY_BRACKET_OPEN||LA170_2==UNDERSCORE||(LA170_2>=PRAGMA_LOG && LA170_2<=PRAGMA_CATCH)) ) {
                        alt170=2;
                    }
                    else if ( (LA170_2==PLUS) && (synpred15_babel17())) {
                        alt170=1;
                    }
                    else if ( (LA170_2==TIMES) && (synpred15_babel17())) {
                        alt170=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 170, 2, input);

                        throw nvae;
                    }
                }
                else if ( ((LA170_1>=L_begin && LA170_1<=L_if)||(LA170_1>=L_while && LA170_1<=L_for)||(LA170_1>=L_yield && LA170_1<=L_match)||(LA170_1>=L_val && LA170_1<=L_def)||LA170_1==L_exception||LA170_1==L_try||(LA170_1>=L_concurrent && LA170_1<=L_nil)||(LA170_1>=L_module && LA170_1<=L_import)||LA170_1==L_not||(LA170_1>=L_root && LA170_1<=L_lens)||LA170_1==SC||LA170_1==MINUS||(LA170_1>=A_ELLIPSIS && LA170_1<=U_ELLIPSIS)||LA170_1==L_force||(LA170_1>=Constr && LA170_1<=Id)||(LA170_1>=Float && LA170_1<=Num)||(LA170_1>=String && LA170_1<=ROUND_BRACKET_OPEN)||LA170_1==SQUARE_BRACKET_OPEN||LA170_1==CURLY_BRACKET_OPEN||LA170_1==UNDERSCORE||(LA170_1>=PRAGMA_LOG && LA170_1<=PRAGMA_CATCH)) ) {
                    alt170=2;
                }
                else if ( (LA170_1==PLUS) && (synpred15_babel17())) {
                    alt170=1;
                }
                else if ( (LA170_1==TIMES) && (synpred15_babel17())) {
                    alt170=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 170, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);

                throw nvae;
            }
            switch (alt170) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:664:11: ( L_obj ( NL )? parents )=> L_obj ( NL )? parents block L_end
                    {
                    L_obj392=(Token)match(input,L_obj,FOLLOW_L_obj_in_obj_expr4384); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_obj.add(L_obj392);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:664:40: ( NL )?
                    int alt169=2;
                    int LA169_0 = input.LA(1);

                    if ( (LA169_0==NL) ) {
                        alt169=1;
                    }
                    switch (alt169) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:664:40: NL
                            {
                            NL393=(Token)match(input,NL,FOLLOW_NL_in_obj_expr4386); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL393);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_parents_in_obj_expr4389);
                    parents394=parents();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parents.add(parents394.getTree());
                    pushFollow(FOLLOW_block_in_obj_expr4391);
                    block395=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block395.getTree());
                    L_end396=(Token)match(input,L_end,FOLLOW_L_end_in_obj_expr4393); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_end.add(L_end396);



                    // AST REWRITE
                    // elements: parents, block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 664:64: -> ^( OBJ block parents )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:664:67: ^( OBJ block parents )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJ, "OBJ"), root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());
                        adaptor.addChild(root_1, stream_parents.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:665:17: L_obj block L_end
                    {
                    L_obj397=(Token)match(input,L_obj,FOLLOW_L_obj_in_obj_expr4421); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_obj.add(L_obj397);

                    pushFollow(FOLLOW_block_in_obj_expr4423);
                    block398=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block398.getTree());
                    L_end399=(Token)match(input,L_end,FOLLOW_L_end_in_obj_expr4425); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_end.add(L_end399);



                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 665:35: -> ^( OBJ block )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:665:38: ^( OBJ block )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJ, "OBJ"), root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "obj_expr"

    public static class lop_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lop_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:667:1: lop_expr : ( ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | op_expr );
    public final babel17Parser.lop_expr_return lop_expr() throws RecognitionException {
        babel17Parser.lop_expr_return retval = new babel17Parser.lop_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.lambda_expr_nobrackets_return lambda_expr_nobrackets400 = null;

        babel17Parser.op_expr_return op_expr401 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:669:2: ( ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | op_expr )
            int alt171=2;
            alt171 = dfa171.predict(input);
            switch (alt171) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:669:4: ( lambda_expr_nobrackets )=> lambda_expr_nobrackets
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lambda_expr_nobrackets_in_lop_expr4455);
                    lambda_expr_nobrackets400=lambda_expr_nobrackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lambda_expr_nobrackets400.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:670:4: op_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_op_expr_in_lop_expr4460);
                    op_expr401=op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op_expr401.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lop_expr"

    public static class p_lop_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_lop_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:672:1: p_lop_expr : ( ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | p_op_expr );
    public final babel17Parser.p_lop_expr_return p_lop_expr() throws RecognitionException {
        babel17Parser.p_lop_expr_return retval = new babel17Parser.p_lop_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.lambda_expr_nobrackets_return lambda_expr_nobrackets402 = null;

        babel17Parser.p_op_expr_return p_op_expr403 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:674:2: ( ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | p_op_expr )
            int alt172=2;
            alt172 = dfa172.predict(input);
            switch (alt172) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:674:4: ( lambda_expr_nobrackets )=> lambda_expr_nobrackets
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lambda_expr_nobrackets_in_p_lop_expr4478);
                    lambda_expr_nobrackets402=lambda_expr_nobrackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lambda_expr_nobrackets402.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:675:4: p_op_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_op_expr_in_p_lop_expr4483);
                    p_op_expr403=p_op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_op_expr403.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_lop_expr"

    public static class if_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "if_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:677:1: if_expr : L_if ( NL )? protected_expr ( NL )? L_then block ( L_elseif ( NL )? protected_expr ( NL )? L_then block )* ( L_else block )? L_end -> ^( IF ( protected_expr )* ( block )* ) ;
    public final babel17Parser.if_expr_return if_expr() throws RecognitionException {
        babel17Parser.if_expr_return retval = new babel17Parser.if_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_if404=null;
        Token NL405=null;
        Token NL407=null;
        Token L_then408=null;
        Token L_elseif410=null;
        Token NL411=null;
        Token NL413=null;
        Token L_then414=null;
        Token L_else416=null;
        Token L_end418=null;
        babel17Parser.protected_expr_return protected_expr406 = null;

        babel17Parser.block_return block409 = null;

        babel17Parser.protected_expr_return protected_expr412 = null;

        babel17Parser.block_return block415 = null;

        babel17Parser.block_return block417 = null;


        CommonTree L_if404_tree=null;
        CommonTree NL405_tree=null;
        CommonTree NL407_tree=null;
        CommonTree L_then408_tree=null;
        CommonTree L_elseif410_tree=null;
        CommonTree NL411_tree=null;
        CommonTree NL413_tree=null;
        CommonTree L_then414_tree=null;
        CommonTree L_else416_tree=null;
        CommonTree L_end418_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_else=new RewriteRuleTokenStream(adaptor,"token L_else");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_elseif=new RewriteRuleTokenStream(adaptor,"token L_elseif");
        RewriteRuleTokenStream stream_L_then=new RewriteRuleTokenStream(adaptor,"token L_then");
        RewriteRuleTokenStream stream_L_if=new RewriteRuleTokenStream(adaptor,"token L_if");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:677:9: ( L_if ( NL )? protected_expr ( NL )? L_then block ( L_elseif ( NL )? protected_expr ( NL )? L_then block )* ( L_else block )? L_end -> ^( IF ( protected_expr )* ( block )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:677:11: L_if ( NL )? protected_expr ( NL )? L_then block ( L_elseif ( NL )? protected_expr ( NL )? L_then block )* ( L_else block )? L_end
            {
            L_if404=(Token)match(input,L_if,FOLLOW_L_if_in_if_expr4493); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_if.add(L_if404);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:677:16: ( NL )?
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==NL) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:677:16: NL
                    {
                    NL405=(Token)match(input,NL,FOLLOW_NL_in_if_expr4495); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL405);


                    }
                    break;

            }

            pushFollow(FOLLOW_protected_expr_in_if_expr4498);
            protected_expr406=protected_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr406.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:677:35: ( NL )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==NL) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:677:35: NL
                    {
                    NL407=(Token)match(input,NL,FOLLOW_NL_in_if_expr4500); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL407);


                    }
                    break;

            }

            L_then408=(Token)match(input,L_then,FOLLOW_L_then_in_if_expr4503); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_then.add(L_then408);

            pushFollow(FOLLOW_block_in_if_expr4505);
            block409=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block409.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:678:3: ( L_elseif ( NL )? protected_expr ( NL )? L_then block )*
            loop177:
            do {
                int alt177=2;
                int LA177_0 = input.LA(1);

                if ( (LA177_0==L_elseif) ) {
                    alt177=1;
                }


                switch (alt177) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:678:4: L_elseif ( NL )? protected_expr ( NL )? L_then block
            	    {
            	    L_elseif410=(Token)match(input,L_elseif,FOLLOW_L_elseif_in_if_expr4511); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_L_elseif.add(L_elseif410);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:678:13: ( NL )?
            	    int alt175=2;
            	    int LA175_0 = input.LA(1);

            	    if ( (LA175_0==NL) ) {
            	        alt175=1;
            	    }
            	    switch (alt175) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:678:13: NL
            	            {
            	            NL411=(Token)match(input,NL,FOLLOW_NL_in_if_expr4513); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL411);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_protected_expr_in_if_expr4516);
            	    protected_expr412=protected_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr412.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:678:32: ( NL )?
            	    int alt176=2;
            	    int LA176_0 = input.LA(1);

            	    if ( (LA176_0==NL) ) {
            	        alt176=1;
            	    }
            	    switch (alt176) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:678:32: NL
            	            {
            	            NL413=(Token)match(input,NL,FOLLOW_NL_in_if_expr4518); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL413);


            	            }
            	            break;

            	    }

            	    L_then414=(Token)match(input,L_then,FOLLOW_L_then_in_if_expr4521); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_L_then.add(L_then414);

            	    pushFollow(FOLLOW_block_in_if_expr4523);
            	    block415=block();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_block.add(block415.getTree());

            	    }
            	    break;

            	default :
            	    break loop177;
                }
            } while (true);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:679:3: ( L_else block )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==L_else) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:679:4: L_else block
                    {
                    L_else416=(Token)match(input,L_else,FOLLOW_L_else_in_if_expr4531); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_else.add(L_else416);

                    pushFollow(FOLLOW_block_in_if_expr4533);
                    block417=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block417.getTree());

                    }
                    break;

            }

            L_end418=(Token)match(input,L_end,FOLLOW_L_end_in_if_expr4537); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end418);



            // AST REWRITE
            // elements: block, protected_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 679:26: -> ^( IF ( protected_expr )* ( block )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:679:29: ^( IF ( protected_expr )* ( block )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IF, "IF"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:679:34: ( protected_expr )*
                while ( stream_protected_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_protected_expr.nextTree());

                }
                stream_protected_expr.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:679:50: ( block )*
                while ( stream_block.hasNext() ) {
                    adaptor.addChild(root_1, stream_block.nextTree());

                }
                stream_block.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "if_expr"

    public static class while_do_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "while_do_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:681:1: while_do_expr : L_while ( NL )? protected_expr ( NL )? L_do block L_end -> ^( WHILE_DO protected_expr block ) ;
    public final babel17Parser.while_do_expr_return while_do_expr() throws RecognitionException {
        babel17Parser.while_do_expr_return retval = new babel17Parser.while_do_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_while419=null;
        Token NL420=null;
        Token NL422=null;
        Token L_do423=null;
        Token L_end425=null;
        babel17Parser.protected_expr_return protected_expr421 = null;

        babel17Parser.block_return block424 = null;


        CommonTree L_while419_tree=null;
        CommonTree NL420_tree=null;
        CommonTree NL422_tree=null;
        CommonTree L_do423_tree=null;
        CommonTree L_end425_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_do=new RewriteRuleTokenStream(adaptor,"token L_do");
        RewriteRuleTokenStream stream_L_while=new RewriteRuleTokenStream(adaptor,"token L_while");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:682:2: ( L_while ( NL )? protected_expr ( NL )? L_do block L_end -> ^( WHILE_DO protected_expr block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:682:4: L_while ( NL )? protected_expr ( NL )? L_do block L_end
            {
            L_while419=(Token)match(input,L_while,FOLLOW_L_while_in_while_do_expr4561); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_while.add(L_while419);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:682:12: ( NL )?
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==NL) ) {
                alt179=1;
            }
            switch (alt179) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:682:12: NL
                    {
                    NL420=(Token)match(input,NL,FOLLOW_NL_in_while_do_expr4563); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL420);


                    }
                    break;

            }

            pushFollow(FOLLOW_protected_expr_in_while_do_expr4566);
            protected_expr421=protected_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr421.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:682:31: ( NL )?
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==NL) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:682:31: NL
                    {
                    NL422=(Token)match(input,NL,FOLLOW_NL_in_while_do_expr4568); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL422);


                    }
                    break;

            }

            L_do423=(Token)match(input,L_do,FOLLOW_L_do_in_while_do_expr4571); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_do.add(L_do423);

            pushFollow(FOLLOW_block_in_while_do_expr4573);
            block424=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block424.getTree());
            L_end425=(Token)match(input,L_end,FOLLOW_L_end_in_while_do_expr4575); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end425);



            // AST REWRITE
            // elements: block, protected_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 683:5: -> ^( WHILE_DO protected_expr block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:683:8: ^( WHILE_DO protected_expr block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHILE_DO, "WHILE_DO"), root_1);

                adaptor.addChild(root_1, stream_protected_expr.nextTree());
                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "while_do_expr"

    public static class cases_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cases"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:685:1: cases : ( full_cases | pattern ( NL )? token_DOUBLE_ARROW block -> ^( CASES ^( NIL_TOKEN pattern block ) ) );
    public final babel17Parser.cases_return cases() throws RecognitionException {
        babel17Parser.cases_return retval = new babel17Parser.cases_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL428=null;
        babel17Parser.full_cases_return full_cases426 = null;

        babel17Parser.pattern_return pattern427 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW429 = null;

        babel17Parser.block_return block430 = null;


        CommonTree NL428_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:686:2: ( full_cases | pattern ( NL )? token_DOUBLE_ARROW block -> ^( CASES ^( NIL_TOKEN pattern block ) ) )
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==L_case) ) {
                alt182=1;
            }
            else if ( (LA182_0==L_exception||(LA182_0>=L_true && LA182_0<=L_false)||LA182_0==L_nil||LA182_0==MINUS||(LA182_0>=A_ELLIPSIS && LA182_0<=U_ELLIPSIS)||(LA182_0>=Constr && LA182_0<=Id)||LA182_0==Num||(LA182_0>=String && LA182_0<=ROUND_BRACKET_OPEN)||LA182_0==SQUARE_BRACKET_OPEN||LA182_0==CURLY_BRACKET_OPEN||LA182_0==UNDERSCORE) ) {
                alt182=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 182, 0, input);

                throw nvae;
            }
            switch (alt182) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:686:4: full_cases
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_full_cases_in_cases4605);
                    full_cases426=full_cases();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, full_cases426.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:687:4: pattern ( NL )? token_DOUBLE_ARROW block
                    {
                    pushFollow(FOLLOW_pattern_in_cases4610);
                    pattern427=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern427.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:687:12: ( NL )?
                    int alt181=2;
                    int LA181_0 = input.LA(1);

                    if ( (LA181_0==NL) ) {
                        alt181=1;
                    }
                    switch (alt181) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:687:12: NL
                            {
                            NL428=(Token)match(input,NL,FOLLOW_NL_in_cases4612); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL428);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_token_DOUBLE_ARROW_in_cases4615);
                    token_DOUBLE_ARROW429=token_DOUBLE_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW429.getTree());
                    pushFollow(FOLLOW_block_in_cases4617);
                    block430=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block430.getTree());


                    // AST REWRITE
                    // elements: block, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 687:41: -> ^( CASES ^( NIL_TOKEN pattern block ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:687:44: ^( CASES ^( NIL_TOKEN pattern block ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:687:52: ^( NIL_TOKEN pattern block )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        adaptor.addChild(root_2, stream_pattern.nextTree());
                        adaptor.addChild(root_2, stream_block.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cases"

    public static class full_cases_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "full_cases"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:689:1: full_cases : ( case_expr )+ -> ^( CASES ( case_expr )+ ) ;
    public final babel17Parser.full_cases_return full_cases() throws RecognitionException {
        babel17Parser.full_cases_return retval = new babel17Parser.full_cases_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.case_expr_return case_expr431 = null;


        RewriteRuleSubtreeStream stream_case_expr=new RewriteRuleSubtreeStream(adaptor,"rule case_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:690:2: ( ( case_expr )+ -> ^( CASES ( case_expr )+ ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:690:4: ( case_expr )+
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:690:4: ( case_expr )+
            int cnt183=0;
            loop183:
            do {
                int alt183=2;
                int LA183_0 = input.LA(1);

                if ( (LA183_0==L_case) ) {
                    alt183=1;
                }


                switch (alt183) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:690:4: case_expr
            	    {
            	    pushFollow(FOLLOW_case_expr_in_full_cases4640);
            	    case_expr431=case_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_case_expr.add(case_expr431.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt183 >= 1 ) break loop183;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(183, input);
                        throw eee;
                }
                cnt183++;
            } while (true);



            // AST REWRITE
            // elements: case_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 690:15: -> ^( CASES ( case_expr )+ )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:690:18: ^( CASES ( case_expr )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                if ( !(stream_case_expr.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_case_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_case_expr.nextTree());

                }
                stream_case_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "full_cases"

    public static class case_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "case_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:692:1: case_expr : ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block ) -> ^( NIL_TOKEN casepattern block ) ;
    public final babel17Parser.case_expr_return case_expr() throws RecognitionException {
        babel17Parser.case_expr_return retval = new babel17Parser.case_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_case432=null;
        Token NL433=null;
        Token NL435=null;
        babel17Parser.casepattern_return casepattern434 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW436 = null;

        babel17Parser.block_return block437 = null;


        CommonTree L_case432_tree=null;
        CommonTree NL433_tree=null;
        CommonTree NL435_tree=null;
        RewriteRuleTokenStream stream_L_case=new RewriteRuleTokenStream(adaptor,"token L_case");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_casepattern=new RewriteRuleSubtreeStream(adaptor,"rule casepattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:693:2: ( ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block ) -> ^( NIL_TOKEN casepattern block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:693:4: ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block )
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:693:4: ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:693:5: L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block
            {
            L_case432=(Token)match(input,L_case,FOLLOW_L_case_in_case_expr4661); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_case.add(L_case432);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:693:12: ( NL )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==NL) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:693:12: NL
                    {
                    NL433=(Token)match(input,NL,FOLLOW_NL_in_case_expr4663); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL433);


                    }
                    break;

            }

            pushFollow(FOLLOW_casepattern_in_case_expr4666);
            casepattern434=casepattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_casepattern.add(casepattern434.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:693:28: ( NL )?
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==NL) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:693:28: NL
                    {
                    NL435=(Token)match(input,NL,FOLLOW_NL_in_case_expr4668); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL435);


                    }
                    break;

            }

            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_case_expr4671);
            token_DOUBLE_ARROW436=token_DOUBLE_ARROW();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW436.getTree());
            pushFollow(FOLLOW_block_in_case_expr4673);
            block437=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block437.getTree());

            }



            // AST REWRITE
            // elements: casepattern, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 693:58: -> ^( NIL_TOKEN casepattern block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:693:61: ^( NIL_TOKEN casepattern block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_1);

                adaptor.addChild(root_1, stream_casepattern.nextTree());
                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "case_expr"

    public static class match_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "match_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:695:1: match_expr : L_match ( NL )? p_op_expr ( NL )? full_cases L_end -> ^( MATCH p_op_expr full_cases ) ;
    public final babel17Parser.match_expr_return match_expr() throws RecognitionException {
        babel17Parser.match_expr_return retval = new babel17Parser.match_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_match438=null;
        Token NL439=null;
        Token NL441=null;
        Token L_end443=null;
        babel17Parser.p_op_expr_return p_op_expr440 = null;

        babel17Parser.full_cases_return full_cases442 = null;


        CommonTree L_match438_tree=null;
        CommonTree NL439_tree=null;
        CommonTree NL441_tree=null;
        CommonTree L_end443_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_match=new RewriteRuleTokenStream(adaptor,"token L_match");
        RewriteRuleSubtreeStream stream_full_cases=new RewriteRuleSubtreeStream(adaptor,"rule full_cases");
        RewriteRuleSubtreeStream stream_p_op_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_op_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:696:2: ( L_match ( NL )? p_op_expr ( NL )? full_cases L_end -> ^( MATCH p_op_expr full_cases ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:696:4: L_match ( NL )? p_op_expr ( NL )? full_cases L_end
            {
            L_match438=(Token)match(input,L_match,FOLLOW_L_match_in_match_expr4694); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_match.add(L_match438);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:696:12: ( NL )?
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==NL) ) {
                alt186=1;
            }
            switch (alt186) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:696:12: NL
                    {
                    NL439=(Token)match(input,NL,FOLLOW_NL_in_match_expr4696); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL439);


                    }
                    break;

            }

            pushFollow(FOLLOW_p_op_expr_in_match_expr4699);
            p_op_expr440=p_op_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_op_expr.add(p_op_expr440.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:696:26: ( NL )?
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==NL) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:696:26: NL
                    {
                    NL441=(Token)match(input,NL,FOLLOW_NL_in_match_expr4701); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL441);


                    }
                    break;

            }

            pushFollow(FOLLOW_full_cases_in_match_expr4704);
            full_cases442=full_cases();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_full_cases.add(full_cases442.getTree());
            L_end443=(Token)match(input,L_end,FOLLOW_L_end_in_match_expr4706); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end443);



            // AST REWRITE
            // elements: full_cases, p_op_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 697:5: -> ^( MATCH p_op_expr full_cases )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:697:8: ^( MATCH p_op_expr full_cases )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH, "MATCH"), root_1);

                adaptor.addChild(root_1, stream_p_op_expr.nextTree());
                adaptor.addChild(root_1, stream_full_cases.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "match_expr"

    public static class try_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "try_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:1: try_expr : L_try ( NL )? pure_block ( NL )? L_catch ( NL )? full_cases L_end -> ^( TRY pure_block full_cases ) ;
    public final babel17Parser.try_expr_return try_expr() throws RecognitionException {
        babel17Parser.try_expr_return retval = new babel17Parser.try_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_try444=null;
        Token NL445=null;
        Token NL447=null;
        Token L_catch448=null;
        Token NL449=null;
        Token L_end451=null;
        babel17Parser.pure_block_return pure_block446 = null;

        babel17Parser.full_cases_return full_cases450 = null;


        CommonTree L_try444_tree=null;
        CommonTree NL445_tree=null;
        CommonTree NL447_tree=null;
        CommonTree L_catch448_tree=null;
        CommonTree NL449_tree=null;
        CommonTree L_end451_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_try=new RewriteRuleTokenStream(adaptor,"token L_try");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_catch=new RewriteRuleTokenStream(adaptor,"token L_catch");
        RewriteRuleSubtreeStream stream_full_cases=new RewriteRuleSubtreeStream(adaptor,"rule full_cases");
        RewriteRuleSubtreeStream stream_pure_block=new RewriteRuleSubtreeStream(adaptor,"rule pure_block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:9: ( L_try ( NL )? pure_block ( NL )? L_catch ( NL )? full_cases L_end -> ^( TRY pure_block full_cases ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:11: L_try ( NL )? pure_block ( NL )? L_catch ( NL )? full_cases L_end
            {
            L_try444=(Token)match(input,L_try,FOLLOW_L_try_in_try_expr4732); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_try.add(L_try444);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:17: ( NL )?
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==NL) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:17: NL
                    {
                    NL445=(Token)match(input,NL,FOLLOW_NL_in_try_expr4734); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL445);


                    }
                    break;

            }

            pushFollow(FOLLOW_pure_block_in_try_expr4737);
            pure_block446=pure_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pure_block.add(pure_block446.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:32: ( NL )?
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==NL) ) {
                alt189=1;
            }
            switch (alt189) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:32: NL
                    {
                    NL447=(Token)match(input,NL,FOLLOW_NL_in_try_expr4739); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL447);


                    }
                    break;

            }

            L_catch448=(Token)match(input,L_catch,FOLLOW_L_catch_in_try_expr4742); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_catch.add(L_catch448);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:44: ( NL )?
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==NL) ) {
                alt190=1;
            }
            switch (alt190) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:44: NL
                    {
                    NL449=(Token)match(input,NL,FOLLOW_NL_in_try_expr4744); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL449);


                    }
                    break;

            }

            pushFollow(FOLLOW_full_cases_in_try_expr4747);
            full_cases450=full_cases();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_full_cases.add(full_cases450.getTree());
            L_end451=(Token)match(input,L_end,FOLLOW_L_end_in_try_expr4749); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end451);



            // AST REWRITE
            // elements: full_cases, pure_block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 700:5: -> ^( TRY pure_block full_cases )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:700:8: ^( TRY pure_block full_cases )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TRY, "TRY"), root_1);

                adaptor.addChild(root_1, stream_pure_block.nextTree());
                adaptor.addChild(root_1, stream_full_cases.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "try_expr"

    public static class lambda_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:702:1: lambda_expr : '(' ( NL )? lambda_cases ( NL )? ')' -> ^( LAMBDA lambda_cases ) ;
    public final babel17Parser.lambda_expr_return lambda_expr() throws RecognitionException {
        babel17Parser.lambda_expr_return retval = new babel17Parser.lambda_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal452=null;
        Token NL453=null;
        Token NL455=null;
        Token char_literal456=null;
        babel17Parser.lambda_cases_return lambda_cases454 = null;


        CommonTree char_literal452_tree=null;
        CommonTree NL453_tree=null;
        CommonTree NL455_tree=null;
        CommonTree char_literal456_tree=null;
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleSubtreeStream stream_lambda_cases=new RewriteRuleSubtreeStream(adaptor,"rule lambda_cases");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:703:2: ( '(' ( NL )? lambda_cases ( NL )? ')' -> ^( LAMBDA lambda_cases ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:703:4: '(' ( NL )? lambda_cases ( NL )? ')'
            {
            char_literal452=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_lambda_expr4773); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal452);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:703:8: ( NL )?
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==NL) ) {
                alt191=1;
            }
            switch (alt191) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:703:8: NL
                    {
                    NL453=(Token)match(input,NL,FOLLOW_NL_in_lambda_expr4775); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL453);


                    }
                    break;

            }

            pushFollow(FOLLOW_lambda_cases_in_lambda_expr4778);
            lambda_cases454=lambda_cases();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lambda_cases.add(lambda_cases454.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:703:25: ( NL )?
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==NL) ) {
                alt192=1;
            }
            switch (alt192) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:703:25: NL
                    {
                    NL455=(Token)match(input,NL,FOLLOW_NL_in_lambda_expr4780); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL455);


                    }
                    break;

            }

            char_literal456=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_lambda_expr4783); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal456);



            // AST REWRITE
            // elements: lambda_cases
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 703:33: -> ^( LAMBDA lambda_cases )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:703:36: ^( LAMBDA lambda_cases )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAMBDA, "LAMBDA"), root_1);

                adaptor.addChild(root_1, stream_lambda_cases.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_expr"

    public static class lambda_expr_nobrackets_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_expr_nobrackets"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:1: lambda_expr_nobrackets : lambda_cases_nobrackets -> ^( LAMBDA lambda_cases_nobrackets ) ;
    public final babel17Parser.lambda_expr_nobrackets_return lambda_expr_nobrackets() throws RecognitionException {
        babel17Parser.lambda_expr_nobrackets_return retval = new babel17Parser.lambda_expr_nobrackets_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.lambda_cases_nobrackets_return lambda_cases_nobrackets457 = null;


        RewriteRuleSubtreeStream stream_lambda_cases_nobrackets=new RewriteRuleSubtreeStream(adaptor,"rule lambda_cases_nobrackets");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:706:2: ( lambda_cases_nobrackets -> ^( LAMBDA lambda_cases_nobrackets ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:706:4: lambda_cases_nobrackets
            {
            pushFollow(FOLLOW_lambda_cases_nobrackets_in_lambda_expr_nobrackets4802);
            lambda_cases_nobrackets457=lambda_cases_nobrackets();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lambda_cases_nobrackets.add(lambda_cases_nobrackets457.getTree());


            // AST REWRITE
            // elements: lambda_cases_nobrackets
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 706:28: -> ^( LAMBDA lambda_cases_nobrackets )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:706:31: ^( LAMBDA lambda_cases_nobrackets )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAMBDA, "LAMBDA"), root_1);

                adaptor.addChild(root_1, stream_lambda_cases_nobrackets.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_expr_nobrackets"

    public static class lambda_cases_nobrackets_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_cases_nobrackets"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:708:1: lambda_cases_nobrackets : pattern ( NL )? token_DOUBLE_ARROW ( NL )? lop_expr -> ^( CASES ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) ) ) ;
    public final babel17Parser.lambda_cases_nobrackets_return lambda_cases_nobrackets() throws RecognitionException {
        babel17Parser.lambda_cases_nobrackets_return retval = new babel17Parser.lambda_cases_nobrackets_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL459=null;
        Token NL461=null;
        babel17Parser.pattern_return pattern458 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW460 = null;

        babel17Parser.lop_expr_return lop_expr462 = null;


        CommonTree NL459_tree=null;
        CommonTree NL461_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_lop_expr=new RewriteRuleSubtreeStream(adaptor,"rule lop_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:2: ( pattern ( NL )? token_DOUBLE_ARROW ( NL )? lop_expr -> ^( CASES ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) ) ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:4: pattern ( NL )? token_DOUBLE_ARROW ( NL )? lop_expr
            {
            pushFollow(FOLLOW_pattern_in_lambda_cases_nobrackets4820);
            pattern458=pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pattern.add(pattern458.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:12: ( NL )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==NL) ) {
                alt193=1;
            }
            switch (alt193) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:12: NL
                    {
                    NL459=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases_nobrackets4822); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL459);


                    }
                    break;

            }

            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_lambda_cases_nobrackets4825);
            token_DOUBLE_ARROW460=token_DOUBLE_ARROW();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW460.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:35: ( NL )?
            int alt194=2;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==NL) ) {
                alt194=1;
            }
            switch (alt194) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:35: NL
                    {
                    NL461=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases_nobrackets4827); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL461);


                    }
                    break;

            }

            pushFollow(FOLLOW_lop_expr_in_lambda_cases_nobrackets4830);
            lop_expr462=lop_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lop_expr.add(lop_expr462.getTree());


            // AST REWRITE
            // elements: pattern, lop_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 709:48: -> ^( CASES ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) ) )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:51: ^( CASES ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:59: ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                adaptor.addChild(root_2, stream_pattern.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:79: ^( BLOCK lop_expr )
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK, "BLOCK"), root_3);

                adaptor.addChild(root_3, stream_lop_expr.nextTree());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_cases_nobrackets"

    public static class lambda_case_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_case_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:711:1: lambda_case_expr : ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block ) -> ^( NIL_TOKEN casepattern pure_block ) ;
    public final babel17Parser.lambda_case_expr_return lambda_case_expr() throws RecognitionException {
        babel17Parser.lambda_case_expr_return retval = new babel17Parser.lambda_case_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_case463=null;
        Token NL464=null;
        Token NL466=null;
        Token NL468=null;
        babel17Parser.casepattern_return casepattern465 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW467 = null;

        babel17Parser.pure_block_return pure_block469 = null;


        CommonTree L_case463_tree=null;
        CommonTree NL464_tree=null;
        CommonTree NL466_tree=null;
        CommonTree NL468_tree=null;
        RewriteRuleTokenStream stream_L_case=new RewriteRuleTokenStream(adaptor,"token L_case");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_casepattern=new RewriteRuleSubtreeStream(adaptor,"rule casepattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_pure_block=new RewriteRuleSubtreeStream(adaptor,"rule pure_block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:712:2: ( ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block ) -> ^( NIL_TOKEN casepattern pure_block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:712:4: ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block )
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:712:4: ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:712:5: L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block
            {
            L_case463=(Token)match(input,L_case,FOLLOW_L_case_in_lambda_case_expr4858); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_case.add(L_case463);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:712:12: ( NL )?
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==NL) ) {
                alt195=1;
            }
            switch (alt195) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:712:12: NL
                    {
                    NL464=(Token)match(input,NL,FOLLOW_NL_in_lambda_case_expr4860); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL464);


                    }
                    break;

            }

            pushFollow(FOLLOW_casepattern_in_lambda_case_expr4863);
            casepattern465=casepattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_casepattern.add(casepattern465.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:712:28: ( NL )?
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==NL) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:712:28: NL
                    {
                    NL466=(Token)match(input,NL,FOLLOW_NL_in_lambda_case_expr4865); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL466);


                    }
                    break;

            }

            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_lambda_case_expr4868);
            token_DOUBLE_ARROW467=token_DOUBLE_ARROW();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW467.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:712:51: ( NL )?
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==NL) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:712:51: NL
                    {
                    NL468=(Token)match(input,NL,FOLLOW_NL_in_lambda_case_expr4870); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL468);


                    }
                    break;

            }

            pushFollow(FOLLOW_pure_block_in_lambda_case_expr4873);
            pure_block469=pure_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pure_block.add(pure_block469.getTree());

            }



            // AST REWRITE
            // elements: pure_block, casepattern
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 712:67: -> ^( NIL_TOKEN casepattern pure_block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:712:70: ^( NIL_TOKEN casepattern pure_block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_1);

                adaptor.addChild(root_1, stream_casepattern.nextTree());
                adaptor.addChild(root_1, stream_pure_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_case_expr"

    public static class lambda_cases_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_cases"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:714:1: lambda_cases : ( pattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block -> ^( CASES ^( NIL_TOKEN pattern pure_block ) ) | lambda_case_expr ( ( NL )? lambda_case_expr )* -> ^( CASES ( lambda_case_expr )+ ) );
    public final babel17Parser.lambda_cases_return lambda_cases() throws RecognitionException {
        babel17Parser.lambda_cases_return retval = new babel17Parser.lambda_cases_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL471=null;
        Token NL473=null;
        Token NL476=null;
        babel17Parser.pattern_return pattern470 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW472 = null;

        babel17Parser.pure_block_return pure_block474 = null;

        babel17Parser.lambda_case_expr_return lambda_case_expr475 = null;

        babel17Parser.lambda_case_expr_return lambda_case_expr477 = null;


        CommonTree NL471_tree=null;
        CommonTree NL473_tree=null;
        CommonTree NL476_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_lambda_case_expr=new RewriteRuleSubtreeStream(adaptor,"rule lambda_case_expr");
        RewriteRuleSubtreeStream stream_pure_block=new RewriteRuleSubtreeStream(adaptor,"rule pure_block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:715:2: ( pattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block -> ^( CASES ^( NIL_TOKEN pattern pure_block ) ) | lambda_case_expr ( ( NL )? lambda_case_expr )* -> ^( CASES ( lambda_case_expr )+ ) )
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==L_exception||(LA202_0>=L_true && LA202_0<=L_false)||LA202_0==L_nil||LA202_0==MINUS||(LA202_0>=A_ELLIPSIS && LA202_0<=U_ELLIPSIS)||(LA202_0>=Constr && LA202_0<=Id)||LA202_0==Num||(LA202_0>=String && LA202_0<=ROUND_BRACKET_OPEN)||LA202_0==SQUARE_BRACKET_OPEN||LA202_0==CURLY_BRACKET_OPEN||LA202_0==UNDERSCORE) ) {
                alt202=1;
            }
            else if ( (LA202_0==L_case) ) {
                alt202=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 202, 0, input);

                throw nvae;
            }
            switch (alt202) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:715:4: pattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block
                    {
                    pushFollow(FOLLOW_pattern_in_lambda_cases4894);
                    pattern470=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern470.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:715:12: ( NL )?
                    int alt198=2;
                    int LA198_0 = input.LA(1);

                    if ( (LA198_0==NL) ) {
                        alt198=1;
                    }
                    switch (alt198) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:715:12: NL
                            {
                            NL471=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases4896); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL471);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_token_DOUBLE_ARROW_in_lambda_cases4899);
                    token_DOUBLE_ARROW472=token_DOUBLE_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW472.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:715:35: ( NL )?
                    int alt199=2;
                    int LA199_0 = input.LA(1);

                    if ( (LA199_0==NL) ) {
                        alt199=1;
                    }
                    switch (alt199) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:715:35: NL
                            {
                            NL473=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases4901); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL473);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_pure_block_in_lambda_cases4904);
                    pure_block474=pure_block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pure_block.add(pure_block474.getTree());


                    // AST REWRITE
                    // elements: pure_block, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 715:50: -> ^( CASES ^( NIL_TOKEN pattern pure_block ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:715:53: ^( CASES ^( NIL_TOKEN pattern pure_block ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:715:61: ^( NIL_TOKEN pattern pure_block )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        adaptor.addChild(root_2, stream_pattern.nextTree());
                        adaptor.addChild(root_2, stream_pure_block.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:716:4: lambda_case_expr ( ( NL )? lambda_case_expr )*
                    {
                    pushFollow(FOLLOW_lambda_case_expr_in_lambda_cases4923);
                    lambda_case_expr475=lambda_case_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lambda_case_expr.add(lambda_case_expr475.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:716:21: ( ( NL )? lambda_case_expr )*
                    loop201:
                    do {
                        int alt201=2;
                        int LA201_0 = input.LA(1);

                        if ( (LA201_0==NL) ) {
                            int LA201_1 = input.LA(2);

                            if ( (LA201_1==L_case) ) {
                                alt201=1;
                            }


                        }
                        else if ( (LA201_0==L_case) ) {
                            alt201=1;
                        }


                        switch (alt201) {
                    	case 1 :
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:716:22: ( NL )? lambda_case_expr
                    	    {
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:716:22: ( NL )?
                    	    int alt200=2;
                    	    int LA200_0 = input.LA(1);

                    	    if ( (LA200_0==NL) ) {
                    	        alt200=1;
                    	    }
                    	    switch (alt200) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:716:22: NL
                    	            {
                    	            NL476=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases4926); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL476);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_lambda_case_expr_in_lambda_cases4929);
                    	    lambda_case_expr477=lambda_case_expr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_lambda_case_expr.add(lambda_case_expr477.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop201;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: lambda_case_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 716:45: -> ^( CASES ( lambda_case_expr )+ )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:716:48: ^( CASES ( lambda_case_expr )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                        if ( !(stream_lambda_case_expr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_lambda_case_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_lambda_case_expr.nextTree());

                        }
                        stream_lambda_case_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_cases"

    public static class for_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:718:1: for_expr : L_for ( NL )? pattern ( NL )? L_in ( NL )? protected_expr ( NL )? L_do block L_end -> ^( FOR_EXPR pattern protected_expr block ) ;
    public final babel17Parser.for_expr_return for_expr() throws RecognitionException {
        babel17Parser.for_expr_return retval = new babel17Parser.for_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_for478=null;
        Token NL479=null;
        Token NL481=null;
        Token L_in482=null;
        Token NL483=null;
        Token NL485=null;
        Token L_do486=null;
        Token L_end488=null;
        babel17Parser.pattern_return pattern480 = null;

        babel17Parser.protected_expr_return protected_expr484 = null;

        babel17Parser.block_return block487 = null;


        CommonTree L_for478_tree=null;
        CommonTree NL479_tree=null;
        CommonTree NL481_tree=null;
        CommonTree L_in482_tree=null;
        CommonTree NL483_tree=null;
        CommonTree NL485_tree=null;
        CommonTree L_do486_tree=null;
        CommonTree L_end488_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_for=new RewriteRuleTokenStream(adaptor,"token L_for");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_in=new RewriteRuleTokenStream(adaptor,"token L_in");
        RewriteRuleTokenStream stream_L_do=new RewriteRuleTokenStream(adaptor,"token L_do");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:718:9: ( L_for ( NL )? pattern ( NL )? L_in ( NL )? protected_expr ( NL )? L_do block L_end -> ^( FOR_EXPR pattern protected_expr block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:718:11: L_for ( NL )? pattern ( NL )? L_in ( NL )? protected_expr ( NL )? L_do block L_end
            {
            L_for478=(Token)match(input,L_for,FOLLOW_L_for_in_for_expr4947); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_for.add(L_for478);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:718:17: ( NL )?
            int alt203=2;
            int LA203_0 = input.LA(1);

            if ( (LA203_0==NL) ) {
                alt203=1;
            }
            switch (alt203) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:718:17: NL
                    {
                    NL479=(Token)match(input,NL,FOLLOW_NL_in_for_expr4949); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL479);


                    }
                    break;

            }

            pushFollow(FOLLOW_pattern_in_for_expr4952);
            pattern480=pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pattern.add(pattern480.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:718:29: ( NL )?
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==NL) ) {
                alt204=1;
            }
            switch (alt204) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:718:29: NL
                    {
                    NL481=(Token)match(input,NL,FOLLOW_NL_in_for_expr4954); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL481);


                    }
                    break;

            }

            L_in482=(Token)match(input,L_in,FOLLOW_L_in_in_for_expr4957); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_in.add(L_in482);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:718:38: ( NL )?
            int alt205=2;
            int LA205_0 = input.LA(1);

            if ( (LA205_0==NL) ) {
                alt205=1;
            }
            switch (alt205) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:718:38: NL
                    {
                    NL483=(Token)match(input,NL,FOLLOW_NL_in_for_expr4959); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL483);


                    }
                    break;

            }

            pushFollow(FOLLOW_protected_expr_in_for_expr4962);
            protected_expr484=protected_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr484.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:718:57: ( NL )?
            int alt206=2;
            int LA206_0 = input.LA(1);

            if ( (LA206_0==NL) ) {
                alt206=1;
            }
            switch (alt206) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:718:57: NL
                    {
                    NL485=(Token)match(input,NL,FOLLOW_NL_in_for_expr4964); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL485);


                    }
                    break;

            }

            L_do486=(Token)match(input,L_do,FOLLOW_L_do_in_for_expr4967); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_do.add(L_do486);

            pushFollow(FOLLOW_block_in_for_expr4969);
            block487=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block487.getTree());
            L_end488=(Token)match(input,L_end,FOLLOW_L_end_in_for_expr4971); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end488);



            // AST REWRITE
            // elements: block, pattern, protected_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 719:5: -> ^( FOR_EXPR pattern protected_expr block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:719:8: ^( FOR_EXPR pattern protected_expr block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_EXPR, "FOR_EXPR"), root_1);

                adaptor.addChild(root_1, stream_pattern.nextTree());
                adaptor.addChild(root_1, stream_protected_expr.nextTree());
                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "for_expr"

    public static class op_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "op_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:722:1: op_expr : ( builtin_primitive op_expr | lens_expr | bool_expr );
    public final babel17Parser.op_expr_return op_expr() throws RecognitionException {
        babel17Parser.op_expr_return retval = new babel17Parser.op_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.builtin_primitive_return builtin_primitive489 = null;

        babel17Parser.op_expr_return op_expr490 = null;

        babel17Parser.lens_expr_return lens_expr491 = null;

        babel17Parser.bool_expr_return bool_expr492 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:723:2: ( builtin_primitive op_expr | lens_expr | bool_expr )
            int alt207=3;
            switch ( input.LA(1) ) {
            case L_exception:
            case L_concurrent:
            case L_lazy:
            case L_force:
                {
                alt207=1;
                }
                break;
            case L_lens:
                {
                alt207=2;
                }
                break;
            case L_begin:
            case L_obj:
            case L_with:
            case L_if:
            case L_while:
            case L_for:
            case L_match:
            case L_try:
            case L_choose:
            case L_true:
            case L_false:
            case L_this:
            case L_random:
            case L_nil:
            case L_typeof:
            case L_not:
            case L_root:
            case L_native:
            case L_min:
            case L_max:
            case MINUS:
            case Constr:
            case Id:
            case Float:
            case Num:
            case String:
            case ROUND_BRACKET_OPEN:
            case SQUARE_BRACKET_OPEN:
            case CURLY_BRACKET_OPEN:
                {
                alt207=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 207, 0, input);

                throw nvae;
            }

            switch (alt207) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:723:4: builtin_primitive op_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_builtin_primitive_in_op_expr5000);
                    builtin_primitive489=builtin_primitive();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(builtin_primitive489.getTree(), root_0);
                    pushFollow(FOLLOW_op_expr_in_op_expr5003);
                    op_expr490=op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op_expr490.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:724:4: lens_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lens_expr_in_op_expr5008);
                    lens_expr491=lens_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lens_expr491.getTree());

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:725:4: bool_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_bool_expr_in_op_expr5013);
                    bool_expr492=bool_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_expr492.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "op_expr"

    public static class p_op_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_op_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:727:1: p_op_expr : ( builtin_primitive ( NL )? p_op_expr | p_lens_expr | p_bool_expr );
    public final babel17Parser.p_op_expr_return p_op_expr() throws RecognitionException {
        babel17Parser.p_op_expr_return retval = new babel17Parser.p_op_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL494=null;
        babel17Parser.builtin_primitive_return builtin_primitive493 = null;

        babel17Parser.p_op_expr_return p_op_expr495 = null;

        babel17Parser.p_lens_expr_return p_lens_expr496 = null;

        babel17Parser.p_bool_expr_return p_bool_expr497 = null;


        CommonTree NL494_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:728:2: ( builtin_primitive ( NL )? p_op_expr | p_lens_expr | p_bool_expr )
            int alt209=3;
            switch ( input.LA(1) ) {
            case L_exception:
            case L_concurrent:
            case L_lazy:
            case L_force:
                {
                alt209=1;
                }
                break;
            case L_lens:
                {
                alt209=2;
                }
                break;
            case L_begin:
            case L_obj:
            case L_with:
            case L_if:
            case L_while:
            case L_for:
            case L_match:
            case L_try:
            case L_choose:
            case L_true:
            case L_false:
            case L_this:
            case L_random:
            case L_nil:
            case L_typeof:
            case L_not:
            case L_root:
            case L_native:
            case L_min:
            case L_max:
            case MINUS:
            case Constr:
            case Id:
            case Float:
            case Num:
            case String:
            case ROUND_BRACKET_OPEN:
            case SQUARE_BRACKET_OPEN:
            case CURLY_BRACKET_OPEN:
                {
                alt209=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 209, 0, input);

                throw nvae;
            }

            switch (alt209) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:728:4: builtin_primitive ( NL )? p_op_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_builtin_primitive_in_p_op_expr5023);
                    builtin_primitive493=builtin_primitive();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(builtin_primitive493.getTree(), root_0);
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:728:25: ( NL )?
                    int alt208=2;
                    int LA208_0 = input.LA(1);

                    if ( (LA208_0==NL) ) {
                        alt208=1;
                    }
                    switch (alt208) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:728:25: NL
                            {
                            NL494=(Token)match(input,NL,FOLLOW_NL_in_p_op_expr5026); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_op_expr_in_p_op_expr5030);
                    p_op_expr495=p_op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_op_expr495.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:729:4: p_lens_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_lens_expr_in_p_op_expr5035);
                    p_lens_expr496=p_lens_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_lens_expr496.getTree());

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:730:4: p_bool_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_bool_expr_in_p_op_expr5040);
                    p_bool_expr497=p_bool_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_expr497.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_op_expr"

    public static class builtin_primitive_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtin_primitive"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:732:1: builtin_primitive : ( L_exception | L_lazy | L_concurrent | L_force );
    public final babel17Parser.builtin_primitive_return builtin_primitive() throws RecognitionException {
        babel17Parser.builtin_primitive_return retval = new babel17Parser.builtin_primitive_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set498=null;

        CommonTree set498_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:733:2: ( L_exception | L_lazy | L_concurrent | L_force )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set498=(Token)input.LT(1);
            if ( input.LA(1)==L_exception||input.LA(1)==L_concurrent||input.LA(1)==L_lazy||input.LA(1)==L_force ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set498));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtin_primitive"

    public static class lens_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lens_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:735:1: lens_expr : ( L_lens ( NL )? Id ( NL )? token_DOUBLE_ARROW ( NL )? op_expr -> ^( L_lens Id op_expr ) | L_lens ( NL )? ROUND_BRACKET_OPEN ( NL )? protected_expr ( NL )? COMMA ( NL )? protected_expr ( NL )? ROUND_BRACKET_CLOSE -> ^( FUNCTIONS_LENS protected_expr protected_expr ) );
    public final babel17Parser.lens_expr_return lens_expr() throws RecognitionException {
        babel17Parser.lens_expr_return retval = new babel17Parser.lens_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_lens499=null;
        Token NL500=null;
        Token Id501=null;
        Token NL502=null;
        Token NL504=null;
        Token L_lens506=null;
        Token NL507=null;
        Token ROUND_BRACKET_OPEN508=null;
        Token NL509=null;
        Token NL511=null;
        Token COMMA512=null;
        Token NL513=null;
        Token NL515=null;
        Token ROUND_BRACKET_CLOSE516=null;
        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW503 = null;

        babel17Parser.op_expr_return op_expr505 = null;

        babel17Parser.protected_expr_return protected_expr510 = null;

        babel17Parser.protected_expr_return protected_expr514 = null;


        CommonTree L_lens499_tree=null;
        CommonTree NL500_tree=null;
        CommonTree Id501_tree=null;
        CommonTree NL502_tree=null;
        CommonTree NL504_tree=null;
        CommonTree L_lens506_tree=null;
        CommonTree NL507_tree=null;
        CommonTree ROUND_BRACKET_OPEN508_tree=null;
        CommonTree NL509_tree=null;
        CommonTree NL511_tree=null;
        CommonTree COMMA512_tree=null;
        CommonTree NL513_tree=null;
        CommonTree NL515_tree=null;
        CommonTree ROUND_BRACKET_CLOSE516_tree=null;
        RewriteRuleTokenStream stream_L_lens=new RewriteRuleTokenStream(adaptor,"token L_lens");
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_op_expr=new RewriteRuleSubtreeStream(adaptor,"rule op_expr");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:2: ( L_lens ( NL )? Id ( NL )? token_DOUBLE_ARROW ( NL )? op_expr -> ^( L_lens Id op_expr ) | L_lens ( NL )? ROUND_BRACKET_OPEN ( NL )? protected_expr ( NL )? COMMA ( NL )? protected_expr ( NL )? ROUND_BRACKET_CLOSE -> ^( FUNCTIONS_LENS protected_expr protected_expr ) )
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==L_lens) ) {
                switch ( input.LA(2) ) {
                case NL:
                    {
                    int LA218_2 = input.LA(3);

                    if ( (LA218_2==Id) ) {
                        alt218=1;
                    }
                    else if ( (LA218_2==ROUND_BRACKET_OPEN) ) {
                        alt218=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 218, 2, input);

                        throw nvae;
                    }
                    }
                    break;
                case Id:
                    {
                    alt218=1;
                    }
                    break;
                case ROUND_BRACKET_OPEN:
                    {
                    alt218=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 218, 1, input);

                    throw nvae;
                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 218, 0, input);

                throw nvae;
            }
            switch (alt218) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:4: L_lens ( NL )? Id ( NL )? token_DOUBLE_ARROW ( NL )? op_expr
                    {
                    L_lens499=(Token)match(input,L_lens,FOLLOW_L_lens_in_lens_expr5071); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_lens.add(L_lens499);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:11: ( NL )?
                    int alt210=2;
                    int LA210_0 = input.LA(1);

                    if ( (LA210_0==NL) ) {
                        alt210=1;
                    }
                    switch (alt210) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:11: NL
                            {
                            NL500=(Token)match(input,NL,FOLLOW_NL_in_lens_expr5073); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL500);


                            }
                            break;

                    }

                    Id501=(Token)match(input,Id,FOLLOW_Id_in_lens_expr5076); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id501);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:18: ( NL )?
                    int alt211=2;
                    int LA211_0 = input.LA(1);

                    if ( (LA211_0==NL) ) {
                        alt211=1;
                    }
                    switch (alt211) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:18: NL
                            {
                            NL502=(Token)match(input,NL,FOLLOW_NL_in_lens_expr5078); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL502);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_token_DOUBLE_ARROW_in_lens_expr5081);
                    token_DOUBLE_ARROW503=token_DOUBLE_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW503.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:41: ( NL )?
                    int alt212=2;
                    int LA212_0 = input.LA(1);

                    if ( (LA212_0==NL) ) {
                        alt212=1;
                    }
                    switch (alt212) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:41: NL
                            {
                            NL504=(Token)match(input,NL,FOLLOW_NL_in_lens_expr5083); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL504);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_op_expr_in_lens_expr5086);
                    op_expr505=op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_op_expr.add(op_expr505.getTree());


                    // AST REWRITE
                    // elements: Id, L_lens, op_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 736:53: -> ^( L_lens Id op_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:56: ^( L_lens Id op_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_L_lens.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());
                        adaptor.addChild(root_1, stream_op_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:4: L_lens ( NL )? ROUND_BRACKET_OPEN ( NL )? protected_expr ( NL )? COMMA ( NL )? protected_expr ( NL )? ROUND_BRACKET_CLOSE
                    {
                    L_lens506=(Token)match(input,L_lens,FOLLOW_L_lens_in_lens_expr5101); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_lens.add(L_lens506);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:11: ( NL )?
                    int alt213=2;
                    int LA213_0 = input.LA(1);

                    if ( (LA213_0==NL) ) {
                        alt213=1;
                    }
                    switch (alt213) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:11: NL
                            {
                            NL507=(Token)match(input,NL,FOLLOW_NL_in_lens_expr5103); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL507);


                            }
                            break;

                    }

                    ROUND_BRACKET_OPEN508=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_lens_expr5106); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(ROUND_BRACKET_OPEN508);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:34: ( NL )?
                    int alt214=2;
                    int LA214_0 = input.LA(1);

                    if ( (LA214_0==NL) ) {
                        alt214=1;
                    }
                    switch (alt214) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:34: NL
                            {
                            NL509=(Token)match(input,NL,FOLLOW_NL_in_lens_expr5108); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL509);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_in_lens_expr5111);
                    protected_expr510=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr510.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:53: ( NL )?
                    int alt215=2;
                    int LA215_0 = input.LA(1);

                    if ( (LA215_0==NL) ) {
                        alt215=1;
                    }
                    switch (alt215) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:53: NL
                            {
                            NL511=(Token)match(input,NL,FOLLOW_NL_in_lens_expr5113); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL511);


                            }
                            break;

                    }

                    COMMA512=(Token)match(input,COMMA,FOLLOW_COMMA_in_lens_expr5116); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA512);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:63: ( NL )?
                    int alt216=2;
                    int LA216_0 = input.LA(1);

                    if ( (LA216_0==NL) ) {
                        alt216=1;
                    }
                    switch (alt216) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:63: NL
                            {
                            NL513=(Token)match(input,NL,FOLLOW_NL_in_lens_expr5118); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL513);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_in_lens_expr5121);
                    protected_expr514=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr514.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:82: ( NL )?
                    int alt217=2;
                    int LA217_0 = input.LA(1);

                    if ( (LA217_0==NL) ) {
                        alt217=1;
                    }
                    switch (alt217) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:82: NL
                            {
                            NL515=(Token)match(input,NL,FOLLOW_NL_in_lens_expr5123); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL515);


                            }
                            break;

                    }

                    ROUND_BRACKET_CLOSE516=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_lens_expr5126); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(ROUND_BRACKET_CLOSE516);



                    // AST REWRITE
                    // elements: protected_expr, protected_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 737:106: -> ^( FUNCTIONS_LENS protected_expr protected_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:109: ^( FUNCTIONS_LENS protected_expr protected_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTIONS_LENS, "FUNCTIONS_LENS"), root_1);

                        adaptor.addChild(root_1, stream_protected_expr.nextTree());
                        adaptor.addChild(root_1, stream_protected_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lens_expr"

    public static class p_lens_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_lens_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:739:1: p_lens_expr : ( L_lens ( NL )? Id ( NL )? token_DOUBLE_ARROW ( NL )? p_op_expr -> ^( L_lens token_DOUBLE_ARROW Id p_op_expr ) | L_lens ( NL )? ROUND_BRACKET_OPEN ( NL )? protected_expr ( NL )? COMMA ( NL )? protected_expr ( NL )? ROUND_BRACKET_CLOSE -> ^( FUNCTIONS_LENS protected_expr protected_expr ) );
    public final babel17Parser.p_lens_expr_return p_lens_expr() throws RecognitionException {
        babel17Parser.p_lens_expr_return retval = new babel17Parser.p_lens_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_lens517=null;
        Token NL518=null;
        Token Id519=null;
        Token NL520=null;
        Token NL522=null;
        Token L_lens524=null;
        Token NL525=null;
        Token ROUND_BRACKET_OPEN526=null;
        Token NL527=null;
        Token NL529=null;
        Token COMMA530=null;
        Token NL531=null;
        Token NL533=null;
        Token ROUND_BRACKET_CLOSE534=null;
        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW521 = null;

        babel17Parser.p_op_expr_return p_op_expr523 = null;

        babel17Parser.protected_expr_return protected_expr528 = null;

        babel17Parser.protected_expr_return protected_expr532 = null;


        CommonTree L_lens517_tree=null;
        CommonTree NL518_tree=null;
        CommonTree Id519_tree=null;
        CommonTree NL520_tree=null;
        CommonTree NL522_tree=null;
        CommonTree L_lens524_tree=null;
        CommonTree NL525_tree=null;
        CommonTree ROUND_BRACKET_OPEN526_tree=null;
        CommonTree NL527_tree=null;
        CommonTree NL529_tree=null;
        CommonTree COMMA530_tree=null;
        CommonTree NL531_tree=null;
        CommonTree NL533_tree=null;
        CommonTree ROUND_BRACKET_CLOSE534_tree=null;
        RewriteRuleTokenStream stream_L_lens=new RewriteRuleTokenStream(adaptor,"token L_lens");
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_p_op_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_op_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:2: ( L_lens ( NL )? Id ( NL )? token_DOUBLE_ARROW ( NL )? p_op_expr -> ^( L_lens token_DOUBLE_ARROW Id p_op_expr ) | L_lens ( NL )? ROUND_BRACKET_OPEN ( NL )? protected_expr ( NL )? COMMA ( NL )? protected_expr ( NL )? ROUND_BRACKET_CLOSE -> ^( FUNCTIONS_LENS protected_expr protected_expr ) )
            int alt227=2;
            int LA227_0 = input.LA(1);

            if ( (LA227_0==L_lens) ) {
                switch ( input.LA(2) ) {
                case NL:
                    {
                    int LA227_2 = input.LA(3);

                    if ( (LA227_2==ROUND_BRACKET_OPEN) ) {
                        alt227=2;
                    }
                    else if ( (LA227_2==Id) ) {
                        alt227=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 227, 2, input);

                        throw nvae;
                    }
                    }
                    break;
                case Id:
                    {
                    alt227=1;
                    }
                    break;
                case ROUND_BRACKET_OPEN:
                    {
                    alt227=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 227, 1, input);

                    throw nvae;
                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 227, 0, input);

                throw nvae;
            }
            switch (alt227) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:4: L_lens ( NL )? Id ( NL )? token_DOUBLE_ARROW ( NL )? p_op_expr
                    {
                    L_lens517=(Token)match(input,L_lens,FOLLOW_L_lens_in_p_lens_expr5146); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_lens.add(L_lens517);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:11: ( NL )?
                    int alt219=2;
                    int LA219_0 = input.LA(1);

                    if ( (LA219_0==NL) ) {
                        alt219=1;
                    }
                    switch (alt219) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:11: NL
                            {
                            NL518=(Token)match(input,NL,FOLLOW_NL_in_p_lens_expr5148); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL518);


                            }
                            break;

                    }

                    Id519=(Token)match(input,Id,FOLLOW_Id_in_p_lens_expr5151); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id519);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:18: ( NL )?
                    int alt220=2;
                    int LA220_0 = input.LA(1);

                    if ( (LA220_0==NL) ) {
                        alt220=1;
                    }
                    switch (alt220) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:18: NL
                            {
                            NL520=(Token)match(input,NL,FOLLOW_NL_in_p_lens_expr5153); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL520);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_token_DOUBLE_ARROW_in_p_lens_expr5156);
                    token_DOUBLE_ARROW521=token_DOUBLE_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW521.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:41: ( NL )?
                    int alt221=2;
                    int LA221_0 = input.LA(1);

                    if ( (LA221_0==NL) ) {
                        alt221=1;
                    }
                    switch (alt221) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:41: NL
                            {
                            NL522=(Token)match(input,NL,FOLLOW_NL_in_p_lens_expr5158); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL522);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_op_expr_in_p_lens_expr5161);
                    p_op_expr523=p_op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_op_expr.add(p_op_expr523.getTree());


                    // AST REWRITE
                    // elements: token_DOUBLE_ARROW, p_op_expr, L_lens, Id
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 740:55: -> ^( L_lens token_DOUBLE_ARROW Id p_op_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:58: ^( L_lens token_DOUBLE_ARROW Id p_op_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_L_lens.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_token_DOUBLE_ARROW.nextTree());
                        adaptor.addChild(root_1, stream_Id.nextNode());
                        adaptor.addChild(root_1, stream_p_op_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:741:4: L_lens ( NL )? ROUND_BRACKET_OPEN ( NL )? protected_expr ( NL )? COMMA ( NL )? protected_expr ( NL )? ROUND_BRACKET_CLOSE
                    {
                    L_lens524=(Token)match(input,L_lens,FOLLOW_L_lens_in_p_lens_expr5178); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_lens.add(L_lens524);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:741:11: ( NL )?
                    int alt222=2;
                    int LA222_0 = input.LA(1);

                    if ( (LA222_0==NL) ) {
                        alt222=1;
                    }
                    switch (alt222) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:741:11: NL
                            {
                            NL525=(Token)match(input,NL,FOLLOW_NL_in_p_lens_expr5180); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL525);


                            }
                            break;

                    }

                    ROUND_BRACKET_OPEN526=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_p_lens_expr5183); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(ROUND_BRACKET_OPEN526);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:741:34: ( NL )?
                    int alt223=2;
                    int LA223_0 = input.LA(1);

                    if ( (LA223_0==NL) ) {
                        alt223=1;
                    }
                    switch (alt223) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:741:34: NL
                            {
                            NL527=(Token)match(input,NL,FOLLOW_NL_in_p_lens_expr5185); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL527);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_in_p_lens_expr5188);
                    protected_expr528=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr528.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:741:53: ( NL )?
                    int alt224=2;
                    int LA224_0 = input.LA(1);

                    if ( (LA224_0==NL) ) {
                        alt224=1;
                    }
                    switch (alt224) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:741:53: NL
                            {
                            NL529=(Token)match(input,NL,FOLLOW_NL_in_p_lens_expr5190); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL529);


                            }
                            break;

                    }

                    COMMA530=(Token)match(input,COMMA,FOLLOW_COMMA_in_p_lens_expr5193); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA530);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:741:63: ( NL )?
                    int alt225=2;
                    int LA225_0 = input.LA(1);

                    if ( (LA225_0==NL) ) {
                        alt225=1;
                    }
                    switch (alt225) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:741:63: NL
                            {
                            NL531=(Token)match(input,NL,FOLLOW_NL_in_p_lens_expr5195); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL531);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_in_p_lens_expr5198);
                    protected_expr532=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr532.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:741:82: ( NL )?
                    int alt226=2;
                    int LA226_0 = input.LA(1);

                    if ( (LA226_0==NL) ) {
                        alt226=1;
                    }
                    switch (alt226) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:741:82: NL
                            {
                            NL533=(Token)match(input,NL,FOLLOW_NL_in_p_lens_expr5200); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL533);


                            }
                            break;

                    }

                    ROUND_BRACKET_CLOSE534=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_p_lens_expr5203); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(ROUND_BRACKET_CLOSE534);



                    // AST REWRITE
                    // elements: protected_expr, protected_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 741:106: -> ^( FUNCTIONS_LENS protected_expr protected_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:741:109: ^( FUNCTIONS_LENS protected_expr protected_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTIONS_LENS, "FUNCTIONS_LENS"), root_1);

                        adaptor.addChild(root_1, stream_protected_expr.nextTree());
                        adaptor.addChild(root_1, stream_protected_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_lens_expr"

    public static class bool_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bool_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:743:1: bool_expr : bool_or_expr ;
    public final babel17Parser.bool_expr_return bool_expr() throws RecognitionException {
        babel17Parser.bool_expr_return retval = new babel17Parser.bool_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.bool_or_expr_return bool_or_expr535 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:744:2: ( bool_or_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:744:4: bool_or_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_bool_or_expr_in_bool_expr5223);
            bool_or_expr535=bool_or_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_or_expr535.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bool_expr"

    public static class p_bool_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_bool_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:746:1: p_bool_expr : p_bool_or_expr ;
    public final babel17Parser.p_bool_expr_return p_bool_expr() throws RecognitionException {
        babel17Parser.p_bool_expr_return retval = new babel17Parser.p_bool_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.p_bool_or_expr_return p_bool_or_expr536 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:747:2: ( p_bool_or_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:747:4: p_bool_or_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_bool_or_expr_in_p_bool_expr5233);
            p_bool_or_expr536=p_bool_or_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_or_expr536.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_bool_expr"

    public static class bool_or_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bool_or_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:749:1: bool_or_expr : bool_and_expr ( ( NL )? token_OR ( NL )? bool_and_expr )* ;
    public final babel17Parser.bool_or_expr_return bool_or_expr() throws RecognitionException {
        babel17Parser.bool_or_expr_return retval = new babel17Parser.bool_or_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL538=null;
        Token NL540=null;
        babel17Parser.bool_and_expr_return bool_and_expr537 = null;

        babel17Parser.token_OR_return token_OR539 = null;

        babel17Parser.bool_and_expr_return bool_and_expr541 = null;


        CommonTree NL538_tree=null;
        CommonTree NL540_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:750:2: ( bool_and_expr ( ( NL )? token_OR ( NL )? bool_and_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:750:4: bool_and_expr ( ( NL )? token_OR ( NL )? bool_and_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_bool_and_expr_in_bool_or_expr5242);
            bool_and_expr537=bool_and_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_and_expr537.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:750:18: ( ( NL )? token_OR ( NL )? bool_and_expr )*
            loop230:
            do {
                int alt230=2;
                int LA230_0 = input.LA(1);

                if ( (LA230_0==NL) ) {
                    int LA230_1 = input.LA(2);

                    if ( (LA230_1==L_or) ) {
                        alt230=1;
                    }


                }
                else if ( (LA230_0==L_or) ) {
                    alt230=1;
                }


                switch (alt230) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:750:19: ( NL )? token_OR ( NL )? bool_and_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:750:21: ( NL )?
            	    int alt228=2;
            	    int LA228_0 = input.LA(1);

            	    if ( (LA228_0==NL) ) {
            	        alt228=1;
            	    }
            	    switch (alt228) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:750:21: NL
            	            {
            	            NL538=(Token)match(input,NL,FOLLOW_NL_in_bool_or_expr5245); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_OR_in_bool_or_expr5249);
            	    token_OR539=token_OR();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_OR539.getTree(), root_0);
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:750:36: ( NL )?
            	    int alt229=2;
            	    int LA229_0 = input.LA(1);

            	    if ( (LA229_0==NL) ) {
            	        alt229=1;
            	    }
            	    switch (alt229) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:750:36: NL
            	            {
            	            NL540=(Token)match(input,NL,FOLLOW_NL_in_bool_or_expr5252); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_bool_and_expr_in_bool_or_expr5256);
            	    bool_and_expr541=bool_and_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_and_expr541.getTree());

            	    }
            	    break;

            	default :
            	    break loop230;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bool_or_expr"

    public static class p_bool_or_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_bool_or_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:752:1: p_bool_or_expr : p_bool_and_expr ( ( NL )? token_OR ( NL )? p_bool_and_expr )* ;
    public final babel17Parser.p_bool_or_expr_return p_bool_or_expr() throws RecognitionException {
        babel17Parser.p_bool_or_expr_return retval = new babel17Parser.p_bool_or_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL543=null;
        Token NL545=null;
        babel17Parser.p_bool_and_expr_return p_bool_and_expr542 = null;

        babel17Parser.token_OR_return token_OR544 = null;

        babel17Parser.p_bool_and_expr_return p_bool_and_expr546 = null;


        CommonTree NL543_tree=null;
        CommonTree NL545_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:753:2: ( p_bool_and_expr ( ( NL )? token_OR ( NL )? p_bool_and_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:753:4: p_bool_and_expr ( ( NL )? token_OR ( NL )? p_bool_and_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_bool_and_expr_in_p_bool_or_expr5268);
            p_bool_and_expr542=p_bool_and_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_and_expr542.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:753:20: ( ( NL )? token_OR ( NL )? p_bool_and_expr )*
            loop233:
            do {
                int alt233=2;
                int LA233_0 = input.LA(1);

                if ( (LA233_0==NL) ) {
                    int LA233_2 = input.LA(2);

                    if ( (LA233_2==L_or) ) {
                        alt233=1;
                    }


                }
                else if ( (LA233_0==L_or) ) {
                    alt233=1;
                }


                switch (alt233) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:753:21: ( NL )? token_OR ( NL )? p_bool_and_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:753:23: ( NL )?
            	    int alt231=2;
            	    int LA231_0 = input.LA(1);

            	    if ( (LA231_0==NL) ) {
            	        alt231=1;
            	    }
            	    switch (alt231) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:753:23: NL
            	            {
            	            NL543=(Token)match(input,NL,FOLLOW_NL_in_p_bool_or_expr5271); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_OR_in_p_bool_or_expr5275);
            	    token_OR544=token_OR();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_OR544.getTree(), root_0);
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:753:38: ( NL )?
            	    int alt232=2;
            	    int LA232_0 = input.LA(1);

            	    if ( (LA232_0==NL) ) {
            	        alt232=1;
            	    }
            	    switch (alt232) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:753:38: NL
            	            {
            	            NL545=(Token)match(input,NL,FOLLOW_NL_in_p_bool_or_expr5278); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_bool_and_expr_in_p_bool_or_expr5282);
            	    p_bool_and_expr546=p_bool_and_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_and_expr546.getTree());

            	    }
            	    break;

            	default :
            	    break loop233;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_bool_or_expr"

    public static class bool_and_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bool_and_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:755:1: bool_and_expr : bool_xor_expr ( ( NL )? token_AND ( NL )? bool_xor_expr )* ;
    public final babel17Parser.bool_and_expr_return bool_and_expr() throws RecognitionException {
        babel17Parser.bool_and_expr_return retval = new babel17Parser.bool_and_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL548=null;
        Token NL550=null;
        babel17Parser.bool_xor_expr_return bool_xor_expr547 = null;

        babel17Parser.token_AND_return token_AND549 = null;

        babel17Parser.bool_xor_expr_return bool_xor_expr551 = null;


        CommonTree NL548_tree=null;
        CommonTree NL550_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:756:2: ( bool_xor_expr ( ( NL )? token_AND ( NL )? bool_xor_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:756:4: bool_xor_expr ( ( NL )? token_AND ( NL )? bool_xor_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_bool_xor_expr_in_bool_and_expr5294);
            bool_xor_expr547=bool_xor_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_xor_expr547.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:756:18: ( ( NL )? token_AND ( NL )? bool_xor_expr )*
            loop236:
            do {
                int alt236=2;
                int LA236_0 = input.LA(1);

                if ( (LA236_0==NL) ) {
                    int LA236_1 = input.LA(2);

                    if ( (LA236_1==L_and) ) {
                        alt236=1;
                    }


                }
                else if ( (LA236_0==L_and) ) {
                    alt236=1;
                }


                switch (alt236) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:756:19: ( NL )? token_AND ( NL )? bool_xor_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:756:21: ( NL )?
            	    int alt234=2;
            	    int LA234_0 = input.LA(1);

            	    if ( (LA234_0==NL) ) {
            	        alt234=1;
            	    }
            	    switch (alt234) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:756:21: NL
            	            {
            	            NL548=(Token)match(input,NL,FOLLOW_NL_in_bool_and_expr5297); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_AND_in_bool_and_expr5301);
            	    token_AND549=token_AND();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_AND549.getTree(), root_0);
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:756:37: ( NL )?
            	    int alt235=2;
            	    int LA235_0 = input.LA(1);

            	    if ( (LA235_0==NL) ) {
            	        alt235=1;
            	    }
            	    switch (alt235) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:756:37: NL
            	            {
            	            NL550=(Token)match(input,NL,FOLLOW_NL_in_bool_and_expr5304); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_bool_xor_expr_in_bool_and_expr5308);
            	    bool_xor_expr551=bool_xor_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_xor_expr551.getTree());

            	    }
            	    break;

            	default :
            	    break loop236;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bool_and_expr"

    public static class p_bool_and_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_bool_and_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:758:1: p_bool_and_expr : p_bool_xor_expr ( ( NL )? token_AND ( NL )? p_bool_xor_expr )* ;
    public final babel17Parser.p_bool_and_expr_return p_bool_and_expr() throws RecognitionException {
        babel17Parser.p_bool_and_expr_return retval = new babel17Parser.p_bool_and_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL553=null;
        Token NL555=null;
        babel17Parser.p_bool_xor_expr_return p_bool_xor_expr552 = null;

        babel17Parser.token_AND_return token_AND554 = null;

        babel17Parser.p_bool_xor_expr_return p_bool_xor_expr556 = null;


        CommonTree NL553_tree=null;
        CommonTree NL555_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:759:2: ( p_bool_xor_expr ( ( NL )? token_AND ( NL )? p_bool_xor_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:759:4: p_bool_xor_expr ( ( NL )? token_AND ( NL )? p_bool_xor_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_bool_xor_expr_in_p_bool_and_expr5320);
            p_bool_xor_expr552=p_bool_xor_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_xor_expr552.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:759:20: ( ( NL )? token_AND ( NL )? p_bool_xor_expr )*
            loop239:
            do {
                int alt239=2;
                int LA239_0 = input.LA(1);

                if ( (LA239_0==NL) ) {
                    int LA239_1 = input.LA(2);

                    if ( (LA239_1==L_and) ) {
                        alt239=1;
                    }


                }
                else if ( (LA239_0==L_and) ) {
                    alt239=1;
                }


                switch (alt239) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:759:21: ( NL )? token_AND ( NL )? p_bool_xor_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:759:23: ( NL )?
            	    int alt237=2;
            	    int LA237_0 = input.LA(1);

            	    if ( (LA237_0==NL) ) {
            	        alt237=1;
            	    }
            	    switch (alt237) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:759:23: NL
            	            {
            	            NL553=(Token)match(input,NL,FOLLOW_NL_in_p_bool_and_expr5323); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_AND_in_p_bool_and_expr5327);
            	    token_AND554=token_AND();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_AND554.getTree(), root_0);
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:759:39: ( NL )?
            	    int alt238=2;
            	    int LA238_0 = input.LA(1);

            	    if ( (LA238_0==NL) ) {
            	        alt238=1;
            	    }
            	    switch (alt238) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:759:39: NL
            	            {
            	            NL555=(Token)match(input,NL,FOLLOW_NL_in_p_bool_and_expr5330); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_bool_xor_expr_in_p_bool_and_expr5334);
            	    p_bool_xor_expr556=p_bool_xor_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_xor_expr556.getTree());

            	    }
            	    break;

            	default :
            	    break loop239;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_bool_and_expr"

    public static class bool_xor_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bool_xor_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:761:1: bool_xor_expr : bool_not_expr ( ( NL )? token_XOR ( NL )? bool_not_expr )* ;
    public final babel17Parser.bool_xor_expr_return bool_xor_expr() throws RecognitionException {
        babel17Parser.bool_xor_expr_return retval = new babel17Parser.bool_xor_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL558=null;
        Token NL560=null;
        babel17Parser.bool_not_expr_return bool_not_expr557 = null;

        babel17Parser.token_XOR_return token_XOR559 = null;

        babel17Parser.bool_not_expr_return bool_not_expr561 = null;


        CommonTree NL558_tree=null;
        CommonTree NL560_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:762:2: ( bool_not_expr ( ( NL )? token_XOR ( NL )? bool_not_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:762:4: bool_not_expr ( ( NL )? token_XOR ( NL )? bool_not_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_bool_not_expr_in_bool_xor_expr5345);
            bool_not_expr557=bool_not_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_not_expr557.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:762:18: ( ( NL )? token_XOR ( NL )? bool_not_expr )*
            loop242:
            do {
                int alt242=2;
                int LA242_0 = input.LA(1);

                if ( (LA242_0==NL) ) {
                    int LA242_1 = input.LA(2);

                    if ( (LA242_1==L_xor) ) {
                        alt242=1;
                    }


                }
                else if ( (LA242_0==L_xor) ) {
                    alt242=1;
                }


                switch (alt242) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:762:19: ( NL )? token_XOR ( NL )? bool_not_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:762:21: ( NL )?
            	    int alt240=2;
            	    int LA240_0 = input.LA(1);

            	    if ( (LA240_0==NL) ) {
            	        alt240=1;
            	    }
            	    switch (alt240) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:762:21: NL
            	            {
            	            NL558=(Token)match(input,NL,FOLLOW_NL_in_bool_xor_expr5348); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_XOR_in_bool_xor_expr5352);
            	    token_XOR559=token_XOR();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_XOR559.getTree(), root_0);
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:762:37: ( NL )?
            	    int alt241=2;
            	    int LA241_0 = input.LA(1);

            	    if ( (LA241_0==NL) ) {
            	        alt241=1;
            	    }
            	    switch (alt241) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:762:37: NL
            	            {
            	            NL560=(Token)match(input,NL,FOLLOW_NL_in_bool_xor_expr5355); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_bool_not_expr_in_bool_xor_expr5359);
            	    bool_not_expr561=bool_not_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_not_expr561.getTree());

            	    }
            	    break;

            	default :
            	    break loop242;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bool_xor_expr"

    public static class p_bool_xor_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_bool_xor_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:764:1: p_bool_xor_expr : p_bool_not_expr ( ( NL )? token_XOR ( NL )? p_bool_not_expr )* ;
    public final babel17Parser.p_bool_xor_expr_return p_bool_xor_expr() throws RecognitionException {
        babel17Parser.p_bool_xor_expr_return retval = new babel17Parser.p_bool_xor_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL563=null;
        Token NL565=null;
        babel17Parser.p_bool_not_expr_return p_bool_not_expr562 = null;

        babel17Parser.token_XOR_return token_XOR564 = null;

        babel17Parser.p_bool_not_expr_return p_bool_not_expr566 = null;


        CommonTree NL563_tree=null;
        CommonTree NL565_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:765:2: ( p_bool_not_expr ( ( NL )? token_XOR ( NL )? p_bool_not_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:765:4: p_bool_not_expr ( ( NL )? token_XOR ( NL )? p_bool_not_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_bool_not_expr_in_p_bool_xor_expr5371);
            p_bool_not_expr562=p_bool_not_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_not_expr562.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:765:20: ( ( NL )? token_XOR ( NL )? p_bool_not_expr )*
            loop245:
            do {
                int alt245=2;
                int LA245_0 = input.LA(1);

                if ( (LA245_0==NL) ) {
                    int LA245_1 = input.LA(2);

                    if ( (LA245_1==L_xor) ) {
                        alt245=1;
                    }


                }
                else if ( (LA245_0==L_xor) ) {
                    alt245=1;
                }


                switch (alt245) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:765:21: ( NL )? token_XOR ( NL )? p_bool_not_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:765:23: ( NL )?
            	    int alt243=2;
            	    int LA243_0 = input.LA(1);

            	    if ( (LA243_0==NL) ) {
            	        alt243=1;
            	    }
            	    switch (alt243) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:765:23: NL
            	            {
            	            NL563=(Token)match(input,NL,FOLLOW_NL_in_p_bool_xor_expr5374); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_XOR_in_p_bool_xor_expr5378);
            	    token_XOR564=token_XOR();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_XOR564.getTree(), root_0);
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:765:39: ( NL )?
            	    int alt244=2;
            	    int LA244_0 = input.LA(1);

            	    if ( (LA244_0==NL) ) {
            	        alt244=1;
            	    }
            	    switch (alt244) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:765:39: NL
            	            {
            	            NL565=(Token)match(input,NL,FOLLOW_NL_in_p_bool_xor_expr5381); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_bool_not_expr_in_p_bool_xor_expr5385);
            	    p_bool_not_expr566=p_bool_not_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_not_expr566.getTree());

            	    }
            	    break;

            	default :
            	    break loop245;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_bool_xor_expr"

    public static class bool_not_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bool_not_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:767:1: bool_not_expr : ( token_NOT ( NL )? bool_not_expr | rel_expr );
    public final babel17Parser.bool_not_expr_return bool_not_expr() throws RecognitionException {
        babel17Parser.bool_not_expr_return retval = new babel17Parser.bool_not_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL568=null;
        babel17Parser.token_NOT_return token_NOT567 = null;

        babel17Parser.bool_not_expr_return bool_not_expr569 = null;

        babel17Parser.rel_expr_return rel_expr570 = null;


        CommonTree NL568_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:768:2: ( token_NOT ( NL )? bool_not_expr | rel_expr )
            int alt247=2;
            int LA247_0 = input.LA(1);

            if ( (LA247_0==L_not) ) {
                alt247=1;
            }
            else if ( (LA247_0==L_begin||(LA247_0>=L_obj && LA247_0<=L_if)||(LA247_0>=L_while && LA247_0<=L_for)||LA247_0==L_match||LA247_0==L_try||LA247_0==L_choose||(LA247_0>=L_true && LA247_0<=L_nil)||LA247_0==L_typeof||(LA247_0>=L_root && LA247_0<=L_max)||LA247_0==MINUS||(LA247_0>=Constr && LA247_0<=Id)||(LA247_0>=Float && LA247_0<=Num)||(LA247_0>=String && LA247_0<=ROUND_BRACKET_OPEN)||LA247_0==SQUARE_BRACKET_OPEN||LA247_0==CURLY_BRACKET_OPEN) ) {
                alt247=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 247, 0, input);

                throw nvae;
            }
            switch (alt247) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:768:4: token_NOT ( NL )? bool_not_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_NOT_in_bool_not_expr5396);
                    token_NOT567=token_NOT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_NOT567.getTree(), root_0);
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:768:17: ( NL )?
                    int alt246=2;
                    int LA246_0 = input.LA(1);

                    if ( (LA246_0==NL) ) {
                        alt246=1;
                    }
                    switch (alt246) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:768:17: NL
                            {
                            NL568=(Token)match(input,NL,FOLLOW_NL_in_bool_not_expr5399); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_bool_not_expr_in_bool_not_expr5403);
                    bool_not_expr569=bool_not_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_not_expr569.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:769:4: rel_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rel_expr_in_bool_not_expr5408);
                    rel_expr570=rel_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_expr570.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bool_not_expr"

    public static class p_bool_not_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_bool_not_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:771:1: p_bool_not_expr : ( token_NOT ( NL )? p_bool_not_expr | p_rel_expr );
    public final babel17Parser.p_bool_not_expr_return p_bool_not_expr() throws RecognitionException {
        babel17Parser.p_bool_not_expr_return retval = new babel17Parser.p_bool_not_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL572=null;
        babel17Parser.token_NOT_return token_NOT571 = null;

        babel17Parser.p_bool_not_expr_return p_bool_not_expr573 = null;

        babel17Parser.p_rel_expr_return p_rel_expr574 = null;


        CommonTree NL572_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:772:2: ( token_NOT ( NL )? p_bool_not_expr | p_rel_expr )
            int alt249=2;
            int LA249_0 = input.LA(1);

            if ( (LA249_0==L_not) ) {
                alt249=1;
            }
            else if ( (LA249_0==L_begin||(LA249_0>=L_obj && LA249_0<=L_if)||(LA249_0>=L_while && LA249_0<=L_for)||LA249_0==L_match||LA249_0==L_try||LA249_0==L_choose||(LA249_0>=L_true && LA249_0<=L_nil)||LA249_0==L_typeof||(LA249_0>=L_root && LA249_0<=L_max)||LA249_0==MINUS||(LA249_0>=Constr && LA249_0<=Id)||(LA249_0>=Float && LA249_0<=Num)||(LA249_0>=String && LA249_0<=ROUND_BRACKET_OPEN)||LA249_0==SQUARE_BRACKET_OPEN||LA249_0==CURLY_BRACKET_OPEN) ) {
                alt249=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 249, 0, input);

                throw nvae;
            }
            switch (alt249) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:772:4: token_NOT ( NL )? p_bool_not_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_NOT_in_p_bool_not_expr5419);
                    token_NOT571=token_NOT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_NOT571.getTree(), root_0);
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:772:17: ( NL )?
                    int alt248=2;
                    int LA248_0 = input.LA(1);

                    if ( (LA248_0==NL) ) {
                        alt248=1;
                    }
                    switch (alt248) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:772:17: NL
                            {
                            NL572=(Token)match(input,NL,FOLLOW_NL_in_p_bool_not_expr5422); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_bool_not_expr_in_p_bool_not_expr5426);
                    p_bool_not_expr573=p_bool_not_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_not_expr573.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:773:4: p_rel_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_rel_expr_in_p_bool_not_expr5431);
                    p_rel_expr574=p_rel_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_rel_expr574.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_bool_not_expr"

    public static class rel_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rel_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:776:1: rel_expr : relate_expr ( ( NL )? rel_op ( NL )? relate_expr )* -> ^( COMPARE relate_expr ( rel_op relate_expr )* ) ;
    public final babel17Parser.rel_expr_return rel_expr() throws RecognitionException {
        babel17Parser.rel_expr_return retval = new babel17Parser.rel_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL576=null;
        Token NL578=null;
        babel17Parser.relate_expr_return relate_expr575 = null;

        babel17Parser.rel_op_return rel_op577 = null;

        babel17Parser.relate_expr_return relate_expr579 = null;


        CommonTree NL576_tree=null;
        CommonTree NL578_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_relate_expr=new RewriteRuleSubtreeStream(adaptor,"rule relate_expr");
        RewriteRuleSubtreeStream stream_rel_op=new RewriteRuleSubtreeStream(adaptor,"rule rel_op");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:777:2: ( relate_expr ( ( NL )? rel_op ( NL )? relate_expr )* -> ^( COMPARE relate_expr ( rel_op relate_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:777:4: relate_expr ( ( NL )? rel_op ( NL )? relate_expr )*
            {
            pushFollow(FOLLOW_relate_expr_in_rel_expr5441);
            relate_expr575=relate_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_relate_expr.add(relate_expr575.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:777:16: ( ( NL )? rel_op ( NL )? relate_expr )*
            loop252:
            do {
                int alt252=2;
                int LA252_0 = input.LA(1);

                if ( (LA252_0==NL) ) {
                    int LA252_1 = input.LA(2);

                    if ( ((LA252_1>=A_EQUAL && LA252_1<=U_GREATER_EQ)) ) {
                        alt252=1;
                    }


                }
                else if ( ((LA252_0>=A_EQUAL && LA252_0<=U_GREATER_EQ)) ) {
                    alt252=1;
                }


                switch (alt252) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:777:17: ( NL )? rel_op ( NL )? relate_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:777:17: ( NL )?
            	    int alt250=2;
            	    int LA250_0 = input.LA(1);

            	    if ( (LA250_0==NL) ) {
            	        alt250=1;
            	    }
            	    switch (alt250) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:777:17: NL
            	            {
            	            NL576=(Token)match(input,NL,FOLLOW_NL_in_rel_expr5444); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL576);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_rel_op_in_rel_expr5447);
            	    rel_op577=rel_op();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_rel_op.add(rel_op577.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:777:28: ( NL )?
            	    int alt251=2;
            	    int LA251_0 = input.LA(1);

            	    if ( (LA251_0==NL) ) {
            	        alt251=1;
            	    }
            	    switch (alt251) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:777:28: NL
            	            {
            	            NL578=(Token)match(input,NL,FOLLOW_NL_in_rel_expr5449); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL578);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_relate_expr_in_rel_expr5452);
            	    relate_expr579=relate_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_relate_expr.add(relate_expr579.getTree());

            	    }
            	    break;

            	default :
            	    break loop252;
                }
            } while (true);



            // AST REWRITE
            // elements: rel_op, relate_expr, relate_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 777:46: -> ^( COMPARE relate_expr ( rel_op relate_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:777:49: ^( COMPARE relate_expr ( rel_op relate_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPARE, "COMPARE"), root_1);

                adaptor.addChild(root_1, stream_relate_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:777:71: ( rel_op relate_expr )*
                while ( stream_rel_op.hasNext()||stream_relate_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_rel_op.nextTree());
                    adaptor.addChild(root_1, stream_relate_expr.nextTree());

                }
                stream_rel_op.reset();
                stream_relate_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rel_expr"

    public static class p_rel_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_rel_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:779:1: p_rel_expr : p_relate_expr ( ( NL )? rel_op ( NL )? p_relate_expr )* -> ^( COMPARE p_relate_expr ( rel_op p_relate_expr )* ) ;
    public final babel17Parser.p_rel_expr_return p_rel_expr() throws RecognitionException {
        babel17Parser.p_rel_expr_return retval = new babel17Parser.p_rel_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL581=null;
        Token NL583=null;
        babel17Parser.p_relate_expr_return p_relate_expr580 = null;

        babel17Parser.rel_op_return rel_op582 = null;

        babel17Parser.p_relate_expr_return p_relate_expr584 = null;


        CommonTree NL581_tree=null;
        CommonTree NL583_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_p_relate_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_relate_expr");
        RewriteRuleSubtreeStream stream_rel_op=new RewriteRuleSubtreeStream(adaptor,"rule rel_op");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:2: ( p_relate_expr ( ( NL )? rel_op ( NL )? p_relate_expr )* -> ^( COMPARE p_relate_expr ( rel_op p_relate_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:4: p_relate_expr ( ( NL )? rel_op ( NL )? p_relate_expr )*
            {
            pushFollow(FOLLOW_p_relate_expr_in_p_rel_expr5479);
            p_relate_expr580=p_relate_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_relate_expr.add(p_relate_expr580.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:18: ( ( NL )? rel_op ( NL )? p_relate_expr )*
            loop255:
            do {
                int alt255=2;
                int LA255_0 = input.LA(1);

                if ( (LA255_0==NL) ) {
                    int LA255_1 = input.LA(2);

                    if ( ((LA255_1>=A_EQUAL && LA255_1<=U_GREATER_EQ)) ) {
                        alt255=1;
                    }


                }
                else if ( ((LA255_0>=A_EQUAL && LA255_0<=U_GREATER_EQ)) ) {
                    alt255=1;
                }


                switch (alt255) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:19: ( NL )? rel_op ( NL )? p_relate_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:19: ( NL )?
            	    int alt253=2;
            	    int LA253_0 = input.LA(1);

            	    if ( (LA253_0==NL) ) {
            	        alt253=1;
            	    }
            	    switch (alt253) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:19: NL
            	            {
            	            NL581=(Token)match(input,NL,FOLLOW_NL_in_p_rel_expr5482); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL581);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_rel_op_in_p_rel_expr5485);
            	    rel_op582=rel_op();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_rel_op.add(rel_op582.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:30: ( NL )?
            	    int alt254=2;
            	    int LA254_0 = input.LA(1);

            	    if ( (LA254_0==NL) ) {
            	        alt254=1;
            	    }
            	    switch (alt254) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:30: NL
            	            {
            	            NL583=(Token)match(input,NL,FOLLOW_NL_in_p_rel_expr5487); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL583);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_relate_expr_in_p_rel_expr5490);
            	    p_relate_expr584=p_relate_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_relate_expr.add(p_relate_expr584.getTree());

            	    }
            	    break;

            	default :
            	    break loop255;
                }
            } while (true);



            // AST REWRITE
            // elements: rel_op, p_relate_expr, p_relate_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 780:50: -> ^( COMPARE p_relate_expr ( rel_op p_relate_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:53: ^( COMPARE p_relate_expr ( rel_op p_relate_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPARE, "COMPARE"), root_1);

                adaptor.addChild(root_1, stream_p_relate_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:77: ( rel_op p_relate_expr )*
                while ( stream_rel_op.hasNext()||stream_p_relate_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_rel_op.nextTree());
                    adaptor.addChild(root_1, stream_p_relate_expr.nextTree());

                }
                stream_rel_op.reset();
                stream_p_relate_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_rel_expr"

    public static class rel_op_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rel_op"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:783:1: rel_op : ( token_EQUAL | token_NOT_EQUAL | GREATER | token_GREATER_EQ | LESS | token_LESS_EQ );
    public final babel17Parser.rel_op_return rel_op() throws RecognitionException {
        babel17Parser.rel_op_return retval = new babel17Parser.rel_op_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token GREATER587=null;
        Token LESS589=null;
        babel17Parser.token_EQUAL_return token_EQUAL585 = null;

        babel17Parser.token_NOT_EQUAL_return token_NOT_EQUAL586 = null;

        babel17Parser.token_GREATER_EQ_return token_GREATER_EQ588 = null;

        babel17Parser.token_LESS_EQ_return token_LESS_EQ590 = null;


        CommonTree GREATER587_tree=null;
        CommonTree LESS589_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:783:8: ( token_EQUAL | token_NOT_EQUAL | GREATER | token_GREATER_EQ | LESS | token_LESS_EQ )
            int alt256=6;
            switch ( input.LA(1) ) {
            case A_EQUAL:
            case U_EQUAL:
                {
                alt256=1;
                }
                break;
            case A_NOT_EQUAL:
            case U_NOT_EQUAL:
                {
                alt256=2;
                }
                break;
            case GREATER:
                {
                alt256=3;
                }
                break;
            case A_GREATER_EQ:
            case U_GREATER_EQ:
                {
                alt256=4;
                }
                break;
            case LESS:
                {
                alt256=5;
                }
                break;
            case A_LESS_EQ:
            case U_LESS_EQ:
                {
                alt256=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 256, 0, input);

                throw nvae;
            }

            switch (alt256) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:783:10: token_EQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_EQUAL_in_rel_op5516);
                    token_EQUAL585=token_EQUAL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_EQUAL585.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:783:24: token_NOT_EQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_NOT_EQUAL_in_rel_op5520);
                    token_NOT_EQUAL586=token_NOT_EQUAL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_NOT_EQUAL586.getTree());

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:783:42: GREATER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    GREATER587=(Token)match(input,GREATER,FOLLOW_GREATER_in_rel_op5524); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER587_tree = (CommonTree)adaptor.create(GREATER587);
                    adaptor.addChild(root_0, GREATER587_tree);
                    }

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:783:52: token_GREATER_EQ
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_GREATER_EQ_in_rel_op5528);
                    token_GREATER_EQ588=token_GREATER_EQ();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_GREATER_EQ588.getTree());

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:783:71: LESS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LESS589=(Token)match(input,LESS,FOLLOW_LESS_in_rel_op5532); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LESS589_tree = (CommonTree)adaptor.create(LESS589);
                    adaptor.addChild(root_0, LESS589_tree);
                    }

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:783:78: token_LESS_EQ
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_LESS_EQ_in_rel_op5536);
                    token_LESS_EQ590=token_LESS_EQ();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_LESS_EQ590.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rel_op"

    public static class relate_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relate_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:1: relate_expr : convert_expr ( ( NL )? TOK_RELATE ( NL )? convert_expr )? -> ^( RELATE ( convert_expr )* ) ;
    public final babel17Parser.relate_expr_return relate_expr() throws RecognitionException {
        babel17Parser.relate_expr_return retval = new babel17Parser.relate_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL592=null;
        Token TOK_RELATE593=null;
        Token NL594=null;
        babel17Parser.convert_expr_return convert_expr591 = null;

        babel17Parser.convert_expr_return convert_expr595 = null;


        CommonTree NL592_tree=null;
        CommonTree TOK_RELATE593_tree=null;
        CommonTree NL594_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_TOK_RELATE=new RewriteRuleTokenStream(adaptor,"token TOK_RELATE");
        RewriteRuleSubtreeStream stream_convert_expr=new RewriteRuleSubtreeStream(adaptor,"rule convert_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:12: ( convert_expr ( ( NL )? TOK_RELATE ( NL )? convert_expr )? -> ^( RELATE ( convert_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:14: convert_expr ( ( NL )? TOK_RELATE ( NL )? convert_expr )?
            {
            pushFollow(FOLLOW_convert_expr_in_relate_expr5545);
            convert_expr591=convert_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_convert_expr.add(convert_expr591.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:27: ( ( NL )? TOK_RELATE ( NL )? convert_expr )?
            int alt259=2;
            int LA259_0 = input.LA(1);

            if ( (LA259_0==NL) ) {
                int LA259_1 = input.LA(2);

                if ( (LA259_1==TOK_RELATE) ) {
                    alt259=1;
                }
            }
            else if ( (LA259_0==TOK_RELATE) ) {
                alt259=1;
            }
            switch (alt259) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:28: ( NL )? TOK_RELATE ( NL )? convert_expr
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:28: ( NL )?
                    int alt257=2;
                    int LA257_0 = input.LA(1);

                    if ( (LA257_0==NL) ) {
                        alt257=1;
                    }
                    switch (alt257) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:28: NL
                            {
                            NL592=(Token)match(input,NL,FOLLOW_NL_in_relate_expr5548); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL592);


                            }
                            break;

                    }

                    TOK_RELATE593=(Token)match(input,TOK_RELATE,FOLLOW_TOK_RELATE_in_relate_expr5551); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TOK_RELATE.add(TOK_RELATE593);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:43: ( NL )?
                    int alt258=2;
                    int LA258_0 = input.LA(1);

                    if ( (LA258_0==NL) ) {
                        alt258=1;
                    }
                    switch (alt258) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:43: NL
                            {
                            NL594=(Token)match(input,NL,FOLLOW_NL_in_relate_expr5553); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL594);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_convert_expr_in_relate_expr5556);
                    convert_expr595=convert_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_convert_expr.add(convert_expr595.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: convert_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 785:62: -> ^( RELATE ( convert_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:65: ^( RELATE ( convert_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RELATE, "RELATE"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:74: ( convert_expr )*
                while ( stream_convert_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_convert_expr.nextTree());

                }
                stream_convert_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "relate_expr"

    public static class p_relate_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_relate_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:787:1: p_relate_expr : p_convert_expr ( ( NL )? TOK_RELATE ( NL )? p_convert_expr )? -> ^( RELATE ( p_convert_expr )* ) ;
    public final babel17Parser.p_relate_expr_return p_relate_expr() throws RecognitionException {
        babel17Parser.p_relate_expr_return retval = new babel17Parser.p_relate_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL597=null;
        Token TOK_RELATE598=null;
        Token NL599=null;
        babel17Parser.p_convert_expr_return p_convert_expr596 = null;

        babel17Parser.p_convert_expr_return p_convert_expr600 = null;


        CommonTree NL597_tree=null;
        CommonTree TOK_RELATE598_tree=null;
        CommonTree NL599_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_TOK_RELATE=new RewriteRuleTokenStream(adaptor,"token TOK_RELATE");
        RewriteRuleSubtreeStream stream_p_convert_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_convert_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:787:14: ( p_convert_expr ( ( NL )? TOK_RELATE ( NL )? p_convert_expr )? -> ^( RELATE ( p_convert_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:787:16: p_convert_expr ( ( NL )? TOK_RELATE ( NL )? p_convert_expr )?
            {
            pushFollow(FOLLOW_p_convert_expr_in_p_relate_expr5575);
            p_convert_expr596=p_convert_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_convert_expr.add(p_convert_expr596.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:787:31: ( ( NL )? TOK_RELATE ( NL )? p_convert_expr )?
            int alt262=2;
            int LA262_0 = input.LA(1);

            if ( (LA262_0==NL) ) {
                int LA262_1 = input.LA(2);

                if ( (LA262_1==TOK_RELATE) ) {
                    alt262=1;
                }
            }
            else if ( (LA262_0==TOK_RELATE) ) {
                alt262=1;
            }
            switch (alt262) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:787:32: ( NL )? TOK_RELATE ( NL )? p_convert_expr
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:787:32: ( NL )?
                    int alt260=2;
                    int LA260_0 = input.LA(1);

                    if ( (LA260_0==NL) ) {
                        alt260=1;
                    }
                    switch (alt260) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:787:32: NL
                            {
                            NL597=(Token)match(input,NL,FOLLOW_NL_in_p_relate_expr5578); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL597);


                            }
                            break;

                    }

                    TOK_RELATE598=(Token)match(input,TOK_RELATE,FOLLOW_TOK_RELATE_in_p_relate_expr5581); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TOK_RELATE.add(TOK_RELATE598);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:787:47: ( NL )?
                    int alt261=2;
                    int LA261_0 = input.LA(1);

                    if ( (LA261_0==NL) ) {
                        alt261=1;
                    }
                    switch (alt261) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:787:47: NL
                            {
                            NL599=(Token)match(input,NL,FOLLOW_NL_in_p_relate_expr5583); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL599);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_convert_expr_in_p_relate_expr5586);
                    p_convert_expr600=p_convert_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_convert_expr.add(p_convert_expr600.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: p_convert_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 787:68: -> ^( RELATE ( p_convert_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:787:71: ^( RELATE ( p_convert_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RELATE, "RELATE"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:787:80: ( p_convert_expr )*
                while ( stream_p_convert_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_convert_expr.nextTree());

                }
                stream_p_convert_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_relate_expr"

    public static class convert_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "convert_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:789:1: convert_expr : term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )? -> ^( CONVERT term_expr ( typeannotation )? ) ;
    public final babel17Parser.convert_expr_return convert_expr() throws RecognitionException {
        babel17Parser.convert_expr_return retval = new babel17Parser.convert_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL602=null;
        Token TOK_CONVERT603=null;
        Token NL604=null;
        babel17Parser.term_expr_return term_expr601 = null;

        babel17Parser.typeannotation_return typeannotation605 = null;


        CommonTree NL602_tree=null;
        CommonTree TOK_CONVERT603_tree=null;
        CommonTree NL604_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_TOK_CONVERT=new RewriteRuleTokenStream(adaptor,"token TOK_CONVERT");
        RewriteRuleSubtreeStream stream_typeannotation=new RewriteRuleSubtreeStream(adaptor,"rule typeannotation");
        RewriteRuleSubtreeStream stream_term_expr=new RewriteRuleSubtreeStream(adaptor,"rule term_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:790:2: ( term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )? -> ^( CONVERT term_expr ( typeannotation )? ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:790:4: term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )?
            {
            pushFollow(FOLLOW_term_expr_in_convert_expr5607);
            term_expr601=term_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_term_expr.add(term_expr601.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:790:14: ( ( NL )? TOK_CONVERT ( NL )? typeannotation )?
            int alt265=2;
            int LA265_0 = input.LA(1);

            if ( (LA265_0==NL) ) {
                int LA265_1 = input.LA(2);

                if ( (LA265_1==TOK_CONVERT) ) {
                    alt265=1;
                }
            }
            else if ( (LA265_0==TOK_CONVERT) ) {
                alt265=1;
            }
            switch (alt265) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:790:15: ( NL )? TOK_CONVERT ( NL )? typeannotation
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:790:15: ( NL )?
                    int alt263=2;
                    int LA263_0 = input.LA(1);

                    if ( (LA263_0==NL) ) {
                        alt263=1;
                    }
                    switch (alt263) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:790:15: NL
                            {
                            NL602=(Token)match(input,NL,FOLLOW_NL_in_convert_expr5610); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL602);


                            }
                            break;

                    }

                    TOK_CONVERT603=(Token)match(input,TOK_CONVERT,FOLLOW_TOK_CONVERT_in_convert_expr5613); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TOK_CONVERT.add(TOK_CONVERT603);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:790:31: ( NL )?
                    int alt264=2;
                    int LA264_0 = input.LA(1);

                    if ( (LA264_0==NL) ) {
                        alt264=1;
                    }
                    switch (alt264) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:790:31: NL
                            {
                            NL604=(Token)match(input,NL,FOLLOW_NL_in_convert_expr5615); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL604);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeannotation_in_convert_expr5618);
                    typeannotation605=typeannotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeannotation.add(typeannotation605.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: typeannotation, term_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 790:52: -> ^( CONVERT term_expr ( typeannotation )? )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:790:55: ^( CONVERT term_expr ( typeannotation )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONVERT, "CONVERT"), root_1);

                adaptor.addChild(root_1, stream_term_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:790:75: ( typeannotation )?
                if ( stream_typeannotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeannotation.nextTree());

                }
                stream_typeannotation.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "convert_expr"

    public static class p_convert_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_convert_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:792:1: p_convert_expr : p_term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )? -> ^( CONVERT p_term_expr ( typeannotation )? ) ;
    public final babel17Parser.p_convert_expr_return p_convert_expr() throws RecognitionException {
        babel17Parser.p_convert_expr_return retval = new babel17Parser.p_convert_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL607=null;
        Token TOK_CONVERT608=null;
        Token NL609=null;
        babel17Parser.p_term_expr_return p_term_expr606 = null;

        babel17Parser.typeannotation_return typeannotation610 = null;


        CommonTree NL607_tree=null;
        CommonTree TOK_CONVERT608_tree=null;
        CommonTree NL609_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_TOK_CONVERT=new RewriteRuleTokenStream(adaptor,"token TOK_CONVERT");
        RewriteRuleSubtreeStream stream_typeannotation=new RewriteRuleSubtreeStream(adaptor,"rule typeannotation");
        RewriteRuleSubtreeStream stream_p_term_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_term_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:793:2: ( p_term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )? -> ^( CONVERT p_term_expr ( typeannotation )? ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:793:4: p_term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )?
            {
            pushFollow(FOLLOW_p_term_expr_in_p_convert_expr5640);
            p_term_expr606=p_term_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_term_expr.add(p_term_expr606.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:793:16: ( ( NL )? TOK_CONVERT ( NL )? typeannotation )?
            int alt268=2;
            int LA268_0 = input.LA(1);

            if ( (LA268_0==NL) ) {
                int LA268_1 = input.LA(2);

                if ( (LA268_1==TOK_CONVERT) ) {
                    alt268=1;
                }
            }
            else if ( (LA268_0==TOK_CONVERT) ) {
                alt268=1;
            }
            switch (alt268) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:793:17: ( NL )? TOK_CONVERT ( NL )? typeannotation
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:793:17: ( NL )?
                    int alt266=2;
                    int LA266_0 = input.LA(1);

                    if ( (LA266_0==NL) ) {
                        alt266=1;
                    }
                    switch (alt266) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:793:17: NL
                            {
                            NL607=(Token)match(input,NL,FOLLOW_NL_in_p_convert_expr5643); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL607);


                            }
                            break;

                    }

                    TOK_CONVERT608=(Token)match(input,TOK_CONVERT,FOLLOW_TOK_CONVERT_in_p_convert_expr5646); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TOK_CONVERT.add(TOK_CONVERT608);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:793:33: ( NL )?
                    int alt267=2;
                    int LA267_0 = input.LA(1);

                    if ( (LA267_0==NL) ) {
                        alt267=1;
                    }
                    switch (alt267) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:793:33: NL
                            {
                            NL609=(Token)match(input,NL,FOLLOW_NL_in_p_convert_expr5648); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL609);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeannotation_in_p_convert_expr5651);
                    typeannotation610=typeannotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeannotation.add(typeannotation610.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: typeannotation, p_term_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 793:54: -> ^( CONVERT p_term_expr ( typeannotation )? )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:793:57: ^( CONVERT p_term_expr ( typeannotation )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONVERT, "CONVERT"), root_1);

                adaptor.addChild(root_1, stream_p_term_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:793:79: ( typeannotation )?
                if ( stream_typeannotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeannotation.nextTree());

                }
                stream_typeannotation.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_convert_expr"

    public static class term_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "term_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:795:1: term_expr : ( builtin_fun term_expr | arith_expr );
    public final babel17Parser.term_expr_return term_expr() throws RecognitionException {
        babel17Parser.term_expr_return retval = new babel17Parser.term_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.builtin_fun_return builtin_fun611 = null;

        babel17Parser.term_expr_return term_expr612 = null;

        babel17Parser.arith_expr_return arith_expr613 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:796:2: ( builtin_fun term_expr | arith_expr )
            int alt269=2;
            int LA269_0 = input.LA(1);

            if ( (LA269_0==L_choose||LA269_0==L_random||LA269_0==L_typeof||(LA269_0>=L_native && LA269_0<=L_max)) ) {
                alt269=1;
            }
            else if ( (LA269_0==L_begin||(LA269_0>=L_obj && LA269_0<=L_if)||(LA269_0>=L_while && LA269_0<=L_for)||LA269_0==L_match||LA269_0==L_try||(LA269_0>=L_true && LA269_0<=L_this)||LA269_0==L_nil||LA269_0==L_root||LA269_0==MINUS||(LA269_0>=Constr && LA269_0<=Id)||(LA269_0>=Float && LA269_0<=Num)||(LA269_0>=String && LA269_0<=ROUND_BRACKET_OPEN)||LA269_0==SQUARE_BRACKET_OPEN||LA269_0==CURLY_BRACKET_OPEN) ) {
                alt269=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 269, 0, input);

                throw nvae;
            }
            switch (alt269) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:796:4: builtin_fun term_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_builtin_fun_in_term_expr5674);
                    builtin_fun611=builtin_fun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(builtin_fun611.getTree(), root_0);
                    pushFollow(FOLLOW_term_expr_in_term_expr5677);
                    term_expr612=term_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, term_expr612.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:797:4: arith_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arith_expr_in_term_expr5682);
                    arith_expr613=arith_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_expr613.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "term_expr"

    public static class p_term_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_term_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:799:1: p_term_expr : ( builtin_fun ( NL )? p_term_expr | p_arith_expr );
    public final babel17Parser.p_term_expr_return p_term_expr() throws RecognitionException {
        babel17Parser.p_term_expr_return retval = new babel17Parser.p_term_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL615=null;
        babel17Parser.builtin_fun_return builtin_fun614 = null;

        babel17Parser.p_term_expr_return p_term_expr616 = null;

        babel17Parser.p_arith_expr_return p_arith_expr617 = null;


        CommonTree NL615_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:800:2: ( builtin_fun ( NL )? p_term_expr | p_arith_expr )
            int alt271=2;
            int LA271_0 = input.LA(1);

            if ( (LA271_0==L_choose||LA271_0==L_random||LA271_0==L_typeof||(LA271_0>=L_native && LA271_0<=L_max)) ) {
                alt271=1;
            }
            else if ( (LA271_0==L_begin||(LA271_0>=L_obj && LA271_0<=L_if)||(LA271_0>=L_while && LA271_0<=L_for)||LA271_0==L_match||LA271_0==L_try||(LA271_0>=L_true && LA271_0<=L_this)||LA271_0==L_nil||LA271_0==L_root||LA271_0==MINUS||(LA271_0>=Constr && LA271_0<=Id)||(LA271_0>=Float && LA271_0<=Num)||(LA271_0>=String && LA271_0<=ROUND_BRACKET_OPEN)||LA271_0==SQUARE_BRACKET_OPEN||LA271_0==CURLY_BRACKET_OPEN) ) {
                alt271=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 271, 0, input);

                throw nvae;
            }
            switch (alt271) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:800:4: builtin_fun ( NL )? p_term_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_builtin_fun_in_p_term_expr5692);
                    builtin_fun614=builtin_fun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(builtin_fun614.getTree(), root_0);
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:800:19: ( NL )?
                    int alt270=2;
                    int LA270_0 = input.LA(1);

                    if ( (LA270_0==NL) ) {
                        alt270=1;
                    }
                    switch (alt270) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:800:19: NL
                            {
                            NL615=(Token)match(input,NL,FOLLOW_NL_in_p_term_expr5695); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_term_expr_in_p_term_expr5699);
                    p_term_expr616=p_term_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_term_expr616.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:801:4: p_arith_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_arith_expr_in_p_term_expr5704);
                    p_arith_expr617=p_arith_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_expr617.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_term_expr"

    public static class builtin_fun_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtin_fun"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:803:1: builtin_fun : ( L_random | L_choose | L_typeof | L_native | L_min | L_max );
    public final babel17Parser.builtin_fun_return builtin_fun() throws RecognitionException {
        babel17Parser.builtin_fun_return retval = new babel17Parser.builtin_fun_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set618=null;

        CommonTree set618_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:804:2: ( L_random | L_choose | L_typeof | L_native | L_min | L_max )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set618=(Token)input.LT(1);
            if ( input.LA(1)==L_choose||input.LA(1)==L_random||input.LA(1)==L_typeof||(input.LA(1)>=L_native && input.LA(1)<=L_max) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set618));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtin_fun"

    public static class arith_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:1: arith_expr : plusplus_expr ;
    public final babel17Parser.arith_expr_return arith_expr() throws RecognitionException {
        babel17Parser.arith_expr_return retval = new babel17Parser.arith_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.plusplus_expr_return plusplus_expr619 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:807:2: ( plusplus_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:807:4: plusplus_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_plusplus_expr_in_arith_expr5742);
            plusplus_expr619=plusplus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, plusplus_expr619.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_expr"

    public static class p_arith_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:1: p_arith_expr : p_plusplus_expr ;
    public final babel17Parser.p_arith_expr_return p_arith_expr() throws RecognitionException {
        babel17Parser.p_arith_expr_return retval = new babel17Parser.p_arith_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.p_plusplus_expr_return p_plusplus_expr620 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:2: ( p_plusplus_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:4: p_plusplus_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_plusplus_expr_in_p_arith_expr5751);
            p_plusplus_expr620=p_plusplus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_plusplus_expr620.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_expr"

    public static class plusplus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "plusplus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:812:1: plusplus_expr : timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr )* ;
    public final babel17Parser.plusplus_expr_return plusplus_expr() throws RecognitionException {
        babel17Parser.plusplus_expr_return retval = new babel17Parser.plusplus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL622=null;
        Token PLUSPLUS623=null;
        Token MINUSMINUS624=null;
        Token NL625=null;
        babel17Parser.timestimes_expr_return timestimes_expr621 = null;

        babel17Parser.timestimes_expr_return timestimes_expr626 = null;


        CommonTree NL622_tree=null;
        CommonTree PLUSPLUS623_tree=null;
        CommonTree MINUSMINUS624_tree=null;
        CommonTree NL625_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:2: ( timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:4: timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_timestimes_expr_in_plusplus_expr5761);
            timestimes_expr621=timestimes_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, timestimes_expr621.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:20: ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr )*
            loop275:
            do {
                int alt275=2;
                int LA275_0 = input.LA(1);

                if ( (LA275_0==NL) ) {
                    int LA275_1 = input.LA(2);

                    if ( ((LA275_1>=PLUSPLUS && LA275_1<=MINUSMINUS)) ) {
                        alt275=1;
                    }


                }
                else if ( ((LA275_0>=PLUSPLUS && LA275_0<=MINUSMINUS)) ) {
                    alt275=1;
                }


                switch (alt275) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:21: ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:23: ( NL )?
            	    int alt272=2;
            	    int LA272_0 = input.LA(1);

            	    if ( (LA272_0==NL) ) {
            	        alt272=1;
            	    }
            	    switch (alt272) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:23: NL
            	            {
            	            NL622=(Token)match(input,NL,FOLLOW_NL_in_plusplus_expr5764); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:26: ( PLUSPLUS | MINUSMINUS )
            	    int alt273=2;
            	    int LA273_0 = input.LA(1);

            	    if ( (LA273_0==PLUSPLUS) ) {
            	        alt273=1;
            	    }
            	    else if ( (LA273_0==MINUSMINUS) ) {
            	        alt273=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 273, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt273) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:27: PLUSPLUS
            	            {
            	            PLUSPLUS623=(Token)match(input,PLUSPLUS,FOLLOW_PLUSPLUS_in_plusplus_expr5769); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUSPLUS623_tree = (CommonTree)adaptor.create(PLUSPLUS623);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUSPLUS623_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:37: MINUSMINUS
            	            {
            	            MINUSMINUS624=(Token)match(input,MINUSMINUS,FOLLOW_MINUSMINUS_in_plusplus_expr5772); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUSMINUS624_tree = (CommonTree)adaptor.create(MINUSMINUS624);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUSMINUS624_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:52: ( NL )?
            	    int alt274=2;
            	    int LA274_0 = input.LA(1);

            	    if ( (LA274_0==NL) ) {
            	        alt274=1;
            	    }
            	    switch (alt274) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:52: NL
            	            {
            	            NL625=(Token)match(input,NL,FOLLOW_NL_in_plusplus_expr5776); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_timestimes_expr_in_plusplus_expr5780);
            	    timestimes_expr626=timestimes_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, timestimes_expr626.getTree());

            	    }
            	    break;

            	default :
            	    break loop275;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "plusplus_expr"

    public static class p_plusplus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_plusplus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:815:1: p_plusplus_expr : p_timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr )* ;
    public final babel17Parser.p_plusplus_expr_return p_plusplus_expr() throws RecognitionException {
        babel17Parser.p_plusplus_expr_return retval = new babel17Parser.p_plusplus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL628=null;
        Token PLUSPLUS629=null;
        Token MINUSMINUS630=null;
        Token NL631=null;
        babel17Parser.p_timestimes_expr_return p_timestimes_expr627 = null;

        babel17Parser.p_timestimes_expr_return p_timestimes_expr632 = null;


        CommonTree NL628_tree=null;
        CommonTree PLUSPLUS629_tree=null;
        CommonTree MINUSMINUS630_tree=null;
        CommonTree NL631_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:2: ( p_timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:4: p_timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_timestimes_expr_in_p_plusplus_expr5792);
            p_timestimes_expr627=p_timestimes_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_timestimes_expr627.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:22: ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr )*
            loop279:
            do {
                int alt279=2;
                int LA279_0 = input.LA(1);

                if ( (LA279_0==NL) ) {
                    int LA279_1 = input.LA(2);

                    if ( ((LA279_1>=PLUSPLUS && LA279_1<=MINUSMINUS)) ) {
                        alt279=1;
                    }


                }
                else if ( ((LA279_0>=PLUSPLUS && LA279_0<=MINUSMINUS)) ) {
                    alt279=1;
                }


                switch (alt279) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:23: ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:25: ( NL )?
            	    int alt276=2;
            	    int LA276_0 = input.LA(1);

            	    if ( (LA276_0==NL) ) {
            	        alt276=1;
            	    }
            	    switch (alt276) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:25: NL
            	            {
            	            NL628=(Token)match(input,NL,FOLLOW_NL_in_p_plusplus_expr5795); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:28: ( PLUSPLUS | MINUSMINUS )
            	    int alt277=2;
            	    int LA277_0 = input.LA(1);

            	    if ( (LA277_0==PLUSPLUS) ) {
            	        alt277=1;
            	    }
            	    else if ( (LA277_0==MINUSMINUS) ) {
            	        alt277=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 277, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt277) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:29: PLUSPLUS
            	            {
            	            PLUSPLUS629=(Token)match(input,PLUSPLUS,FOLLOW_PLUSPLUS_in_p_plusplus_expr5800); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUSPLUS629_tree = (CommonTree)adaptor.create(PLUSPLUS629);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUSPLUS629_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:39: MINUSMINUS
            	            {
            	            MINUSMINUS630=(Token)match(input,MINUSMINUS,FOLLOW_MINUSMINUS_in_p_plusplus_expr5803); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUSMINUS630_tree = (CommonTree)adaptor.create(MINUSMINUS630);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUSMINUS630_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:54: ( NL )?
            	    int alt278=2;
            	    int LA278_0 = input.LA(1);

            	    if ( (LA278_0==NL) ) {
            	        alt278=1;
            	    }
            	    switch (alt278) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:54: NL
            	            {
            	            NL631=(Token)match(input,NL,FOLLOW_NL_in_p_plusplus_expr5807); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_timestimes_expr_in_p_plusplus_expr5811);
            	    p_timestimes_expr632=p_timestimes_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_timestimes_expr632.getTree());

            	    }
            	    break;

            	default :
            	    break loop279;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_plusplus_expr"

    public static class timestimes_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timestimes_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:819:1: timestimes_expr : simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr )* ;
    public final babel17Parser.timestimes_expr_return timestimes_expr() throws RecognitionException {
        babel17Parser.timestimes_expr_return retval = new babel17Parser.timestimes_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL634=null;
        Token TIMESTIMES635=null;
        Token QUOTIENTQUOTIENT636=null;
        Token NL637=null;
        babel17Parser.simple_expr_return simple_expr633 = null;

        babel17Parser.simple_expr_return simple_expr638 = null;


        CommonTree NL634_tree=null;
        CommonTree TIMESTIMES635_tree=null;
        CommonTree QUOTIENTQUOTIENT636_tree=null;
        CommonTree NL637_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:820:2: ( simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:820:4: simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_simple_expr_in_timestimes_expr5823);
            simple_expr633=simple_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expr633.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:820:16: ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr )*
            loop283:
            do {
                int alt283=2;
                int LA283_0 = input.LA(1);

                if ( (LA283_0==NL) ) {
                    int LA283_1 = input.LA(2);

                    if ( ((LA283_1>=TIMESTIMES && LA283_1<=QUOTIENTQUOTIENT)) ) {
                        alt283=1;
                    }


                }
                else if ( ((LA283_0>=TIMESTIMES && LA283_0<=QUOTIENTQUOTIENT)) ) {
                    alt283=1;
                }


                switch (alt283) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:820:17: ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:820:19: ( NL )?
            	    int alt280=2;
            	    int LA280_0 = input.LA(1);

            	    if ( (LA280_0==NL) ) {
            	        alt280=1;
            	    }
            	    switch (alt280) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:820:19: NL
            	            {
            	            NL634=(Token)match(input,NL,FOLLOW_NL_in_timestimes_expr5826); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:820:22: ( TIMESTIMES | QUOTIENTQUOTIENT )
            	    int alt281=2;
            	    int LA281_0 = input.LA(1);

            	    if ( (LA281_0==TIMESTIMES) ) {
            	        alt281=1;
            	    }
            	    else if ( (LA281_0==QUOTIENTQUOTIENT) ) {
            	        alt281=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 281, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt281) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:820:23: TIMESTIMES
            	            {
            	            TIMESTIMES635=(Token)match(input,TIMESTIMES,FOLLOW_TIMESTIMES_in_timestimes_expr5831); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            TIMESTIMES635_tree = (CommonTree)adaptor.create(TIMESTIMES635);
            	            root_0 = (CommonTree)adaptor.becomeRoot(TIMESTIMES635_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:820:35: QUOTIENTQUOTIENT
            	            {
            	            QUOTIENTQUOTIENT636=(Token)match(input,QUOTIENTQUOTIENT,FOLLOW_QUOTIENTQUOTIENT_in_timestimes_expr5834); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            QUOTIENTQUOTIENT636_tree = (CommonTree)adaptor.create(QUOTIENTQUOTIENT636);
            	            root_0 = (CommonTree)adaptor.becomeRoot(QUOTIENTQUOTIENT636_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:820:56: ( NL )?
            	    int alt282=2;
            	    int LA282_0 = input.LA(1);

            	    if ( (LA282_0==NL) ) {
            	        alt282=1;
            	    }
            	    switch (alt282) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:820:56: NL
            	            {
            	            NL637=(Token)match(input,NL,FOLLOW_NL_in_timestimes_expr5838); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_simple_expr_in_timestimes_expr5842);
            	    simple_expr638=simple_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expr638.getTree());

            	    }
            	    break;

            	default :
            	    break loop283;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timestimes_expr"

    public static class p_timestimes_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_timestimes_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:822:1: p_timestimes_expr : p_simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr )* ;
    public final babel17Parser.p_timestimes_expr_return p_timestimes_expr() throws RecognitionException {
        babel17Parser.p_timestimes_expr_return retval = new babel17Parser.p_timestimes_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL640=null;
        Token TIMESTIMES641=null;
        Token QUOTIENTQUOTIENT642=null;
        Token NL643=null;
        babel17Parser.p_simple_expr_return p_simple_expr639 = null;

        babel17Parser.p_simple_expr_return p_simple_expr644 = null;


        CommonTree NL640_tree=null;
        CommonTree TIMESTIMES641_tree=null;
        CommonTree QUOTIENTQUOTIENT642_tree=null;
        CommonTree NL643_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:823:2: ( p_simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:823:4: p_simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_simple_expr_in_p_timestimes_expr5855);
            p_simple_expr639=p_simple_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_simple_expr639.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:823:18: ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr )*
            loop287:
            do {
                int alt287=2;
                int LA287_0 = input.LA(1);

                if ( (LA287_0==NL) ) {
                    int LA287_1 = input.LA(2);

                    if ( ((LA287_1>=TIMESTIMES && LA287_1<=QUOTIENTQUOTIENT)) ) {
                        alt287=1;
                    }


                }
                else if ( ((LA287_0>=TIMESTIMES && LA287_0<=QUOTIENTQUOTIENT)) ) {
                    alt287=1;
                }


                switch (alt287) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:823:19: ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:823:21: ( NL )?
            	    int alt284=2;
            	    int LA284_0 = input.LA(1);

            	    if ( (LA284_0==NL) ) {
            	        alt284=1;
            	    }
            	    switch (alt284) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:823:21: NL
            	            {
            	            NL640=(Token)match(input,NL,FOLLOW_NL_in_p_timestimes_expr5858); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:823:24: ( TIMESTIMES | QUOTIENTQUOTIENT )
            	    int alt285=2;
            	    int LA285_0 = input.LA(1);

            	    if ( (LA285_0==TIMESTIMES) ) {
            	        alt285=1;
            	    }
            	    else if ( (LA285_0==QUOTIENTQUOTIENT) ) {
            	        alt285=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 285, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt285) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:823:25: TIMESTIMES
            	            {
            	            TIMESTIMES641=(Token)match(input,TIMESTIMES,FOLLOW_TIMESTIMES_in_p_timestimes_expr5863); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            TIMESTIMES641_tree = (CommonTree)adaptor.create(TIMESTIMES641);
            	            root_0 = (CommonTree)adaptor.becomeRoot(TIMESTIMES641_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:823:37: QUOTIENTQUOTIENT
            	            {
            	            QUOTIENTQUOTIENT642=(Token)match(input,QUOTIENTQUOTIENT,FOLLOW_QUOTIENTQUOTIENT_in_p_timestimes_expr5866); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            QUOTIENTQUOTIENT642_tree = (CommonTree)adaptor.create(QUOTIENTQUOTIENT642);
            	            root_0 = (CommonTree)adaptor.becomeRoot(QUOTIENTQUOTIENT642_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:823:58: ( NL )?
            	    int alt286=2;
            	    int LA286_0 = input.LA(1);

            	    if ( (LA286_0==NL) ) {
            	        alt286=1;
            	    }
            	    switch (alt286) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:823:58: NL
            	            {
            	            NL643=(Token)match(input,NL,FOLLOW_NL_in_p_timestimes_expr5870); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_simple_expr_in_p_timestimes_expr5874);
            	    p_simple_expr644=p_simple_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_simple_expr644.getTree());

            	    }
            	    break;

            	default :
            	    break loop287;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_timestimes_expr"

    public static class simple_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:825:1: simple_expr : cons_expr ;
    public final babel17Parser.simple_expr_return simple_expr() throws RecognitionException {
        babel17Parser.simple_expr_return retval = new babel17Parser.simple_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.cons_expr_return cons_expr645 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:826:2: ( cons_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:826:4: cons_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_cons_expr_in_simple_expr5885);
            cons_expr645=cons_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cons_expr645.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "simple_expr"

    public static class p_simple_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_simple_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:828:1: p_simple_expr : p_cons_expr ;
    public final babel17Parser.p_simple_expr_return p_simple_expr() throws RecognitionException {
        babel17Parser.p_simple_expr_return retval = new babel17Parser.p_simple_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.p_cons_expr_return p_cons_expr646 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:829:2: ( p_cons_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:829:4: p_cons_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_cons_expr_in_p_simple_expr5894);
            p_cons_expr646=p_cons_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_cons_expr646.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_simple_expr"

    public static class cons_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cons_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:831:1: cons_expr : to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? to_expr )* -> ^( LIST_CONS ( to_expr )* ) ;
    public final babel17Parser.cons_expr_return cons_expr() throws RecognitionException {
        babel17Parser.cons_expr_return retval = new babel17Parser.cons_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL648=null;
        Token NL650=null;
        babel17Parser.to_expr_return to_expr647 = null;

        babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON649 = null;

        babel17Parser.to_expr_return to_expr651 = null;


        CommonTree NL648_tree=null;
        CommonTree NL650_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_token_DOUBLE_COLON=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_COLON");
        RewriteRuleSubtreeStream stream_to_expr=new RewriteRuleSubtreeStream(adaptor,"rule to_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:2: ( to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? to_expr )* -> ^( LIST_CONS ( to_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:4: to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? to_expr )*
            {
            pushFollow(FOLLOW_to_expr_in_cons_expr5903);
            to_expr647=to_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_to_expr.add(to_expr647.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:12: ( ( NL )? token_DOUBLE_COLON ( NL )? to_expr )*
            loop290:
            do {
                int alt290=2;
                int LA290_0 = input.LA(1);

                if ( (LA290_0==NL) ) {
                    int LA290_1 = input.LA(2);

                    if ( ((LA290_1>=A_DOUBLE_COLON && LA290_1<=U_DOUBLE_COLON)) ) {
                        alt290=1;
                    }


                }
                else if ( ((LA290_0>=A_DOUBLE_COLON && LA290_0<=U_DOUBLE_COLON)) ) {
                    alt290=1;
                }


                switch (alt290) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:13: ( NL )? token_DOUBLE_COLON ( NL )? to_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:13: ( NL )?
            	    int alt288=2;
            	    int LA288_0 = input.LA(1);

            	    if ( (LA288_0==NL) ) {
            	        alt288=1;
            	    }
            	    switch (alt288) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:13: NL
            	            {
            	            NL648=(Token)match(input,NL,FOLLOW_NL_in_cons_expr5906); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL648);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_DOUBLE_COLON_in_cons_expr5909);
            	    token_DOUBLE_COLON649=token_DOUBLE_COLON();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_token_DOUBLE_COLON.add(token_DOUBLE_COLON649.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:36: ( NL )?
            	    int alt289=2;
            	    int LA289_0 = input.LA(1);

            	    if ( (LA289_0==NL) ) {
            	        alt289=1;
            	    }
            	    switch (alt289) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:36: NL
            	            {
            	            NL650=(Token)match(input,NL,FOLLOW_NL_in_cons_expr5911); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL650);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_to_expr_in_cons_expr5914);
            	    to_expr651=to_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_to_expr.add(to_expr651.getTree());

            	    }
            	    break;

            	default :
            	    break loop290;
                }
            } while (true);



            // AST REWRITE
            // elements: to_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 832:50: -> ^( LIST_CONS ( to_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:53: ^( LIST_CONS ( to_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST_CONS, "LIST_CONS"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:65: ( to_expr )*
                while ( stream_to_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_to_expr.nextTree());

                }
                stream_to_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cons_expr"

    public static class p_cons_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_cons_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:834:1: p_cons_expr : p_to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr )* -> ^( LIST_CONS ( p_to_expr )* ) ;
    public final babel17Parser.p_cons_expr_return p_cons_expr() throws RecognitionException {
        babel17Parser.p_cons_expr_return retval = new babel17Parser.p_cons_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL653=null;
        Token NL655=null;
        babel17Parser.p_to_expr_return p_to_expr652 = null;

        babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON654 = null;

        babel17Parser.p_to_expr_return p_to_expr656 = null;


        CommonTree NL653_tree=null;
        CommonTree NL655_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_p_to_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_to_expr");
        RewriteRuleSubtreeStream stream_token_DOUBLE_COLON=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_COLON");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:835:2: ( p_to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr )* -> ^( LIST_CONS ( p_to_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:835:4: p_to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr )*
            {
            pushFollow(FOLLOW_p_to_expr_in_p_cons_expr5934);
            p_to_expr652=p_to_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_to_expr.add(p_to_expr652.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:835:14: ( ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr )*
            loop293:
            do {
                int alt293=2;
                int LA293_0 = input.LA(1);

                if ( (LA293_0==NL) ) {
                    int LA293_1 = input.LA(2);

                    if ( ((LA293_1>=A_DOUBLE_COLON && LA293_1<=U_DOUBLE_COLON)) ) {
                        alt293=1;
                    }


                }
                else if ( ((LA293_0>=A_DOUBLE_COLON && LA293_0<=U_DOUBLE_COLON)) ) {
                    alt293=1;
                }


                switch (alt293) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:835:15: ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:835:15: ( NL )?
            	    int alt291=2;
            	    int LA291_0 = input.LA(1);

            	    if ( (LA291_0==NL) ) {
            	        alt291=1;
            	    }
            	    switch (alt291) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:835:15: NL
            	            {
            	            NL653=(Token)match(input,NL,FOLLOW_NL_in_p_cons_expr5937); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL653);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_DOUBLE_COLON_in_p_cons_expr5940);
            	    token_DOUBLE_COLON654=token_DOUBLE_COLON();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_token_DOUBLE_COLON.add(token_DOUBLE_COLON654.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:835:38: ( NL )?
            	    int alt292=2;
            	    int LA292_0 = input.LA(1);

            	    if ( (LA292_0==NL) ) {
            	        alt292=1;
            	    }
            	    switch (alt292) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:835:38: NL
            	            {
            	            NL655=(Token)match(input,NL,FOLLOW_NL_in_p_cons_expr5942); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL655);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_to_expr_in_p_cons_expr5945);
            	    p_to_expr656=p_to_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_to_expr.add(p_to_expr656.getTree());

            	    }
            	    break;

            	default :
            	    break loop293;
                }
            } while (true);



            // AST REWRITE
            // elements: p_to_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 835:54: -> ^( LIST_CONS ( p_to_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:835:57: ^( LIST_CONS ( p_to_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST_CONS, "LIST_CONS"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:835:69: ( p_to_expr )*
                while ( stream_p_to_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_to_expr.nextTree());

                }
                stream_p_to_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_cons_expr"

    public static class to_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:838:1: to_expr : arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr )? ;
    public final babel17Parser.to_expr_return to_expr() throws RecognitionException {
        babel17Parser.to_expr_return retval = new babel17Parser.to_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL658=null;
        Token L_to659=null;
        Token L_downto660=null;
        Token NL661=null;
        babel17Parser.arith_plus_expr_return arith_plus_expr657 = null;

        babel17Parser.arith_plus_expr_return arith_plus_expr662 = null;


        CommonTree NL658_tree=null;
        CommonTree L_to659_tree=null;
        CommonTree L_downto660_tree=null;
        CommonTree NL661_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:838:9: ( arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr )? )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:838:11: arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_arith_plus_expr_in_to_expr5965);
            arith_plus_expr657=arith_plus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_plus_expr657.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:838:27: ( ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr )?
            int alt297=2;
            int LA297_0 = input.LA(1);

            if ( (LA297_0==NL) ) {
                int LA297_1 = input.LA(2);

                if ( ((LA297_1>=L_to && LA297_1<=L_downto)) ) {
                    alt297=1;
                }
            }
            else if ( ((LA297_0>=L_to && LA297_0<=L_downto)) ) {
                alt297=1;
            }
            switch (alt297) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:838:28: ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:838:30: ( NL )?
                    int alt294=2;
                    int LA294_0 = input.LA(1);

                    if ( (LA294_0==NL) ) {
                        alt294=1;
                    }
                    switch (alt294) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:838:30: NL
                            {
                            NL658=(Token)match(input,NL,FOLLOW_NL_in_to_expr5968); if (state.failed) return retval;

                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:838:33: ( L_to | L_downto )
                    int alt295=2;
                    int LA295_0 = input.LA(1);

                    if ( (LA295_0==L_to) ) {
                        alt295=1;
                    }
                    else if ( (LA295_0==L_downto) ) {
                        alt295=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 295, 0, input);

                        throw nvae;
                    }
                    switch (alt295) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:838:34: L_to
                            {
                            L_to659=(Token)match(input,L_to,FOLLOW_L_to_in_to_expr5973); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            L_to659_tree = (CommonTree)adaptor.create(L_to659);
                            root_0 = (CommonTree)adaptor.becomeRoot(L_to659_tree, root_0);
                            }

                            }
                            break;
                        case 2 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:838:41: L_downto
                            {
                            L_downto660=(Token)match(input,L_downto,FOLLOW_L_downto_in_to_expr5977); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            L_downto660_tree = (CommonTree)adaptor.create(L_downto660);
                            root_0 = (CommonTree)adaptor.becomeRoot(L_downto660_tree, root_0);
                            }

                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:838:54: ( NL )?
                    int alt296=2;
                    int LA296_0 = input.LA(1);

                    if ( (LA296_0==NL) ) {
                        alt296=1;
                    }
                    switch (alt296) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:838:54: NL
                            {
                            NL661=(Token)match(input,NL,FOLLOW_NL_in_to_expr5981); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_arith_plus_expr_in_to_expr5985);
                    arith_plus_expr662=arith_plus_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_plus_expr662.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "to_expr"

    public static class p_to_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_to_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:840:1: p_to_expr : p_arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr )? ;
    public final babel17Parser.p_to_expr_return p_to_expr() throws RecognitionException {
        babel17Parser.p_to_expr_return retval = new babel17Parser.p_to_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL664=null;
        Token L_to665=null;
        Token L_downto666=null;
        Token NL667=null;
        babel17Parser.p_arith_plus_expr_return p_arith_plus_expr663 = null;

        babel17Parser.p_arith_plus_expr_return p_arith_plus_expr668 = null;


        CommonTree NL664_tree=null;
        CommonTree L_to665_tree=null;
        CommonTree L_downto666_tree=null;
        CommonTree NL667_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:841:2: ( p_arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr )? )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:841:4: p_arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_arith_plus_expr_in_p_to_expr5998);
            p_arith_plus_expr663=p_arith_plus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_plus_expr663.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:841:22: ( ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr )?
            int alt301=2;
            int LA301_0 = input.LA(1);

            if ( (LA301_0==NL) ) {
                int LA301_1 = input.LA(2);

                if ( ((LA301_1>=L_to && LA301_1<=L_downto)) ) {
                    alt301=1;
                }
            }
            else if ( ((LA301_0>=L_to && LA301_0<=L_downto)) ) {
                alt301=1;
            }
            switch (alt301) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:841:23: ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:841:25: ( NL )?
                    int alt298=2;
                    int LA298_0 = input.LA(1);

                    if ( (LA298_0==NL) ) {
                        alt298=1;
                    }
                    switch (alt298) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:841:25: NL
                            {
                            NL664=(Token)match(input,NL,FOLLOW_NL_in_p_to_expr6001); if (state.failed) return retval;

                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:841:28: ( L_to | L_downto )
                    int alt299=2;
                    int LA299_0 = input.LA(1);

                    if ( (LA299_0==L_to) ) {
                        alt299=1;
                    }
                    else if ( (LA299_0==L_downto) ) {
                        alt299=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 299, 0, input);

                        throw nvae;
                    }
                    switch (alt299) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:841:29: L_to
                            {
                            L_to665=(Token)match(input,L_to,FOLLOW_L_to_in_p_to_expr6006); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            L_to665_tree = (CommonTree)adaptor.create(L_to665);
                            root_0 = (CommonTree)adaptor.becomeRoot(L_to665_tree, root_0);
                            }

                            }
                            break;
                        case 2 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:841:36: L_downto
                            {
                            L_downto666=(Token)match(input,L_downto,FOLLOW_L_downto_in_p_to_expr6010); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            L_downto666_tree = (CommonTree)adaptor.create(L_downto666);
                            root_0 = (CommonTree)adaptor.becomeRoot(L_downto666_tree, root_0);
                            }

                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:841:49: ( NL )?
                    int alt300=2;
                    int LA300_0 = input.LA(1);

                    if ( (LA300_0==NL) ) {
                        alt300=1;
                    }
                    switch (alt300) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:841:49: NL
                            {
                            NL667=(Token)match(input,NL,FOLLOW_NL_in_p_to_expr6014); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_arith_plus_expr_in_p_to_expr6018);
                    p_arith_plus_expr668=p_arith_plus_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_plus_expr668.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_to_expr"

    public static class arith_plus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_plus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:843:1: arith_plus_expr : arith_uminus_expr ( ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr )* ;
    public final babel17Parser.arith_plus_expr_return arith_plus_expr() throws RecognitionException {
        babel17Parser.arith_plus_expr_return retval = new babel17Parser.arith_plus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL670=null;
        Token PLUS671=null;
        Token MINUS672=null;
        Token NL673=null;
        babel17Parser.arith_uminus_expr_return arith_uminus_expr669 = null;

        babel17Parser.arith_uminus_expr_return arith_uminus_expr674 = null;


        CommonTree NL670_tree=null;
        CommonTree PLUS671_tree=null;
        CommonTree MINUS672_tree=null;
        CommonTree NL673_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:844:2: ( arith_uminus_expr ( ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:844:4: arith_uminus_expr ( ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_arith_uminus_expr_in_arith_plus_expr6030);
            arith_uminus_expr669=arith_uminus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_uminus_expr669.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:844:22: ( ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr )*
            loop305:
            do {
                int alt305=2;
                int LA305_0 = input.LA(1);

                if ( (LA305_0==NL) ) {
                    int LA305_1 = input.LA(2);

                    if ( (LA305_1==PLUS) ) {
                        alt305=1;
                    }


                }
                else if ( ((LA305_0>=PLUS && LA305_0<=MINUS)) ) {
                    alt305=1;
                }


                switch (alt305) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:844:23: ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:844:23: ( ( NL )? PLUS | MINUS )
            	    int alt303=2;
            	    int LA303_0 = input.LA(1);

            	    if ( (LA303_0==PLUS||LA303_0==NL) ) {
            	        alt303=1;
            	    }
            	    else if ( (LA303_0==MINUS) ) {
            	        alt303=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 303, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt303) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:844:24: ( NL )? PLUS
            	            {
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:844:26: ( NL )?
            	            int alt302=2;
            	            int LA302_0 = input.LA(1);

            	            if ( (LA302_0==NL) ) {
            	                alt302=1;
            	            }
            	            switch (alt302) {
            	                case 1 :
            	                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:844:26: NL
            	                    {
            	                    NL670=(Token)match(input,NL,FOLLOW_NL_in_arith_plus_expr6034); if (state.failed) return retval;

            	                    }
            	                    break;

            	            }

            	            PLUS671=(Token)match(input,PLUS,FOLLOW_PLUS_in_arith_plus_expr6038); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS671_tree = (CommonTree)adaptor.create(PLUS671);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS671_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:844:37: MINUS
            	            {
            	            MINUS672=(Token)match(input,MINUS,FOLLOW_MINUS_in_arith_plus_expr6043); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS672_tree = (CommonTree)adaptor.create(MINUS672);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS672_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:844:47: ( NL )?
            	    int alt304=2;
            	    int LA304_0 = input.LA(1);

            	    if ( (LA304_0==NL) ) {
            	        alt304=1;
            	    }
            	    switch (alt304) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:844:47: NL
            	            {
            	            NL673=(Token)match(input,NL,FOLLOW_NL_in_arith_plus_expr6047); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_arith_uminus_expr_in_arith_plus_expr6051);
            	    arith_uminus_expr674=arith_uminus_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_uminus_expr674.getTree());

            	    }
            	    break;

            	default :
            	    break loop305;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_plus_expr"

    public static class p_arith_plus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_plus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:846:1: p_arith_plus_expr : p_arith_uminus_expr ( ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr )* ;
    public final babel17Parser.p_arith_plus_expr_return p_arith_plus_expr() throws RecognitionException {
        babel17Parser.p_arith_plus_expr_return retval = new babel17Parser.p_arith_plus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL676=null;
        Token set677=null;
        Token NL678=null;
        babel17Parser.p_arith_uminus_expr_return p_arith_uminus_expr675 = null;

        babel17Parser.p_arith_uminus_expr_return p_arith_uminus_expr679 = null;


        CommonTree NL676_tree=null;
        CommonTree set677_tree=null;
        CommonTree NL678_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:847:2: ( p_arith_uminus_expr ( ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:847:4: p_arith_uminus_expr ( ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_arith_uminus_expr_in_p_arith_plus_expr6062);
            p_arith_uminus_expr675=p_arith_uminus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_uminus_expr675.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:847:24: ( ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr )*
            loop308:
            do {
                int alt308=2;
                int LA308_0 = input.LA(1);

                if ( (LA308_0==NL) ) {
                    int LA308_1 = input.LA(2);

                    if ( ((LA308_1>=PLUS && LA308_1<=MINUS)) ) {
                        alt308=1;
                    }


                }
                else if ( ((LA308_0>=PLUS && LA308_0<=MINUS)) ) {
                    alt308=1;
                }


                switch (alt308) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:847:25: ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:847:27: ( NL )?
            	    int alt306=2;
            	    int LA306_0 = input.LA(1);

            	    if ( (LA306_0==NL) ) {
            	        alt306=1;
            	    }
            	    switch (alt306) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:847:27: NL
            	            {
            	            NL676=(Token)match(input,NL,FOLLOW_NL_in_p_arith_plus_expr6065); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    set677=(Token)input.LT(1);
            	    set677=(Token)input.LT(1);
            	    if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set677), root_0);
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:847:48: ( NL )?
            	    int alt307=2;
            	    int LA307_0 = input.LA(1);

            	    if ( (LA307_0==NL) ) {
            	        alt307=1;
            	    }
            	    switch (alt307) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:847:48: NL
            	            {
            	            NL678=(Token)match(input,NL,FOLLOW_NL_in_p_arith_plus_expr6078); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_arith_uminus_expr_in_p_arith_plus_expr6082);
            	    p_arith_uminus_expr679=p_arith_uminus_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_uminus_expr679.getTree());

            	    }
            	    break;

            	default :
            	    break loop308;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_plus_expr"

    public static class arith_uminus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_uminus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:849:1: arith_uminus_expr : ( MINUS ( NL )? arith_mult_expr -> ^( UMINUS arith_mult_expr ) | arith_mult_expr );
    public final babel17Parser.arith_uminus_expr_return arith_uminus_expr() throws RecognitionException {
        babel17Parser.arith_uminus_expr_return retval = new babel17Parser.arith_uminus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS680=null;
        Token NL681=null;
        babel17Parser.arith_mult_expr_return arith_mult_expr682 = null;

        babel17Parser.arith_mult_expr_return arith_mult_expr683 = null;


        CommonTree MINUS680_tree=null;
        CommonTree NL681_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_arith_mult_expr=new RewriteRuleSubtreeStream(adaptor,"rule arith_mult_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:850:2: ( MINUS ( NL )? arith_mult_expr -> ^( UMINUS arith_mult_expr ) | arith_mult_expr )
            int alt310=2;
            int LA310_0 = input.LA(1);

            if ( (LA310_0==MINUS) ) {
                alt310=1;
            }
            else if ( (LA310_0==L_begin||(LA310_0>=L_obj && LA310_0<=L_if)||(LA310_0>=L_while && LA310_0<=L_for)||LA310_0==L_match||LA310_0==L_try||(LA310_0>=L_true && LA310_0<=L_this)||LA310_0==L_nil||LA310_0==L_root||(LA310_0>=Constr && LA310_0<=Id)||(LA310_0>=Float && LA310_0<=Num)||(LA310_0>=String && LA310_0<=ROUND_BRACKET_OPEN)||LA310_0==SQUARE_BRACKET_OPEN||LA310_0==CURLY_BRACKET_OPEN) ) {
                alt310=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 310, 0, input);

                throw nvae;
            }
            switch (alt310) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:850:4: MINUS ( NL )? arith_mult_expr
                    {
                    MINUS680=(Token)match(input,MINUS,FOLLOW_MINUS_in_arith_uminus_expr6095); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS680);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:850:10: ( NL )?
                    int alt309=2;
                    int LA309_0 = input.LA(1);

                    if ( (LA309_0==NL) ) {
                        alt309=1;
                    }
                    switch (alt309) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:850:10: NL
                            {
                            NL681=(Token)match(input,NL,FOLLOW_NL_in_arith_uminus_expr6097); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL681);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_arith_mult_expr_in_arith_uminus_expr6100);
                    arith_mult_expr682=arith_mult_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arith_mult_expr.add(arith_mult_expr682.getTree());


                    // AST REWRITE
                    // elements: arith_mult_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 850:30: -> ^( UMINUS arith_mult_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:850:33: ^( UMINUS arith_mult_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UMINUS, "UMINUS"), root_1);

                        adaptor.addChild(root_1, stream_arith_mult_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:851:4: arith_mult_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arith_mult_expr_in_arith_uminus_expr6113);
                    arith_mult_expr683=arith_mult_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_mult_expr683.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_uminus_expr"

    public static class p_arith_uminus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_uminus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:853:1: p_arith_uminus_expr : ( MINUS ( NL )? p_arith_mult_expr -> ^( UMINUS p_arith_mult_expr ) | p_arith_mult_expr );
    public final babel17Parser.p_arith_uminus_expr_return p_arith_uminus_expr() throws RecognitionException {
        babel17Parser.p_arith_uminus_expr_return retval = new babel17Parser.p_arith_uminus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS684=null;
        Token NL685=null;
        babel17Parser.p_arith_mult_expr_return p_arith_mult_expr686 = null;

        babel17Parser.p_arith_mult_expr_return p_arith_mult_expr687 = null;


        CommonTree MINUS684_tree=null;
        CommonTree NL685_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_p_arith_mult_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_arith_mult_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:854:2: ( MINUS ( NL )? p_arith_mult_expr -> ^( UMINUS p_arith_mult_expr ) | p_arith_mult_expr )
            int alt312=2;
            int LA312_0 = input.LA(1);

            if ( (LA312_0==MINUS) ) {
                alt312=1;
            }
            else if ( (LA312_0==L_begin||(LA312_0>=L_obj && LA312_0<=L_if)||(LA312_0>=L_while && LA312_0<=L_for)||LA312_0==L_match||LA312_0==L_try||(LA312_0>=L_true && LA312_0<=L_this)||LA312_0==L_nil||LA312_0==L_root||(LA312_0>=Constr && LA312_0<=Id)||(LA312_0>=Float && LA312_0<=Num)||(LA312_0>=String && LA312_0<=ROUND_BRACKET_OPEN)||LA312_0==SQUARE_BRACKET_OPEN||LA312_0==CURLY_BRACKET_OPEN) ) {
                alt312=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 312, 0, input);

                throw nvae;
            }
            switch (alt312) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:854:4: MINUS ( NL )? p_arith_mult_expr
                    {
                    MINUS684=(Token)match(input,MINUS,FOLLOW_MINUS_in_p_arith_uminus_expr6124); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS684);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:854:10: ( NL )?
                    int alt311=2;
                    int LA311_0 = input.LA(1);

                    if ( (LA311_0==NL) ) {
                        alt311=1;
                    }
                    switch (alt311) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:854:10: NL
                            {
                            NL685=(Token)match(input,NL,FOLLOW_NL_in_p_arith_uminus_expr6126); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL685);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_arith_mult_expr_in_p_arith_uminus_expr6129);
                    p_arith_mult_expr686=p_arith_mult_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_arith_mult_expr.add(p_arith_mult_expr686.getTree());


                    // AST REWRITE
                    // elements: p_arith_mult_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 854:32: -> ^( UMINUS p_arith_mult_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:854:35: ^( UMINUS p_arith_mult_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UMINUS, "UMINUS"), root_1);

                        adaptor.addChild(root_1, stream_p_arith_mult_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:855:4: p_arith_mult_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_arith_mult_expr_in_p_arith_uminus_expr6142);
                    p_arith_mult_expr687=p_arith_mult_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_mult_expr687.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_uminus_expr"

    public static class arith_mult_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_mult_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:857:1: arith_mult_expr : arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr )* ;
    public final babel17Parser.arith_mult_expr_return arith_mult_expr() throws RecognitionException {
        babel17Parser.arith_mult_expr_return retval = new babel17Parser.arith_mult_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL689=null;
        Token set690=null;
        Token NL691=null;
        babel17Parser.arith_pow_expr_return arith_pow_expr688 = null;

        babel17Parser.arith_pow_expr_return arith_pow_expr692 = null;


        CommonTree NL689_tree=null;
        CommonTree set690_tree=null;
        CommonTree NL691_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:858:2: ( arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:858:4: arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_arith_pow_expr_in_arith_mult_expr6151);
            arith_pow_expr688=arith_pow_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_pow_expr688.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:858:19: ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr )*
            loop315:
            do {
                int alt315=2;
                switch ( input.LA(1) ) {
                case NL:
                    {
                    switch ( input.LA(2) ) {
                    case L_div:
                        {
                        int LA315_3 = input.LA(3);

                        if ( (LA315_3==L_begin||(LA315_3>=L_obj && LA315_3<=L_if)||(LA315_3>=L_while && LA315_3<=L_for)||LA315_3==L_match||LA315_3==L_try||(LA315_3>=L_true && LA315_3<=L_this)||LA315_3==L_nil||LA315_3==L_root||(LA315_3>=NL && LA315_3<=Id)||(LA315_3>=Float && LA315_3<=Num)||(LA315_3>=String && LA315_3<=ROUND_BRACKET_OPEN)||LA315_3==SQUARE_BRACKET_OPEN||LA315_3==CURLY_BRACKET_OPEN) ) {
                            alt315=1;
                        }


                        }
                        break;
                    case L_mod:
                        {
                        int LA315_4 = input.LA(3);

                        if ( (LA315_4==L_begin||(LA315_4>=L_obj && LA315_4<=L_if)||(LA315_4>=L_while && LA315_4<=L_for)||LA315_4==L_match||LA315_4==L_try||(LA315_4>=L_true && LA315_4<=L_this)||LA315_4==L_nil||LA315_4==L_root||(LA315_4>=NL && LA315_4<=Id)||(LA315_4>=Float && LA315_4<=Num)||(LA315_4>=String && LA315_4<=ROUND_BRACKET_OPEN)||LA315_4==SQUARE_BRACKET_OPEN||LA315_4==CURLY_BRACKET_OPEN) ) {
                            alt315=1;
                        }


                        }
                        break;
                    case TIMES:
                    case QUOTIENT:
                        {
                        alt315=1;
                        }
                        break;

                    }

                    }
                    break;
                case L_div:
                    {
                    int LA315_3 = input.LA(2);

                    if ( (LA315_3==L_begin||(LA315_3>=L_obj && LA315_3<=L_if)||(LA315_3>=L_while && LA315_3<=L_for)||LA315_3==L_match||LA315_3==L_try||(LA315_3>=L_true && LA315_3<=L_this)||LA315_3==L_nil||LA315_3==L_root||(LA315_3>=NL && LA315_3<=Id)||(LA315_3>=Float && LA315_3<=Num)||(LA315_3>=String && LA315_3<=ROUND_BRACKET_OPEN)||LA315_3==SQUARE_BRACKET_OPEN||LA315_3==CURLY_BRACKET_OPEN) ) {
                        alt315=1;
                    }


                    }
                    break;
                case L_mod:
                    {
                    int LA315_4 = input.LA(2);

                    if ( (LA315_4==L_begin||(LA315_4>=L_obj && LA315_4<=L_if)||(LA315_4>=L_while && LA315_4<=L_for)||LA315_4==L_match||LA315_4==L_try||(LA315_4>=L_true && LA315_4<=L_this)||LA315_4==L_nil||LA315_4==L_root||(LA315_4>=NL && LA315_4<=Id)||(LA315_4>=Float && LA315_4<=Num)||(LA315_4>=String && LA315_4<=ROUND_BRACKET_OPEN)||LA315_4==SQUARE_BRACKET_OPEN||LA315_4==CURLY_BRACKET_OPEN) ) {
                        alt315=1;
                    }


                    }
                    break;
                case TIMES:
                case QUOTIENT:
                    {
                    alt315=1;
                    }
                    break;

                }

                switch (alt315) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:858:20: ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:858:22: ( NL )?
            	    int alt313=2;
            	    int LA313_0 = input.LA(1);

            	    if ( (LA313_0==NL) ) {
            	        alt313=1;
            	    }
            	    switch (alt313) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:858:22: NL
            	            {
            	            NL689=(Token)match(input,NL,FOLLOW_NL_in_arith_mult_expr6154); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    set690=(Token)input.LT(1);
            	    set690=(Token)input.LT(1);
            	    if ( (input.LA(1)>=L_div && input.LA(1)<=L_mod)||(input.LA(1)>=TIMES && input.LA(1)<=QUOTIENT) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set690), root_0);
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:858:63: ( NL )?
            	    int alt314=2;
            	    int LA314_0 = input.LA(1);

            	    if ( (LA314_0==NL) ) {
            	        alt314=1;
            	    }
            	    switch (alt314) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:858:63: NL
            	            {
            	            NL691=(Token)match(input,NL,FOLLOW_NL_in_arith_mult_expr6175); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_arith_pow_expr_in_arith_mult_expr6179);
            	    arith_pow_expr692=arith_pow_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_pow_expr692.getTree());

            	    }
            	    break;

            	default :
            	    break loop315;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_mult_expr"

    public static class p_arith_mult_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_mult_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:860:1: p_arith_mult_expr : p_arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr )* ;
    public final babel17Parser.p_arith_mult_expr_return p_arith_mult_expr() throws RecognitionException {
        babel17Parser.p_arith_mult_expr_return retval = new babel17Parser.p_arith_mult_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL694=null;
        Token set695=null;
        Token NL696=null;
        babel17Parser.p_arith_pow_expr_return p_arith_pow_expr693 = null;

        babel17Parser.p_arith_pow_expr_return p_arith_pow_expr697 = null;


        CommonTree NL694_tree=null;
        CommonTree set695_tree=null;
        CommonTree NL696_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:861:2: ( p_arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:861:4: p_arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_arith_pow_expr_in_p_arith_mult_expr6191);
            p_arith_pow_expr693=p_arith_pow_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_pow_expr693.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:861:21: ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr )*
            loop318:
            do {
                int alt318=2;
                int LA318_0 = input.LA(1);

                if ( (LA318_0==NL) ) {
                    int LA318_1 = input.LA(2);

                    if ( ((LA318_1>=L_div && LA318_1<=L_mod)||(LA318_1>=TIMES && LA318_1<=QUOTIENT)) ) {
                        alt318=1;
                    }


                }
                else if ( ((LA318_0>=L_div && LA318_0<=L_mod)||(LA318_0>=TIMES && LA318_0<=QUOTIENT)) ) {
                    alt318=1;
                }


                switch (alt318) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:861:22: ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:861:24: ( NL )?
            	    int alt316=2;
            	    int LA316_0 = input.LA(1);

            	    if ( (LA316_0==NL) ) {
            	        alt316=1;
            	    }
            	    switch (alt316) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:861:24: NL
            	            {
            	            NL694=(Token)match(input,NL,FOLLOW_NL_in_p_arith_mult_expr6194); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    set695=(Token)input.LT(1);
            	    set695=(Token)input.LT(1);
            	    if ( (input.LA(1)>=L_div && input.LA(1)<=L_mod)||(input.LA(1)>=TIMES && input.LA(1)<=QUOTIENT) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set695), root_0);
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:861:65: ( NL )?
            	    int alt317=2;
            	    int LA317_0 = input.LA(1);

            	    if ( (LA317_0==NL) ) {
            	        alt317=1;
            	    }
            	    switch (alt317) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:861:65: NL
            	            {
            	            NL696=(Token)match(input,NL,FOLLOW_NL_in_p_arith_mult_expr6215); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_arith_pow_expr_in_p_arith_mult_expr6219);
            	    p_arith_pow_expr697=p_arith_pow_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_pow_expr697.getTree());

            	    }
            	    break;

            	default :
            	    break loop318;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_mult_expr"

    public static class arith_pow_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_pow_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:863:1: arith_pow_expr : apply_expr ( ( NL )? POW_tok ( NL )? apply_expr )* -> ^( POW ( apply_expr )* ) ;
    public final babel17Parser.arith_pow_expr_return arith_pow_expr() throws RecognitionException {
        babel17Parser.arith_pow_expr_return retval = new babel17Parser.arith_pow_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL699=null;
        Token POW_tok700=null;
        Token NL701=null;
        babel17Parser.apply_expr_return apply_expr698 = null;

        babel17Parser.apply_expr_return apply_expr702 = null;


        CommonTree NL699_tree=null;
        CommonTree POW_tok700_tree=null;
        CommonTree NL701_tree=null;
        RewriteRuleTokenStream stream_POW_tok=new RewriteRuleTokenStream(adaptor,"token POW_tok");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_apply_expr=new RewriteRuleSubtreeStream(adaptor,"rule apply_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:864:2: ( apply_expr ( ( NL )? POW_tok ( NL )? apply_expr )* -> ^( POW ( apply_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:864:4: apply_expr ( ( NL )? POW_tok ( NL )? apply_expr )*
            {
            pushFollow(FOLLOW_apply_expr_in_arith_pow_expr6230);
            apply_expr698=apply_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_apply_expr.add(apply_expr698.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:864:15: ( ( NL )? POW_tok ( NL )? apply_expr )*
            loop321:
            do {
                int alt321=2;
                int LA321_0 = input.LA(1);

                if ( (LA321_0==NL) ) {
                    int LA321_1 = input.LA(2);

                    if ( (LA321_1==POW_tok) ) {
                        alt321=1;
                    }


                }
                else if ( (LA321_0==POW_tok) ) {
                    alt321=1;
                }


                switch (alt321) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:864:16: ( NL )? POW_tok ( NL )? apply_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:864:16: ( NL )?
            	    int alt319=2;
            	    int LA319_0 = input.LA(1);

            	    if ( (LA319_0==NL) ) {
            	        alt319=1;
            	    }
            	    switch (alt319) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:864:16: NL
            	            {
            	            NL699=(Token)match(input,NL,FOLLOW_NL_in_arith_pow_expr6233); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL699);


            	            }
            	            break;

            	    }

            	    POW_tok700=(Token)match(input,POW_tok,FOLLOW_POW_tok_in_arith_pow_expr6236); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_POW_tok.add(POW_tok700);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:864:28: ( NL )?
            	    int alt320=2;
            	    int LA320_0 = input.LA(1);

            	    if ( (LA320_0==NL) ) {
            	        alt320=1;
            	    }
            	    switch (alt320) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:864:28: NL
            	            {
            	            NL701=(Token)match(input,NL,FOLLOW_NL_in_arith_pow_expr6238); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL701);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_apply_expr_in_arith_pow_expr6241);
            	    apply_expr702=apply_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_apply_expr.add(apply_expr702.getTree());

            	    }
            	    break;

            	default :
            	    break loop321;
                }
            } while (true);



            // AST REWRITE
            // elements: apply_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 864:45: -> ^( POW ( apply_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:864:48: ^( POW ( apply_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(POW, "POW"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:864:54: ( apply_expr )*
                while ( stream_apply_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_apply_expr.nextTree());

                }
                stream_apply_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_pow_expr"

    public static class p_arith_pow_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_pow_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:866:1: p_arith_pow_expr : p_apply_expr ( ( NL )? POW_tok ( NL )? p_apply_expr )* -> ^( POW ( p_apply_expr )* ) ;
    public final babel17Parser.p_arith_pow_expr_return p_arith_pow_expr() throws RecognitionException {
        babel17Parser.p_arith_pow_expr_return retval = new babel17Parser.p_arith_pow_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL704=null;
        Token POW_tok705=null;
        Token NL706=null;
        babel17Parser.p_apply_expr_return p_apply_expr703 = null;

        babel17Parser.p_apply_expr_return p_apply_expr707 = null;


        CommonTree NL704_tree=null;
        CommonTree POW_tok705_tree=null;
        CommonTree NL706_tree=null;
        RewriteRuleTokenStream stream_POW_tok=new RewriteRuleTokenStream(adaptor,"token POW_tok");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_p_apply_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_apply_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:867:2: ( p_apply_expr ( ( NL )? POW_tok ( NL )? p_apply_expr )* -> ^( POW ( p_apply_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:867:4: p_apply_expr ( ( NL )? POW_tok ( NL )? p_apply_expr )*
            {
            pushFollow(FOLLOW_p_apply_expr_in_p_arith_pow_expr6262);
            p_apply_expr703=p_apply_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_apply_expr.add(p_apply_expr703.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:867:17: ( ( NL )? POW_tok ( NL )? p_apply_expr )*
            loop324:
            do {
                int alt324=2;
                int LA324_0 = input.LA(1);

                if ( (LA324_0==NL) ) {
                    int LA324_1 = input.LA(2);

                    if ( (LA324_1==POW_tok) ) {
                        alt324=1;
                    }


                }
                else if ( (LA324_0==POW_tok) ) {
                    alt324=1;
                }


                switch (alt324) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:867:18: ( NL )? POW_tok ( NL )? p_apply_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:867:18: ( NL )?
            	    int alt322=2;
            	    int LA322_0 = input.LA(1);

            	    if ( (LA322_0==NL) ) {
            	        alt322=1;
            	    }
            	    switch (alt322) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:867:18: NL
            	            {
            	            NL704=(Token)match(input,NL,FOLLOW_NL_in_p_arith_pow_expr6265); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL704);


            	            }
            	            break;

            	    }

            	    POW_tok705=(Token)match(input,POW_tok,FOLLOW_POW_tok_in_p_arith_pow_expr6268); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_POW_tok.add(POW_tok705);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:867:30: ( NL )?
            	    int alt323=2;
            	    int LA323_0 = input.LA(1);

            	    if ( (LA323_0==NL) ) {
            	        alt323=1;
            	    }
            	    switch (alt323) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:867:30: NL
            	            {
            	            NL706=(Token)match(input,NL,FOLLOW_NL_in_p_arith_pow_expr6270); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL706);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_apply_expr_in_p_arith_pow_expr6273);
            	    p_apply_expr707=p_apply_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_apply_expr.add(p_apply_expr707.getTree());

            	    }
            	    break;

            	default :
            	    break loop324;
                }
            } while (true);



            // AST REWRITE
            // elements: p_apply_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 867:49: -> ^( POW ( p_apply_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:867:52: ^( POW ( p_apply_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(POW, "POW"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:867:58: ( p_apply_expr )*
                while ( stream_p_apply_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_apply_expr.nextTree());

                }
                stream_p_apply_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_pow_expr"

    public static class apply_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apply_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:869:1: apply_expr : ( basic_expr )+ -> ^( APPLY ( basic_expr )* ) ;
    public final babel17Parser.apply_expr_return apply_expr() throws RecognitionException {
        babel17Parser.apply_expr_return retval = new babel17Parser.apply_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.basic_expr_return basic_expr708 = null;


        RewriteRuleSubtreeStream stream_basic_expr=new RewriteRuleSubtreeStream(adaptor,"rule basic_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:870:2: ( ( basic_expr )+ -> ^( APPLY ( basic_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:870:4: ( basic_expr )+
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:870:4: ( basic_expr )+
            int cnt325=0;
            loop325:
            do {
                int alt325=2;
                int LA325_0 = input.LA(1);

                if ( (LA325_0==L_try) ) {
                    int LA325_2 = input.LA(2);

                    if ( (LA325_2==NL) ) {
                        int LA325_4 = input.LA(3);

                        if ( (LA325_4==L_begin||(LA325_4>=L_obj && LA325_4<=L_if)||(LA325_4>=L_while && LA325_4<=L_for)||(LA325_4>=L_yield && LA325_4<=L_match)||(LA325_4>=L_val && LA325_4<=L_def)||LA325_4==L_exception||LA325_4==L_try||(LA325_4>=L_concurrent && LA325_4<=L_nil)||(LA325_4>=L_module && LA325_4<=L_import)||LA325_4==L_not||(LA325_4>=L_root && LA325_4<=L_lens)||LA325_4==MINUS||(LA325_4>=A_ELLIPSIS && LA325_4<=U_ELLIPSIS)||LA325_4==L_force||(LA325_4>=Constr && LA325_4<=Id)||(LA325_4>=Float && LA325_4<=Num)||(LA325_4>=String && LA325_4<=ROUND_BRACKET_OPEN)||LA325_4==SQUARE_BRACKET_OPEN||LA325_4==CURLY_BRACKET_OPEN||LA325_4==UNDERSCORE||(LA325_4>=PRAGMA_LOG && LA325_4<=PRAGMA_CATCH)) ) {
                            alt325=1;
                        }


                    }
                    else if ( (LA325_2==L_begin||(LA325_2>=L_obj && LA325_2<=L_if)||(LA325_2>=L_while && LA325_2<=L_for)||(LA325_2>=L_yield && LA325_2<=L_match)||(LA325_2>=L_val && LA325_2<=L_def)||LA325_2==L_exception||LA325_2==L_try||(LA325_2>=L_concurrent && LA325_2<=L_nil)||(LA325_2>=L_module && LA325_2<=L_import)||LA325_2==L_not||(LA325_2>=L_root && LA325_2<=L_lens)||LA325_2==MINUS||(LA325_2>=A_ELLIPSIS && LA325_2<=U_ELLIPSIS)||LA325_2==L_force||(LA325_2>=Constr && LA325_2<=Id)||(LA325_2>=Float && LA325_2<=Num)||(LA325_2>=String && LA325_2<=ROUND_BRACKET_OPEN)||LA325_2==SQUARE_BRACKET_OPEN||LA325_2==CURLY_BRACKET_OPEN||LA325_2==UNDERSCORE||(LA325_2>=PRAGMA_LOG && LA325_2<=PRAGMA_CATCH)) ) {
                        alt325=1;
                    }


                }
                else if ( (LA325_0==L_begin||(LA325_0>=L_obj && LA325_0<=L_if)||(LA325_0>=L_while && LA325_0<=L_for)||LA325_0==L_match||(LA325_0>=L_true && LA325_0<=L_this)||LA325_0==L_nil||LA325_0==L_root||(LA325_0>=Constr && LA325_0<=Id)||(LA325_0>=Float && LA325_0<=Num)||(LA325_0>=String && LA325_0<=ROUND_BRACKET_OPEN)||LA325_0==SQUARE_BRACKET_OPEN||LA325_0==CURLY_BRACKET_OPEN) ) {
                    alt325=1;
                }


                switch (alt325) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:870:4: basic_expr
            	    {
            	    pushFollow(FOLLOW_basic_expr_in_apply_expr6294);
            	    basic_expr708=basic_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_basic_expr.add(basic_expr708.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt325 >= 1 ) break loop325;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(325, input);
                        throw eee;
                }
                cnt325++;
            } while (true);



            // AST REWRITE
            // elements: basic_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 870:16: -> ^( APPLY ( basic_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:870:19: ^( APPLY ( basic_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(APPLY, "APPLY"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:870:27: ( basic_expr )*
                while ( stream_basic_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_basic_expr.nextTree());

                }
                stream_basic_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "apply_expr"

    public static class p_apply_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_apply_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:871:1: p_apply_expr : p_basic_expr ( ( NL )? p_basic_expr )* -> ^( APPLY ( p_basic_expr )* ) ;
    public final babel17Parser.p_apply_expr_return p_apply_expr() throws RecognitionException {
        babel17Parser.p_apply_expr_return retval = new babel17Parser.p_apply_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL710=null;
        babel17Parser.p_basic_expr_return p_basic_expr709 = null;

        babel17Parser.p_basic_expr_return p_basic_expr711 = null;


        CommonTree NL710_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_p_basic_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_basic_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:872:2: ( p_basic_expr ( ( NL )? p_basic_expr )* -> ^( APPLY ( p_basic_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:872:4: p_basic_expr ( ( NL )? p_basic_expr )*
            {
            pushFollow(FOLLOW_p_basic_expr_in_p_apply_expr6312);
            p_basic_expr709=p_basic_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_basic_expr.add(p_basic_expr709.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:872:17: ( ( NL )? p_basic_expr )*
            loop327:
            do {
                int alt327=2;
                switch ( input.LA(1) ) {
                case NL:
                    {
                    int LA327_1 = input.LA(2);

                    if ( (LA327_1==L_try) ) {
                        int LA327_3 = input.LA(3);

                        if ( (LA327_3==NL) ) {
                            int LA327_5 = input.LA(4);

                            if ( (LA327_5==L_begin||(LA327_5>=L_obj && LA327_5<=L_if)||(LA327_5>=L_while && LA327_5<=L_for)||(LA327_5>=L_yield && LA327_5<=L_match)||(LA327_5>=L_val && LA327_5<=L_def)||LA327_5==L_exception||LA327_5==L_try||(LA327_5>=L_concurrent && LA327_5<=L_nil)||(LA327_5>=L_module && LA327_5<=L_import)||LA327_5==L_not||(LA327_5>=L_root && LA327_5<=L_lens)||LA327_5==MINUS||(LA327_5>=A_ELLIPSIS && LA327_5<=U_ELLIPSIS)||LA327_5==L_force||(LA327_5>=Constr && LA327_5<=Id)||(LA327_5>=Float && LA327_5<=Num)||(LA327_5>=String && LA327_5<=ROUND_BRACKET_OPEN)||LA327_5==SQUARE_BRACKET_OPEN||LA327_5==CURLY_BRACKET_OPEN||LA327_5==UNDERSCORE||(LA327_5>=PRAGMA_LOG && LA327_5<=PRAGMA_CATCH)) ) {
                                alt327=1;
                            }


                        }
                        else if ( (LA327_3==L_begin||(LA327_3>=L_obj && LA327_3<=L_if)||(LA327_3>=L_while && LA327_3<=L_for)||(LA327_3>=L_yield && LA327_3<=L_match)||(LA327_3>=L_val && LA327_3<=L_def)||LA327_3==L_exception||LA327_3==L_try||(LA327_3>=L_concurrent && LA327_3<=L_nil)||(LA327_3>=L_module && LA327_3<=L_import)||LA327_3==L_not||(LA327_3>=L_root && LA327_3<=L_lens)||LA327_3==MINUS||(LA327_3>=A_ELLIPSIS && LA327_3<=U_ELLIPSIS)||LA327_3==L_force||(LA327_3>=Constr && LA327_3<=Id)||(LA327_3>=Float && LA327_3<=Num)||(LA327_3>=String && LA327_3<=ROUND_BRACKET_OPEN)||LA327_3==SQUARE_BRACKET_OPEN||LA327_3==CURLY_BRACKET_OPEN||LA327_3==UNDERSCORE||(LA327_3>=PRAGMA_LOG && LA327_3<=PRAGMA_CATCH)) ) {
                            alt327=1;
                        }


                    }
                    else if ( (LA327_1==L_begin||(LA327_1>=L_obj && LA327_1<=L_if)||(LA327_1>=L_while && LA327_1<=L_for)||LA327_1==L_match||(LA327_1>=L_true && LA327_1<=L_this)||LA327_1==L_nil||LA327_1==L_root||(LA327_1>=Constr && LA327_1<=Id)||(LA327_1>=Float && LA327_1<=Num)||(LA327_1>=String && LA327_1<=ROUND_BRACKET_OPEN)||LA327_1==SQUARE_BRACKET_OPEN||LA327_1==CURLY_BRACKET_OPEN) ) {
                        alt327=1;
                    }


                    }
                    break;
                case L_try:
                    {
                    int LA327_3 = input.LA(2);

                    if ( (LA327_3==NL) ) {
                        int LA327_5 = input.LA(3);

                        if ( (LA327_5==L_begin||(LA327_5>=L_obj && LA327_5<=L_if)||(LA327_5>=L_while && LA327_5<=L_for)||(LA327_5>=L_yield && LA327_5<=L_match)||(LA327_5>=L_val && LA327_5<=L_def)||LA327_5==L_exception||LA327_5==L_try||(LA327_5>=L_concurrent && LA327_5<=L_nil)||(LA327_5>=L_module && LA327_5<=L_import)||LA327_5==L_not||(LA327_5>=L_root && LA327_5<=L_lens)||LA327_5==MINUS||(LA327_5>=A_ELLIPSIS && LA327_5<=U_ELLIPSIS)||LA327_5==L_force||(LA327_5>=Constr && LA327_5<=Id)||(LA327_5>=Float && LA327_5<=Num)||(LA327_5>=String && LA327_5<=ROUND_BRACKET_OPEN)||LA327_5==SQUARE_BRACKET_OPEN||LA327_5==CURLY_BRACKET_OPEN||LA327_5==UNDERSCORE||(LA327_5>=PRAGMA_LOG && LA327_5<=PRAGMA_CATCH)) ) {
                            alt327=1;
                        }


                    }
                    else if ( (LA327_3==L_begin||(LA327_3>=L_obj && LA327_3<=L_if)||(LA327_3>=L_while && LA327_3<=L_for)||(LA327_3>=L_yield && LA327_3<=L_match)||(LA327_3>=L_val && LA327_3<=L_def)||LA327_3==L_exception||LA327_3==L_try||(LA327_3>=L_concurrent && LA327_3<=L_nil)||(LA327_3>=L_module && LA327_3<=L_import)||LA327_3==L_not||(LA327_3>=L_root && LA327_3<=L_lens)||LA327_3==MINUS||(LA327_3>=A_ELLIPSIS && LA327_3<=U_ELLIPSIS)||LA327_3==L_force||(LA327_3>=Constr && LA327_3<=Id)||(LA327_3>=Float && LA327_3<=Num)||(LA327_3>=String && LA327_3<=ROUND_BRACKET_OPEN)||LA327_3==SQUARE_BRACKET_OPEN||LA327_3==CURLY_BRACKET_OPEN||LA327_3==UNDERSCORE||(LA327_3>=PRAGMA_LOG && LA327_3<=PRAGMA_CATCH)) ) {
                        alt327=1;
                    }


                    }
                    break;
                case L_begin:
                case L_obj:
                case L_with:
                case L_if:
                case L_while:
                case L_for:
                case L_match:
                case L_true:
                case L_false:
                case L_this:
                case L_nil:
                case L_root:
                case Constr:
                case Id:
                case Float:
                case Num:
                case String:
                case ROUND_BRACKET_OPEN:
                case SQUARE_BRACKET_OPEN:
                case CURLY_BRACKET_OPEN:
                    {
                    alt327=1;
                    }
                    break;

                }

                switch (alt327) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:872:18: ( NL )? p_basic_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:872:18: ( NL )?
            	    int alt326=2;
            	    int LA326_0 = input.LA(1);

            	    if ( (LA326_0==NL) ) {
            	        alt326=1;
            	    }
            	    switch (alt326) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:872:18: NL
            	            {
            	            NL710=(Token)match(input,NL,FOLLOW_NL_in_p_apply_expr6315); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL710);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_basic_expr_in_p_apply_expr6318);
            	    p_basic_expr711=p_basic_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_basic_expr.add(p_basic_expr711.getTree());

            	    }
            	    break;

            	default :
            	    break loop327;
                }
            } while (true);



            // AST REWRITE
            // elements: p_basic_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 872:37: -> ^( APPLY ( p_basic_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:872:40: ^( APPLY ( p_basic_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(APPLY, "APPLY"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:872:48: ( p_basic_expr )*
                while ( stream_p_basic_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_basic_expr.nextTree());

                }
                stream_p_basic_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_apply_expr"

    public static class basic_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "basic_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:874:1: basic_expr : message_send_expr ;
    public final babel17Parser.basic_expr_return basic_expr() throws RecognitionException {
        babel17Parser.basic_expr_return retval = new babel17Parser.basic_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.message_send_expr_return message_send_expr712 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:875:2: ( message_send_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:875:4: message_send_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_message_send_expr_in_basic_expr6338);
            message_send_expr712=message_send_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, message_send_expr712.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "basic_expr"

    public static class p_basic_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_basic_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:877:1: p_basic_expr : message_send_expr ;
    public final babel17Parser.p_basic_expr_return p_basic_expr() throws RecognitionException {
        babel17Parser.p_basic_expr_return retval = new babel17Parser.p_basic_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.message_send_expr_return message_send_expr713 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:878:2: ( message_send_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:878:4: message_send_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_message_send_expr_in_p_basic_expr6347);
            message_send_expr713=message_send_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, message_send_expr713.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_basic_expr"

    public static class message_send_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "message_send_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:880:1: message_send_expr : primitive_expr ( ( NL )? PERIOD ( NL )? message_expr )* -> ^( MESSAGE_SEND primitive_expr ( message_expr )* ) ;
    public final babel17Parser.message_send_expr_return message_send_expr() throws RecognitionException {
        babel17Parser.message_send_expr_return retval = new babel17Parser.message_send_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL715=null;
        Token PERIOD716=null;
        Token NL717=null;
        babel17Parser.primitive_expr_return primitive_expr714 = null;

        babel17Parser.message_expr_return message_expr718 = null;


        CommonTree NL715_tree=null;
        CommonTree PERIOD716_tree=null;
        CommonTree NL717_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_primitive_expr=new RewriteRuleSubtreeStream(adaptor,"rule primitive_expr");
        RewriteRuleSubtreeStream stream_message_expr=new RewriteRuleSubtreeStream(adaptor,"rule message_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:881:2: ( primitive_expr ( ( NL )? PERIOD ( NL )? message_expr )* -> ^( MESSAGE_SEND primitive_expr ( message_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:881:4: primitive_expr ( ( NL )? PERIOD ( NL )? message_expr )*
            {
            pushFollow(FOLLOW_primitive_expr_in_message_send_expr6356);
            primitive_expr714=primitive_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_primitive_expr.add(primitive_expr714.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:881:19: ( ( NL )? PERIOD ( NL )? message_expr )*
            loop330:
            do {
                int alt330=2;
                int LA330_0 = input.LA(1);

                if ( (LA330_0==NL) ) {
                    int LA330_1 = input.LA(2);

                    if ( (LA330_1==PERIOD) ) {
                        alt330=1;
                    }


                }
                else if ( (LA330_0==PERIOD) ) {
                    alt330=1;
                }


                switch (alt330) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:881:20: ( NL )? PERIOD ( NL )? message_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:881:20: ( NL )?
            	    int alt328=2;
            	    int LA328_0 = input.LA(1);

            	    if ( (LA328_0==NL) ) {
            	        alt328=1;
            	    }
            	    switch (alt328) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:881:20: NL
            	            {
            	            NL715=(Token)match(input,NL,FOLLOW_NL_in_message_send_expr6359); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL715);


            	            }
            	            break;

            	    }

            	    PERIOD716=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_message_send_expr6362); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD716);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:881:31: ( NL )?
            	    int alt329=2;
            	    int LA329_0 = input.LA(1);

            	    if ( (LA329_0==NL) ) {
            	        alt329=1;
            	    }
            	    switch (alt329) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:881:31: NL
            	            {
            	            NL717=(Token)match(input,NL,FOLLOW_NL_in_message_send_expr6364); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL717);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_message_expr_in_message_send_expr6367);
            	    message_expr718=message_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_message_expr.add(message_expr718.getTree());

            	    }
            	    break;

            	default :
            	    break loop330;
                }
            } while (true);



            // AST REWRITE
            // elements: message_expr, primitive_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 881:50: -> ^( MESSAGE_SEND primitive_expr ( message_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:881:53: ^( MESSAGE_SEND primitive_expr ( message_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MESSAGE_SEND, "MESSAGE_SEND"), root_1);

                adaptor.addChild(root_1, stream_primitive_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:881:83: ( message_expr )*
                while ( stream_message_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_message_expr.nextTree());

                }
                stream_message_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "message_send_expr"

    public static class message_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "message_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:883:1: message_expr : ( Id -> ^( MESSAGE_ID Id ) | '(' ( NL )? p_op_expr ( NL )? ')' -> ^( MESSAGE_LENS p_op_expr ) );
    public final babel17Parser.message_expr_return message_expr() throws RecognitionException {
        babel17Parser.message_expr_return retval = new babel17Parser.message_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id719=null;
        Token char_literal720=null;
        Token NL721=null;
        Token NL723=null;
        Token char_literal724=null;
        babel17Parser.p_op_expr_return p_op_expr722 = null;


        CommonTree Id719_tree=null;
        CommonTree char_literal720_tree=null;
        CommonTree NL721_tree=null;
        CommonTree NL723_tree=null;
        CommonTree char_literal724_tree=null;
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleSubtreeStream stream_p_op_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_op_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:884:2: ( Id -> ^( MESSAGE_ID Id ) | '(' ( NL )? p_op_expr ( NL )? ')' -> ^( MESSAGE_LENS p_op_expr ) )
            int alt333=2;
            int LA333_0 = input.LA(1);

            if ( (LA333_0==Id) ) {
                alt333=1;
            }
            else if ( (LA333_0==ROUND_BRACKET_OPEN) ) {
                alt333=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 333, 0, input);

                throw nvae;
            }
            switch (alt333) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:884:4: Id
                    {
                    Id719=(Token)match(input,Id,FOLLOW_Id_in_message_expr6390); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id719);



                    // AST REWRITE
                    // elements: Id
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 884:7: -> ^( MESSAGE_ID Id )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:884:10: ^( MESSAGE_ID Id )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MESSAGE_ID, "MESSAGE_ID"), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:885:4: '(' ( NL )? p_op_expr ( NL )? ')'
                    {
                    char_literal720=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_message_expr6403); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal720);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:885:8: ( NL )?
                    int alt331=2;
                    int LA331_0 = input.LA(1);

                    if ( (LA331_0==NL) ) {
                        alt331=1;
                    }
                    switch (alt331) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:885:8: NL
                            {
                            NL721=(Token)match(input,NL,FOLLOW_NL_in_message_expr6405); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL721);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_op_expr_in_message_expr6408);
                    p_op_expr722=p_op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_op_expr.add(p_op_expr722.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:885:22: ( NL )?
                    int alt332=2;
                    int LA332_0 = input.LA(1);

                    if ( (LA332_0==NL) ) {
                        alt332=1;
                    }
                    switch (alt332) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:885:22: NL
                            {
                            NL723=(Token)match(input,NL,FOLLOW_NL_in_message_expr6410); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL723);


                            }
                            break;

                    }

                    char_literal724=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_message_expr6413); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal724);



                    // AST REWRITE
                    // elements: p_op_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 885:30: -> ^( MESSAGE_LENS p_op_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:885:33: ^( MESSAGE_LENS p_op_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MESSAGE_LENS, "MESSAGE_LENS"), root_1);

                        adaptor.addChild(root_1, stream_p_op_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "message_expr"

    public static class list_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "list_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:887:1: list_expr : ( ( '[' ( NL )? protected_expr_nc ( NL )? ';' )=> '[' ( NL )? protected_expr_nc ( NL )? ';' ( NL )? protected_expr_nc ( NL )? ']' -> ^( INTERVAL ( protected_expr_nc )* ) | '[' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? )? ']' -> ^( SQUARE_LIST ( protected_expr_nc )* ) | '(' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( protected_expr_nc )* ) ) );
    public final babel17Parser.list_expr_return list_expr() throws RecognitionException {
        babel17Parser.list_expr_return retval = new babel17Parser.list_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal725=null;
        Token NL726=null;
        Token NL728=null;
        Token char_literal729=null;
        Token NL730=null;
        Token NL732=null;
        Token char_literal733=null;
        Token char_literal734=null;
        Token NL735=null;
        Token NL737=null;
        Token COMMA738=null;
        Token NL739=null;
        Token NL741=null;
        Token char_literal742=null;
        Token char_literal743=null;
        Token NL744=null;
        Token NL746=null;
        Token COMMA747=null;
        Token NL748=null;
        Token NL750=null;
        Token COMMA751=null;
        Token NL752=null;
        Token char_literal753=null;
        babel17Parser.protected_expr_nc_return protected_expr_nc727 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc731 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc736 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc740 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc745 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc749 = null;


        CommonTree char_literal725_tree=null;
        CommonTree NL726_tree=null;
        CommonTree NL728_tree=null;
        CommonTree char_literal729_tree=null;
        CommonTree NL730_tree=null;
        CommonTree NL732_tree=null;
        CommonTree char_literal733_tree=null;
        CommonTree char_literal734_tree=null;
        CommonTree NL735_tree=null;
        CommonTree NL737_tree=null;
        CommonTree COMMA738_tree=null;
        CommonTree NL739_tree=null;
        CommonTree NL741_tree=null;
        CommonTree char_literal742_tree=null;
        CommonTree char_literal743_tree=null;
        CommonTree NL744_tree=null;
        CommonTree NL746_tree=null;
        CommonTree COMMA747_tree=null;
        CommonTree NL748_tree=null;
        CommonTree NL750_tree=null;
        CommonTree COMMA751_tree=null;
        CommonTree NL752_tree=null;
        CommonTree char_literal753_tree=null;
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_SC=new RewriteRuleTokenStream(adaptor,"token SC");
        RewriteRuleTokenStream stream_SQUARE_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token SQUARE_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_SQUARE_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token SQUARE_BRACKET_OPEN");
        RewriteRuleSubtreeStream stream_protected_expr_nc=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr_nc");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:888:2: ( ( '[' ( NL )? protected_expr_nc ( NL )? ';' )=> '[' ( NL )? protected_expr_nc ( NL )? ';' ( NL )? protected_expr_nc ( NL )? ']' -> ^( INTERVAL ( protected_expr_nc )* ) | '[' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? )? ']' -> ^( SQUARE_LIST ( protected_expr_nc )* ) | '(' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( protected_expr_nc )* ) ) )
            int alt352=3;
            int LA352_0 = input.LA(1);

            if ( (LA352_0==SQUARE_BRACKET_OPEN) ) {
                int LA352_1 = input.LA(2);

                if ( (synpred18_babel17()) ) {
                    alt352=1;
                }
                else if ( (true) ) {
                    alt352=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 352, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA352_0==ROUND_BRACKET_OPEN) ) {
                alt352=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 352, 0, input);

                throw nvae;
            }
            switch (alt352) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:888:4: ( '[' ( NL )? protected_expr_nc ( NL )? ';' )=> '[' ( NL )? protected_expr_nc ( NL )? ';' ( NL )? protected_expr_nc ( NL )? ']'
                    {
                    char_literal725=(Token)match(input,SQUARE_BRACKET_OPEN,FOLLOW_SQUARE_BRACKET_OPEN_in_list_expr6448); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_OPEN.add(char_literal725);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:888:47: ( NL )?
                    int alt334=2;
                    int LA334_0 = input.LA(1);

                    if ( (LA334_0==NL) ) {
                        alt334=1;
                    }
                    switch (alt334) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:888:47: NL
                            {
                            NL726=(Token)match(input,NL,FOLLOW_NL_in_list_expr6450); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL726);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_list_expr6453);
                    protected_expr_nc727=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc727.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:888:69: ( NL )?
                    int alt335=2;
                    int LA335_0 = input.LA(1);

                    if ( (LA335_0==NL) ) {
                        alt335=1;
                    }
                    switch (alt335) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:888:69: NL
                            {
                            NL728=(Token)match(input,NL,FOLLOW_NL_in_list_expr6455); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL728);


                            }
                            break;

                    }

                    char_literal729=(Token)match(input,SC,FOLLOW_SC_in_list_expr6458); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SC.add(char_literal729);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:888:77: ( NL )?
                    int alt336=2;
                    int LA336_0 = input.LA(1);

                    if ( (LA336_0==NL) ) {
                        alt336=1;
                    }
                    switch (alt336) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:888:77: NL
                            {
                            NL730=(Token)match(input,NL,FOLLOW_NL_in_list_expr6460); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL730);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_list_expr6463);
                    protected_expr_nc731=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc731.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:888:99: ( NL )?
                    int alt337=2;
                    int LA337_0 = input.LA(1);

                    if ( (LA337_0==NL) ) {
                        alt337=1;
                    }
                    switch (alt337) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:888:99: NL
                            {
                            NL732=(Token)match(input,NL,FOLLOW_NL_in_list_expr6465); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL732);


                            }
                            break;

                    }

                    char_literal733=(Token)match(input,SQUARE_BRACKET_CLOSE,FOLLOW_SQUARE_BRACKET_CLOSE_in_list_expr6468); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_CLOSE.add(char_literal733);



                    // AST REWRITE
                    // elements: protected_expr_nc
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 888:107: -> ^( INTERVAL ( protected_expr_nc )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:888:110: ^( INTERVAL ( protected_expr_nc )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTERVAL, "INTERVAL"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:888:121: ( protected_expr_nc )*
                        while ( stream_protected_expr_nc.hasNext() ) {
                            adaptor.addChild(root_1, stream_protected_expr_nc.nextTree());

                        }
                        stream_protected_expr_nc.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:889:4: '[' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? )? ']'
                    {
                    char_literal734=(Token)match(input,SQUARE_BRACKET_OPEN,FOLLOW_SQUARE_BRACKET_OPEN_in_list_expr6482); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_OPEN.add(char_literal734);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:889:8: ( NL )?
                    int alt338=2;
                    int LA338_0 = input.LA(1);

                    if ( (LA338_0==NL) ) {
                        alt338=1;
                    }
                    switch (alt338) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:889:8: NL
                            {
                            NL735=(Token)match(input,NL,FOLLOW_NL_in_list_expr6484); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL735);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:889:12: ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? )?
                    int alt343=2;
                    int LA343_0 = input.LA(1);

                    if ( (LA343_0==L_begin||(LA343_0>=L_obj && LA343_0<=L_if)||(LA343_0>=L_while && LA343_0<=L_for)||LA343_0==L_match||LA343_0==L_exception||LA343_0==L_try||(LA343_0>=L_concurrent && LA343_0<=L_lazy)||(LA343_0>=L_true && LA343_0<=L_nil)||LA343_0==L_typeof||LA343_0==L_not||(LA343_0>=L_root && LA343_0<=L_lens)||LA343_0==MINUS||(LA343_0>=A_ELLIPSIS && LA343_0<=U_ELLIPSIS)||LA343_0==L_force||(LA343_0>=Constr && LA343_0<=Id)||(LA343_0>=Float && LA343_0<=Num)||(LA343_0>=String && LA343_0<=ROUND_BRACKET_OPEN)||LA343_0==SQUARE_BRACKET_OPEN||LA343_0==CURLY_BRACKET_OPEN||LA343_0==UNDERSCORE) ) {
                        alt343=1;
                    }
                    switch (alt343) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:889:13: protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )?
                            {
                            pushFollow(FOLLOW_protected_expr_nc_in_list_expr6488);
                            protected_expr_nc736=protected_expr_nc();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc736.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:889:31: ( ( NL )? COMMA ( NL )? protected_expr_nc )*
                            loop341:
                            do {
                                int alt341=2;
                                int LA341_0 = input.LA(1);

                                if ( (LA341_0==NL) ) {
                                    int LA341_1 = input.LA(2);

                                    if ( (LA341_1==COMMA) ) {
                                        alt341=1;
                                    }


                                }
                                else if ( (LA341_0==COMMA) ) {
                                    alt341=1;
                                }


                                switch (alt341) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:889:32: ( NL )? COMMA ( NL )? protected_expr_nc
                            	    {
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:889:32: ( NL )?
                            	    int alt339=2;
                            	    int LA339_0 = input.LA(1);

                            	    if ( (LA339_0==NL) ) {
                            	        alt339=1;
                            	    }
                            	    switch (alt339) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:889:32: NL
                            	            {
                            	            NL737=(Token)match(input,NL,FOLLOW_NL_in_list_expr6491); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL737);


                            	            }
                            	            break;

                            	    }

                            	    COMMA738=(Token)match(input,COMMA,FOLLOW_COMMA_in_list_expr6494); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA738);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:889:42: ( NL )?
                            	    int alt340=2;
                            	    int LA340_0 = input.LA(1);

                            	    if ( (LA340_0==NL) ) {
                            	        alt340=1;
                            	    }
                            	    switch (alt340) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:889:42: NL
                            	            {
                            	            NL739=(Token)match(input,NL,FOLLOW_NL_in_list_expr6496); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL739);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_protected_expr_nc_in_list_expr6499);
                            	    protected_expr_nc740=protected_expr_nc();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc740.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop341;
                                }
                            } while (true);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:889:66: ( NL )?
                            int alt342=2;
                            int LA342_0 = input.LA(1);

                            if ( (LA342_0==NL) ) {
                                alt342=1;
                            }
                            switch (alt342) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:889:66: NL
                                    {
                                    NL741=(Token)match(input,NL,FOLLOW_NL_in_list_expr6503); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL741);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    char_literal742=(Token)match(input,SQUARE_BRACKET_CLOSE,FOLLOW_SQUARE_BRACKET_CLOSE_in_list_expr6508); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_CLOSE.add(char_literal742);



                    // AST REWRITE
                    // elements: protected_expr_nc
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 889:76: -> ^( SQUARE_LIST ( protected_expr_nc )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:889:79: ^( SQUARE_LIST ( protected_expr_nc )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SQUARE_LIST, "SQUARE_LIST"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:889:93: ( protected_expr_nc )*
                        while ( stream_protected_expr_nc.hasNext() ) {
                            adaptor.addChild(root_1, stream_protected_expr_nc.nextTree());

                        }
                        stream_protected_expr_nc.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:890:4: '(' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )? )? ')'
                    {
                    char_literal743=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_list_expr6522); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal743);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:890:8: ( NL )?
                    int alt344=2;
                    int LA344_0 = input.LA(1);

                    if ( (LA344_0==NL) ) {
                        alt344=1;
                    }
                    switch (alt344) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:890:8: NL
                            {
                            NL744=(Token)match(input,NL,FOLLOW_NL_in_list_expr6524); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL744);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:890:12: ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )? )?
                    int alt351=2;
                    int LA351_0 = input.LA(1);

                    if ( (LA351_0==L_begin||(LA351_0>=L_obj && LA351_0<=L_if)||(LA351_0>=L_while && LA351_0<=L_for)||LA351_0==L_match||LA351_0==L_exception||LA351_0==L_try||(LA351_0>=L_concurrent && LA351_0<=L_lazy)||(LA351_0>=L_true && LA351_0<=L_nil)||LA351_0==L_typeof||LA351_0==L_not||(LA351_0>=L_root && LA351_0<=L_lens)||LA351_0==MINUS||(LA351_0>=A_ELLIPSIS && LA351_0<=U_ELLIPSIS)||LA351_0==L_force||(LA351_0>=Constr && LA351_0<=Id)||(LA351_0>=Float && LA351_0<=Num)||(LA351_0>=String && LA351_0<=ROUND_BRACKET_OPEN)||LA351_0==SQUARE_BRACKET_OPEN||LA351_0==CURLY_BRACKET_OPEN||LA351_0==UNDERSCORE) ) {
                        alt351=1;
                    }
                    switch (alt351) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:890:13: protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )?
                            {
                            pushFollow(FOLLOW_protected_expr_nc_in_list_expr6528);
                            protected_expr_nc745=protected_expr_nc();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc745.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:890:31: ( ( NL )? COMMA ( NL )? protected_expr_nc )*
                            loop347:
                            do {
                                int alt347=2;
                                int LA347_0 = input.LA(1);

                                if ( (LA347_0==NL) ) {
                                    int LA347_1 = input.LA(2);

                                    if ( (LA347_1==COMMA) ) {
                                        int LA347_2 = input.LA(3);

                                        if ( (LA347_2==NL) ) {
                                            int LA347_4 = input.LA(4);

                                            if ( (LA347_4==L_begin||(LA347_4>=L_obj && LA347_4<=L_if)||(LA347_4>=L_while && LA347_4<=L_for)||LA347_4==L_match||LA347_4==L_exception||LA347_4==L_try||(LA347_4>=L_concurrent && LA347_4<=L_lazy)||(LA347_4>=L_true && LA347_4<=L_nil)||LA347_4==L_typeof||LA347_4==L_not||(LA347_4>=L_root && LA347_4<=L_lens)||LA347_4==MINUS||(LA347_4>=A_ELLIPSIS && LA347_4<=U_ELLIPSIS)||LA347_4==L_force||(LA347_4>=Constr && LA347_4<=Id)||(LA347_4>=Float && LA347_4<=Num)||(LA347_4>=String && LA347_4<=ROUND_BRACKET_OPEN)||LA347_4==SQUARE_BRACKET_OPEN||LA347_4==CURLY_BRACKET_OPEN||LA347_4==UNDERSCORE) ) {
                                                alt347=1;
                                            }


                                        }
                                        else if ( (LA347_2==L_begin||(LA347_2>=L_obj && LA347_2<=L_if)||(LA347_2>=L_while && LA347_2<=L_for)||LA347_2==L_match||LA347_2==L_exception||LA347_2==L_try||(LA347_2>=L_concurrent && LA347_2<=L_lazy)||(LA347_2>=L_true && LA347_2<=L_nil)||LA347_2==L_typeof||LA347_2==L_not||(LA347_2>=L_root && LA347_2<=L_lens)||LA347_2==MINUS||(LA347_2>=A_ELLIPSIS && LA347_2<=U_ELLIPSIS)||LA347_2==L_force||(LA347_2>=Constr && LA347_2<=Id)||(LA347_2>=Float && LA347_2<=Num)||(LA347_2>=String && LA347_2<=ROUND_BRACKET_OPEN)||LA347_2==SQUARE_BRACKET_OPEN||LA347_2==CURLY_BRACKET_OPEN||LA347_2==UNDERSCORE) ) {
                                            alt347=1;
                                        }


                                    }


                                }
                                else if ( (LA347_0==COMMA) ) {
                                    int LA347_2 = input.LA(2);

                                    if ( (LA347_2==NL) ) {
                                        int LA347_4 = input.LA(3);

                                        if ( (LA347_4==L_begin||(LA347_4>=L_obj && LA347_4<=L_if)||(LA347_4>=L_while && LA347_4<=L_for)||LA347_4==L_match||LA347_4==L_exception||LA347_4==L_try||(LA347_4>=L_concurrent && LA347_4<=L_lazy)||(LA347_4>=L_true && LA347_4<=L_nil)||LA347_4==L_typeof||LA347_4==L_not||(LA347_4>=L_root && LA347_4<=L_lens)||LA347_4==MINUS||(LA347_4>=A_ELLIPSIS && LA347_4<=U_ELLIPSIS)||LA347_4==L_force||(LA347_4>=Constr && LA347_4<=Id)||(LA347_4>=Float && LA347_4<=Num)||(LA347_4>=String && LA347_4<=ROUND_BRACKET_OPEN)||LA347_4==SQUARE_BRACKET_OPEN||LA347_4==CURLY_BRACKET_OPEN||LA347_4==UNDERSCORE) ) {
                                            alt347=1;
                                        }


                                    }
                                    else if ( (LA347_2==L_begin||(LA347_2>=L_obj && LA347_2<=L_if)||(LA347_2>=L_while && LA347_2<=L_for)||LA347_2==L_match||LA347_2==L_exception||LA347_2==L_try||(LA347_2>=L_concurrent && LA347_2<=L_lazy)||(LA347_2>=L_true && LA347_2<=L_nil)||LA347_2==L_typeof||LA347_2==L_not||(LA347_2>=L_root && LA347_2<=L_lens)||LA347_2==MINUS||(LA347_2>=A_ELLIPSIS && LA347_2<=U_ELLIPSIS)||LA347_2==L_force||(LA347_2>=Constr && LA347_2<=Id)||(LA347_2>=Float && LA347_2<=Num)||(LA347_2>=String && LA347_2<=ROUND_BRACKET_OPEN)||LA347_2==SQUARE_BRACKET_OPEN||LA347_2==CURLY_BRACKET_OPEN||LA347_2==UNDERSCORE) ) {
                                        alt347=1;
                                    }


                                }


                                switch (alt347) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:890:32: ( NL )? COMMA ( NL )? protected_expr_nc
                            	    {
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:890:32: ( NL )?
                            	    int alt345=2;
                            	    int LA345_0 = input.LA(1);

                            	    if ( (LA345_0==NL) ) {
                            	        alt345=1;
                            	    }
                            	    switch (alt345) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:890:32: NL
                            	            {
                            	            NL746=(Token)match(input,NL,FOLLOW_NL_in_list_expr6531); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL746);


                            	            }
                            	            break;

                            	    }

                            	    COMMA747=(Token)match(input,COMMA,FOLLOW_COMMA_in_list_expr6534); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA747);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:890:42: ( NL )?
                            	    int alt346=2;
                            	    int LA346_0 = input.LA(1);

                            	    if ( (LA346_0==NL) ) {
                            	        alt346=1;
                            	    }
                            	    switch (alt346) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:890:42: NL
                            	            {
                            	            NL748=(Token)match(input,NL,FOLLOW_NL_in_list_expr6536); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL748);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_protected_expr_nc_in_list_expr6539);
                            	    protected_expr_nc749=protected_expr_nc();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc749.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop347;
                                }
                            } while (true);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:890:66: ( NL )?
                            int alt348=2;
                            int LA348_0 = input.LA(1);

                            if ( (LA348_0==NL) ) {
                                alt348=1;
                            }
                            switch (alt348) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:890:66: NL
                                    {
                                    NL750=(Token)match(input,NL,FOLLOW_NL_in_list_expr6543); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL750);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:890:70: ( COMMA ( NL )? )?
                            int alt350=2;
                            int LA350_0 = input.LA(1);

                            if ( (LA350_0==COMMA) ) {
                                alt350=1;
                            }
                            switch (alt350) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:890:71: COMMA ( NL )?
                                    {
                                    COMMA751=(Token)match(input,COMMA,FOLLOW_COMMA_in_list_expr6547); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA751);

                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:890:77: ( NL )?
                                    int alt349=2;
                                    int LA349_0 = input.LA(1);

                                    if ( (LA349_0==NL) ) {
                                        alt349=1;
                                    }
                                    switch (alt349) {
                                        case 1 :
                                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:890:77: NL
                                            {
                                            NL752=(Token)match(input,NL,FOLLOW_NL_in_list_expr6549); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_NL.add(NL752);


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    char_literal753=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_list_expr6556); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal753);



                    // AST REWRITE
                    // elements: COMMA, protected_expr_nc
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 890:89: -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( protected_expr_nc )* ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:890:92: ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( protected_expr_nc )* ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROUND_LIST, "ROUND_LIST"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:890:105: ^( NIL_TOKEN ( COMMA )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:890:117: ( COMMA )*
                        while ( stream_COMMA.hasNext() ) {
                            adaptor.addChild(root_2, stream_COMMA.nextNode());

                        }
                        stream_COMMA.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:890:125: ^( NIL_TOKEN ( protected_expr_nc )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:890:137: ( protected_expr_nc )*
                        while ( stream_protected_expr_nc.hasNext() ) {
                            adaptor.addChild(root_2, stream_protected_expr_nc.nextTree());

                        }
                        stream_protected_expr_nc.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "list_expr"

    public static class map_or_set_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "map_or_set_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:892:1: map_or_set_expr : ( '{' ( NL )? ( map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( map_or_set_elem_expr )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) );
    public final babel17Parser.map_or_set_expr_return map_or_set_expr() throws RecognitionException {
        babel17Parser.map_or_set_expr_return retval = new babel17Parser.map_or_set_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal754=null;
        Token NL755=null;
        Token NL757=null;
        Token COMMA758=null;
        Token NL759=null;
        Token NL761=null;
        Token char_literal762=null;
        Token char_literal763=null;
        Token NL764=null;
        Token NL766=null;
        Token char_literal767=null;
        babel17Parser.map_or_set_elem_expr_return map_or_set_elem_expr756 = null;

        babel17Parser.map_or_set_elem_expr_return map_or_set_elem_expr760 = null;

        babel17Parser.token_ARROW_return token_ARROW765 = null;


        CommonTree char_literal754_tree=null;
        CommonTree NL755_tree=null;
        CommonTree NL757_tree=null;
        CommonTree COMMA758_tree=null;
        CommonTree NL759_tree=null;
        CommonTree NL761_tree=null;
        CommonTree char_literal762_tree=null;
        CommonTree char_literal763_tree=null;
        CommonTree NL764_tree=null;
        CommonTree NL766_tree=null;
        CommonTree char_literal767_tree=null;
        RewriteRuleTokenStream stream_CURLY_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_OPEN");
        RewriteRuleTokenStream stream_CURLY_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_map_or_set_elem_expr=new RewriteRuleSubtreeStream(adaptor,"rule map_or_set_elem_expr");
        RewriteRuleSubtreeStream stream_token_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_ARROW");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:893:2: ( '{' ( NL )? ( map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( map_or_set_elem_expr )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) )
            int alt361=2;
            int LA361_0 = input.LA(1);

            if ( (LA361_0==CURLY_BRACKET_OPEN) ) {
                switch ( input.LA(2) ) {
                case NL:
                    {
                    int LA361_2 = input.LA(3);

                    if ( ((LA361_2>=A_ARROW && LA361_2<=U_ARROW)) ) {
                        alt361=2;
                    }
                    else if ( (LA361_2==L_begin||(LA361_2>=L_obj && LA361_2<=L_if)||(LA361_2>=L_while && LA361_2<=L_for)||LA361_2==L_match||LA361_2==L_exception||LA361_2==L_try||(LA361_2>=L_concurrent && LA361_2<=L_lazy)||(LA361_2>=L_true && LA361_2<=L_nil)||LA361_2==L_typeof||LA361_2==L_not||(LA361_2>=L_root && LA361_2<=L_lens)||LA361_2==MINUS||(LA361_2>=A_ELLIPSIS && LA361_2<=U_ELLIPSIS)||LA361_2==L_force||(LA361_2>=Constr && LA361_2<=Id)||(LA361_2>=Float && LA361_2<=Num)||(LA361_2>=String && LA361_2<=ROUND_BRACKET_OPEN)||LA361_2==SQUARE_BRACKET_OPEN||(LA361_2>=CURLY_BRACKET_OPEN && LA361_2<=UNDERSCORE)) ) {
                        alt361=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 361, 2, input);

                        throw nvae;
                    }
                    }
                    break;
                case A_ARROW:
                case U_ARROW:
                    {
                    alt361=2;
                    }
                    break;
                case L_begin:
                case L_obj:
                case L_with:
                case L_if:
                case L_while:
                case L_for:
                case L_match:
                case L_exception:
                case L_try:
                case L_concurrent:
                case L_choose:
                case L_lazy:
                case L_true:
                case L_false:
                case L_this:
                case L_random:
                case L_nil:
                case L_typeof:
                case L_not:
                case L_root:
                case L_native:
                case L_min:
                case L_max:
                case L_lens:
                case MINUS:
                case A_ELLIPSIS:
                case U_ELLIPSIS:
                case L_force:
                case Constr:
                case Id:
                case Float:
                case Num:
                case String:
                case ROUND_BRACKET_OPEN:
                case SQUARE_BRACKET_OPEN:
                case CURLY_BRACKET_OPEN:
                case CURLY_BRACKET_CLOSE:
                case UNDERSCORE:
                    {
                    alt361=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 361, 1, input);

                    throw nvae;
                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 361, 0, input);

                throw nvae;
            }
            switch (alt361) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:893:4: '{' ( NL )? ( map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )* )? '}'
                    {
                    char_literal754=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_map_or_set_expr6585); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal754);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:893:8: ( NL )?
                    int alt353=2;
                    int LA353_0 = input.LA(1);

                    if ( (LA353_0==NL) ) {
                        alt353=1;
                    }
                    switch (alt353) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:893:8: NL
                            {
                            NL755=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr6587); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL755);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:893:12: ( map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )* )?
                    int alt358=2;
                    int LA358_0 = input.LA(1);

                    if ( (LA358_0==L_begin||(LA358_0>=L_obj && LA358_0<=L_if)||(LA358_0>=L_while && LA358_0<=L_for)||LA358_0==L_match||LA358_0==L_exception||LA358_0==L_try||(LA358_0>=L_concurrent && LA358_0<=L_lazy)||(LA358_0>=L_true && LA358_0<=L_nil)||LA358_0==L_typeof||LA358_0==L_not||(LA358_0>=L_root && LA358_0<=L_lens)||LA358_0==MINUS||(LA358_0>=A_ELLIPSIS && LA358_0<=U_ELLIPSIS)||LA358_0==L_force||(LA358_0>=Constr && LA358_0<=Id)||(LA358_0>=Float && LA358_0<=Num)||(LA358_0>=String && LA358_0<=ROUND_BRACKET_OPEN)||LA358_0==SQUARE_BRACKET_OPEN||LA358_0==CURLY_BRACKET_OPEN||LA358_0==UNDERSCORE) ) {
                        alt358=1;
                    }
                    switch (alt358) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:893:13: map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )*
                            {
                            pushFollow(FOLLOW_map_or_set_elem_expr_in_map_or_set_expr6591);
                            map_or_set_elem_expr756=map_or_set_elem_expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_map_or_set_elem_expr.add(map_or_set_elem_expr756.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:893:34: ( NL )?
                            int alt354=2;
                            int LA354_0 = input.LA(1);

                            if ( (LA354_0==NL) ) {
                                alt354=1;
                            }
                            switch (alt354) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:893:34: NL
                                    {
                                    NL757=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr6593); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL757);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:893:38: ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )*
                            loop357:
                            do {
                                int alt357=2;
                                int LA357_0 = input.LA(1);

                                if ( (LA357_0==COMMA) ) {
                                    alt357=1;
                                }


                                switch (alt357) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:893:39: COMMA ( NL )? map_or_set_elem_expr ( NL )?
                            	    {
                            	    COMMA758=(Token)match(input,COMMA,FOLLOW_COMMA_in_map_or_set_expr6597); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA758);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:893:45: ( NL )?
                            	    int alt355=2;
                            	    int LA355_0 = input.LA(1);

                            	    if ( (LA355_0==NL) ) {
                            	        alt355=1;
                            	    }
                            	    switch (alt355) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:893:45: NL
                            	            {
                            	            NL759=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr6599); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL759);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_map_or_set_elem_expr_in_map_or_set_expr6602);
                            	    map_or_set_elem_expr760=map_or_set_elem_expr();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_map_or_set_elem_expr.add(map_or_set_elem_expr760.getTree());
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:893:70: ( NL )?
                            	    int alt356=2;
                            	    int LA356_0 = input.LA(1);

                            	    if ( (LA356_0==NL) ) {
                            	        alt356=1;
                            	    }
                            	    switch (alt356) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:893:70: NL
                            	            {
                            	            NL761=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr6604); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL761);


                            	            }
                            	            break;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop357;
                                }
                            } while (true);


                            }
                            break;

                    }

                    char_literal762=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_map_or_set_expr6611); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal762);



                    // AST REWRITE
                    // elements: map_or_set_elem_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 893:82: -> ^( MAP_OR_SET_OR_OBJ ( map_or_set_elem_expr )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:893:85: ^( MAP_OR_SET_OR_OBJ ( map_or_set_elem_expr )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MAP_OR_SET_OR_OBJ, "MAP_OR_SET_OR_OBJ"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:893:105: ( map_or_set_elem_expr )*
                        while ( stream_map_or_set_elem_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_map_or_set_elem_expr.nextTree());

                        }
                        stream_map_or_set_elem_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:894:10: '{' ( NL )? token_ARROW ( NL )? '}'
                    {
                    char_literal763=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_map_or_set_expr6631); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal763);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:894:14: ( NL )?
                    int alt359=2;
                    int LA359_0 = input.LA(1);

                    if ( (LA359_0==NL) ) {
                        alt359=1;
                    }
                    switch (alt359) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:894:14: NL
                            {
                            NL764=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr6633); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL764);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_token_ARROW_in_map_or_set_expr6636);
                    token_ARROW765=token_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_ARROW.add(token_ARROW765.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:894:30: ( NL )?
                    int alt360=2;
                    int LA360_0 = input.LA(1);

                    if ( (LA360_0==NL) ) {
                        alt360=1;
                    }
                    switch (alt360) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:894:30: NL
                            {
                            NL766=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr6638); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL766);


                            }
                            break;

                    }

                    char_literal767=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_map_or_set_expr6641); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal767);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 894:38: -> ^( EMPTY_MAP )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:894:41: ^( EMPTY_MAP )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EMPTY_MAP, "EMPTY_MAP"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "map_or_set_expr"

    public static class map_or_set_elem_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "map_or_set_elem_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:896:1: map_or_set_elem_expr : protected_expr_nc ( ( NL )? arrow_or_assign ( NL )? protected_expr_nc )? -> ^( NIL_TOKEN ^( NIL_TOKEN ( protected_expr_nc )* ) ( arrow_or_assign )* ) ;
    public final babel17Parser.map_or_set_elem_expr_return map_or_set_elem_expr() throws RecognitionException {
        babel17Parser.map_or_set_elem_expr_return retval = new babel17Parser.map_or_set_elem_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL769=null;
        Token NL771=null;
        babel17Parser.protected_expr_nc_return protected_expr_nc768 = null;

        babel17Parser.arrow_or_assign_return arrow_or_assign770 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc772 = null;


        CommonTree NL769_tree=null;
        CommonTree NL771_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_arrow_or_assign=new RewriteRuleSubtreeStream(adaptor,"rule arrow_or_assign");
        RewriteRuleSubtreeStream stream_protected_expr_nc=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr_nc");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:897:2: ( protected_expr_nc ( ( NL )? arrow_or_assign ( NL )? protected_expr_nc )? -> ^( NIL_TOKEN ^( NIL_TOKEN ( protected_expr_nc )* ) ( arrow_or_assign )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:897:4: protected_expr_nc ( ( NL )? arrow_or_assign ( NL )? protected_expr_nc )?
            {
            pushFollow(FOLLOW_protected_expr_nc_in_map_or_set_elem_expr6658);
            protected_expr_nc768=protected_expr_nc();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc768.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:897:22: ( ( NL )? arrow_or_assign ( NL )? protected_expr_nc )?
            int alt364=2;
            int LA364_0 = input.LA(1);

            if ( (LA364_0==NL) ) {
                int LA364_1 = input.LA(2);

                if ( (LA364_1==ASSIGN||(LA364_1>=A_ARROW && LA364_1<=U_ARROW)) ) {
                    alt364=1;
                }
            }
            else if ( (LA364_0==ASSIGN||(LA364_0>=A_ARROW && LA364_0<=U_ARROW)) ) {
                alt364=1;
            }
            switch (alt364) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:897:23: ( NL )? arrow_or_assign ( NL )? protected_expr_nc
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:897:23: ( NL )?
                    int alt362=2;
                    int LA362_0 = input.LA(1);

                    if ( (LA362_0==NL) ) {
                        alt362=1;
                    }
                    switch (alt362) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:897:23: NL
                            {
                            NL769=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_elem_expr6661); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL769);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_arrow_or_assign_in_map_or_set_elem_expr6664);
                    arrow_or_assign770=arrow_or_assign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrow_or_assign.add(arrow_or_assign770.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:897:43: ( NL )?
                    int alt363=2;
                    int LA363_0 = input.LA(1);

                    if ( (LA363_0==NL) ) {
                        alt363=1;
                    }
                    switch (alt363) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:897:43: NL
                            {
                            NL771=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_elem_expr6666); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL771);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_map_or_set_elem_expr6669);
                    protected_expr_nc772=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc772.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: protected_expr_nc, arrow_or_assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 897:67: -> ^( NIL_TOKEN ^( NIL_TOKEN ( protected_expr_nc )* ) ( arrow_or_assign )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:897:70: ^( NIL_TOKEN ^( NIL_TOKEN ( protected_expr_nc )* ) ( arrow_or_assign )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:897:82: ^( NIL_TOKEN ( protected_expr_nc )* )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:897:94: ( protected_expr_nc )*
                while ( stream_protected_expr_nc.hasNext() ) {
                    adaptor.addChild(root_2, stream_protected_expr_nc.nextTree());

                }
                stream_protected_expr_nc.reset();

                adaptor.addChild(root_1, root_2);
                }
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:897:114: ( arrow_or_assign )*
                while ( stream_arrow_or_assign.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrow_or_assign.nextTree());

                }
                stream_arrow_or_assign.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "map_or_set_elem_expr"

    public static class type_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:899:1: type_expr : '(' ( NL )? ':' ( NL )? typeid ( NL )? ')' -> ^( TYPE_EXPR typeid ) ;
    public final babel17Parser.type_expr_return type_expr() throws RecognitionException {
        babel17Parser.type_expr_return retval = new babel17Parser.type_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal773=null;
        Token NL774=null;
        Token char_literal775=null;
        Token NL776=null;
        Token NL778=null;
        Token char_literal779=null;
        babel17Parser.typeid_return typeid777 = null;


        CommonTree char_literal773_tree=null;
        CommonTree NL774_tree=null;
        CommonTree char_literal775_tree=null;
        CommonTree NL776_tree=null;
        CommonTree NL778_tree=null;
        CommonTree char_literal779_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleSubtreeStream stream_typeid=new RewriteRuleSubtreeStream(adaptor,"rule typeid");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:900:2: ( '(' ( NL )? ':' ( NL )? typeid ( NL )? ')' -> ^( TYPE_EXPR typeid ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:900:4: '(' ( NL )? ':' ( NL )? typeid ( NL )? ')'
            {
            char_literal773=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_type_expr6696); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal773);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:900:8: ( NL )?
            int alt365=2;
            int LA365_0 = input.LA(1);

            if ( (LA365_0==NL) ) {
                alt365=1;
            }
            switch (alt365) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:900:8: NL
                    {
                    NL774=(Token)match(input,NL,FOLLOW_NL_in_type_expr6698); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL774);


                    }
                    break;

            }

            char_literal775=(Token)match(input,COLON,FOLLOW_COLON_in_type_expr6701); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(char_literal775);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:900:16: ( NL )?
            int alt366=2;
            int LA366_0 = input.LA(1);

            if ( (LA366_0==NL) ) {
                alt366=1;
            }
            switch (alt366) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:900:16: NL
                    {
                    NL776=(Token)match(input,NL,FOLLOW_NL_in_type_expr6703); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL776);


                    }
                    break;

            }

            pushFollow(FOLLOW_typeid_in_type_expr6706);
            typeid777=typeid();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeid.add(typeid777.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:900:27: ( NL )?
            int alt367=2;
            int LA367_0 = input.LA(1);

            if ( (LA367_0==NL) ) {
                alt367=1;
            }
            switch (alt367) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:900:27: NL
                    {
                    NL778=(Token)match(input,NL,FOLLOW_NL_in_type_expr6708); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL778);


                    }
                    break;

            }

            char_literal779=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_type_expr6711); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal779);



            // AST REWRITE
            // elements: typeid
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 900:35: -> ^( TYPE_EXPR typeid )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:900:38: ^( TYPE_EXPR typeid )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_EXPR, "TYPE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_typeid.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_expr"

    public static class primitive_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitive_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:902:1: primitive_expr : ( Num | Float | String | Id | Constr | L_true | L_false | L_this | L_nil | L_root | ( type_expr )=> type_expr | ( lambda_expr )=> lambda_expr | obj_expr | list_expr | with_control_expr | map_or_set_expr );
    public final babel17Parser.primitive_expr_return primitive_expr() throws RecognitionException {
        babel17Parser.primitive_expr_return retval = new babel17Parser.primitive_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Num780=null;
        Token Float781=null;
        Token String782=null;
        Token Id783=null;
        Token Constr784=null;
        Token L_true785=null;
        Token L_false786=null;
        Token L_this787=null;
        Token L_nil788=null;
        Token L_root789=null;
        babel17Parser.type_expr_return type_expr790 = null;

        babel17Parser.lambda_expr_return lambda_expr791 = null;

        babel17Parser.obj_expr_return obj_expr792 = null;

        babel17Parser.list_expr_return list_expr793 = null;

        babel17Parser.with_control_expr_return with_control_expr794 = null;

        babel17Parser.map_or_set_expr_return map_or_set_expr795 = null;


        CommonTree Num780_tree=null;
        CommonTree Float781_tree=null;
        CommonTree String782_tree=null;
        CommonTree Id783_tree=null;
        CommonTree Constr784_tree=null;
        CommonTree L_true785_tree=null;
        CommonTree L_false786_tree=null;
        CommonTree L_this787_tree=null;
        CommonTree L_nil788_tree=null;
        CommonTree L_root789_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:903:2: ( Num | Float | String | Id | Constr | L_true | L_false | L_this | L_nil | L_root | ( type_expr )=> type_expr | ( lambda_expr )=> lambda_expr | obj_expr | list_expr | with_control_expr | map_or_set_expr )
            int alt368=16;
            alt368 = dfa368.predict(input);
            switch (alt368) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:903:4: Num
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Num780=(Token)match(input,Num,FOLLOW_Num_in_primitive_expr6729); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Num780_tree = (CommonTree)adaptor.create(Num780);
                    adaptor.addChild(root_0, Num780_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:904:4: Float
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Float781=(Token)match(input,Float,FOLLOW_Float_in_primitive_expr6734); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Float781_tree = (CommonTree)adaptor.create(Float781);
                    adaptor.addChild(root_0, Float781_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:905:4: String
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    String782=(Token)match(input,String,FOLLOW_String_in_primitive_expr6739); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    String782_tree = (CommonTree)adaptor.create(String782);
                    adaptor.addChild(root_0, String782_tree);
                    }

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:906:4: Id
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Id783=(Token)match(input,Id,FOLLOW_Id_in_primitive_expr6744); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Id783_tree = (CommonTree)adaptor.create(Id783);
                    adaptor.addChild(root_0, Id783_tree);
                    }

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:907:4: Constr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Constr784=(Token)match(input,Constr,FOLLOW_Constr_in_primitive_expr6749); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Constr784_tree = (CommonTree)adaptor.create(Constr784);
                    adaptor.addChild(root_0, Constr784_tree);
                    }

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:908:4: L_true
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_true785=(Token)match(input,L_true,FOLLOW_L_true_in_primitive_expr6754); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_true785_tree = (CommonTree)adaptor.create(L_true785);
                    adaptor.addChild(root_0, L_true785_tree);
                    }

                    }
                    break;
                case 7 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:909:4: L_false
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_false786=(Token)match(input,L_false,FOLLOW_L_false_in_primitive_expr6759); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_false786_tree = (CommonTree)adaptor.create(L_false786);
                    adaptor.addChild(root_0, L_false786_tree);
                    }

                    }
                    break;
                case 8 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:910:4: L_this
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_this787=(Token)match(input,L_this,FOLLOW_L_this_in_primitive_expr6764); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_this787_tree = (CommonTree)adaptor.create(L_this787);
                    adaptor.addChild(root_0, L_this787_tree);
                    }

                    }
                    break;
                case 9 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:911:4: L_nil
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_nil788=(Token)match(input,L_nil,FOLLOW_L_nil_in_primitive_expr6770); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_nil788_tree = (CommonTree)adaptor.create(L_nil788);
                    adaptor.addChild(root_0, L_nil788_tree);
                    }

                    }
                    break;
                case 10 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:912:4: L_root
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_root789=(Token)match(input,L_root,FOLLOW_L_root_in_primitive_expr6775); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_root789_tree = (CommonTree)adaptor.create(L_root789);
                    adaptor.addChild(root_0, L_root789_tree);
                    }

                    }
                    break;
                case 11 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:913:4: ( type_expr )=> type_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_type_expr_in_primitive_expr6786);
                    type_expr790=type_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_expr790.getTree());

                    }
                    break;
                case 12 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:914:4: ( lambda_expr )=> lambda_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lambda_expr_in_primitive_expr6797);
                    lambda_expr791=lambda_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lambda_expr791.getTree());

                    }
                    break;
                case 13 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:915:4: obj_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_obj_expr_in_primitive_expr6802);
                    obj_expr792=obj_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, obj_expr792.getTree());

                    }
                    break;
                case 14 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:916:5: list_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_list_expr_in_primitive_expr6808);
                    list_expr793=list_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, list_expr793.getTree());

                    }
                    break;
                case 15 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:917:4: with_control_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_with_control_expr_in_primitive_expr6813);
                    with_control_expr794=with_control_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, with_control_expr794.getTree());

                    }
                    break;
                case 16 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:918:4: map_or_set_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_map_or_set_expr_in_primitive_expr6818);
                    map_or_set_expr795=map_or_set_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, map_or_set_expr795.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "primitive_expr"

    // $ANTLR start synpred1_babel17
    public final void synpred1_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:489:10: ( Id ( NL )? L_as )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:489:11: Id ( NL )? L_as
        {
        match(input,Id,FOLLOW_Id_in_synpred1_babel172155); if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:489:14: ( NL )?
        int alt369=2;
        int LA369_0 = input.LA(1);

        if ( (LA369_0==NL) ) {
            alt369=1;
        }
        switch (alt369) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:489:14: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred1_babel172157); if (state.failed) return ;

                }
                break;

        }

        match(input,L_as,FOLLOW_L_as_in_synpred1_babel172160); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_babel17

    // $ANTLR start synpred2_babel17
    public final void synpred2_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:490:4: ( protected_expr ( NL )? QUESTION_MARK )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:490:5: protected_expr ( NL )? QUESTION_MARK
        {
        pushFollow(FOLLOW_protected_expr_in_synpred2_babel172191);
        protected_expr();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:490:20: ( NL )?
        int alt370=2;
        int LA370_0 = input.LA(1);

        if ( (LA370_0==NL) ) {
            alt370=1;
        }
        switch (alt370) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:490:20: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred2_babel172193); if (state.failed) return ;

                }
                break;

        }

        match(input,QUESTION_MARK,FOLLOW_QUESTION_MARK_in_synpred2_babel172196); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_babel17

    // $ANTLR start synpred3_babel17
    public final void synpred3_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:492:4: ( protected_expr ( NL )? EXCLAMATION_MARK )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:492:5: protected_expr ( NL )? EXCLAMATION_MARK
        {
        pushFollow(FOLLOW_protected_expr_in_synpred3_babel172234);
        protected_expr();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:492:20: ( NL )?
        int alt371=2;
        int LA371_0 = input.LA(1);

        if ( (LA371_0==NL) ) {
            alt371=1;
        }
        switch (alt371) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:492:20: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred3_babel172236); if (state.failed) return ;

                }
                break;

        }

        match(input,EXCLAMATION_MARK,FOLLOW_EXCLAMATION_MARK_in_synpred3_babel172239); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_babel17

    // $ANTLR start synpred4_babel17
    public final void synpred4_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:494:4: ( Id pattern )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:494:5: Id pattern
        {
        match(input,Id,FOLLOW_Id_in_synpred4_babel172277); if (state.failed) return ;
        pushFollow(FOLLOW_pattern_in_synpred4_babel172279);
        pattern();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_babel17

    // $ANTLR start synpred5_babel17
    public final void synpred5_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:497:4: ( pattern ( NL )? L_if )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:497:5: pattern ( NL )? L_if
        {
        pushFollow(FOLLOW_pattern_in_synpred5_babel172368);
        pattern();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:497:13: ( NL )?
        int alt372=2;
        int LA372_0 = input.LA(1);

        if ( (LA372_0==NL) ) {
            alt372=1;
        }
        switch (alt372) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:497:13: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred5_babel172370); if (state.failed) return ;

                }
                break;

        }

        match(input,L_if,FOLLOW_L_if_in_synpred5_babel172373); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_babel17

    // $ANTLR start synpred6_babel17
    public final void synpred6_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:498:4: ( pattern ( NL )? ':' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:498:5: pattern ( NL )? ':'
        {
        pushFollow(FOLLOW_pattern_in_synpred6_babel172404);
        pattern();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:498:13: ( NL )?
        int alt373=2;
        int LA373_0 = input.LA(1);

        if ( (LA373_0==NL) ) {
            alt373=1;
        }
        switch (alt373) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:498:13: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred6_babel172406); if (state.failed) return ;

                }
                break;

        }

        match(input,COLON,FOLLOW_COLON_in_synpred6_babel172409); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_babel17

    // $ANTLR start synpred7_babel17
    public final void synpred7_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:4: ( defpattern ( NL )? '=' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:5: defpattern ( NL )? '='
        {
        pushFollow(FOLLOW_defpattern_in_synpred7_babel173254);
        defpattern();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:16: ( NL )?
        int alt374=2;
        int LA374_0 = input.LA(1);

        if ( (LA374_0==NL) ) {
            alt374=1;
        }
        switch (alt374) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:16: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred7_babel173256); if (state.failed) return ;

                }
                break;

        }

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred7_babel173259); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_babel17

    // $ANTLR start synpred8_babel17
    public final void synpred8_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:611:4: ( Id ( NL )? left_modify )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:611:5: Id ( NL )? left_modify
        {
        match(input,Id,FOLLOW_Id_in_synpred8_babel173782); if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:611:8: ( NL )?
        int alt375=2;
        int LA375_0 = input.LA(1);

        if ( (LA375_0==NL) ) {
            alt375=1;
        }
        switch (alt375) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:611:8: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred8_babel173784); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_left_modify_in_synpred8_babel173787);
        left_modify();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_babel17

    // $ANTLR start synpred9_babel17
    public final void synpred9_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:612:4: ( Id ( NL )? right_modify )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:612:5: Id ( NL )? right_modify
        {
        match(input,Id,FOLLOW_Id_in_synpred9_babel173821); if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:612:8: ( NL )?
        int alt376=2;
        int LA376_0 = input.LA(1);

        if ( (LA376_0==NL) ) {
            alt376=1;
        }
        switch (alt376) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:612:8: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred9_babel173823); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_right_modify_in_synpred9_babel173826);
        right_modify();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_babel17

    // $ANTLR start synpred10_babel17
    public final void synpred10_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:4: ( Id ( NL )? '=' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:5: Id ( NL )? '='
        {
        match(input,Id,FOLLOW_Id_in_synpred10_babel173861); if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:8: ( NL )?
        int alt377=2;
        int LA377_0 = input.LA(1);

        if ( (LA377_0==NL) ) {
            alt377=1;
        }
        switch (alt377) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:8: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred10_babel173863); if (state.failed) return ;

                }
                break;

        }

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred10_babel173866); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_babel17

    // $ANTLR start synpred11_babel17
    public final void synpred11_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:614:4: ( pattern ( NL )? '=' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:614:5: pattern ( NL )? '='
        {
        pushFollow(FOLLOW_pattern_in_synpred11_babel173898);
        pattern();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:614:13: ( NL )?
        int alt378=2;
        int LA378_0 = input.LA(1);

        if ( (LA378_0==NL) ) {
            alt378=1;
        }
        switch (alt378) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:614:13: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred11_babel173900); if (state.failed) return ;

                }
                break;

        }

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred11_babel173903); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_babel17

    // $ANTLR start synpred12_babel17
    public final void synpred12_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:615:4: ( term_expr ( NL )? left_modify )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:615:5: term_expr ( NL )? left_modify
        {
        pushFollow(FOLLOW_term_expr_in_synpred12_babel173935);
        term_expr();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:615:15: ( NL )?
        int alt379=2;
        int LA379_0 = input.LA(1);

        if ( (LA379_0==NL) ) {
            alt379=1;
        }
        switch (alt379) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:615:15: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred12_babel173937); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_left_modify_in_synpred12_babel173940);
        left_modify();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_babel17

    // $ANTLR start synpred13_babel17
    public final void synpred13_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:616:4: ( term_expr ( NL )? right_modify )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:616:5: term_expr ( NL )? right_modify
        {
        pushFollow(FOLLOW_term_expr_in_synpred13_babel173974);
        term_expr();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:616:15: ( NL )?
        int alt380=2;
        int LA380_0 = input.LA(1);

        if ( (LA380_0==NL) ) {
            alt380=1;
        }
        switch (alt380) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:616:15: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred13_babel173976); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_right_modify_in_synpred13_babel173979);
        right_modify();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_babel17

    // $ANTLR start synpred14_babel17
    public final void synpred14_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:617:4: ( term_expr ( NL )? '=' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:617:5: term_expr ( NL )? '='
        {
        pushFollow(FOLLOW_term_expr_in_synpred14_babel174013);
        term_expr();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:617:15: ( NL )?
        int alt381=2;
        int LA381_0 = input.LA(1);

        if ( (LA381_0==NL) ) {
            alt381=1;
        }
        switch (alt381) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:617:15: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred14_babel174015); if (state.failed) return ;

                }
                break;

        }

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred14_babel174018); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_babel17

    // $ANTLR start synpred15_babel17
    public final void synpred15_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:664:11: ( L_obj ( NL )? parents )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:664:12: L_obj ( NL )? parents
        {
        match(input,L_obj,FOLLOW_L_obj_in_synpred15_babel174374); if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:664:18: ( NL )?
        int alt382=2;
        int LA382_0 = input.LA(1);

        if ( (LA382_0==NL) ) {
            alt382=1;
        }
        switch (alt382) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:664:18: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred15_babel174376); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_parents_in_synpred15_babel174379);
        parents();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_babel17

    // $ANTLR start synpred16_babel17
    public final void synpred16_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:669:4: ( lambda_expr_nobrackets )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:669:5: lambda_expr_nobrackets
        {
        pushFollow(FOLLOW_lambda_expr_nobrackets_in_synpred16_babel174450);
        lambda_expr_nobrackets();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_babel17

    // $ANTLR start synpred17_babel17
    public final void synpred17_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:674:4: ( lambda_expr_nobrackets )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:674:5: lambda_expr_nobrackets
        {
        pushFollow(FOLLOW_lambda_expr_nobrackets_in_synpred17_babel174473);
        lambda_expr_nobrackets();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred17_babel17

    // $ANTLR start synpred18_babel17
    public final void synpred18_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:888:4: ( '[' ( NL )? protected_expr_nc ( NL )? ';' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:888:5: '[' ( NL )? protected_expr_nc ( NL )? ';'
        {
        match(input,SQUARE_BRACKET_OPEN,FOLLOW_SQUARE_BRACKET_OPEN_in_synpred18_babel176433); if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:888:9: ( NL )?
        int alt383=2;
        int LA383_0 = input.LA(1);

        if ( (LA383_0==NL) ) {
            alt383=1;
        }
        switch (alt383) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:888:9: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred18_babel176435); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_protected_expr_nc_in_synpred18_babel176438);
        protected_expr_nc();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:888:31: ( NL )?
        int alt384=2;
        int LA384_0 = input.LA(1);

        if ( (LA384_0==NL) ) {
            alt384=1;
        }
        switch (alt384) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:888:31: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred18_babel176440); if (state.failed) return ;

                }
                break;

        }

        match(input,SC,FOLLOW_SC_in_synpred18_babel176443); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_babel17

    // $ANTLR start synpred19_babel17
    public final void synpred19_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:913:4: ( type_expr )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:913:5: type_expr
        {
        pushFollow(FOLLOW_type_expr_in_synpred19_babel176781);
        type_expr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_babel17

    // $ANTLR start synpred20_babel17
    public final void synpred20_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:914:4: ( lambda_expr )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:914:5: lambda_expr
        {
        pushFollow(FOLLOW_lambda_expr_in_synpred20_babel176792);
        lambda_expr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred20_babel17

    // Delegated rules

    public final boolean synpred4_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA36 dfa36 = new DFA36(this);
    protected DFA64 dfa64 = new DFA64(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA67 dfa67 = new DFA67(this);
    protected DFA80 dfa80 = new DFA80(this);
    protected DFA110 dfa110 = new DFA110(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA171 dfa171 = new DFA171(this);
    protected DFA172 dfa172 = new DFA172(this);
    protected DFA368 dfa368 = new DFA368(this);
    static final String DFA36_eotS =
        "\47\uffff";
    static final String DFA36_eofS =
        "\47\uffff";
    static final String DFA36_minS =
        "\1\137\35\0\11\uffff";
    static final String DFA36_maxS =
        "\1\u00c3\35\0\11\uffff";
    static final String DFA36_acceptS =
        "\36\uffff\1\5\1\1\1\2\1\3\1\4\1\7\1\10\1\11\1\6";
    static final String DFA36_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\11\uffff}>";
    static final String[] DFA36_transitionS = {
            "\1\34\1\uffff\1\26\1\35\1\27\3\uffff\1\30\1\32\2\uffff\1\31"+
            "\2\uffff\1\36\2\uffff\1\15\2\uffff\1\33\1\uffff\1\17\1\22\1"+
            "\17\1\uffff\1\6\1\7\1\24\1\22\1\10\4\uffff\1\22\4\uffff\1\21"+
            "\2\uffff\1\25\3\22\1\20\14\uffff\1\11\17\uffff\2\16\4\uffff"+
            "\1\17\3\uffff\1\2\1\1\1\uffff\1\23\1\5\1\uffff\1\4\1\13\1\uffff"+
            "\1\12\1\uffff\1\14\1\uffff\1\3",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA36_eot = DFA.unpackEncodedString(DFA36_eotS);
    static final short[] DFA36_eof = DFA.unpackEncodedString(DFA36_eofS);
    static final char[] DFA36_min = DFA.unpackEncodedStringToUnsignedChars(DFA36_minS);
    static final char[] DFA36_max = DFA.unpackEncodedStringToUnsignedChars(DFA36_maxS);
    static final short[] DFA36_accept = DFA.unpackEncodedString(DFA36_acceptS);
    static final short[] DFA36_special = DFA.unpackEncodedString(DFA36_specialS);
    static final short[][] DFA36_transition;

    static {
        int numStates = DFA36_transitionS.length;
        DFA36_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA36_transition[i] = DFA.unpackEncodedString(DFA36_transitionS[i]);
        }
    }

    class DFA36 extends DFA {

        public DFA36(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = DFA36_eot;
            this.eof = DFA36_eof;
            this.min = DFA36_min;
            this.max = DFA36_max;
            this.accept = DFA36_accept;
            this.special = DFA36_special;
            this.transition = DFA36_transition;
        }
        public String getDescription() {
            return "488:1: bracket_pattern : ( ( Id ( NL )? L_as )=> Id ( NL )? L_as ( NL )? pattern -> ^( L_as Id pattern ) | ( protected_expr ( NL )? QUESTION_MARK )=> protected_expr ( NL )? QUESTION_MARK ( ( NL )? pattern )? -> ^( QUESTION_MARK protected_expr ( pattern )? ) | ( protected_expr ( NL )? EXCLAMATION_MARK )=> protected_expr ( NL )? EXCLAMATION_MARK ( ( NL )? pattern )? -> ^( EXCLAMATION_MARK protected_expr ( pattern )? ) | ( Id pattern )=> Id pattern -> ^( INNERVALUE_PATTERN Id pattern ) | L_val ( NL )? protected_expr_nc -> ^( L_val protected_expr_nc ) | L_for ( NL )? ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )? L_end -> ^( L_for ( bracket_pattern )* ) | ( pattern ( NL )? L_if )=> pattern ( NL )? L_if ( NL )? protected_expr_nc -> ^( IF_PATTERN pattern protected_expr_nc ) | ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation -> ^( TYPE_PATTERN typeannotation pattern ) | pattern );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA36_1 = input.LA(1);

                         
                        int index36_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 31;}

                        else if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (synpred4_babel17()) ) {s = 34;}

                        else if ( (synpred5_babel17()) ) {s = 35;}

                        else if ( (synpred6_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA36_2 = input.LA(1);

                         
                        int index36_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (synpred5_babel17()) ) {s = 35;}

                        else if ( (synpred6_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA36_3 = input.LA(1);

                         
                        int index36_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (synpred5_babel17()) ) {s = 35;}

                        else if ( (synpred6_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA36_4 = input.LA(1);

                         
                        int index36_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (synpred5_babel17()) ) {s = 35;}

                        else if ( (synpred6_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA36_5 = input.LA(1);

                         
                        int index36_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (synpred5_babel17()) ) {s = 35;}

                        else if ( (synpred6_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA36_6 = input.LA(1);

                         
                        int index36_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (synpred5_babel17()) ) {s = 35;}

                        else if ( (synpred6_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA36_7 = input.LA(1);

                         
                        int index36_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (synpred5_babel17()) ) {s = 35;}

                        else if ( (synpred6_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA36_8 = input.LA(1);

                         
                        int index36_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (synpred5_babel17()) ) {s = 35;}

                        else if ( (synpred6_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA36_9 = input.LA(1);

                         
                        int index36_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (synpred5_babel17()) ) {s = 35;}

                        else if ( (synpred6_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA36_10 = input.LA(1);

                         
                        int index36_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (synpred5_babel17()) ) {s = 35;}

                        else if ( (synpred6_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA36_11 = input.LA(1);

                         
                        int index36_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (synpred5_babel17()) ) {s = 35;}

                        else if ( (synpred6_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA36_12 = input.LA(1);

                         
                        int index36_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (synpred5_babel17()) ) {s = 35;}

                        else if ( (synpred6_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA36_13 = input.LA(1);

                         
                        int index36_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (synpred5_babel17()) ) {s = 35;}

                        else if ( (synpred6_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA36_14 = input.LA(1);

                         
                        int index36_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (synpred5_babel17()) ) {s = 35;}

                        else if ( (synpred6_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA36_15 = input.LA(1);

                         
                        int index36_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                         
                        input.seek(index36_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA36_16 = input.LA(1);

                         
                        int index36_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                         
                        input.seek(index36_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA36_17 = input.LA(1);

                         
                        int index36_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                         
                        input.seek(index36_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA36_18 = input.LA(1);

                         
                        int index36_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                         
                        input.seek(index36_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA36_19 = input.LA(1);

                         
                        int index36_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                         
                        input.seek(index36_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA36_20 = input.LA(1);

                         
                        int index36_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                         
                        input.seek(index36_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA36_21 = input.LA(1);

                         
                        int index36_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                         
                        input.seek(index36_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA36_22 = input.LA(1);

                         
                        int index36_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                         
                        input.seek(index36_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA36_23 = input.LA(1);

                         
                        int index36_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                         
                        input.seek(index36_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA36_24 = input.LA(1);

                         
                        int index36_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                         
                        input.seek(index36_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA36_25 = input.LA(1);

                         
                        int index36_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                         
                        input.seek(index36_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA36_26 = input.LA(1);

                         
                        int index36_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index36_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA36_27 = input.LA(1);

                         
                        int index36_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                         
                        input.seek(index36_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA36_28 = input.LA(1);

                         
                        int index36_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                         
                        input.seek(index36_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA36_29 = input.LA(1);

                         
                        int index36_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                         
                        input.seek(index36_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 36, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA64_eotS =
        "\17\uffff";
    static final String DFA64_eofS =
        "\17\uffff";
    static final String DFA64_minS =
        "\1\172\12\uffff\2\137\2\uffff";
    static final String DFA64_maxS =
        "\1\u00c3\12\uffff\2\u00c3\2\uffff";
    static final String DFA64_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\2\uffff\1\14"+
        "\1\13";
    static final String DFA64_specialS =
        "\17\uffff}>";
    static final String[] DFA64_transitionS = {
            "\1\5\1\6\2\uffff\1\7\35\uffff\1\10\32\uffff\1\1\2\uffff\1\4"+
            "\1\uffff\1\3\1\12\1\uffff\1\11\1\uffff\1\13\1\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\16\1\uffff\3\16\3\uffff\2\16\2\uffff\1\16\2\uffff\1\16\2"+
            "\uffff\1\16\2\uffff\1\16\1\uffff\3\16\1\uffff\5\16\4\uffff\1"+
            "\16\4\uffff\1\16\2\uffff\5\16\14\uffff\1\16\15\uffff\2\15\2"+
            "\16\4\uffff\1\16\2\uffff\1\14\2\16\1\uffff\2\16\1\uffff\2\16"+
            "\1\uffff\1\16\1\uffff\3\16",
            "\1\16\1\uffff\3\16\3\uffff\2\16\2\uffff\1\16\2\uffff\1\16\2"+
            "\uffff\1\16\2\uffff\1\16\1\uffff\3\16\1\uffff\5\16\4\uffff\1"+
            "\16\4\uffff\1\16\2\uffff\5\16\14\uffff\1\16\15\uffff\2\15\2"+
            "\16\4\uffff\1\16\3\uffff\2\16\1\uffff\2\16\1\uffff\2\16\1\uffff"+
            "\1\16\1\uffff\3\16",
            "",
            ""
    };

    static final short[] DFA64_eot = DFA.unpackEncodedString(DFA64_eotS);
    static final short[] DFA64_eof = DFA.unpackEncodedString(DFA64_eofS);
    static final char[] DFA64_min = DFA.unpackEncodedStringToUnsignedChars(DFA64_minS);
    static final char[] DFA64_max = DFA.unpackEncodedStringToUnsignedChars(DFA64_maxS);
    static final short[] DFA64_accept = DFA.unpackEncodedString(DFA64_acceptS);
    static final short[] DFA64_special = DFA.unpackEncodedString(DFA64_specialS);
    static final short[][] DFA64_transition;

    static {
        int numStates = DFA64_transitionS.length;
        DFA64_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA64_transition[i] = DFA.unpackEncodedString(DFA64_transitionS[i]);
        }
    }

    class DFA64 extends DFA {

        public DFA64(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 64;
            this.eot = DFA64_eot;
            this.eof = DFA64_eof;
            this.min = DFA64_min;
            this.max = DFA64_max;
            this.accept = DFA64_accept;
            this.special = DFA64_special;
            this.transition = DFA64_transition;
        }
        public String getDescription() {
            return "509:1: primitive_pattern : ( Id | '_' -> ANY | String | Num | L_true | L_false | L_nil | '-' ( NL )? Num -> ^( UMINUS Num ) | '[' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )? ']' -> ^( SQUARE_LIST ( bracket_pattern )* ) | '(' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) ) | '{' ( NL )? ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) );";
        }
    }
    static final String DFA70_eotS =
        "\4\uffff";
    static final String DFA70_eofS =
        "\2\3\2\uffff";
    static final String DFA70_minS =
        "\2\137\2\uffff";
    static final String DFA70_maxS =
        "\2\u00c9\2\uffff";
    static final String DFA70_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA70_specialS =
        "\4\uffff}>";
    static final String[] DFA70_transitionS = {
            "\1\2\1\3\3\2\1\uffff\2\3\2\2\1\uffff\2\2\1\3\1\uffff\2\2\1\uffff"+
            "\1\2\2\uffff\1\2\1\uffff\11\2\2\uffff\5\2\1\3\1\uffff\1\2\2"+
            "\uffff\5\2\12\uffff\1\1\1\uffff\1\2\17\uffff\2\2\4\uffff\1\2"+
            "\2\uffff\1\1\2\2\1\uffff\2\2\1\uffff\2\2\1\uffff\1\2\1\uffff"+
            "\1\2\1\uffff\1\2\1\uffff\5\2",
            "\1\2\1\3\3\2\1\uffff\2\3\2\2\1\uffff\2\2\1\3\1\uffff\2\2\1"+
            "\uffff\1\2\2\uffff\1\2\1\uffff\11\2\2\uffff\5\2\1\3\1\uffff"+
            "\1\2\2\uffff\5\2\12\uffff\1\1\1\uffff\1\2\17\uffff\2\2\4\uffff"+
            "\1\2\2\uffff\1\1\2\2\1\uffff\2\2\1\uffff\2\2\1\uffff\1\2\1\uffff"+
            "\1\2\1\uffff\1\2\1\uffff\5\2",
            "",
            ""
    };

    static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_eotS);
    static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_eofS);
    static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_minS);
    static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_maxS);
    static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_acceptS);
    static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_specialS);
    static final short[][] DFA70_transition;

    static {
        int numStates = DFA70_transitionS.length;
        DFA70_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA70_transition[i] = DFA.unpackEncodedString(DFA70_transitionS[i]);
        }
    }

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = DFA70_eot;
            this.eof = DFA70_eof;
            this.min = DFA70_min;
            this.max = DFA70_max;
            this.accept = DFA70_accept;
            this.special = DFA70_special;
            this.transition = DFA70_transition;
        }
        public String getDescription() {
            return "531:1: block : ( ( sep )? statement ( sep statement )* ( sep )? -> ^( BLOCK ( statement )* ) | ( sep )? -> ^( BLOCK ) );";
        }
    }
    static final String DFA67_eotS =
        "\4\uffff";
    static final String DFA67_eofS =
        "\2\2\2\uffff";
    static final String DFA67_minS =
        "\1\140\1\137\2\uffff";
    static final String DFA67_maxS =
        "\1\u00b5\1\u00c9\2\uffff";
    static final String DFA67_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA67_specialS =
        "\4\uffff}>";
    static final String[] DFA67_transitionS = {
            "\1\2\4\uffff\2\2\5\uffff\1\2\31\uffff\1\2\23\uffff\1\1\32\uffff"+
            "\1\1",
            "\1\3\1\2\3\3\1\uffff\2\2\2\3\1\uffff\2\3\1\2\1\uffff\2\3\1"+
            "\uffff\1\3\2\uffff\1\3\1\uffff\11\3\2\uffff\5\3\1\2\1\uffff"+
            "\1\3\2\uffff\5\3\12\uffff\1\1\1\uffff\1\3\17\uffff\2\3\4\uffff"+
            "\1\3\2\uffff\1\1\2\3\1\uffff\2\3\1\uffff\2\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\uffff\1\3\1\uffff\5\3",
            "",
            ""
    };

    static final short[] DFA67_eot = DFA.unpackEncodedString(DFA67_eotS);
    static final short[] DFA67_eof = DFA.unpackEncodedString(DFA67_eofS);
    static final char[] DFA67_min = DFA.unpackEncodedStringToUnsignedChars(DFA67_minS);
    static final char[] DFA67_max = DFA.unpackEncodedStringToUnsignedChars(DFA67_maxS);
    static final short[] DFA67_accept = DFA.unpackEncodedString(DFA67_acceptS);
    static final short[] DFA67_special = DFA.unpackEncodedString(DFA67_specialS);
    static final short[][] DFA67_transition;

    static {
        int numStates = DFA67_transitionS.length;
        DFA67_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA67_transition[i] = DFA.unpackEncodedString(DFA67_transitionS[i]);
        }
    }

    class DFA67 extends DFA {

        public DFA67(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 67;
            this.eot = DFA67_eot;
            this.eof = DFA67_eof;
            this.min = DFA67_min;
            this.max = DFA67_max;
            this.accept = DFA67_accept;
            this.special = DFA67_special;
            this.transition = DFA67_transition;
        }
        public String getDescription() {
            return "()* loopback of 531:25: ( sep statement )*";
        }
    }
    static final String DFA80_eotS =
        "\17\uffff";
    static final String DFA80_eofS =
        "\17\uffff";
    static final String DFA80_minS =
        "\1\137\16\uffff";
    static final String DFA80_maxS =
        "\1\u00c9\16\uffff";
    static final String DFA80_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16";
    static final String DFA80_specialS =
        "\17\uffff}>";
    static final String[] DFA80_transitionS = {
            "\1\11\1\uffff\3\11\3\uffff\2\11\1\uffff\1\4\1\11\2\uffff\1\2"+
            "\1\3\1\uffff\1\11\2\uffff\1\11\1\uffff\3\11\1\5\5\11\2\uffff"+
            "\1\7\1\1\1\11\1\6\1\10\2\uffff\1\11\2\uffff\5\11\14\uffff\1"+
            "\11\17\uffff\2\11\4\uffff\1\11\3\uffff\2\11\1\uffff\2\11\1\uffff"+
            "\2\11\1\uffff\1\11\1\uffff\1\11\1\uffff\1\11\1\uffff\1\13\1"+
            "\12\1\15\1\14\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA80_eot = DFA.unpackEncodedString(DFA80_eotS);
    static final short[] DFA80_eof = DFA.unpackEncodedString(DFA80_eofS);
    static final char[] DFA80_min = DFA.unpackEncodedStringToUnsignedChars(DFA80_minS);
    static final char[] DFA80_max = DFA.unpackEncodedStringToUnsignedChars(DFA80_maxS);
    static final short[] DFA80_accept = DFA.unpackEncodedString(DFA80_acceptS);
    static final short[] DFA80_special = DFA.unpackEncodedString(DFA80_specialS);
    static final short[][] DFA80_transition;

    static {
        int numStates = DFA80_transitionS.length;
        DFA80_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA80_transition[i] = DFA.unpackEncodedString(DFA80_transitionS[i]);
        }
    }

    class DFA80 extends DFA {

        public DFA80(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = DFA80_eot;
            this.eof = DFA80_eof;
            this.min = DFA80_min;
            this.max = DFA80_max;
            this.accept = DFA80_accept;
            this.special = DFA80_special;
            this.transition = DFA80_transition;
        }
        public String getDescription() {
            return "537:1: statement : ( st_typedef | st_val | st_def | st_yield | st_memoize | st_private | st_module | st_import | expr_or_assign | PRAGMA_PRINT ( NL )? expr -> ^( PRAGMA_PRINT expr ) | PRAGMA_LOG ( NL )? expr -> ^( PRAGMA_LOG expr ) | PRAGMA_PROFILE ( NL )? expr -> ^( PRAGMA_PROFILE expr ) | PRAGMA_ASSERT ( NL )? expr -> ^( PRAGMA_ASSERT expr ) | PRAGMA_CATCH ( NL )? casepattern ( NL )? L_try ( NL )? COLON ( NL )? expr -> ^( PRAGMA_CATCH expr casepattern ) );";
        }
    }
    static final String DFA110_eotS =
        "\17\uffff";
    static final String DFA110_eofS =
        "\17\uffff";
    static final String DFA110_minS =
        "\1\172\14\0\2\uffff";
    static final String DFA110_maxS =
        "\1\u00c3\14\0\2\uffff";
    static final String DFA110_acceptS =
        "\15\uffff\1\1\1\2";
    static final String DFA110_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\2\uffff}>";
    static final String[] DFA110_transitionS = {
            "\1\5\1\6\2\uffff\1\7\35\uffff\1\10\31\uffff\1\14\1\1\2\uffff"+
            "\1\4\1\uffff\1\3\1\12\1\uffff\1\11\1\uffff\1\13\1\uffff\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA110_eot = DFA.unpackEncodedString(DFA110_eotS);
    static final short[] DFA110_eof = DFA.unpackEncodedString(DFA110_eofS);
    static final char[] DFA110_min = DFA.unpackEncodedStringToUnsignedChars(DFA110_minS);
    static final char[] DFA110_max = DFA.unpackEncodedStringToUnsignedChars(DFA110_maxS);
    static final short[] DFA110_accept = DFA.unpackEncodedString(DFA110_acceptS);
    static final short[] DFA110_special = DFA.unpackEncodedString(DFA110_specialS);
    static final short[][] DFA110_transition;

    static {
        int numStates = DFA110_transitionS.length;
        DFA110_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA110_transition[i] = DFA.unpackEncodedString(DFA110_transitionS[i]);
        }
    }

    class DFA110 extends DFA {

        public DFA110(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 110;
            this.eot = DFA110_eot;
            this.eof = DFA110_eof;
            this.min = DFA110_min;
            this.max = DFA110_max;
            this.accept = DFA110_accept;
            this.special = DFA110_special;
            this.transition = DFA110_transition;
        }
        public String getDescription() {
            return "563:1: typedef_clause : ( ( defpattern ( NL )? '=' )=> defpattern ( NL )? '=' ( NL )? expr -> ^( TYPEDEF_CLAUSE defpattern expr ) | defpattern -> ^( TYPEDEF_CLAUSE defpattern ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA110_1 = input.LA(1);

                         
                        int index110_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index110_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA110_2 = input.LA(1);

                         
                        int index110_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index110_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA110_3 = input.LA(1);

                         
                        int index110_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index110_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA110_4 = input.LA(1);

                         
                        int index110_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index110_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA110_5 = input.LA(1);

                         
                        int index110_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index110_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA110_6 = input.LA(1);

                         
                        int index110_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index110_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA110_7 = input.LA(1);

                         
                        int index110_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index110_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA110_8 = input.LA(1);

                         
                        int index110_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index110_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA110_9 = input.LA(1);

                         
                        int index110_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index110_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA110_10 = input.LA(1);

                         
                        int index110_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index110_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA110_11 = input.LA(1);

                         
                        int index110_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index110_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA110_12 = input.LA(1);

                         
                        int index110_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index110_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 110, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA159_eotS =
        "\45\uffff";
    static final String DFA159_eofS =
        "\45\uffff";
    static final String DFA159_minS =
        "\1\137\32\0\12\uffff";
    static final String DFA159_maxS =
        "\1\u00c3\32\0\12\uffff";
    static final String DFA159_acceptS =
        "\33\uffff\1\10\2\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7";
    static final String DFA159_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\12\uffff}>";
    static final String[] DFA159_transitionS = {
            "\1\31\1\uffff\1\23\1\32\1\24\3\uffff\1\25\1\27\2\uffff\1\26"+
            "\5\uffff\1\15\2\uffff\1\30\1\uffff\1\33\1\17\1\33\1\uffff\1"+
            "\6\1\7\1\21\1\17\1\10\4\uffff\1\17\4\uffff\1\33\2\uffff\1\22"+
            "\3\17\1\33\14\uffff\1\11\17\uffff\2\16\4\uffff\1\33\3\uffff"+
            "\1\2\1\1\1\uffff\1\20\1\5\1\uffff\1\4\1\13\1\uffff\1\12\1\uffff"+
            "\1\14\1\uffff\1\3",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA159_eot = DFA.unpackEncodedString(DFA159_eotS);
    static final short[] DFA159_eof = DFA.unpackEncodedString(DFA159_eofS);
    static final char[] DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_minS);
    static final char[] DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_maxS);
    static final short[] DFA159_accept = DFA.unpackEncodedString(DFA159_acceptS);
    static final short[] DFA159_special = DFA.unpackEncodedString(DFA159_specialS);
    static final short[][] DFA159_transition;

    static {
        int numStates = DFA159_transitionS.length;
        DFA159_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA159_transition[i] = DFA.unpackEncodedString(DFA159_transitionS[i]);
        }
    }

    class DFA159 extends DFA {

        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = DFA159_eot;
            this.eof = DFA159_eof;
            this.min = DFA159_min;
            this.max = DFA159_max;
            this.accept = DFA159_accept;
            this.special = DFA159_special;
            this.transition = DFA159_transition;
        }
        public String getDescription() {
            return "609:1: expr_or_assign : ( ( Id ( NL )? left_modify )=> Id ( NL )? left_modify ( NL )? expr -> ^( LENS_MODIFY_LEFT left_modify Id expr ) | ( Id ( NL )? right_modify )=> Id ( NL )? right_modify ( NL )? expr -> ^( LENS_MODIFY_RIGHT right_modify Id expr ) | ( Id ( NL )? '=' )=> Id ( NL )? '=' ( NL )? expr -> ^( LENS_ASSIGN Id expr ) | ( pattern ( NL )? '=' )=> pattern ( NL )? '=' ( NL )? expr -> ^( ASSIGN pattern expr ) | ( term_expr ( NL )? left_modify )=> term_expr ( NL )? left_modify ( NL )? expr -> ^( LENS_MODIFY_LEFT left_modify term_expr expr ) | ( term_expr ( NL )? right_modify )=> term_expr ( NL )? right_modify ( NL )? expr -> ^( LENS_MODIFY_RIGHT right_modify term_expr expr ) | ( term_expr ( NL )? '=' )=> term_expr ( NL )? '=' ( NL )? expr -> ^( LENS_ASSIGN term_expr expr ) | expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA159_1 = input.LA(1);

                         
                        int index159_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 30;}

                        else if ( (synpred9_babel17()) ) {s = 31;}

                        else if ( (synpred10_babel17()) ) {s = 32;}

                        else if ( (synpred11_babel17()) ) {s = 33;}

                        else if ( (synpred12_babel17()) ) {s = 34;}

                        else if ( (synpred13_babel17()) ) {s = 35;}

                        else if ( (synpred14_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index159_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA159_2 = input.LA(1);

                         
                        int index159_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 33;}

                        else if ( (synpred12_babel17()) ) {s = 34;}

                        else if ( (synpred13_babel17()) ) {s = 35;}

                        else if ( (synpred14_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index159_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA159_3 = input.LA(1);

                         
                        int index159_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 33;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index159_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA159_4 = input.LA(1);

                         
                        int index159_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 33;}

                        else if ( (synpred12_babel17()) ) {s = 34;}

                        else if ( (synpred13_babel17()) ) {s = 35;}

                        else if ( (synpred14_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index159_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA159_5 = input.LA(1);

                         
                        int index159_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 33;}

                        else if ( (synpred12_babel17()) ) {s = 34;}

                        else if ( (synpred13_babel17()) ) {s = 35;}

                        else if ( (synpred14_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index159_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA159_6 = input.LA(1);

                         
                        int index159_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 33;}

                        else if ( (synpred12_babel17()) ) {s = 34;}

                        else if ( (synpred13_babel17()) ) {s = 35;}

                        else if ( (synpred14_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index159_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA159_7 = input.LA(1);

                         
                        int index159_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 33;}

                        else if ( (synpred12_babel17()) ) {s = 34;}

                        else if ( (synpred13_babel17()) ) {s = 35;}

                        else if ( (synpred14_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index159_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA159_8 = input.LA(1);

                         
                        int index159_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 33;}

                        else if ( (synpred12_babel17()) ) {s = 34;}

                        else if ( (synpred13_babel17()) ) {s = 35;}

                        else if ( (synpred14_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index159_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA159_9 = input.LA(1);

                         
                        int index159_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 33;}

                        else if ( (synpred12_babel17()) ) {s = 34;}

                        else if ( (synpred13_babel17()) ) {s = 35;}

                        else if ( (synpred14_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index159_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA159_10 = input.LA(1);

                         
                        int index159_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 33;}

                        else if ( (synpred12_babel17()) ) {s = 34;}

                        else if ( (synpred13_babel17()) ) {s = 35;}

                        else if ( (synpred14_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index159_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA159_11 = input.LA(1);

                         
                        int index159_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 33;}

                        else if ( (synpred12_babel17()) ) {s = 34;}

                        else if ( (synpred13_babel17()) ) {s = 35;}

                        else if ( (synpred14_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index159_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA159_12 = input.LA(1);

                         
                        int index159_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 33;}

                        else if ( (synpred12_babel17()) ) {s = 34;}

                        else if ( (synpred13_babel17()) ) {s = 35;}

                        else if ( (synpred14_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index159_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA159_13 = input.LA(1);

                         
                        int index159_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 33;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index159_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA159_14 = input.LA(1);

                         
                        int index159_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 33;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index159_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA159_15 = input.LA(1);

                         
                        int index159_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 34;}

                        else if ( (synpred13_babel17()) ) {s = 35;}

                        else if ( (synpred14_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index159_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA159_16 = input.LA(1);

                         
                        int index159_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 34;}

                        else if ( (synpred13_babel17()) ) {s = 35;}

                        else if ( (synpred14_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index159_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA159_17 = input.LA(1);

                         
                        int index159_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 34;}

                        else if ( (synpred13_babel17()) ) {s = 35;}

                        else if ( (synpred14_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index159_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA159_18 = input.LA(1);

                         
                        int index159_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 34;}

                        else if ( (synpred13_babel17()) ) {s = 35;}

                        else if ( (synpred14_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index159_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA159_19 = input.LA(1);

                         
                        int index159_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 34;}

                        else if ( (synpred13_babel17()) ) {s = 35;}

                        else if ( (synpred14_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index159_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA159_20 = input.LA(1);

                         
                        int index159_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 34;}

                        else if ( (synpred13_babel17()) ) {s = 35;}

                        else if ( (synpred14_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index159_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA159_21 = input.LA(1);

                         
                        int index159_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 34;}

                        else if ( (synpred13_babel17()) ) {s = 35;}

                        else if ( (synpred14_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index159_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA159_22 = input.LA(1);

                         
                        int index159_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 34;}

                        else if ( (synpred13_babel17()) ) {s = 35;}

                        else if ( (synpred14_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index159_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA159_23 = input.LA(1);

                         
                        int index159_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 34;}

                        else if ( (synpred13_babel17()) ) {s = 35;}

                        else if ( (synpred14_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index159_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA159_24 = input.LA(1);

                         
                        int index159_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 34;}

                        else if ( (synpred13_babel17()) ) {s = 35;}

                        else if ( (synpred14_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index159_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA159_25 = input.LA(1);

                         
                        int index159_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 34;}

                        else if ( (synpred13_babel17()) ) {s = 35;}

                        else if ( (synpred14_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index159_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA159_26 = input.LA(1);

                         
                        int index159_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 34;}

                        else if ( (synpred13_babel17()) ) {s = 35;}

                        else if ( (synpred14_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index159_26);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 159, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA171_eotS =
        "\36\uffff";
    static final String DFA171_eofS =
        "\36\uffff";
    static final String DFA171_minS =
        "\1\137\2\0\1\uffff\12\0\20\uffff";
    static final String DFA171_maxS =
        "\1\u00c3\2\0\1\uffff\12\0\20\uffff";
    static final String DFA171_acceptS =
        "\3\uffff\1\1\12\uffff\1\1\1\2\16\uffff";
    static final String DFA171_specialS =
        "\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\20\uffff}>";
    static final String[] DFA171_transitionS = {
            "\1\17\1\uffff\3\17\3\uffff\2\17\2\uffff\1\17\5\uffff\1\15\2"+
            "\uffff\1\17\1\uffff\3\17\1\uffff\1\6\1\7\2\17\1\10\4\uffff\1"+
            "\17\4\uffff\1\17\2\uffff\5\17\14\uffff\1\11\17\uffff\2\16\4"+
            "\uffff\1\17\3\uffff\1\1\1\2\1\uffff\1\17\1\5\1\uffff\1\4\1\13"+
            "\1\uffff\1\12\1\uffff\1\14\1\uffff\1\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA171_eot = DFA.unpackEncodedString(DFA171_eotS);
    static final short[] DFA171_eof = DFA.unpackEncodedString(DFA171_eofS);
    static final char[] DFA171_min = DFA.unpackEncodedStringToUnsignedChars(DFA171_minS);
    static final char[] DFA171_max = DFA.unpackEncodedStringToUnsignedChars(DFA171_maxS);
    static final short[] DFA171_accept = DFA.unpackEncodedString(DFA171_acceptS);
    static final short[] DFA171_special = DFA.unpackEncodedString(DFA171_specialS);
    static final short[][] DFA171_transition;

    static {
        int numStates = DFA171_transitionS.length;
        DFA171_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA171_transition[i] = DFA.unpackEncodedString(DFA171_transitionS[i]);
        }
    }

    class DFA171 extends DFA {

        public DFA171(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 171;
            this.eot = DFA171_eot;
            this.eof = DFA171_eof;
            this.min = DFA171_min;
            this.max = DFA171_max;
            this.accept = DFA171_accept;
            this.special = DFA171_special;
            this.transition = DFA171_transition;
        }
        public String getDescription() {
            return "667:1: lop_expr : ( ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | op_expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA171_0 = input.LA(1);

                         
                        int index171_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA171_0==Constr) ) {s = 1;}

                        else if ( (LA171_0==Id) ) {s = 2;}

                        else if ( (LA171_0==UNDERSCORE) && (synpred16_babel17())) {s = 3;}

                        else if ( (LA171_0==String) ) {s = 4;}

                        else if ( (LA171_0==Num) ) {s = 5;}

                        else if ( (LA171_0==L_true) ) {s = 6;}

                        else if ( (LA171_0==L_false) ) {s = 7;}

                        else if ( (LA171_0==L_nil) ) {s = 8;}

                        else if ( (LA171_0==MINUS) ) {s = 9;}

                        else if ( (LA171_0==SQUARE_BRACKET_OPEN) ) {s = 10;}

                        else if ( (LA171_0==ROUND_BRACKET_OPEN) ) {s = 11;}

                        else if ( (LA171_0==CURLY_BRACKET_OPEN) ) {s = 12;}

                        else if ( (LA171_0==L_exception) ) {s = 13;}

                        else if ( ((LA171_0>=A_ELLIPSIS && LA171_0<=U_ELLIPSIS)) && (synpred16_babel17())) {s = 14;}

                        else if ( (LA171_0==L_begin||(LA171_0>=L_obj && LA171_0<=L_if)||(LA171_0>=L_while && LA171_0<=L_for)||LA171_0==L_match||LA171_0==L_try||(LA171_0>=L_concurrent && LA171_0<=L_lazy)||(LA171_0>=L_this && LA171_0<=L_random)||LA171_0==L_typeof||LA171_0==L_not||(LA171_0>=L_root && LA171_0<=L_lens)||LA171_0==L_force||LA171_0==Float) ) {s = 15;}

                         
                        input.seek(index171_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA171_1 = input.LA(1);

                         
                        int index171_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index171_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA171_2 = input.LA(1);

                         
                        int index171_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index171_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA171_4 = input.LA(1);

                         
                        int index171_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index171_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA171_5 = input.LA(1);

                         
                        int index171_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index171_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA171_6 = input.LA(1);

                         
                        int index171_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index171_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA171_7 = input.LA(1);

                         
                        int index171_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index171_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA171_8 = input.LA(1);

                         
                        int index171_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index171_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA171_9 = input.LA(1);

                         
                        int index171_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index171_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA171_10 = input.LA(1);

                         
                        int index171_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index171_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA171_11 = input.LA(1);

                         
                        int index171_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index171_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA171_12 = input.LA(1);

                         
                        int index171_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index171_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA171_13 = input.LA(1);

                         
                        int index171_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index171_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 171, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA172_eotS =
        "\36\uffff";
    static final String DFA172_eofS =
        "\36\uffff";
    static final String DFA172_minS =
        "\1\137\2\0\1\uffff\12\0\20\uffff";
    static final String DFA172_maxS =
        "\1\u00c3\2\0\1\uffff\12\0\20\uffff";
    static final String DFA172_acceptS =
        "\3\uffff\1\1\12\uffff\1\1\1\2\16\uffff";
    static final String DFA172_specialS =
        "\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\20\uffff}>";
    static final String[] DFA172_transitionS = {
            "\1\17\1\uffff\3\17\3\uffff\2\17\2\uffff\1\17\5\uffff\1\15\2"+
            "\uffff\1\17\1\uffff\3\17\1\uffff\1\6\1\7\2\17\1\10\4\uffff\1"+
            "\17\4\uffff\1\17\2\uffff\5\17\14\uffff\1\11\17\uffff\2\16\4"+
            "\uffff\1\17\3\uffff\1\1\1\2\1\uffff\1\17\1\5\1\uffff\1\4\1\13"+
            "\1\uffff\1\12\1\uffff\1\14\1\uffff\1\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA172_eot = DFA.unpackEncodedString(DFA172_eotS);
    static final short[] DFA172_eof = DFA.unpackEncodedString(DFA172_eofS);
    static final char[] DFA172_min = DFA.unpackEncodedStringToUnsignedChars(DFA172_minS);
    static final char[] DFA172_max = DFA.unpackEncodedStringToUnsignedChars(DFA172_maxS);
    static final short[] DFA172_accept = DFA.unpackEncodedString(DFA172_acceptS);
    static final short[] DFA172_special = DFA.unpackEncodedString(DFA172_specialS);
    static final short[][] DFA172_transition;

    static {
        int numStates = DFA172_transitionS.length;
        DFA172_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA172_transition[i] = DFA.unpackEncodedString(DFA172_transitionS[i]);
        }
    }

    class DFA172 extends DFA {

        public DFA172(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 172;
            this.eot = DFA172_eot;
            this.eof = DFA172_eof;
            this.min = DFA172_min;
            this.max = DFA172_max;
            this.accept = DFA172_accept;
            this.special = DFA172_special;
            this.transition = DFA172_transition;
        }
        public String getDescription() {
            return "672:1: p_lop_expr : ( ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | p_op_expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA172_0 = input.LA(1);

                         
                        int index172_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA172_0==Constr) ) {s = 1;}

                        else if ( (LA172_0==Id) ) {s = 2;}

                        else if ( (LA172_0==UNDERSCORE) && (synpred17_babel17())) {s = 3;}

                        else if ( (LA172_0==String) ) {s = 4;}

                        else if ( (LA172_0==Num) ) {s = 5;}

                        else if ( (LA172_0==L_true) ) {s = 6;}

                        else if ( (LA172_0==L_false) ) {s = 7;}

                        else if ( (LA172_0==L_nil) ) {s = 8;}

                        else if ( (LA172_0==MINUS) ) {s = 9;}

                        else if ( (LA172_0==SQUARE_BRACKET_OPEN) ) {s = 10;}

                        else if ( (LA172_0==ROUND_BRACKET_OPEN) ) {s = 11;}

                        else if ( (LA172_0==CURLY_BRACKET_OPEN) ) {s = 12;}

                        else if ( (LA172_0==L_exception) ) {s = 13;}

                        else if ( ((LA172_0>=A_ELLIPSIS && LA172_0<=U_ELLIPSIS)) && (synpred17_babel17())) {s = 14;}

                        else if ( (LA172_0==L_begin||(LA172_0>=L_obj && LA172_0<=L_if)||(LA172_0>=L_while && LA172_0<=L_for)||LA172_0==L_match||LA172_0==L_try||(LA172_0>=L_concurrent && LA172_0<=L_lazy)||(LA172_0>=L_this && LA172_0<=L_random)||LA172_0==L_typeof||LA172_0==L_not||(LA172_0>=L_root && LA172_0<=L_lens)||LA172_0==L_force||LA172_0==Float) ) {s = 15;}

                         
                        input.seek(index172_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA172_1 = input.LA(1);

                         
                        int index172_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index172_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA172_2 = input.LA(1);

                         
                        int index172_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index172_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA172_4 = input.LA(1);

                         
                        int index172_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index172_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA172_5 = input.LA(1);

                         
                        int index172_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index172_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA172_6 = input.LA(1);

                         
                        int index172_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index172_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA172_7 = input.LA(1);

                         
                        int index172_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index172_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA172_8 = input.LA(1);

                         
                        int index172_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index172_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA172_9 = input.LA(1);

                         
                        int index172_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index172_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA172_10 = input.LA(1);

                         
                        int index172_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index172_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA172_11 = input.LA(1);

                         
                        int index172_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index172_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA172_12 = input.LA(1);

                         
                        int index172_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index172_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA172_13 = input.LA(1);

                         
                        int index172_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index172_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 172, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA368_eotS =
        "\30\uffff";
    static final String DFA368_eofS =
        "\30\uffff";
    static final String DFA368_minS =
        "\1\137\12\uffff\1\0\14\uffff";
    static final String DFA368_maxS =
        "\1\u00c1\12\uffff\1\0\14\uffff";
    static final String DFA368_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\uffff\1\15"+
        "\1\16\1\17\6\uffff\1\20\1\13\1\14";
    static final String DFA368_specialS =
        "\13\uffff\1\0\14\uffff}>";
    static final String[] DFA368_transitionS = {
            "\1\16\1\uffff\1\14\2\16\3\uffff\2\16\2\uffff\1\16\10\uffff\1"+
            "\16\5\uffff\1\6\1\7\1\10\1\uffff\1\11\14\uffff\1\12\52\uffff"+
            "\1\5\1\4\1\uffff\1\2\1\1\1\uffff\1\3\1\13\1\uffff\1\15\1\uffff"+
            "\1\25",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA368_eot = DFA.unpackEncodedString(DFA368_eotS);
    static final short[] DFA368_eof = DFA.unpackEncodedString(DFA368_eofS);
    static final char[] DFA368_min = DFA.unpackEncodedStringToUnsignedChars(DFA368_minS);
    static final char[] DFA368_max = DFA.unpackEncodedStringToUnsignedChars(DFA368_maxS);
    static final short[] DFA368_accept = DFA.unpackEncodedString(DFA368_acceptS);
    static final short[] DFA368_special = DFA.unpackEncodedString(DFA368_specialS);
    static final short[][] DFA368_transition;

    static {
        int numStates = DFA368_transitionS.length;
        DFA368_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA368_transition[i] = DFA.unpackEncodedString(DFA368_transitionS[i]);
        }
    }

    class DFA368 extends DFA {

        public DFA368(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 368;
            this.eot = DFA368_eot;
            this.eof = DFA368_eof;
            this.min = DFA368_min;
            this.max = DFA368_max;
            this.accept = DFA368_accept;
            this.special = DFA368_special;
            this.transition = DFA368_transition;
        }
        public String getDescription() {
            return "902:1: primitive_expr : ( Num | Float | String | Id | Constr | L_true | L_false | L_this | L_nil | L_root | ( type_expr )=> type_expr | ( lambda_expr )=> lambda_expr | obj_expr | list_expr | with_control_expr | map_or_set_expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA368_11 = input.LA(1);

                         
                        int index368_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_babel17()) ) {s = 22;}

                        else if ( (synpred20_babel17()) ) {s = 23;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index368_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 368, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_block_in_prog280 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_prog282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_EQUAL0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_NOT_EQUAL0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_LESS_EQ0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_GREATER_EQ0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_or_in_token_OR1275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_and_in_token_AND1283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_not_in_token_NOT1291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_xor_in_token_XOR1301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_DOUBLE_COLON0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_DOUBLE_ARROW0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_ARROW0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_ELLIPSIS0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_typeid1951 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020800000000000L});
    public static final BitSet FOLLOW_NL_in_typeid1954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_PERIOD_in_typeid1957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_NL_in_typeid1959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_Id_in_typeid1962 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020800000000000L});
    public static final BitSet FOLLOW_typeid_in_typeannotation1982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_typeannotation1987 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_protected_expr_in_typeannotation1989 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_typeannotation1991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Constr_in_pattern2008 = new BitSet(new long[]{0x0000000000000002L,0x4C02000000000000L,0xB4E0300010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_pattern2011 = new BitSet(new long[]{0x0000000000000000L,0x4C02000000000000L,0xB4C0300010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_pattern_in_pattern2014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitive_pattern_in_pattern2030 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000C00000000L});
    public static final BitSet FOLLOW_NL_in_pattern2033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000C00000000L});
    public static final BitSet FOLLOW_token_DOUBLE_COLON_in_pattern2036 = new BitSet(new long[]{0x0000000000000000L,0x4C00000000000000L,0xB4A0000010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_pattern2038 = new BitSet(new long[]{0x0000000000000000L,0x4C00000000000000L,0xB480000010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_primitive_pattern_in_pattern2041 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000C00000000L});
    public static final BitSet FOLLOW_L_exception_in_pattern2060 = new BitSet(new long[]{0x0000000000000000L,0x4C02000000000000L,0xB4E0300010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_pattern2062 = new BitSet(new long[]{0x0000000000000000L,0x4C02000000000000L,0xB4C0300010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_pattern_in_pattern2065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_ELLIPSIS_in_pattern2078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitive_pattern_in_defpattern2088 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000C00000000L});
    public static final BitSet FOLLOW_NL_in_defpattern2091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000C00000000L});
    public static final BitSet FOLLOW_token_DOUBLE_COLON_in_defpattern2094 = new BitSet(new long[]{0x0000000000000000L,0x4C00000000000000L,0xB4A0000010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_defpattern2096 = new BitSet(new long[]{0x0000000000000000L,0x4C00000000000000L,0xB480000010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_primitive_pattern_in_defpattern2099 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000C00000000L});
    public static final BitSet FOLLOW_Constr_in_defpattern2117 = new BitSet(new long[]{0x0000000000000002L,0x4C00000000000000L,0xB4C0000010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_defpattern_in_defpattern2119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bracket_pattern_in_casepattern2138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_bracket_pattern2165 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2167 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_L_as_in_bracket_pattern2170 = new BitSet(new long[]{0x0000000000000000L,0x4C02000000000000L,0xB4E0300010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2172 = new BitSet(new long[]{0x0000000000000000L,0x4C02000000000000L,0xB4C0300010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_bracket_pattern2204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0021000000000000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_QUESTION_MARK_in_bracket_pattern2209 = new BitSet(new long[]{0x0000000000000002L,0x4C02000000000000L,0xB4E0300010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2212 = new BitSet(new long[]{0x0000000000000000L,0x4C02000000000000L,0xB4C0300010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_bracket_pattern2247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0022000000000000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_EXCLAMATION_MARK_in_bracket_pattern2252 = new BitSet(new long[]{0x0000000000000002L,0x4C02000000000000L,0xB4E0300010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2255 = new BitSet(new long[]{0x0000000000000000L,0x4C02000000000000L,0xB4C0300010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_bracket_pattern2284 = new BitSet(new long[]{0x0000000000000000L,0x4C02000000000000L,0xB4C0300010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_val_in_bracket_pattern2301 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2303 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_protected_expr_nc_in_bracket_pattern2306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_for_in_bracket_pattern2325 = new BitSet(new long[]{0x0000000000000000L,0x7DD2498F80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2327 = new BitSet(new long[]{0x0000000000000000L,0x7DD2498F80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_bracket_pattern_in_bracket_pattern2331 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0020400000000000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COMMA_in_bracket_pattern2338 = new BitSet(new long[]{0x0000000000000000L,0x7DD2498E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2340 = new BitSet(new long[]{0x0000000000000000L,0x7DD2498E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_bracket_pattern_in_bracket_pattern2343 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0020400000000000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2348 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_L_end_in_bracket_pattern2353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2378 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2380 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_L_if_in_bracket_pattern2383 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2385 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_protected_expr_nc_in_bracket_pattern2388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2414 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_COLON_in_bracket_pattern2419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x20A0000000000000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x20A0000000000000L});
    public static final BitSet FOLLOW_typeannotation_in_bracket_pattern2424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_ARROW_in_arrow_or_assign2449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGN_in_arrow_or_assign2460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bracket_pattern_in_mselem_pattern2475 = new BitSet(new long[]{0x0000000100000002L,0x0000000000000000L,0x00200C0000000000L});
    public static final BitSet FOLLOW_NL_in_mselem_pattern2478 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x00200C0000000000L});
    public static final BitSet FOLLOW_arrow_or_assign_in_mselem_pattern2481 = new BitSet(new long[]{0x0000000000000000L,0x7DD2498E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_mselem_pattern2483 = new BitSet(new long[]{0x0000000000000000L,0x7DD2498E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_bracket_pattern_in_mselem_pattern2486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_primitive_pattern2515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNDERSCORE_in_primitive_pattern2520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_String_in_primitive_pattern2529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Num_in_primitive_pattern2534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_true_in_primitive_pattern2539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_false_in_primitive_pattern2544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_nil_in_primitive_pattern2549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_primitive_pattern2557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0420000000000000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_Num_in_primitive_pattern2562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_OPEN_in_primitive_pattern2575 = new BitSet(new long[]{0x0000000000000000L,0x7DD2498E80000000L,0xB6E430001000F908L,0x000000000000000BL});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2578 = new BitSet(new long[]{0x0000000000000000L,0x7DD2498E80000000L,0xB6C430001000F908L,0x000000000000000BL});
    public static final BitSet FOLLOW_bracket_pattern_in_primitive_pattern2582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020400000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_COMMA_in_primitive_pattern2589 = new BitSet(new long[]{0x0000000000000000L,0x7DD2498E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2591 = new BitSet(new long[]{0x0000000000000000L,0x7DD2498E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_bracket_pattern_in_primitive_pattern2594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020400000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_CLOSE_in_primitive_pattern2604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_primitive_pattern2624 = new BitSet(new long[]{0x0000000000000000L,0x7DD2498E80000000L,0xF6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2627 = new BitSet(new long[]{0x0000000000000000L,0x7DD2498E80000000L,0xF6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_bracket_pattern_in_primitive_pattern2631 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4020400000000000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2633 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000400000000000L});
    public static final BitSet FOLLOW_COMMA_in_primitive_pattern2638 = new BitSet(new long[]{0x0000000000000000L,0x7DD2498E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2641 = new BitSet(new long[]{0x0000000000000000L,0x7DD2498E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_bracket_pattern_in_primitive_pattern2644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4020400000000000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000400000000000L});
    public static final BitSet FOLLOW_COMMA_in_primitive_pattern2652 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4020000000000000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_primitive_pattern2661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_primitive_pattern2693 = new BitSet(new long[]{0x0000000000000000L,0x7DD2498E80000000L,0xB6E430001000F908L,0x000000000000000EL});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2696 = new BitSet(new long[]{0x0000000000000000L,0x7DD2498E80000000L,0xB6C430001000F908L,0x000000000000000EL});
    public static final BitSet FOLLOW_mselem_pattern_in_primitive_pattern2700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020400000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COMMA_in_primitive_pattern2707 = new BitSet(new long[]{0x0000000000000000L,0x7DD2498E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2710 = new BitSet(new long[]{0x0000000000000000L,0x7DD2498E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_mselem_pattern_in_primitive_pattern2713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020400000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_primitive_pattern2723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_primitive_pattern2741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00200C0000000000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_token_ARROW_in_primitive_pattern2746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_primitive_pattern2751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_sep2767 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000004000000L});
    public static final BitSet FOLLOW_sep_in_block2783 = new BitSet(new long[]{0x0000000000000000L,0x7FD2CD8E80000000L,0xB6C430001000F93EL,0x00000000000003EAL});
    public static final BitSet FOLLOW_statement_in_block2786 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000004000000L});
    public static final BitSet FOLLOW_sep_in_block2789 = new BitSet(new long[]{0x0000000000000000L,0x7FD2CD8E80000000L,0xB6C430001000F93EL,0x00000000000003EAL});
    public static final BitSet FOLLOW_statement_in_block2791 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000004000000L});
    public static final BitSet FOLLOW_sep_in_block2795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sep_in_block2811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_pure_block2828 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000004000000L});
    public static final BitSet FOLLOW_sep_in_pure_block2831 = new BitSet(new long[]{0x0000000000000000L,0x7FD2CD8E80000000L,0xB6C430001000F93EL,0x00000000000003EAL});
    public static final BitSet FOLLOW_statement_in_pure_block2833 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000004000000L});
    public static final BitSet FOLLOW_st_typedef_in_statement2854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_val_in_statement2865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_def_in_statement2870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_yield_in_statement2875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_memoize_in_statement2880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_private_in_statement2885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_module_in_statement2890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_import_in_statement2895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_assign_in_statement2900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_PRINT_in_statement2906 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_statement2908 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_expr_in_statement2911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_LOG_in_statement2925 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_statement2927 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_expr_in_statement2930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_PROFILE_in_statement2944 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_statement2946 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_expr_in_statement2949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_ASSERT_in_statement2963 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_statement2965 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_expr_in_statement2968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_CATCH_in_statement2981 = new BitSet(new long[]{0x0000000000000000L,0x7DD2498E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_statement2983 = new BitSet(new long[]{0x0000000000000000L,0x7DD2498E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_casepattern_in_statement2986 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_statement2988 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_L_try_in_statement2991 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_NL_in_statement2993 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_COLON_in_statement2996 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_statement2998 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_expr_in_statement3001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_val_in_st_val3020 = new BitSet(new long[]{0x0000000000000000L,0x4C02000000000000L,0xB4E0300010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_st_val3022 = new BitSet(new long[]{0x0000000000000000L,0x4C02000000000000L,0xB4C0300010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_pattern_in_st_val3025 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_st_val3027 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_ASSIGN_in_st_val3030 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_st_val3032 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_expr_in_st_val3035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_def_in_st_def3055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_NL_in_st_def3057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_Id_in_st_def3060 = new BitSet(new long[]{0x0000000100000000L,0x4C00000000000000L,0xB4E0000010000000L,0x000000000000001AL});
    public static final BitSet FOLLOW_NL_in_st_def3062 = new BitSet(new long[]{0x0000000100000000L,0x4C00000000000000L,0xB4C0000010000000L,0x000000000000001AL});
    public static final BitSet FOLLOW_defpattern_in_st_def3066 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_NL_in_st_def3068 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_COLON_in_st_def3074 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_NL_in_st_def3076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_typeid_in_st_def3079 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_st_def3081 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_ASSIGN_in_st_def3086 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_st_def3088 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_expr_in_st_def3091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_def_in_st_def3117 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_st_def3119 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_L_this_in_st_def3122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_NL_in_st_def3124 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_COLON_in_st_def3127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_NL_in_st_def3129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_typeid_in_st_def3132 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_st_def3134 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_ASSIGN_in_st_def3137 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_st_def3139 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_expr_in_st_def3142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_def_in_st_def3157 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_st_def3159 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_L_this_in_st_def3162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000200000000L});
    public static final BitSet FOLLOW_NL_in_st_def3164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_TOK_CONVERT_in_st_def3167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_NL_in_st_def3169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_typeid_in_st_def3172 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_st_def3174 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_ASSIGN_in_st_def3177 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_st_def3179 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_expr_in_st_def3182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_typedef_in_st_typedef3205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_NL_in_st_typedef3207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_Id_in_st_typedef3210 = new BitSet(new long[]{0x0000000000000000L,0x4C00000000000000L,0xB4E0000010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_st_typedef3212 = new BitSet(new long[]{0x0000000000000000L,0x4C00000000000000L,0xB4E0000010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_typedef_clause_in_st_typedef3215 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020400000000000L});
    public static final BitSet FOLLOW_NL_in_st_typedef3218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COMMA_in_st_typedef3221 = new BitSet(new long[]{0x0000000000000000L,0x4C00000000000000L,0xB4E0000010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_st_typedef3223 = new BitSet(new long[]{0x0000000000000000L,0x4C00000000000000L,0xB4E0000010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_typedef_clause_in_st_typedef3226 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020400000000000L});
    public static final BitSet FOLLOW_defpattern_in_typedef_clause3264 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_typedef_clause3266 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_ASSIGN_in_typedef_clause3269 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_typedef_clause3271 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_expr_in_typedef_clause3274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defpattern_in_typedef_clause3289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_yield_in_st_yield3308 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_expr_in_st_yield3310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_memoize_in_st_memoize3331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2080000000000000L});
    public static final BitSet FOLLOW_memo_id_in_st_memoize3333 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020400000000000L});
    public static final BitSet FOLLOW_NL_in_st_memoize3336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COMMA_in_st_memoize3339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x20A0000000000000L});
    public static final BitSet FOLLOW_NL_in_st_memoize3341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2080000000000000L});
    public static final BitSet FOLLOW_memo_id_in_st_memoize3344 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020400000000000L});
    public static final BitSet FOLLOW_Id_in_memo_id3373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_memo_id3386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_Id_in_memo_id3388 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_memo_id3390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_private_in_st_private3407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_private_id_in_st_private3409 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020400000000000L});
    public static final BitSet FOLLOW_NL_in_st_private3412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COMMA_in_st_private3415 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_NL_in_st_private3417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_private_id_in_st_private3420 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020400000000000L});
    public static final BitSet FOLLOW_Id_in_private_id3446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_testid0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_moduleid3479 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020800000000000L});
    public static final BitSet FOLLOW_NL_in_moduleid3482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_PERIOD_in_moduleid3485 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00A0000000000040L});
    public static final BitSet FOLLOW_NL_in_moduleid3487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00A0000000000040L});
    public static final BitSet FOLLOW_testid_in_moduleid3490 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020800000000000L});
    public static final BitSet FOLLOW_L_module_in_st_module3513 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_NL_in_st_module3515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_moduleid_in_st_module3518 = new BitSet(new long[]{0x0000000000000000L,0x7FD2CD8F80000000L,0xB6E430001400F97EL,0x00000000000003EAL});
    public static final BitSet FOLLOW_block_in_st_module3520 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_L_unittest_in_st_module3523 = new BitSet(new long[]{0x0000000000000000L,0x7FD2CD8F80000000L,0xB6E430001400F93EL,0x00000000000003EAL});
    public static final BitSet FOLLOW_block_in_st_module3525 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_L_end_in_st_module3529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_root_in_importprefix3556 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020800000000000L});
    public static final BitSet FOLLOW_testid_in_importprefix3560 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020800000000000L});
    public static final BitSet FOLLOW_NL_in_importprefix3564 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_PERIOD_in_importprefix3567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00A0000000000040L});
    public static final BitSet FOLLOW_NL_in_importprefix3569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00A0000000000040L});
    public static final BitSet FOLLOW_testid_in_importprefix3572 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020800000000000L});
    public static final BitSet FOLLOW_UNDERSCORE_in_importall3597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_testid_in_importsetclause3613 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020030000000000L});
    public static final BitSet FOLLOW_NL_in_importsetclause3616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020030000000000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_importsetclause3619 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_NL_in_importsetclause3622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_Id_in_importsetclause3625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_importsetclause3645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00A0000000000040L});
    public static final BitSet FOLLOW_NL_in_importsetclause3647 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00A0000000000040L});
    public static final BitSet FOLLOW_testid_in_importsetclause3650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importall_in_importsetclause3663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_importset3673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00A0000010000040L,0x0000000000000008L});
    public static final BitSet FOLLOW_NL_in_importset3675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00A0000010000040L,0x0000000000000008L});
    public static final BitSet FOLLOW_importsetclause_in_importset3678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020400000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_NL_in_importset3681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COMMA_in_importset3684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00A0000010000040L,0x0000000000000008L});
    public static final BitSet FOLLOW_NL_in_importset3686 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00A0000010000040L,0x0000000000000008L});
    public static final BitSet FOLLOW_importsetclause_in_importset3689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020400000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_NL_in_importset3693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_importset3696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_import_in_st_import3714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00A0000000000840L});
    public static final BitSet FOLLOW_NL_in_st_import3716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00A0000000000840L});
    public static final BitSet FOLLOW_importprefix_in_st_import3719 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020830000000000L});
    public static final BitSet FOLLOW_NL_in_st_import3722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020830000000000L});
    public static final BitSet FOLLOW_PERIOD_in_st_import3726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00A0000010000040L,0x0000000000000008L});
    public static final BitSet FOLLOW_NL_in_st_import3728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00A0000010000040L,0x0000000000000008L});
    public static final BitSet FOLLOW_importall_in_st_import3731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERIOD_in_st_import3735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_st_import3737 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_importset_in_st_import3740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_st_import3744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_NL_in_st_import3746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_Id_in_st_import3749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_expr_or_assign3792 = new BitSet(new long[]{0x0000000000000000L,0x800000002AAAA000L,0x0020000000006681L});
    public static final BitSet FOLLOW_NL_in_expr_or_assign3794 = new BitSet(new long[]{0x0000000000000000L,0x800000002AAAA000L,0x0020000000006681L});
    public static final BitSet FOLLOW_left_modify_in_expr_or_assign3797 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_expr_or_assign3799 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_expr_in_expr_or_assign3802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_expr_or_assign3831 = new BitSet(new long[]{0x0000000100000000L,0x0000000055554000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_expr_or_assign3833 = new BitSet(new long[]{0x0000000100000000L,0x0000000055554000L,0x0020000000000000L});
    public static final BitSet FOLLOW_right_modify_in_expr_or_assign3836 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_expr_or_assign3838 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_expr_in_expr_or_assign3841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_expr_or_assign3872 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_expr_or_assign3874 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_ASSIGN_in_expr_or_assign3877 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_expr_or_assign3879 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_expr_in_expr_or_assign3882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_expr_or_assign3909 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_expr_or_assign3911 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_ASSIGN_in_expr_or_assign3914 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_expr_or_assign3916 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_expr_in_expr_or_assign3919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_expr_in_expr_or_assign3945 = new BitSet(new long[]{0x0000000000000000L,0x800000002AAAA000L,0x0020000000006681L});
    public static final BitSet FOLLOW_NL_in_expr_or_assign3947 = new BitSet(new long[]{0x0000000000000000L,0x800000002AAAA000L,0x0020000000006681L});
    public static final BitSet FOLLOW_left_modify_in_expr_or_assign3950 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_expr_or_assign3952 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_expr_in_expr_or_assign3955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_expr_in_expr_or_assign3984 = new BitSet(new long[]{0x0000000100000000L,0x0000000055554000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_expr_or_assign3986 = new BitSet(new long[]{0x0000000100000000L,0x0000000055554000L,0x0020000000000000L});
    public static final BitSet FOLLOW_right_modify_in_expr_or_assign3989 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_expr_or_assign3991 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_expr_in_expr_or_assign3994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_expr_in_expr_or_assign4024 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_expr_or_assign4026 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_ASSIGN_in_expr_or_assign4029 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_expr_or_assign4031 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_expr_in_expr_or_assign4034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_expr_or_assign4049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ML_plus_in_left_modify4059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ML_plusplus_in_left_modify4063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ML_minus_in_left_modify4067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ML_minusminus_in_left_modify4071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ML_times_in_left_modify4075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ML_timestimes_in_left_modify4079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ML_slash_in_left_modify4083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ML_slashslash_in_left_modify4087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ML_pow_in_left_modify4091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_left_modify_op_in_left_modify4095 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_ASSIGN_in_left_modify4098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MR_plus_in_right_modify4108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MR_plusplus_in_right_modify4112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MR_minus_in_right_modify4116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MR_minusminus_in_right_modify4120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MR_times_in_right_modify4124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MR_timestimes_in_right_modify4128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MR_slash_in_right_modify4132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MR_slashslash_in_right_modify4136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MR_pow_in_right_modify4140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGN_in_right_modify4144 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000681L});
    public static final BitSet FOLLOW_right_modify_op_in_right_modify4147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_AND_in_right_modify_op4157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_OR_in_right_modify_op4161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_XOR_in_right_modify_op4165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_div_in_right_modify_op4169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_mod_in_right_modify_op4173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_right_modify_op_in_left_modify_op4182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_min_in_left_modify_op4186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_max_in_left_modify_op4190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lop_expr_in_expr4202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_expr_in_control_expr4214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_do_expr_in_control_expr4219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_match_expr_in_control_expr4224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_expr_in_control_expr4229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_expr_in_control_expr4235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_begin_end_in_control_expr4240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_control_expr_in_with_control_expr4250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_with_in_with_control_expr4255 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_with_control_expr4257 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_protected_expr_in_with_control_expr4260 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_with_control_expr4262 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_L_do_in_with_control_expr4265 = new BitSet(new long[]{0x0000000000000000L,0x7FD2CD8F80000000L,0xB6E430001400F93EL,0x00000000000003EAL});
    public static final BitSet FOLLOW_block_in_with_control_expr4267 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_L_end_in_with_control_expr4269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_lop_expr_in_protected_expr4294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_protected_expr_nc4307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_begin_in_begin_end4317 = new BitSet(new long[]{0x0000000000000000L,0x7FD2CD8F80000000L,0xB6E430001400F93EL,0x00000000000003EAL});
    public static final BitSet FOLLOW_block_in_begin_end4319 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_L_end_in_begin_end4321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_parents4339 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_primitive_expr_in_parents4341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMES_in_parents4354 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_primitive_expr_in_parents4356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_obj_in_obj_expr4384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000028000000L});
    public static final BitSet FOLLOW_NL_in_obj_expr4386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000028000000L});
    public static final BitSet FOLLOW_parents_in_obj_expr4389 = new BitSet(new long[]{0x0000000000000000L,0x7FD2CD8F80000000L,0xB6E430001400F93EL,0x00000000000003EAL});
    public static final BitSet FOLLOW_block_in_obj_expr4391 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_L_end_in_obj_expr4393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_obj_in_obj_expr4421 = new BitSet(new long[]{0x0000000000000000L,0x7FD2CD8F80000000L,0xB6E430001400F93EL,0x00000000000003EAL});
    public static final BitSet FOLLOW_block_in_obj_expr4423 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_L_end_in_obj_expr4425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_nobrackets_in_lop_expr4455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_expr_in_lop_expr4460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_nobrackets_in_p_lop_expr4478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_op_expr_in_p_lop_expr4483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_if_in_if_expr4493 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_if_expr4495 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_protected_expr_in_if_expr4498 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_if_expr4500 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_L_then_in_if_expr4503 = new BitSet(new long[]{0x0000000000000000L,0x7FD2CDEF80000000L,0xB6E430001400F93EL,0x00000000000003EAL});
    public static final BitSet FOLLOW_block_in_if_expr4505 = new BitSet(new long[]{0x0000000000000000L,0x0000006100000000L});
    public static final BitSet FOLLOW_L_elseif_in_if_expr4511 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_if_expr4513 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_protected_expr_in_if_expr4516 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_if_expr4518 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_L_then_in_if_expr4521 = new BitSet(new long[]{0x0000000000000000L,0x7FD2CDEF80000000L,0xB6E430001400F93EL,0x00000000000003EAL});
    public static final BitSet FOLLOW_block_in_if_expr4523 = new BitSet(new long[]{0x0000000000000000L,0x0000006100000000L});
    public static final BitSet FOLLOW_L_else_in_if_expr4531 = new BitSet(new long[]{0x0000000000000000L,0x7FD2CD8F80000000L,0xB6E430001400F93EL,0x00000000000003EAL});
    public static final BitSet FOLLOW_block_in_if_expr4533 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_L_end_in_if_expr4537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_while_in_while_do_expr4561 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_while_do_expr4563 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_protected_expr_in_while_do_expr4566 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_while_do_expr4568 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_L_do_in_while_do_expr4571 = new BitSet(new long[]{0x0000000000000000L,0x7FD2CD8F80000000L,0xB6E430001400F93EL,0x00000000000003EAL});
    public static final BitSet FOLLOW_block_in_while_do_expr4573 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_L_end_in_while_do_expr4575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_cases_in_cases4605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_cases4610 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020030000000000L});
    public static final BitSet FOLLOW_NL_in_cases4612 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020030000000000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_cases4615 = new BitSet(new long[]{0x0000000000000000L,0x7FD2CD8E80000000L,0xB6E430001400F93EL,0x00000000000003EAL});
    public static final BitSet FOLLOW_block_in_cases4617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_expr_in_full_cases4640 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_L_case_in_case_expr4661 = new BitSet(new long[]{0x0000000000000000L,0x7DD2498E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_case_expr4663 = new BitSet(new long[]{0x0000000000000000L,0x7DD2498E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_casepattern_in_case_expr4666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020030000000000L});
    public static final BitSet FOLLOW_NL_in_case_expr4668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020030000000000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_case_expr4671 = new BitSet(new long[]{0x0000000000000000L,0x7FD2CD8E80000000L,0xB6E430001400F93EL,0x00000000000003EAL});
    public static final BitSet FOLLOW_block_in_case_expr4673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_match_in_match_expr4694 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_match_expr4696 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_p_op_expr_in_match_expr4699 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_match_expr4701 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_full_cases_in_match_expr4704 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_L_end_in_match_expr4706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_try_in_try_expr4732 = new BitSet(new long[]{0x0000000000000000L,0x7FD2CD8E80000000L,0xB6E430001000F93EL,0x00000000000003EAL});
    public static final BitSet FOLLOW_NL_in_try_expr4734 = new BitSet(new long[]{0x0000000000000000L,0x7FD2CD8E80000000L,0xB6E430001000F93EL,0x00000000000003EAL});
    public static final BitSet FOLLOW_pure_block_in_try_expr4737 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_try_expr4739 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_L_catch_in_try_expr4742 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_try_expr4744 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_full_cases_in_try_expr4747 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_L_end_in_try_expr4749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_lambda_expr4773 = new BitSet(new long[]{0x0000000000000000L,0x4C02100000000000L,0xB4E0300010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_lambda_expr4775 = new BitSet(new long[]{0x0000000000000000L,0x4C02100000000000L,0xB4E0300010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_lambda_cases_in_lambda_expr4778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4020000000000000L});
    public static final BitSet FOLLOW_NL_in_lambda_expr4780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_lambda_expr4783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_cases_nobrackets_in_lambda_expr_nobrackets4802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_lambda_cases_nobrackets4820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020030000000000L});
    public static final BitSet FOLLOW_NL_in_lambda_cases_nobrackets4822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020030000000000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_lambda_cases_nobrackets4825 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_lambda_cases_nobrackets4827 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_lop_expr_in_lambda_cases_nobrackets4830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_case_in_lambda_case_expr4858 = new BitSet(new long[]{0x0000000000000000L,0x7DD2498E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_lambda_case_expr4860 = new BitSet(new long[]{0x0000000000000000L,0x7DD2498E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_casepattern_in_lambda_case_expr4863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020030000000000L});
    public static final BitSet FOLLOW_NL_in_lambda_case_expr4865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020030000000000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_lambda_case_expr4868 = new BitSet(new long[]{0x0000000000000000L,0x7FD2CD8E80000000L,0xB6E430001000F93EL,0x00000000000003EAL});
    public static final BitSet FOLLOW_NL_in_lambda_case_expr4870 = new BitSet(new long[]{0x0000000000000000L,0x7FD2CD8E80000000L,0xB6E430001000F93EL,0x00000000000003EAL});
    public static final BitSet FOLLOW_pure_block_in_lambda_case_expr4873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_lambda_cases4894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020030000000000L});
    public static final BitSet FOLLOW_NL_in_lambda_cases4896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020030000000000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_lambda_cases4899 = new BitSet(new long[]{0x0000000000000000L,0x7FD2CD8E80000000L,0xB6E430001000F93EL,0x00000000000003EAL});
    public static final BitSet FOLLOW_NL_in_lambda_cases4901 = new BitSet(new long[]{0x0000000000000000L,0x7FD2CD8E80000000L,0xB6E430001000F93EL,0x00000000000003EAL});
    public static final BitSet FOLLOW_pure_block_in_lambda_cases4904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_case_expr_in_lambda_cases4923 = new BitSet(new long[]{0x0000000000000002L,0x4C02100000000000L,0xB4E0300010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_lambda_cases4926 = new BitSet(new long[]{0x0000000000000000L,0x4C02100000000000L,0xB4E0300010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_lambda_case_expr_in_lambda_cases4929 = new BitSet(new long[]{0x0000000000000002L,0x4C02100000000000L,0xB4E0300010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_L_for_in_for_expr4947 = new BitSet(new long[]{0x0000000000000000L,0x4C02000000000000L,0xB4E0300010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_for_expr4949 = new BitSet(new long[]{0x0000000000000000L,0x4C02000000000000L,0xB4C0300010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_pattern_in_for_expr4952 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_for_expr4954 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_L_in_in_for_expr4957 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_for_expr4959 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_protected_expr_in_for_expr4962 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_for_expr4964 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_L_do_in_for_expr4967 = new BitSet(new long[]{0x0000000000000000L,0x7FD2CD8F80000000L,0xB6E430001400F93EL,0x00000000000003EAL});
    public static final BitSet FOLLOW_block_in_for_expr4969 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_L_end_in_for_expr4971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtin_primitive_in_op_expr5000 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_op_expr_in_op_expr5003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lens_expr_in_op_expr5008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bool_expr_in_op_expr5013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtin_primitive_in_p_op_expr5023 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_p_op_expr5026 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_p_op_expr_in_p_op_expr5030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_lens_expr_in_p_op_expr5035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_bool_expr_in_p_op_expr5040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_builtin_primitive0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_lens_in_lens_expr5071 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_NL_in_lens_expr5073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_Id_in_lens_expr5076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020030000000000L});
    public static final BitSet FOLLOW_NL_in_lens_expr5078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020030000000000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_lens_expr5081 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_lens_expr5083 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_op_expr_in_lens_expr5086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_lens_in_lens_expr5101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2020000000000000L});
    public static final BitSet FOLLOW_NL_in_lens_expr5103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_lens_expr5106 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_lens_expr5108 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_protected_expr_in_lens_expr5111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020400000000000L});
    public static final BitSet FOLLOW_NL_in_lens_expr5113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COMMA_in_lens_expr5116 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_lens_expr5118 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_protected_expr_in_lens_expr5121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4020000000000000L});
    public static final BitSet FOLLOW_NL_in_lens_expr5123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_lens_expr5126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_lens_in_p_lens_expr5146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_NL_in_p_lens_expr5148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_Id_in_p_lens_expr5151 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020030000000000L});
    public static final BitSet FOLLOW_NL_in_p_lens_expr5153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020030000000000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_p_lens_expr5156 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_p_lens_expr5158 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_p_op_expr_in_p_lens_expr5161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_lens_in_p_lens_expr5178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2020000000000000L});
    public static final BitSet FOLLOW_NL_in_p_lens_expr5180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_p_lens_expr5183 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_p_lens_expr5185 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_protected_expr_in_p_lens_expr5188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020400000000000L});
    public static final BitSet FOLLOW_NL_in_p_lens_expr5190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COMMA_in_p_lens_expr5193 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_p_lens_expr5195 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_protected_expr_in_p_lens_expr5198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4020000000000000L});
    public static final BitSet FOLLOW_NL_in_p_lens_expr5200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_p_lens_expr5203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bool_or_expr_in_bool_expr5223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_bool_or_expr_in_p_bool_expr5233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bool_and_expr_in_bool_or_expr5242 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000200L});
    public static final BitSet FOLLOW_NL_in_bool_or_expr5245 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_token_OR_in_bool_or_expr5249 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_bool_or_expr5252 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_bool_and_expr_in_bool_or_expr5256 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000200L});
    public static final BitSet FOLLOW_p_bool_and_expr_in_p_bool_or_expr5268 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000200L});
    public static final BitSet FOLLOW_NL_in_p_bool_or_expr5271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_token_OR_in_p_bool_or_expr5275 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_p_bool_or_expr5278 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_p_bool_and_expr_in_p_bool_or_expr5282 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000200L});
    public static final BitSet FOLLOW_bool_xor_expr_in_bool_and_expr5294 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000080L});
    public static final BitSet FOLLOW_NL_in_bool_and_expr5297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_token_AND_in_bool_and_expr5301 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_bool_and_expr5304 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_bool_xor_expr_in_bool_and_expr5308 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000080L});
    public static final BitSet FOLLOW_p_bool_xor_expr_in_p_bool_and_expr5320 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000080L});
    public static final BitSet FOLLOW_NL_in_p_bool_and_expr5323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_token_AND_in_p_bool_and_expr5327 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_p_bool_and_expr5330 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_p_bool_xor_expr_in_p_bool_and_expr5334 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000080L});
    public static final BitSet FOLLOW_bool_not_expr_in_bool_xor_expr5345 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000400L});
    public static final BitSet FOLLOW_NL_in_bool_xor_expr5348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_token_XOR_in_bool_xor_expr5352 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_bool_xor_expr5355 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_bool_not_expr_in_bool_xor_expr5359 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000400L});
    public static final BitSet FOLLOW_p_bool_not_expr_in_p_bool_xor_expr5371 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000400L});
    public static final BitSet FOLLOW_NL_in_p_bool_xor_expr5374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_token_XOR_in_p_bool_xor_expr5378 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_p_bool_xor_expr5381 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_p_bool_not_expr_in_p_bool_xor_expr5385 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000400L});
    public static final BitSet FOLLOW_token_NOT_in_bool_not_expr5396 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_bool_not_expr5399 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_bool_not_expr_in_bool_not_expr5403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_expr_in_bool_not_expr5408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_NOT_in_p_bool_not_expr5419 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_p_bool_not_expr5422 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_p_bool_not_expr_in_p_bool_not_expr5426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_rel_expr_in_p_bool_not_expr5431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relate_expr_in_rel_expr5441 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000003FF0000L});
    public static final BitSet FOLLOW_NL_in_rel_expr5444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000003FF0000L});
    public static final BitSet FOLLOW_rel_op_in_rel_expr5447 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_rel_expr5449 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_relate_expr_in_rel_expr5452 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000003FF0000L});
    public static final BitSet FOLLOW_p_relate_expr_in_p_rel_expr5479 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000003FF0000L});
    public static final BitSet FOLLOW_NL_in_p_rel_expr5482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000003FF0000L});
    public static final BitSet FOLLOW_rel_op_in_p_rel_expr5485 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_p_rel_expr5487 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_p_relate_expr_in_p_rel_expr5490 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000003FF0000L});
    public static final BitSet FOLLOW_token_EQUAL_in_rel_op5516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_NOT_EQUAL_in_rel_op5520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_in_rel_op5524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_GREATER_EQ_in_rel_op5528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_in_rel_op5532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_LESS_EQ_in_rel_op5536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_convert_expr_in_relate_expr5545 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000100000000L});
    public static final BitSet FOLLOW_NL_in_relate_expr5548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_TOK_RELATE_in_relate_expr5551 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_relate_expr5553 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_convert_expr_in_relate_expr5556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_convert_expr_in_p_relate_expr5575 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000100000000L});
    public static final BitSet FOLLOW_NL_in_p_relate_expr5578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_TOK_RELATE_in_p_relate_expr5581 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_p_relate_expr5583 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_p_convert_expr_in_p_relate_expr5586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_expr_in_convert_expr5607 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000200000000L});
    public static final BitSet FOLLOW_NL_in_convert_expr5610 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_TOK_CONVERT_in_convert_expr5613 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x20A0000000000000L});
    public static final BitSet FOLLOW_NL_in_convert_expr5615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x20A0000000000000L});
    public static final BitSet FOLLOW_typeannotation_in_convert_expr5618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_term_expr_in_p_convert_expr5640 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000200000000L});
    public static final BitSet FOLLOW_NL_in_p_convert_expr5643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_TOK_CONVERT_in_p_convert_expr5646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x20A0000000000000L});
    public static final BitSet FOLLOW_NL_in_p_convert_expr5648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x20A0000000000000L});
    public static final BitSet FOLLOW_typeannotation_in_p_convert_expr5651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtin_fun_in_term_expr5674 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_term_expr_in_term_expr5677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arith_expr_in_term_expr5682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtin_fun_in_p_term_expr5692 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_p_term_expr5695 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_p_term_expr_in_p_term_expr5699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_arith_expr_in_p_term_expr5704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_builtin_fun0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plusplus_expr_in_arith_expr5742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_plusplus_expr_in_p_arith_expr5751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timestimes_expr_in_plusplus_expr5761 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x002000C000000000L});
    public static final BitSet FOLLOW_NL_in_plusplus_expr5764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000C000000000L});
    public static final BitSet FOLLOW_PLUSPLUS_in_plusplus_expr5769 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_MINUSMINUS_in_plusplus_expr5772 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_plusplus_expr5776 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_timestimes_expr_in_plusplus_expr5780 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x002000C000000000L});
    public static final BitSet FOLLOW_p_timestimes_expr_in_p_plusplus_expr5792 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x002000C000000000L});
    public static final BitSet FOLLOW_NL_in_p_plusplus_expr5795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000C000000000L});
    public static final BitSet FOLLOW_PLUSPLUS_in_p_plusplus_expr5800 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_MINUSMINUS_in_p_plusplus_expr5803 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_p_plusplus_expr5807 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_p_timestimes_expr_in_p_plusplus_expr5811 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x002000C000000000L});
    public static final BitSet FOLLOW_simple_expr_in_timestimes_expr5823 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020003000000000L});
    public static final BitSet FOLLOW_NL_in_timestimes_expr5826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000003000000000L});
    public static final BitSet FOLLOW_TIMESTIMES_in_timestimes_expr5831 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_QUOTIENTQUOTIENT_in_timestimes_expr5834 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_timestimes_expr5838 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_simple_expr_in_timestimes_expr5842 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020003000000000L});
    public static final BitSet FOLLOW_p_simple_expr_in_p_timestimes_expr5855 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020003000000000L});
    public static final BitSet FOLLOW_NL_in_p_timestimes_expr5858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000003000000000L});
    public static final BitSet FOLLOW_TIMESTIMES_in_p_timestimes_expr5863 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_QUOTIENTQUOTIENT_in_p_timestimes_expr5866 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_p_timestimes_expr5870 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_p_simple_expr_in_p_timestimes_expr5874 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020003000000000L});
    public static final BitSet FOLLOW_cons_expr_in_simple_expr5885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_cons_expr_in_p_simple_expr5894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_expr_in_cons_expr5903 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000C00000000L});
    public static final BitSet FOLLOW_NL_in_cons_expr5906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000C00000000L});
    public static final BitSet FOLLOW_token_DOUBLE_COLON_in_cons_expr5909 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_cons_expr5911 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_to_expr_in_cons_expr5914 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000C00000000L});
    public static final BitSet FOLLOW_p_to_expr_in_p_cons_expr5934 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000C00000000L});
    public static final BitSet FOLLOW_NL_in_p_cons_expr5937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000C00000000L});
    public static final BitSet FOLLOW_token_DOUBLE_COLON_in_p_cons_expr5940 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_p_cons_expr5942 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_p_to_expr_in_p_cons_expr5945 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000C00000000L});
    public static final BitSet FOLLOW_arith_plus_expr_in_to_expr5965 = new BitSet(new long[]{0x0000000000000002L,0x000C000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_to_expr5968 = new BitSet(new long[]{0x0000000000000000L,0x000C000000000000L});
    public static final BitSet FOLLOW_L_to_in_to_expr5973 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_L_downto_in_to_expr5977 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_to_expr5981 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_arith_plus_expr_in_to_expr5985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_arith_plus_expr_in_p_to_expr5998 = new BitSet(new long[]{0x0000000000000002L,0x000C000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_p_to_expr6001 = new BitSet(new long[]{0x0000000000000000L,0x000C000000000000L});
    public static final BitSet FOLLOW_L_to_in_p_to_expr6006 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_L_downto_in_p_to_expr6010 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_p_to_expr6014 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_p_arith_plus_expr_in_p_to_expr6018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arith_uminus_expr_in_arith_plus_expr6030 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000018000000L});
    public static final BitSet FOLLOW_NL_in_arith_plus_expr6034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_PLUS_in_arith_plus_expr6038 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_MINUS_in_arith_plus_expr6043 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_arith_plus_expr6047 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_arith_uminus_expr_in_arith_plus_expr6051 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000018000000L});
    public static final BitSet FOLLOW_p_arith_uminus_expr_in_p_arith_plus_expr6062 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000018000000L});
    public static final BitSet FOLLOW_NL_in_p_arith_plus_expr6065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000018000000L});
    public static final BitSet FOLLOW_set_in_p_arith_plus_expr6069 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_p_arith_plus_expr6078 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_p_arith_uminus_expr_in_p_arith_plus_expr6082 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000018000000L});
    public static final BitSet FOLLOW_MINUS_in_arith_uminus_expr6095 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_arith_uminus_expr6097 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_arith_mult_expr_in_arith_uminus_expr6100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arith_mult_expr_in_arith_uminus_expr6113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_p_arith_uminus_expr6124 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_p_arith_uminus_expr6126 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_p_arith_mult_expr_in_p_arith_uminus_expr6129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_arith_mult_expr_in_p_arith_uminus_expr6142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arith_pow_expr_in_arith_mult_expr6151 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0020000060000001L});
    public static final BitSet FOLLOW_NL_in_arith_mult_expr6154 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000060000001L});
    public static final BitSet FOLLOW_set_in_arith_mult_expr6158 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_arith_mult_expr6175 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_arith_pow_expr_in_arith_mult_expr6179 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0020000060000001L});
    public static final BitSet FOLLOW_p_arith_pow_expr_in_p_arith_mult_expr6191 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0020000060000001L});
    public static final BitSet FOLLOW_NL_in_p_arith_mult_expr6194 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000060000001L});
    public static final BitSet FOLLOW_set_in_p_arith_mult_expr6198 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_p_arith_mult_expr6215 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_p_arith_pow_expr_in_p_arith_mult_expr6219 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0020000060000001L});
    public static final BitSet FOLLOW_apply_expr_in_arith_pow_expr6230 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000080000000L});
    public static final BitSet FOLLOW_NL_in_arith_pow_expr6233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_POW_tok_in_arith_pow_expr6236 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_arith_pow_expr6238 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_apply_expr_in_arith_pow_expr6241 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000080000000L});
    public static final BitSet FOLLOW_p_apply_expr_in_p_arith_pow_expr6262 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000080000000L});
    public static final BitSet FOLLOW_NL_in_p_arith_pow_expr6265 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_POW_tok_in_p_arith_pow_expr6268 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_p_arith_pow_expr6270 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_p_apply_expr_in_p_arith_pow_expr6273 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000080000000L});
    public static final BitSet FOLLOW_basic_expr_in_apply_expr6294 = new BitSet(new long[]{0x0000000000000002L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_p_basic_expr_in_p_apply_expr6312 = new BitSet(new long[]{0x0000000000000002L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_p_apply_expr6315 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_p_basic_expr_in_p_apply_expr6318 = new BitSet(new long[]{0x0000000000000002L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_message_send_expr_in_basic_expr6338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_message_send_expr_in_p_basic_expr6347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitive_expr_in_message_send_expr6356 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020800000000000L});
    public static final BitSet FOLLOW_NL_in_message_send_expr6359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_PERIOD_in_message_send_expr6362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x20A0000000000000L});
    public static final BitSet FOLLOW_NL_in_message_send_expr6364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x20A0000000000000L});
    public static final BitSet FOLLOW_message_expr_in_message_send_expr6367 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020800000000000L});
    public static final BitSet FOLLOW_Id_in_message_expr6390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_message_expr6403 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_message_expr6405 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6C430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_p_op_expr_in_message_expr6408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4020000000000000L});
    public static final BitSet FOLLOW_NL_in_message_expr6410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_message_expr6413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_OPEN_in_list_expr6448 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_list_expr6450 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr6453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000004000000L});
    public static final BitSet FOLLOW_NL_in_list_expr6455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_SC_in_list_expr6458 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_list_expr6460 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr6463 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_NL_in_list_expr6465 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_CLOSE_in_list_expr6468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_OPEN_in_list_expr6482 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000BL});
    public static final BitSet FOLLOW_NL_in_list_expr6484 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000BL});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr6488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020400000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_NL_in_list_expr6491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COMMA_in_list_expr6494 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_list_expr6496 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr6499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020400000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_NL_in_list_expr6503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_CLOSE_in_list_expr6508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_list_expr6522 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xF6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_list_expr6524 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xF6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr6528 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4020400000000000L});
    public static final BitSet FOLLOW_NL_in_list_expr6531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COMMA_in_list_expr6534 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_list_expr6536 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr6539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4020400000000000L});
    public static final BitSet FOLLOW_NL_in_list_expr6543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000400000000000L});
    public static final BitSet FOLLOW_COMMA_in_list_expr6547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4020000000000000L});
    public static final BitSet FOLLOW_NL_in_list_expr6549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_list_expr6556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_map_or_set_expr6585 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000EL});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr6587 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000EL});
    public static final BitSet FOLLOW_map_or_set_elem_expr_in_map_or_set_expr6591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020400000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr6593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COMMA_in_map_or_set_expr6597 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr6599 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_map_or_set_elem_expr_in_map_or_set_expr6602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020400000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr6604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_map_or_set_expr6611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_map_or_set_expr6631 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00200C0000000000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr6633 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_token_ARROW_in_map_or_set_expr6636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr6638 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_map_or_set_expr6641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_nc_in_map_or_set_elem_expr6658 = new BitSet(new long[]{0x0000000100000002L,0x0000000000000000L,0x00200C0000000000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_elem_expr6661 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x00200C0000000000L});
    public static final BitSet FOLLOW_arrow_or_assign_in_map_or_set_elem_expr6664 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_map_or_set_elem_expr6666 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_protected_expr_nc_in_map_or_set_elem_expr6669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_type_expr6696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_NL_in_type_expr6698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_COLON_in_type_expr6701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_NL_in_type_expr6703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_typeid_in_type_expr6706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4020000000000000L});
    public static final BitSet FOLLOW_NL_in_type_expr6708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_type_expr6711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Num_in_primitive_expr6729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Float_in_primitive_expr6734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_String_in_primitive_expr6739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_primitive_expr6744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Constr_in_primitive_expr6749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_true_in_primitive_expr6754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_false_in_primitive_expr6759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_this_in_primitive_expr6764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_nil_in_primitive_expr6770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_root_in_primitive_expr6775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_expr_in_primitive_expr6786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_in_primitive_expr6797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_obj_expr_in_primitive_expr6802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_list_expr_in_primitive_expr6808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_control_expr_in_primitive_expr6813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_or_set_expr_in_primitive_expr6818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_synpred1_babel172155 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_synpred1_babel172157 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_L_as_in_synpred1_babel172160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_synpred2_babel172191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0021000000000000L});
    public static final BitSet FOLLOW_NL_in_synpred2_babel172193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_QUESTION_MARK_in_synpred2_babel172196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_synpred3_babel172234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0022000000000000L});
    public static final BitSet FOLLOW_NL_in_synpred3_babel172236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_EXCLAMATION_MARK_in_synpred3_babel172239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_synpred4_babel172277 = new BitSet(new long[]{0x0000000000000000L,0x4C02000000000000L,0xB4C0300010000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_pattern_in_synpred4_babel172279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_synpred5_babel172368 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_synpred5_babel172370 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_L_if_in_synpred5_babel172373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_synpred6_babel172404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_NL_in_synpred6_babel172406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_COLON_in_synpred6_babel172409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defpattern_in_synpred7_babel173254 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_synpred7_babel173256 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred7_babel173259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_synpred8_babel173782 = new BitSet(new long[]{0x0000000000000000L,0x800000002AAAA000L,0x0020000000006681L});
    public static final BitSet FOLLOW_NL_in_synpred8_babel173784 = new BitSet(new long[]{0x0000000000000000L,0x800000002AAAA000L,0x0020000000006681L});
    public static final BitSet FOLLOW_left_modify_in_synpred8_babel173787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_synpred9_babel173821 = new BitSet(new long[]{0x0000000100000000L,0x0000000055554000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_synpred9_babel173823 = new BitSet(new long[]{0x0000000100000000L,0x0000000055554000L,0x0020000000000000L});
    public static final BitSet FOLLOW_right_modify_in_synpred9_babel173826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_synpred10_babel173861 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_synpred10_babel173863 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred10_babel173866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_synpred11_babel173898 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_synpred11_babel173900 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred11_babel173903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_expr_in_synpred12_babel173935 = new BitSet(new long[]{0x0000000000000000L,0x800000002AAAA000L,0x0020000000006681L});
    public static final BitSet FOLLOW_NL_in_synpred12_babel173937 = new BitSet(new long[]{0x0000000000000000L,0x800000002AAAA000L,0x0020000000006681L});
    public static final BitSet FOLLOW_left_modify_in_synpred12_babel173940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_expr_in_synpred13_babel173974 = new BitSet(new long[]{0x0000000100000000L,0x0000000055554000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_synpred13_babel173976 = new BitSet(new long[]{0x0000000100000000L,0x0000000055554000L,0x0020000000000000L});
    public static final BitSet FOLLOW_right_modify_in_synpred13_babel173979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_expr_in_synpred14_babel174013 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_NL_in_synpred14_babel174015 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred14_babel174018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_obj_in_synpred15_babel174374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000028000000L});
    public static final BitSet FOLLOW_NL_in_synpred15_babel174376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000028000000L});
    public static final BitSet FOLLOW_parents_in_synpred15_babel174379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_nobrackets_in_synpred16_babel174450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_nobrackets_in_synpred17_babel174473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_OPEN_in_synpred18_babel176433 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_NL_in_synpred18_babel176435 = new BitSet(new long[]{0x0000000000000000L,0x7DD2098E80000000L,0xB6E430001000F908L,0x000000000000000AL});
    public static final BitSet FOLLOW_protected_expr_nc_in_synpred18_babel176438 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000004000000L});
    public static final BitSet FOLLOW_NL_in_synpred18_babel176440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_SC_in_synpred18_babel176443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_expr_in_synpred19_babel176781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_in_synpred20_babel176792 = new BitSet(new long[]{0x0000000000000002L});

}