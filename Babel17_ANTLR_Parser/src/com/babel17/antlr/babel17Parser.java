// $ANTLR 3.2 Sep 23, 2009 12:02:23 /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g 2011-07-19 06:32:31

package com.babel17.antlr;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class babel17Parser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "PROG", "NIL_TOKEN", "ANY", "LAMBDA", "SQUARE_LIST", "ROUND_LIST", "LIST_CONS", "COMPARE", "APPLY", "IF", "MAP_OR_SET_OR_OBJ", "EMPTY_MAP", "EXCEPTION", "MATCH", "TRY", "CASES", "OBJ", "FOR_EXPR", "WHILE_DO", "MESSAGE_SEND", "UMINUS", "POW", "PARENTS_PLUS", "PARENTS_MUL", "BLOCK", "BEGIN", "WITH", "VAL", "ASSIGN", "LENS_ASSIGN", "ARROW", "DEF", "YIELD", "PRIVATE", "TYPEDEF", "TYPEDEF_CLAUSE", "GETTYPE", "MEMOIZE", "MEMOID_STRONG", "MEMOID_WEAK", "PRIVATEID", "IF_PATTERN", "TYPE_PATTERN", "INNERVALUE_PATTERN", "TYPEID", "TYPEVAL", "MODULEID", "TYPE_EXPR", "TYPEOF", "CONVERSION", "AUTOMATIC_CONVERSION", "CONVERT", "RELATE", "INTERVAL", "IMPORT_PREFIX", "IMPORT_ALL", "IMPORT_SET", "IMPORT_PLUS", "IMPORT_MINUS", "MESSAGE_ID", "MESSAGE_LENS", "FUNCTIONS_LENS", "Newline", "NotNewline", "COMMENT", "LINECOMMENT", "SmallLetter", "BigLetter", "Letter", "Digit", "Hex", "L_begin", "L_end", "L_obj", "L_with", "L_if", "L_then", "L_else", "L_elseif", "L_while", "L_for", "L_do", "L_yield", "L_match", "L_case", "L_as", "L_val", "L_def", "L_in", "L_exception", "L_to", "L_downto", "L_try", "L_catch", "L_concurrent", "L_choose", "L_lazy", "L_memoize", "L_true", "L_false", "L_this", "L_random", "L_nil", "L_div", "L_mod", "L_module", "L_typedef", "L_typeof", "L_private", "L_import", "L_unittest", "L_and", "L_not", "L_or", "L_root", "L_native", "L_min", "L_max", "L_lens", "A_EQUAL", "U_EQUAL", "A_NOT_EQUAL", "U_NOT_EQUAL", "LESS", "A_LESS_EQ", "U_LESS_EQ", "GREATER", "A_GREATER_EQ", "U_GREATER_EQ", "SC", "PLUS", "MINUS", "TIMES", "QUOTIENT", "POW_tok", "TOK_RELATE", "TOK_CONVERT", "A_DOUBLE_COLON", "U_DOUBLE_COLON", "TIMESTIMES", "QUOTIENTQUOTIENT", "PLUSPLUS", "MINUSMINUS", "A_DOUBLE_ARROW", "U_DOUBLE_ARROW", "A_ARROW", "U_ARROW", "A_ELLIPSIS", "U_ELLIPSIS", "COMMA", "PERIOD", "QUESTION_MARK", "EXCLAMATION_MARK", "L_force", "WsChar", "WS", "NL", "Constr", "Id", "Exponent", "Float", "Num", "Charcode", "String", "ROUND_BRACKET_OPEN", "ROUND_BRACKET_CLOSE", "SQUARE_BRACKET_OPEN", "SQUARE_BRACKET_CLOSE", "CURLY_BRACKET_OPEN", "CURLY_BRACKET_CLOSE", "UNDERSCORE", "COLON", "PRAGMA_LOG", "PRAGMA_PRINT", "PRAGMA_ASSERT", "PRAGMA_PROFILE", "PRAGMA_CATCH"
    };
    public static final int PRAGMA_CATCH=180;
    public static final int L_end=76;
    public static final int U_NOT_EQUAL=126;
    public static final int TIMESTIMES=143;
    public static final int L_try=96;
    public static final int BigLetter=71;
    public static final int TOK_RELATE=139;
    public static final int ROUND_BRACKET_CLOSE=169;
    public static final int L_native=119;
    public static final int L_mod=108;
    public static final int L_lens=122;
    public static final int MINUSMINUS=146;
    public static final int IMPORT_PREFIX=58;
    public static final int Newline=66;
    public static final int SQUARE_BRACKET_CLOSE=171;
    public static final int LINECOMMENT=69;
    public static final int MAP_OR_SET_OR_OBJ=14;
    public static final int EOF=-1;
    public static final int U_DOUBLE_ARROW=148;
    public static final int TYPEID=48;
    public static final int L_exception=93;
    public static final int Num=165;
    public static final int GREATER=130;
    public static final int EMPTY_MAP=15;
    public static final int POW=25;
    public static final int L_concurrent=98;
    public static final int L_catch=97;
    public static final int L_false=103;
    public static final int QUOTIENTQUOTIENT=144;
    public static final int L_nil=106;
    public static final int BEGIN=29;
    public static final int LIST_CONS=10;
    public static final int L_with=78;
    public static final int AUTOMATIC_CONVERSION=54;
    public static final int QUESTION_MARK=155;
    public static final int LESS=127;
    public static final int ROUND_BRACKET_OPEN=168;
    public static final int SQUARE_LIST=8;
    public static final int MODULEID=50;
    public static final int VAL=31;
    public static final int L_as=89;
    public static final int NL=160;
    public static final int MESSAGE_SEND=23;
    public static final int A_ARROW=149;
    public static final int A_DOUBLE_COLON=141;
    public static final int COMMENT=68;
    public static final int L_def=91;
    public static final int L_and=115;
    public static final int EXCEPTION=16;
    public static final int TYPE_EXPR=51;
    public static final int L_root=118;
    public static final int L_this=104;
    public static final int IMPORT_ALL=59;
    public static final int L_force=157;
    public static final int L_choose=99;
    public static final int PERIOD=154;
    public static final int PRIVATE=37;
    public static final int L_import=113;
    public static final int SmallLetter=70;
    public static final int NIL_TOKEN=5;
    public static final int PRAGMA_PRINT=177;
    public static final int CURLY_BRACKET_OPEN=172;
    public static final int L_typedef=110;
    public static final int UNDERSCORE=174;
    public static final int MATCH=17;
    public static final int U_LESS_EQ=129;
    public static final int TRY=18;
    public static final int L_to=94;
    public static final int LENS_ASSIGN=33;
    public static final int Float=164;
    public static final int L_unittest=114;
    public static final int WS=159;
    public static final int IMPORT_MINUS=62;
    public static final int Charcode=166;
    public static final int TYPEOF=52;
    public static final int L_do=85;
    public static final int L_val=90;
    public static final int TOK_CONVERT=140;
    public static final int L_match=87;
    public static final int L_obj=77;
    public static final int WsChar=158;
    public static final int L_module=109;
    public static final int GETTYPE=40;
    public static final int MESSAGE_ID=63;
    public static final int Hex=74;
    public static final int L_private=112;
    public static final int TYPE_PATTERN=46;
    public static final int L_for=84;
    public static final int MEMOID_WEAK=43;
    public static final int RELATE=56;
    public static final int Letter=72;
    public static final int EXCLAMATION_MARK=156;
    public static final int PRAGMA_ASSERT=178;
    public static final int APPLY=12;
    public static final int U_ARROW=150;
    public static final int PRAGMA_LOG=176;
    public static final int A_EQUAL=123;
    public static final int PRIVATEID=44;
    public static final int L_else=81;
    public static final int DEF=35;
    public static final int L_typeof=111;
    public static final int L_begin=75;
    public static final int L_div=107;
    public static final int L_yield=86;
    public static final int PLUSPLUS=145;
    public static final int MEMOID_STRONG=42;
    public static final int L_while=83;
    public static final int L_min=120;
    public static final int CASES=19;
    public static final int POW_tok=138;
    public static final int Exponent=163;
    public static final int IF_PATTERN=45;
    public static final int A_ELLIPSIS=151;
    public static final int PARENTS_PLUS=26;
    public static final int A_DOUBLE_ARROW=147;
    public static final int INTERVAL=57;
    public static final int SQUARE_BRACKET_OPEN=170;
    public static final int IF=13;
    public static final int L_not=116;
    public static final int PROG=4;
    public static final int COMMA=153;
    public static final int OBJ=20;
    public static final int TYPEVAL=49;
    public static final int MEMOIZE=41;
    public static final int U_ELLIPSIS=152;
    public static final int TYPEDEF_CLAUSE=39;
    public static final int INNERVALUE_PATTERN=47;
    public static final int L_max=121;
    public static final int YIELD=36;
    public static final int COMPARE=11;
    public static final int U_GREATER_EQ=132;
    public static final int U_EQUAL=124;
    public static final int PLUS=134;
    public static final int FUNCTIONS_LENS=65;
    public static final int String=167;
    public static final int LAMBDA=7;
    public static final int L_true=102;
    public static final int Id=162;
    public static final int L_or=117;
    public static final int WITH=30;
    public static final int L_in=92;
    public static final int CONVERT=55;
    public static final int L_lazy=100;
    public static final int NotNewline=67;
    public static final int L_then=80;
    public static final int QUOTIENT=137;
    public static final int TYPEDEF=38;
    public static final int L_if=79;
    public static final int IMPORT_SET=60;
    public static final int CURLY_BRACKET_CLOSE=173;
    public static final int UMINUS=24;
    public static final int FOR_EXPR=21;
    public static final int Constr=161;
    public static final int WHILE_DO=22;
    public static final int L_elseif=82;
    public static final int MINUS=135;
    public static final int Digit=73;
    public static final int L_memoize=101;
    public static final int CONVERSION=53;
    public static final int A_GREATER_EQ=131;
    public static final int ROUND_LIST=9;
    public static final int COLON=175;
    public static final int PRAGMA_PROFILE=179;
    public static final int SC=133;
    public static final int L_downto=95;
    public static final int ANY=6;
    public static final int L_random=105;
    public static final int A_NOT_EQUAL=125;
    public static final int BLOCK=28;
    public static final int ASSIGN=32;
    public static final int U_DOUBLE_COLON=142;
    public static final int ARROW=34;
    public static final int IMPORT_PLUS=61;
    public static final int MESSAGE_LENS=64;
    public static final int L_case=88;
    public static final int TIMES=136;
    public static final int A_LESS_EQ=128;
    public static final int PARENTS_MUL=27;

    // delegates
    // delegators


        public babel17Parser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public babel17Parser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return babel17Parser.tokenNames; }
    public String getGrammarFileName() { return "/Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g"; }

     

    public boolean errorDuringParsing = false;
    public ArrayList<RecognitionException> parsingErrors = new ArrayList<RecognitionException>();


    @Override
    public void reportError(RecognitionException e) {
      errorDuringParsing = true;
      parsingErrors.add(e);
    }



    public static class prog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prog"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:139:1: prog : block EOF -> ^( PROG block ) ;
    public final babel17Parser.prog_return prog() throws RecognitionException {
        babel17Parser.prog_return retval = new babel17Parser.prog_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF2=null;
        babel17Parser.block_return block1 = null;


        CommonTree EOF2_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:139:7: ( block EOF -> ^( PROG block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:139:9: block EOF
            {
            pushFollow(FOLLOW_block_in_prog274);
            block1=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block1.getTree());
            EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_prog276); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF2);



            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 139:19: -> ^( PROG block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:139:22: ^( PROG block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROG, "PROG"), root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prog"

    public static class token_EQUAL_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_EQUAL"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:269:1: token_EQUAL : ( A_EQUAL | U_EQUAL );
    public final babel17Parser.token_EQUAL_return token_EQUAL() throws RecognitionException {
        babel17Parser.token_EQUAL_return retval = new babel17Parser.token_EQUAL_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set3=null;

        CommonTree set3_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:270:2: ( A_EQUAL | U_EQUAL )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set3=(Token)input.LT(1);
            if ( (input.LA(1)>=A_EQUAL && input.LA(1)<=U_EQUAL) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set3));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_EQUAL"

    public static class token_NOT_EQUAL_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_NOT_EQUAL"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:277:1: token_NOT_EQUAL : ( A_NOT_EQUAL | U_NOT_EQUAL );
    public final babel17Parser.token_NOT_EQUAL_return token_NOT_EQUAL() throws RecognitionException {
        babel17Parser.token_NOT_EQUAL_return retval = new babel17Parser.token_NOT_EQUAL_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set4=null;

        CommonTree set4_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:278:2: ( A_NOT_EQUAL | U_NOT_EQUAL )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set4=(Token)input.LT(1);
            if ( (input.LA(1)>=A_NOT_EQUAL && input.LA(1)<=U_NOT_EQUAL) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set4));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_NOT_EQUAL"

    public static class token_LESS_EQ_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_LESS_EQ"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:286:1: token_LESS_EQ : ( A_LESS_EQ | U_LESS_EQ );
    public final babel17Parser.token_LESS_EQ_return token_LESS_EQ() throws RecognitionException {
        babel17Parser.token_LESS_EQ_return retval = new babel17Parser.token_LESS_EQ_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set5=null;

        CommonTree set5_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:287:2: ( A_LESS_EQ | U_LESS_EQ )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set5=(Token)input.LT(1);
            if ( (input.LA(1)>=A_LESS_EQ && input.LA(1)<=U_LESS_EQ) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set5));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_LESS_EQ"

    public static class token_GREATER_EQ_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_GREATER_EQ"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:296:1: token_GREATER_EQ : ( A_GREATER_EQ | U_GREATER_EQ );
    public final babel17Parser.token_GREATER_EQ_return token_GREATER_EQ() throws RecognitionException {
        babel17Parser.token_GREATER_EQ_return retval = new babel17Parser.token_GREATER_EQ_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set6=null;

        CommonTree set6_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:297:2: ( A_GREATER_EQ | U_GREATER_EQ )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set6=(Token)input.LT(1);
            if ( (input.LA(1)>=A_GREATER_EQ && input.LA(1)<=U_GREATER_EQ) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set6));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_GREATER_EQ"

    public static class token_OR_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_OR"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:312:1: token_OR : L_or ;
    public final babel17Parser.token_OR_return token_OR() throws RecognitionException {
        babel17Parser.token_OR_return retval = new babel17Parser.token_OR_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_or7=null;

        CommonTree L_or7_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:312:9: ( L_or )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:312:11: L_or
            {
            root_0 = (CommonTree)adaptor.nil();

            L_or7=(Token)match(input,L_or,FOLLOW_L_or_in_token_OR1125); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_or7_tree = (CommonTree)adaptor.create(L_or7);
            adaptor.addChild(root_0, L_or7_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_OR"

    public static class token_AND_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_AND"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:313:1: token_AND : L_and ;
    public final babel17Parser.token_AND_return token_AND() throws RecognitionException {
        babel17Parser.token_AND_return retval = new babel17Parser.token_AND_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_and8=null;

        CommonTree L_and8_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:314:2: ( L_and )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:314:4: L_and
            {
            root_0 = (CommonTree)adaptor.nil();

            L_and8=(Token)match(input,L_and,FOLLOW_L_and_in_token_AND1133); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_and8_tree = (CommonTree)adaptor.create(L_and8);
            adaptor.addChild(root_0, L_and8_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_AND"

    public static class token_NOT_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_NOT"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:315:1: token_NOT : L_not ;
    public final babel17Parser.token_NOT_return token_NOT() throws RecognitionException {
        babel17Parser.token_NOT_return retval = new babel17Parser.token_NOT_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_not9=null;

        CommonTree L_not9_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:316:2: ( L_not )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:316:4: L_not
            {
            root_0 = (CommonTree)adaptor.nil();

            L_not9=(Token)match(input,L_not,FOLLOW_L_not_in_token_NOT1141); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_not9_tree = (CommonTree)adaptor.create(L_not9);
            adaptor.addChild(root_0, L_not9_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_NOT"

    public static class token_DOUBLE_COLON_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_DOUBLE_COLON"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:322:1: token_DOUBLE_COLON : ( A_DOUBLE_COLON | U_DOUBLE_COLON );
    public final babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON() throws RecognitionException {
        babel17Parser.token_DOUBLE_COLON_return retval = new babel17Parser.token_DOUBLE_COLON_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set10=null;

        CommonTree set10_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:323:2: ( A_DOUBLE_COLON | U_DOUBLE_COLON )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set10=(Token)input.LT(1);
            if ( (input.LA(1)>=A_DOUBLE_COLON && input.LA(1)<=U_DOUBLE_COLON) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set10));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_DOUBLE_COLON"

    public static class token_DOUBLE_ARROW_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_DOUBLE_ARROW"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:339:1: token_DOUBLE_ARROW : ( A_DOUBLE_ARROW | U_DOUBLE_ARROW );
    public final babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW() throws RecognitionException {
        babel17Parser.token_DOUBLE_ARROW_return retval = new babel17Parser.token_DOUBLE_ARROW_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set11=null;

        CommonTree set11_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:340:2: ( A_DOUBLE_ARROW | U_DOUBLE_ARROW )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set11=(Token)input.LT(1);
            if ( (input.LA(1)>=A_DOUBLE_ARROW && input.LA(1)<=U_DOUBLE_ARROW) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set11));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_DOUBLE_ARROW"

    public static class token_ARROW_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_ARROW"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:344:1: token_ARROW : ( A_ARROW | U_ARROW );
    public final babel17Parser.token_ARROW_return token_ARROW() throws RecognitionException {
        babel17Parser.token_ARROW_return retval = new babel17Parser.token_ARROW_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set12=null;

        CommonTree set12_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:345:2: ( A_ARROW | U_ARROW )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set12=(Token)input.LT(1);
            if ( (input.LA(1)>=A_ARROW && input.LA(1)<=U_ARROW) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set12));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_ARROW"

    public static class token_ELLIPSIS_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_ELLIPSIS"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:350:1: token_ELLIPSIS : ( A_ELLIPSIS | U_ELLIPSIS );
    public final babel17Parser.token_ELLIPSIS_return token_ELLIPSIS() throws RecognitionException {
        babel17Parser.token_ELLIPSIS_return retval = new babel17Parser.token_ELLIPSIS_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set13=null;

        CommonTree set13_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:351:2: ( A_ELLIPSIS | U_ELLIPSIS )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set13=(Token)input.LT(1);
            if ( (input.LA(1)>=A_ELLIPSIS && input.LA(1)<=U_ELLIPSIS) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set13));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_ELLIPSIS"

    public static class typeid_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeid"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:433:1: typeid : Id ( ( NL )? PERIOD ( NL )? Id )* -> ^( TYPEID ( Id )* ) ;
    public final babel17Parser.typeid_return typeid() throws RecognitionException {
        babel17Parser.typeid_return retval = new babel17Parser.typeid_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id14=null;
        Token NL15=null;
        Token PERIOD16=null;
        Token NL17=null;
        Token Id18=null;

        CommonTree Id14_tree=null;
        CommonTree NL15_tree=null;
        CommonTree PERIOD16_tree=null;
        CommonTree NL17_tree=null;
        CommonTree Id18_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:433:9: ( Id ( ( NL )? PERIOD ( NL )? Id )* -> ^( TYPEID ( Id )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:433:11: Id ( ( NL )? PERIOD ( NL )? Id )*
            {
            Id14=(Token)match(input,Id,FOLLOW_Id_in_typeid1791); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id14);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:433:14: ( ( NL )? PERIOD ( NL )? Id )*
            loop3:
            do {
                int alt3=2;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==NL) ) {
                    int LA3_1 = input.LA(2);

                    if ( (LA3_1==PERIOD) ) {
                        alt3=1;
                    }


                }
                else if ( (LA3_0==PERIOD) ) {
                    alt3=1;
                }


                switch (alt3) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:433:15: ( NL )? PERIOD ( NL )? Id
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:433:15: ( NL )?
            	    int alt1=2;
            	    int LA1_0 = input.LA(1);

            	    if ( (LA1_0==NL) ) {
            	        alt1=1;
            	    }
            	    switch (alt1) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:433:15: NL
            	            {
            	            NL15=(Token)match(input,NL,FOLLOW_NL_in_typeid1794); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL15);


            	            }
            	            break;

            	    }

            	    PERIOD16=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_typeid1797); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD16);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:433:26: ( NL )?
            	    int alt2=2;
            	    int LA2_0 = input.LA(1);

            	    if ( (LA2_0==NL) ) {
            	        alt2=1;
            	    }
            	    switch (alt2) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:433:26: NL
            	            {
            	            NL17=(Token)match(input,NL,FOLLOW_NL_in_typeid1799); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL17);


            	            }
            	            break;

            	    }

            	    Id18=(Token)match(input,Id,FOLLOW_Id_in_typeid1802); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_Id.add(Id18);


            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);



            // AST REWRITE
            // elements: Id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 433:35: -> ^( TYPEID ( Id )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:433:38: ^( TYPEID ( Id )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEID, "TYPEID"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:433:47: ( Id )*
                while ( stream_Id.hasNext() ) {
                    adaptor.addChild(root_1, stream_Id.nextNode());

                }
                stream_Id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeid"

    public static class typeannotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeannotation"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:435:1: typeannotation : ( typeid | '(' protected_expr ')' -> ^( TYPEVAL protected_expr ) );
    public final babel17Parser.typeannotation_return typeannotation() throws RecognitionException {
        babel17Parser.typeannotation_return retval = new babel17Parser.typeannotation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal20=null;
        Token char_literal22=null;
        babel17Parser.typeid_return typeid19 = null;

        babel17Parser.protected_expr_return protected_expr21 = null;


        CommonTree char_literal20_tree=null;
        CommonTree char_literal22_tree=null;
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:436:2: ( typeid | '(' protected_expr ')' -> ^( TYPEVAL protected_expr ) )
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==Id) ) {
                alt4=1;
            }
            else if ( (LA4_0==ROUND_BRACKET_OPEN) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:436:4: typeid
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeid_in_typeannotation1822);
                    typeid19=typeid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeid19.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:437:4: '(' protected_expr ')'
                    {
                    char_literal20=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_typeannotation1827); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal20);

                    pushFollow(FOLLOW_protected_expr_in_typeannotation1829);
                    protected_expr21=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr21.getTree());
                    char_literal22=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_typeannotation1831); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal22);



                    // AST REWRITE
                    // elements: protected_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 437:27: -> ^( TYPEVAL protected_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:437:30: ^( TYPEVAL protected_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEVAL, "TYPEVAL"), root_1);

                        adaptor.addChild(root_1, stream_protected_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeannotation"

    public static class pattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:1: pattern : ( Constr ( ( NL )? pattern )? -> ^( Constr ( pattern )? ) | primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )* -> ^( LIST_CONS ( primitive_pattern )* ) | L_exception ( NL )? pattern -> ^( L_exception pattern ) | token_ELLIPSIS );
    public final babel17Parser.pattern_return pattern() throws RecognitionException {
        babel17Parser.pattern_return retval = new babel17Parser.pattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Constr23=null;
        Token NL24=null;
        Token NL27=null;
        Token NL29=null;
        Token L_exception31=null;
        Token NL32=null;
        babel17Parser.pattern_return pattern25 = null;

        babel17Parser.primitive_pattern_return primitive_pattern26 = null;

        babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON28 = null;

        babel17Parser.primitive_pattern_return primitive_pattern30 = null;

        babel17Parser.pattern_return pattern33 = null;

        babel17Parser.token_ELLIPSIS_return token_ELLIPSIS34 = null;


        CommonTree Constr23_tree=null;
        CommonTree NL24_tree=null;
        CommonTree NL27_tree=null;
        CommonTree NL29_tree=null;
        CommonTree L_exception31_tree=null;
        CommonTree NL32_tree=null;
        RewriteRuleTokenStream stream_L_exception=new RewriteRuleTokenStream(adaptor,"token L_exception");
        RewriteRuleTokenStream stream_Constr=new RewriteRuleTokenStream(adaptor,"token Constr");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_primitive_pattern=new RewriteRuleSubtreeStream(adaptor,"rule primitive_pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_COLON=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_COLON");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:9: ( Constr ( ( NL )? pattern )? -> ^( Constr ( pattern )? ) | primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )* -> ^( LIST_CONS ( primitive_pattern )* ) | L_exception ( NL )? pattern -> ^( L_exception pattern ) | token_ELLIPSIS )
            int alt11=4;
            switch ( input.LA(1) ) {
            case Constr:
                {
                alt11=1;
                }
                break;
            case L_true:
            case L_false:
            case L_nil:
            case MINUS:
            case Id:
            case Num:
            case String:
            case ROUND_BRACKET_OPEN:
            case SQUARE_BRACKET_OPEN:
            case CURLY_BRACKET_OPEN:
            case UNDERSCORE:
                {
                alt11=2;
                }
                break;
            case L_exception:
                {
                alt11=3;
                }
                break;
            case A_ELLIPSIS:
            case U_ELLIPSIS:
                {
                alt11=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }

            switch (alt11) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:11: Constr ( ( NL )? pattern )?
                    {
                    Constr23=(Token)match(input,Constr,FOLLOW_Constr_in_pattern1848); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Constr.add(Constr23);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:18: ( ( NL )? pattern )?
                    int alt6=2;
                    int LA6_0 = input.LA(1);

                    if ( (LA6_0==NL) ) {
                        int LA6_1 = input.LA(2);

                        if ( (LA6_1==L_exception||(LA6_1>=L_true && LA6_1<=L_false)||LA6_1==L_nil||LA6_1==MINUS||(LA6_1>=A_ELLIPSIS && LA6_1<=U_ELLIPSIS)||(LA6_1>=Constr && LA6_1<=Id)||LA6_1==Num||(LA6_1>=String && LA6_1<=ROUND_BRACKET_OPEN)||LA6_1==SQUARE_BRACKET_OPEN||LA6_1==CURLY_BRACKET_OPEN||LA6_1==UNDERSCORE) ) {
                            alt6=1;
                        }
                    }
                    else if ( (LA6_0==L_exception||(LA6_0>=L_true && LA6_0<=L_false)||LA6_0==L_nil||LA6_0==MINUS||(LA6_0>=A_ELLIPSIS && LA6_0<=U_ELLIPSIS)||(LA6_0>=Constr && LA6_0<=Id)||LA6_0==Num||(LA6_0>=String && LA6_0<=ROUND_BRACKET_OPEN)||LA6_0==SQUARE_BRACKET_OPEN||LA6_0==CURLY_BRACKET_OPEN||LA6_0==UNDERSCORE) ) {
                        alt6=1;
                    }
                    switch (alt6) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:19: ( NL )? pattern
                            {
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:19: ( NL )?
                            int alt5=2;
                            int LA5_0 = input.LA(1);

                            if ( (LA5_0==NL) ) {
                                alt5=1;
                            }
                            switch (alt5) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:19: NL
                                    {
                                    NL24=(Token)match(input,NL,FOLLOW_NL_in_pattern1851); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL24);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_pattern_in_pattern1854);
                            pattern25=pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pattern.add(pattern25.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: Constr, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 440:33: -> ^( Constr ( pattern )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:36: ^( Constr ( pattern )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_Constr.nextNode(), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:45: ( pattern )?
                        if ( stream_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_pattern.nextTree());

                        }
                        stream_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:441:4: primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )*
                    {
                    pushFollow(FOLLOW_primitive_pattern_in_pattern1870);
                    primitive_pattern26=primitive_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitive_pattern.add(primitive_pattern26.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:441:22: ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )*
                    loop9:
                    do {
                        int alt9=2;
                        int LA9_0 = input.LA(1);

                        if ( (LA9_0==NL) ) {
                            int LA9_1 = input.LA(2);

                            if ( ((LA9_1>=A_DOUBLE_COLON && LA9_1<=U_DOUBLE_COLON)) ) {
                                alt9=1;
                            }


                        }
                        else if ( ((LA9_0>=A_DOUBLE_COLON && LA9_0<=U_DOUBLE_COLON)) ) {
                            alt9=1;
                        }


                        switch (alt9) {
                    	case 1 :
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:441:23: ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern
                    	    {
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:441:23: ( NL )?
                    	    int alt7=2;
                    	    int LA7_0 = input.LA(1);

                    	    if ( (LA7_0==NL) ) {
                    	        alt7=1;
                    	    }
                    	    switch (alt7) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:441:23: NL
                    	            {
                    	            NL27=(Token)match(input,NL,FOLLOW_NL_in_pattern1873); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL27);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_token_DOUBLE_COLON_in_pattern1876);
                    	    token_DOUBLE_COLON28=token_DOUBLE_COLON();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_token_DOUBLE_COLON.add(token_DOUBLE_COLON28.getTree());
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:441:46: ( NL )?
                    	    int alt8=2;
                    	    int LA8_0 = input.LA(1);

                    	    if ( (LA8_0==NL) ) {
                    	        alt8=1;
                    	    }
                    	    switch (alt8) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:441:46: NL
                    	            {
                    	            NL29=(Token)match(input,NL,FOLLOW_NL_in_pattern1878); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL29);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_primitive_pattern_in_pattern1881);
                    	    primitive_pattern30=primitive_pattern();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_primitive_pattern.add(primitive_pattern30.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop9;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: primitive_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 442:3: -> ^( LIST_CONS ( primitive_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:442:6: ^( LIST_CONS ( primitive_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST_CONS, "LIST_CONS"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:442:18: ( primitive_pattern )*
                        while ( stream_primitive_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_primitive_pattern.nextTree());

                        }
                        stream_primitive_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:443:4: L_exception ( NL )? pattern
                    {
                    L_exception31=(Token)match(input,L_exception,FOLLOW_L_exception_in_pattern1900); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_exception.add(L_exception31);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:443:16: ( NL )?
                    int alt10=2;
                    int LA10_0 = input.LA(1);

                    if ( (LA10_0==NL) ) {
                        alt10=1;
                    }
                    switch (alt10) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:443:16: NL
                            {
                            NL32=(Token)match(input,NL,FOLLOW_NL_in_pattern1902); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL32);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_pattern_in_pattern1905);
                    pattern33=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern33.getTree());


                    // AST REWRITE
                    // elements: L_exception, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 443:28: -> ^( L_exception pattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:443:31: ^( L_exception pattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_L_exception.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_pattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:444:4: token_ELLIPSIS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_ELLIPSIS_in_pattern1918);
                    token_ELLIPSIS34=token_ELLIPSIS();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_ELLIPSIS34.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pattern"

    public static class defpattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defpattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:1: defpattern : ( primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )* -> ^( LIST_CONS ( primitive_pattern )* ) | Constr ( defpattern )? -> ^( Constr ( defpattern )? ) );
    public final babel17Parser.defpattern_return defpattern() throws RecognitionException {
        babel17Parser.defpattern_return retval = new babel17Parser.defpattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL36=null;
        Token NL38=null;
        Token Constr40=null;
        babel17Parser.primitive_pattern_return primitive_pattern35 = null;

        babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON37 = null;

        babel17Parser.primitive_pattern_return primitive_pattern39 = null;

        babel17Parser.defpattern_return defpattern41 = null;


        CommonTree NL36_tree=null;
        CommonTree NL38_tree=null;
        CommonTree Constr40_tree=null;
        RewriteRuleTokenStream stream_Constr=new RewriteRuleTokenStream(adaptor,"token Constr");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_primitive_pattern=new RewriteRuleSubtreeStream(adaptor,"rule primitive_pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_COLON=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_COLON");
        RewriteRuleSubtreeStream stream_defpattern=new RewriteRuleSubtreeStream(adaptor,"rule defpattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:2: ( primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )* -> ^( LIST_CONS ( primitive_pattern )* ) | Constr ( defpattern )? -> ^( Constr ( defpattern )? ) )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( ((LA16_0>=L_true && LA16_0<=L_false)||LA16_0==L_nil||LA16_0==MINUS||LA16_0==Id||LA16_0==Num||(LA16_0>=String && LA16_0<=ROUND_BRACKET_OPEN)||LA16_0==SQUARE_BRACKET_OPEN||LA16_0==CURLY_BRACKET_OPEN||LA16_0==UNDERSCORE) ) {
                alt16=1;
            }
            else if ( (LA16_0==Constr) ) {
                alt16=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }
            switch (alt16) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:4: primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )*
                    {
                    pushFollow(FOLLOW_primitive_pattern_in_defpattern1928);
                    primitive_pattern35=primitive_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitive_pattern.add(primitive_pattern35.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:22: ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )*
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( (LA14_0==NL) ) {
                            int LA14_1 = input.LA(2);

                            if ( ((LA14_1>=A_DOUBLE_COLON && LA14_1<=U_DOUBLE_COLON)) ) {
                                alt14=1;
                            }


                        }
                        else if ( ((LA14_0>=A_DOUBLE_COLON && LA14_0<=U_DOUBLE_COLON)) ) {
                            alt14=1;
                        }


                        switch (alt14) {
                    	case 1 :
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:23: ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern
                    	    {
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:23: ( NL )?
                    	    int alt12=2;
                    	    int LA12_0 = input.LA(1);

                    	    if ( (LA12_0==NL) ) {
                    	        alt12=1;
                    	    }
                    	    switch (alt12) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:23: NL
                    	            {
                    	            NL36=(Token)match(input,NL,FOLLOW_NL_in_defpattern1931); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL36);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_token_DOUBLE_COLON_in_defpattern1934);
                    	    token_DOUBLE_COLON37=token_DOUBLE_COLON();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_token_DOUBLE_COLON.add(token_DOUBLE_COLON37.getTree());
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:46: ( NL )?
                    	    int alt13=2;
                    	    int LA13_0 = input.LA(1);

                    	    if ( (LA13_0==NL) ) {
                    	        alt13=1;
                    	    }
                    	    switch (alt13) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:46: NL
                    	            {
                    	            NL38=(Token)match(input,NL,FOLLOW_NL_in_defpattern1936); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL38);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_primitive_pattern_in_defpattern1939);
                    	    primitive_pattern39=primitive_pattern();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_primitive_pattern.add(primitive_pattern39.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: primitive_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 448:3: -> ^( LIST_CONS ( primitive_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:448:6: ^( LIST_CONS ( primitive_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST_CONS, "LIST_CONS"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:448:18: ( primitive_pattern )*
                        while ( stream_primitive_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_primitive_pattern.nextTree());

                        }
                        stream_primitive_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:4: Constr ( defpattern )?
                    {
                    Constr40=(Token)match(input,Constr,FOLLOW_Constr_in_defpattern1957); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Constr.add(Constr40);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:11: ( defpattern )?
                    int alt15=2;
                    int LA15_0 = input.LA(1);

                    if ( ((LA15_0>=L_true && LA15_0<=L_false)||LA15_0==L_nil||LA15_0==MINUS||(LA15_0>=Constr && LA15_0<=Id)||LA15_0==Num||(LA15_0>=String && LA15_0<=ROUND_BRACKET_OPEN)||LA15_0==SQUARE_BRACKET_OPEN||LA15_0==CURLY_BRACKET_OPEN||LA15_0==UNDERSCORE) ) {
                        alt15=1;
                    }
                    switch (alt15) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:11: defpattern
                            {
                            pushFollow(FOLLOW_defpattern_in_defpattern1959);
                            defpattern41=defpattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_defpattern.add(defpattern41.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: Constr, defpattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 449:23: -> ^( Constr ( defpattern )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:26: ^( Constr ( defpattern )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_Constr.nextNode(), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:35: ( defpattern )?
                        if ( stream_defpattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_defpattern.nextTree());

                        }
                        stream_defpattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "defpattern"

    public static class casepattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "casepattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:451:1: casepattern : bracket_pattern ;
    public final babel17Parser.casepattern_return casepattern() throws RecognitionException {
        babel17Parser.casepattern_return retval = new babel17Parser.casepattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.bracket_pattern_return bracket_pattern42 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:2: ( bracket_pattern )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:4: bracket_pattern
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_bracket_pattern_in_casepattern1978);
            bracket_pattern42=bracket_pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bracket_pattern42.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "casepattern"

    public static class bracket_pattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracket_pattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:454:1: bracket_pattern : ( ( Id ( NL )? L_as )=> Id ( NL )? L_as ( NL )? pattern -> ^( L_as Id pattern ) | ( protected_expr ( NL )? QUESTION_MARK )=> protected_expr ( NL )? QUESTION_MARK ( ( NL )? pattern )? -> ^( QUESTION_MARK protected_expr ( pattern )? ) | ( protected_expr ( NL )? EXCLAMATION_MARK )=> protected_expr ( NL )? EXCLAMATION_MARK ( ( NL )? pattern )? -> ^( EXCLAMATION_MARK protected_expr ( pattern )? ) | ( Id pattern )=> Id pattern -> ^( INNERVALUE_PATTERN Id pattern ) | L_val ( NL )? protected_expr_nc -> ^( L_val protected_expr_nc ) | L_for ( NL )? ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )? L_end -> ^( L_for ( bracket_pattern )* ) | ( pattern ( NL )? L_if )=> pattern ( NL )? L_if ( NL )? protected_expr_nc -> ^( IF_PATTERN pattern protected_expr_nc ) | ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation -> ^( TYPE_PATTERN typeannotation pattern ) | pattern );
    public final babel17Parser.bracket_pattern_return bracket_pattern() throws RecognitionException {
        babel17Parser.bracket_pattern_return retval = new babel17Parser.bracket_pattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id43=null;
        Token NL44=null;
        Token L_as45=null;
        Token NL46=null;
        Token NL49=null;
        Token QUESTION_MARK50=null;
        Token NL51=null;
        Token NL54=null;
        Token EXCLAMATION_MARK55=null;
        Token NL56=null;
        Token Id58=null;
        Token L_val60=null;
        Token NL61=null;
        Token L_for63=null;
        Token NL64=null;
        Token NL66=null;
        Token COMMA67=null;
        Token NL68=null;
        Token NL70=null;
        Token L_end71=null;
        Token NL73=null;
        Token L_if74=null;
        Token NL75=null;
        Token NL78=null;
        Token char_literal79=null;
        Token NL80=null;
        babel17Parser.pattern_return pattern47 = null;

        babel17Parser.protected_expr_return protected_expr48 = null;

        babel17Parser.pattern_return pattern52 = null;

        babel17Parser.protected_expr_return protected_expr53 = null;

        babel17Parser.pattern_return pattern57 = null;

        babel17Parser.pattern_return pattern59 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc62 = null;

        babel17Parser.bracket_pattern_return bracket_pattern65 = null;

        babel17Parser.bracket_pattern_return bracket_pattern69 = null;

        babel17Parser.pattern_return pattern72 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc76 = null;

        babel17Parser.pattern_return pattern77 = null;

        babel17Parser.typeannotation_return typeannotation81 = null;

        babel17Parser.pattern_return pattern82 = null;


        CommonTree Id43_tree=null;
        CommonTree NL44_tree=null;
        CommonTree L_as45_tree=null;
        CommonTree NL46_tree=null;
        CommonTree NL49_tree=null;
        CommonTree QUESTION_MARK50_tree=null;
        CommonTree NL51_tree=null;
        CommonTree NL54_tree=null;
        CommonTree EXCLAMATION_MARK55_tree=null;
        CommonTree NL56_tree=null;
        CommonTree Id58_tree=null;
        CommonTree L_val60_tree=null;
        CommonTree NL61_tree=null;
        CommonTree L_for63_tree=null;
        CommonTree NL64_tree=null;
        CommonTree NL66_tree=null;
        CommonTree COMMA67_tree=null;
        CommonTree NL68_tree=null;
        CommonTree NL70_tree=null;
        CommonTree L_end71_tree=null;
        CommonTree NL73_tree=null;
        CommonTree L_if74_tree=null;
        CommonTree NL75_tree=null;
        CommonTree NL78_tree=null;
        CommonTree char_literal79_tree=null;
        CommonTree NL80_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_EXCLAMATION_MARK=new RewriteRuleTokenStream(adaptor,"token EXCLAMATION_MARK");
        RewriteRuleTokenStream stream_L_for=new RewriteRuleTokenStream(adaptor,"token L_for");
        RewriteRuleTokenStream stream_L_as=new RewriteRuleTokenStream(adaptor,"token L_as");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_L_val=new RewriteRuleTokenStream(adaptor,"token L_val");
        RewriteRuleTokenStream stream_L_if=new RewriteRuleTokenStream(adaptor,"token L_if");
        RewriteRuleTokenStream stream_QUESTION_MARK=new RewriteRuleTokenStream(adaptor,"token QUESTION_MARK");
        RewriteRuleSubtreeStream stream_typeannotation=new RewriteRuleSubtreeStream(adaptor,"rule typeannotation");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_protected_expr_nc=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr_nc");
        RewriteRuleSubtreeStream stream_bracket_pattern=new RewriteRuleSubtreeStream(adaptor,"rule bracket_pattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:455:2: ( ( Id ( NL )? L_as )=> Id ( NL )? L_as ( NL )? pattern -> ^( L_as Id pattern ) | ( protected_expr ( NL )? QUESTION_MARK )=> protected_expr ( NL )? QUESTION_MARK ( ( NL )? pattern )? -> ^( QUESTION_MARK protected_expr ( pattern )? ) | ( protected_expr ( NL )? EXCLAMATION_MARK )=> protected_expr ( NL )? EXCLAMATION_MARK ( ( NL )? pattern )? -> ^( EXCLAMATION_MARK protected_expr ( pattern )? ) | ( Id pattern )=> Id pattern -> ^( INNERVALUE_PATTERN Id pattern ) | L_val ( NL )? protected_expr_nc -> ^( L_val protected_expr_nc ) | L_for ( NL )? ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )? L_end -> ^( L_for ( bracket_pattern )* ) | ( pattern ( NL )? L_if )=> pattern ( NL )? L_if ( NL )? protected_expr_nc -> ^( IF_PATTERN pattern protected_expr_nc ) | ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation -> ^( TYPE_PATTERN typeannotation pattern ) | pattern )
            int alt36=9;
            alt36 = dfa36.predict(input);
            switch (alt36) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:455:10: ( Id ( NL )? L_as )=> Id ( NL )? L_as ( NL )? pattern
                    {
                    Id43=(Token)match(input,Id,FOLLOW_Id_in_bracket_pattern2005); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id43);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:455:30: ( NL )?
                    int alt17=2;
                    int LA17_0 = input.LA(1);

                    if ( (LA17_0==NL) ) {
                        alt17=1;
                    }
                    switch (alt17) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:455:30: NL
                            {
                            NL44=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2007); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL44);


                            }
                            break;

                    }

                    L_as45=(Token)match(input,L_as,FOLLOW_L_as_in_bracket_pattern2010); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_as.add(L_as45);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:455:39: ( NL )?
                    int alt18=2;
                    int LA18_0 = input.LA(1);

                    if ( (LA18_0==NL) ) {
                        alt18=1;
                    }
                    switch (alt18) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:455:39: NL
                            {
                            NL46=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2012); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL46);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_pattern_in_bracket_pattern2015);
                    pattern47=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern47.getTree());


                    // AST REWRITE
                    // elements: pattern, Id, L_as
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 455:51: -> ^( L_as Id pattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:455:54: ^( L_as Id pattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_L_as.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());
                        adaptor.addChild(root_1, stream_pattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:456:4: ( protected_expr ( NL )? QUESTION_MARK )=> protected_expr ( NL )? QUESTION_MARK ( ( NL )? pattern )?
                    {
                    pushFollow(FOLLOW_protected_expr_in_bracket_pattern2044);
                    protected_expr48=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr48.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:457:18: ( NL )?
                    int alt19=2;
                    int LA19_0 = input.LA(1);

                    if ( (LA19_0==NL) ) {
                        alt19=1;
                    }
                    switch (alt19) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:457:18: NL
                            {
                            NL49=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2046); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL49);


                            }
                            break;

                    }

                    QUESTION_MARK50=(Token)match(input,QUESTION_MARK,FOLLOW_QUESTION_MARK_in_bracket_pattern2049); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION_MARK.add(QUESTION_MARK50);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:457:36: ( ( NL )? pattern )?
                    int alt21=2;
                    int LA21_0 = input.LA(1);

                    if ( (LA21_0==NL) ) {
                        int LA21_1 = input.LA(2);

                        if ( (LA21_1==L_exception||(LA21_1>=L_true && LA21_1<=L_false)||LA21_1==L_nil||LA21_1==MINUS||(LA21_1>=A_ELLIPSIS && LA21_1<=U_ELLIPSIS)||(LA21_1>=Constr && LA21_1<=Id)||LA21_1==Num||(LA21_1>=String && LA21_1<=ROUND_BRACKET_OPEN)||LA21_1==SQUARE_BRACKET_OPEN||LA21_1==CURLY_BRACKET_OPEN||LA21_1==UNDERSCORE) ) {
                            alt21=1;
                        }
                    }
                    else if ( (LA21_0==L_exception||(LA21_0>=L_true && LA21_0<=L_false)||LA21_0==L_nil||LA21_0==MINUS||(LA21_0>=A_ELLIPSIS && LA21_0<=U_ELLIPSIS)||(LA21_0>=Constr && LA21_0<=Id)||LA21_0==Num||(LA21_0>=String && LA21_0<=ROUND_BRACKET_OPEN)||LA21_0==SQUARE_BRACKET_OPEN||LA21_0==CURLY_BRACKET_OPEN||LA21_0==UNDERSCORE) ) {
                        alt21=1;
                    }
                    switch (alt21) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:457:37: ( NL )? pattern
                            {
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:457:37: ( NL )?
                            int alt20=2;
                            int LA20_0 = input.LA(1);

                            if ( (LA20_0==NL) ) {
                                alt20=1;
                            }
                            switch (alt20) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:457:37: NL
                                    {
                                    NL51=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2052); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL51);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_pattern_in_bracket_pattern2055);
                            pattern52=pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pattern.add(pattern52.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: pattern, protected_expr, QUESTION_MARK
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 457:51: -> ^( QUESTION_MARK protected_expr ( pattern )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:457:54: ^( QUESTION_MARK protected_expr ( pattern )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_QUESTION_MARK.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_protected_expr.nextTree());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:457:85: ( pattern )?
                        if ( stream_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_pattern.nextTree());

                        }
                        stream_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:458:4: ( protected_expr ( NL )? EXCLAMATION_MARK )=> protected_expr ( NL )? EXCLAMATION_MARK ( ( NL )? pattern )?
                    {
                    pushFollow(FOLLOW_protected_expr_in_bracket_pattern2087);
                    protected_expr53=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr53.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:459:18: ( NL )?
                    int alt22=2;
                    int LA22_0 = input.LA(1);

                    if ( (LA22_0==NL) ) {
                        alt22=1;
                    }
                    switch (alt22) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:459:18: NL
                            {
                            NL54=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2089); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL54);


                            }
                            break;

                    }

                    EXCLAMATION_MARK55=(Token)match(input,EXCLAMATION_MARK,FOLLOW_EXCLAMATION_MARK_in_bracket_pattern2092); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EXCLAMATION_MARK.add(EXCLAMATION_MARK55);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:459:39: ( ( NL )? pattern )?
                    int alt24=2;
                    int LA24_0 = input.LA(1);

                    if ( (LA24_0==NL) ) {
                        int LA24_1 = input.LA(2);

                        if ( (LA24_1==L_exception||(LA24_1>=L_true && LA24_1<=L_false)||LA24_1==L_nil||LA24_1==MINUS||(LA24_1>=A_ELLIPSIS && LA24_1<=U_ELLIPSIS)||(LA24_1>=Constr && LA24_1<=Id)||LA24_1==Num||(LA24_1>=String && LA24_1<=ROUND_BRACKET_OPEN)||LA24_1==SQUARE_BRACKET_OPEN||LA24_1==CURLY_BRACKET_OPEN||LA24_1==UNDERSCORE) ) {
                            alt24=1;
                        }
                    }
                    else if ( (LA24_0==L_exception||(LA24_0>=L_true && LA24_0<=L_false)||LA24_0==L_nil||LA24_0==MINUS||(LA24_0>=A_ELLIPSIS && LA24_0<=U_ELLIPSIS)||(LA24_0>=Constr && LA24_0<=Id)||LA24_0==Num||(LA24_0>=String && LA24_0<=ROUND_BRACKET_OPEN)||LA24_0==SQUARE_BRACKET_OPEN||LA24_0==CURLY_BRACKET_OPEN||LA24_0==UNDERSCORE) ) {
                        alt24=1;
                    }
                    switch (alt24) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:459:40: ( NL )? pattern
                            {
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:459:40: ( NL )?
                            int alt23=2;
                            int LA23_0 = input.LA(1);

                            if ( (LA23_0==NL) ) {
                                alt23=1;
                            }
                            switch (alt23) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:459:40: NL
                                    {
                                    NL56=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2095); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL56);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_pattern_in_bracket_pattern2098);
                            pattern57=pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pattern.add(pattern57.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: pattern, EXCLAMATION_MARK, protected_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 459:54: -> ^( EXCLAMATION_MARK protected_expr ( pattern )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:459:57: ^( EXCLAMATION_MARK protected_expr ( pattern )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_EXCLAMATION_MARK.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_protected_expr.nextTree());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:459:91: ( pattern )?
                        if ( stream_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_pattern.nextTree());

                        }
                        stream_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:460:4: ( Id pattern )=> Id pattern
                    {
                    Id58=(Token)match(input,Id,FOLLOW_Id_in_bracket_pattern2124); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id58);

                    pushFollow(FOLLOW_pattern_in_bracket_pattern2126);
                    pattern59=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern59.getTree());


                    // AST REWRITE
                    // elements: Id, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 460:31: -> ^( INNERVALUE_PATTERN Id pattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:460:34: ^( INNERVALUE_PATTERN Id pattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERVALUE_PATTERN, "INNERVALUE_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());
                        adaptor.addChild(root_1, stream_pattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:461:4: L_val ( NL )? protected_expr_nc
                    {
                    L_val60=(Token)match(input,L_val,FOLLOW_L_val_in_bracket_pattern2141); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_val.add(L_val60);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:461:10: ( NL )?
                    int alt25=2;
                    int LA25_0 = input.LA(1);

                    if ( (LA25_0==NL) ) {
                        alt25=1;
                    }
                    switch (alt25) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:461:10: NL
                            {
                            NL61=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2143); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL61);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_bracket_pattern2146);
                    protected_expr_nc62=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc62.getTree());


                    // AST REWRITE
                    // elements: L_val, protected_expr_nc
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 461:32: -> ^( L_val protected_expr_nc )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:461:35: ^( L_val protected_expr_nc )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_L_val.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_protected_expr_nc.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:462:10: L_for ( NL )? ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )? L_end
                    {
                    L_for63=(Token)match(input,L_for,FOLLOW_L_for_in_bracket_pattern2165); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_for.add(L_for63);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:462:16: ( NL )?
                    int alt26=2;
                    int LA26_0 = input.LA(1);

                    if ( (LA26_0==NL) ) {
                        alt26=1;
                    }
                    switch (alt26) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:462:16: NL
                            {
                            NL64=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2167); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL64);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:462:20: ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )?
                    int alt31=2;
                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==L_begin||(LA31_0>=L_obj && LA31_0<=L_if)||(LA31_0>=L_while && LA31_0<=L_for)||LA31_0==L_match||LA31_0==L_val||LA31_0==L_exception||LA31_0==L_try||(LA31_0>=L_concurrent && LA31_0<=L_lazy)||(LA31_0>=L_true && LA31_0<=L_nil)||LA31_0==L_typeof||LA31_0==L_not||(LA31_0>=L_root && LA31_0<=L_lens)||LA31_0==MINUS||(LA31_0>=A_ELLIPSIS && LA31_0<=U_ELLIPSIS)||LA31_0==L_force||(LA31_0>=Constr && LA31_0<=Id)||(LA31_0>=Float && LA31_0<=Num)||(LA31_0>=String && LA31_0<=ROUND_BRACKET_OPEN)||LA31_0==SQUARE_BRACKET_OPEN||LA31_0==CURLY_BRACKET_OPEN||LA31_0==UNDERSCORE) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:462:21: bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )?
                            {
                            pushFollow(FOLLOW_bracket_pattern_in_bracket_pattern2171);
                            bracket_pattern65=bracket_pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern65.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:462:37: ( ( NL )? COMMA ( NL )? bracket_pattern )*
                            loop29:
                            do {
                                int alt29=2;
                                int LA29_0 = input.LA(1);

                                if ( (LA29_0==NL) ) {
                                    int LA29_1 = input.LA(2);

                                    if ( (LA29_1==COMMA) ) {
                                        alt29=1;
                                    }


                                }
                                else if ( (LA29_0==COMMA) ) {
                                    alt29=1;
                                }


                                switch (alt29) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:462:39: ( NL )? COMMA ( NL )? bracket_pattern
                            	    {
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:462:39: ( NL )?
                            	    int alt27=2;
                            	    int LA27_0 = input.LA(1);

                            	    if ( (LA27_0==NL) ) {
                            	        alt27=1;
                            	    }
                            	    switch (alt27) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:462:39: NL
                            	            {
                            	            NL66=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2175); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL66);


                            	            }
                            	            break;

                            	    }

                            	    COMMA67=(Token)match(input,COMMA,FOLLOW_COMMA_in_bracket_pattern2178); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA67);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:462:49: ( NL )?
                            	    int alt28=2;
                            	    int LA28_0 = input.LA(1);

                            	    if ( (LA28_0==NL) ) {
                            	        alt28=1;
                            	    }
                            	    switch (alt28) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:462:49: NL
                            	            {
                            	            NL68=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2180); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL68);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_bracket_pattern_in_bracket_pattern2183);
                            	    bracket_pattern69=bracket_pattern();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern69.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop29;
                                }
                            } while (true);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:462:72: ( NL )?
                            int alt30=2;
                            int LA30_0 = input.LA(1);

                            if ( (LA30_0==NL) ) {
                                alt30=1;
                            }
                            switch (alt30) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:462:72: NL
                                    {
                                    NL70=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2188); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL70);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    L_end71=(Token)match(input,L_end,FOLLOW_L_end_in_bracket_pattern2193); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_end.add(L_end71);



                    // AST REWRITE
                    // elements: bracket_pattern, L_for
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 462:84: -> ^( L_for ( bracket_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:462:87: ^( L_for ( bracket_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_L_for.nextNode(), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:462:95: ( bracket_pattern )*
                        while ( stream_bracket_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_bracket_pattern.nextTree());

                        }
                        stream_bracket_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:463:4: ( pattern ( NL )? L_if )=> pattern ( NL )? L_if ( NL )? protected_expr_nc
                    {
                    pushFollow(FOLLOW_pattern_in_bracket_pattern2218);
                    pattern72=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern72.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:463:34: ( NL )?
                    int alt32=2;
                    int LA32_0 = input.LA(1);

                    if ( (LA32_0==NL) ) {
                        alt32=1;
                    }
                    switch (alt32) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:463:34: NL
                            {
                            NL73=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2220); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL73);


                            }
                            break;

                    }

                    L_if74=(Token)match(input,L_if,FOLLOW_L_if_in_bracket_pattern2223); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_if.add(L_if74);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:463:43: ( NL )?
                    int alt33=2;
                    int LA33_0 = input.LA(1);

                    if ( (LA33_0==NL) ) {
                        alt33=1;
                    }
                    switch (alt33) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:463:43: NL
                            {
                            NL75=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2225); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL75);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_bracket_pattern2228);
                    protected_expr_nc76=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc76.getTree());


                    // AST REWRITE
                    // elements: protected_expr_nc, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 463:65: -> ^( IF_PATTERN pattern protected_expr_nc )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:463:68: ^( IF_PATTERN pattern protected_expr_nc )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IF_PATTERN, "IF_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_pattern.nextTree());
                        adaptor.addChild(root_1, stream_protected_expr_nc.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:464:4: ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation
                    {
                    pushFollow(FOLLOW_pattern_in_bracket_pattern2254);
                    pattern77=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern77.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:464:33: ( NL )?
                    int alt34=2;
                    int LA34_0 = input.LA(1);

                    if ( (LA34_0==NL) ) {
                        alt34=1;
                    }
                    switch (alt34) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:464:33: NL
                            {
                            NL78=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2256); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL78);


                            }
                            break;

                    }

                    char_literal79=(Token)match(input,COLON,FOLLOW_COLON_in_bracket_pattern2259); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(char_literal79);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:464:41: ( NL )?
                    int alt35=2;
                    int LA35_0 = input.LA(1);

                    if ( (LA35_0==NL) ) {
                        alt35=1;
                    }
                    switch (alt35) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:464:41: NL
                            {
                            NL80=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2261); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL80);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeannotation_in_bracket_pattern2264);
                    typeannotation81=typeannotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeannotation.add(typeannotation81.getTree());


                    // AST REWRITE
                    // elements: pattern, typeannotation
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 464:60: -> ^( TYPE_PATTERN typeannotation pattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:464:63: ^( TYPE_PATTERN typeannotation pattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_PATTERN, "TYPE_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_typeannotation.nextTree());
                        adaptor.addChild(root_1, stream_pattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:465:4: pattern
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pattern_in_bracket_pattern2279);
                    pattern82=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pattern82.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bracket_pattern"

    public static class arrow_or_assign_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrow_or_assign"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:467:1: arrow_or_assign : ( token_ARROW -> ^( ARROW ) | ASSIGN -> ^( ASSIGN ) );
    public final babel17Parser.arrow_or_assign_return arrow_or_assign() throws RecognitionException {
        babel17Parser.arrow_or_assign_return retval = new babel17Parser.arrow_or_assign_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ASSIGN84=null;
        babel17Parser.token_ARROW_return token_ARROW83 = null;


        CommonTree ASSIGN84_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_token_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_ARROW");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:468:2: ( token_ARROW -> ^( ARROW ) | ASSIGN -> ^( ASSIGN ) )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( ((LA37_0>=A_ARROW && LA37_0<=U_ARROW)) ) {
                alt37=1;
            }
            else if ( (LA37_0==ASSIGN) ) {
                alt37=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;
            }
            switch (alt37) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:468:4: token_ARROW
                    {
                    pushFollow(FOLLOW_token_ARROW_in_arrow_or_assign2289);
                    token_ARROW83=token_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_ARROW.add(token_ARROW83.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 468:16: -> ^( ARROW )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:468:19: ^( ARROW )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARROW, "ARROW"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:469:4: ASSIGN
                    {
                    ASSIGN84=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_arrow_or_assign2300); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN84);



                    // AST REWRITE
                    // elements: ASSIGN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 469:11: -> ^( ASSIGN )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:469:14: ^( ASSIGN )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_ASSIGN.nextNode(), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrow_or_assign"

    public static class mselem_pattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mselem_pattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:471:1: mselem_pattern : bracket_pattern ( ( NL )? arrow_or_assign ( NL )? bracket_pattern )? -> ^( NIL_TOKEN ^( NIL_TOKEN ( bracket_pattern )* ) ( arrow_or_assign )* ) ;
    public final babel17Parser.mselem_pattern_return mselem_pattern() throws RecognitionException {
        babel17Parser.mselem_pattern_return retval = new babel17Parser.mselem_pattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL86=null;
        Token NL88=null;
        babel17Parser.bracket_pattern_return bracket_pattern85 = null;

        babel17Parser.arrow_or_assign_return arrow_or_assign87 = null;

        babel17Parser.bracket_pattern_return bracket_pattern89 = null;


        CommonTree NL86_tree=null;
        CommonTree NL88_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_arrow_or_assign=new RewriteRuleSubtreeStream(adaptor,"rule arrow_or_assign");
        RewriteRuleSubtreeStream stream_bracket_pattern=new RewriteRuleSubtreeStream(adaptor,"rule bracket_pattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:472:2: ( bracket_pattern ( ( NL )? arrow_or_assign ( NL )? bracket_pattern )? -> ^( NIL_TOKEN ^( NIL_TOKEN ( bracket_pattern )* ) ( arrow_or_assign )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:472:4: bracket_pattern ( ( NL )? arrow_or_assign ( NL )? bracket_pattern )?
            {
            pushFollow(FOLLOW_bracket_pattern_in_mselem_pattern2315);
            bracket_pattern85=bracket_pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern85.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:472:20: ( ( NL )? arrow_or_assign ( NL )? bracket_pattern )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==NL) ) {
                int LA40_1 = input.LA(2);

                if ( (LA40_1==ASSIGN||(LA40_1>=A_ARROW && LA40_1<=U_ARROW)) ) {
                    alt40=1;
                }
            }
            else if ( (LA40_0==ASSIGN||(LA40_0>=A_ARROW && LA40_0<=U_ARROW)) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:472:21: ( NL )? arrow_or_assign ( NL )? bracket_pattern
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:472:21: ( NL )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==NL) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:472:21: NL
                            {
                            NL86=(Token)match(input,NL,FOLLOW_NL_in_mselem_pattern2318); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL86);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_arrow_or_assign_in_mselem_pattern2321);
                    arrow_or_assign87=arrow_or_assign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrow_or_assign.add(arrow_or_assign87.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:472:41: ( NL )?
                    int alt39=2;
                    int LA39_0 = input.LA(1);

                    if ( (LA39_0==NL) ) {
                        alt39=1;
                    }
                    switch (alt39) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:472:41: NL
                            {
                            NL88=(Token)match(input,NL,FOLLOW_NL_in_mselem_pattern2323); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL88);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_bracket_pattern_in_mselem_pattern2326);
                    bracket_pattern89=bracket_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern89.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: arrow_or_assign, bracket_pattern
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 473:3: -> ^( NIL_TOKEN ^( NIL_TOKEN ( bracket_pattern )* ) ( arrow_or_assign )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:6: ^( NIL_TOKEN ^( NIL_TOKEN ( bracket_pattern )* ) ( arrow_or_assign )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:18: ^( NIL_TOKEN ( bracket_pattern )* )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:30: ( bracket_pattern )*
                while ( stream_bracket_pattern.hasNext() ) {
                    adaptor.addChild(root_2, stream_bracket_pattern.nextTree());

                }
                stream_bracket_pattern.reset();

                adaptor.addChild(root_1, root_2);
                }
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:48: ( arrow_or_assign )*
                while ( stream_arrow_or_assign.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrow_or_assign.nextTree());

                }
                stream_arrow_or_assign.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mselem_pattern"

    public static class primitive_pattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitive_pattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:1: primitive_pattern : ( Id | '_' -> ANY | String | Num | L_true | L_false | L_nil | '-' ( NL )? Num -> ^( UMINUS Num ) | '[' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )? ']' -> ^( SQUARE_LIST ( bracket_pattern )* ) | '(' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) ) | '{' ( NL )? ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) );
    public final babel17Parser.primitive_pattern_return primitive_pattern() throws RecognitionException {
        babel17Parser.primitive_pattern_return retval = new babel17Parser.primitive_pattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id90=null;
        Token char_literal91=null;
        Token String92=null;
        Token Num93=null;
        Token L_true94=null;
        Token L_false95=null;
        Token L_nil96=null;
        Token char_literal97=null;
        Token NL98=null;
        Token Num99=null;
        Token char_literal100=null;
        Token NL101=null;
        Token NL103=null;
        Token COMMA104=null;
        Token NL105=null;
        Token NL107=null;
        Token char_literal108=null;
        Token char_literal109=null;
        Token NL110=null;
        Token NL112=null;
        Token COMMA113=null;
        Token NL114=null;
        Token NL116=null;
        Token COMMA117=null;
        Token NL118=null;
        Token char_literal119=null;
        Token char_literal120=null;
        Token NL121=null;
        Token NL123=null;
        Token COMMA124=null;
        Token NL125=null;
        Token NL127=null;
        Token char_literal128=null;
        Token char_literal129=null;
        Token NL130=null;
        Token NL132=null;
        Token char_literal133=null;
        babel17Parser.bracket_pattern_return bracket_pattern102 = null;

        babel17Parser.bracket_pattern_return bracket_pattern106 = null;

        babel17Parser.bracket_pattern_return bracket_pattern111 = null;

        babel17Parser.bracket_pattern_return bracket_pattern115 = null;

        babel17Parser.mselem_pattern_return mselem_pattern122 = null;

        babel17Parser.mselem_pattern_return mselem_pattern126 = null;

        babel17Parser.token_ARROW_return token_ARROW131 = null;


        CommonTree Id90_tree=null;
        CommonTree char_literal91_tree=null;
        CommonTree String92_tree=null;
        CommonTree Num93_tree=null;
        CommonTree L_true94_tree=null;
        CommonTree L_false95_tree=null;
        CommonTree L_nil96_tree=null;
        CommonTree char_literal97_tree=null;
        CommonTree NL98_tree=null;
        CommonTree Num99_tree=null;
        CommonTree char_literal100_tree=null;
        CommonTree NL101_tree=null;
        CommonTree NL103_tree=null;
        CommonTree COMMA104_tree=null;
        CommonTree NL105_tree=null;
        CommonTree NL107_tree=null;
        CommonTree char_literal108_tree=null;
        CommonTree char_literal109_tree=null;
        CommonTree NL110_tree=null;
        CommonTree NL112_tree=null;
        CommonTree COMMA113_tree=null;
        CommonTree NL114_tree=null;
        CommonTree NL116_tree=null;
        CommonTree COMMA117_tree=null;
        CommonTree NL118_tree=null;
        CommonTree char_literal119_tree=null;
        CommonTree char_literal120_tree=null;
        CommonTree NL121_tree=null;
        CommonTree NL123_tree=null;
        CommonTree COMMA124_tree=null;
        CommonTree NL125_tree=null;
        CommonTree NL127_tree=null;
        CommonTree char_literal128_tree=null;
        CommonTree char_literal129_tree=null;
        CommonTree NL130_tree=null;
        CommonTree NL132_tree=null;
        CommonTree char_literal133_tree=null;
        RewriteRuleTokenStream stream_CURLY_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_OPEN");
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_CURLY_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_UNDERSCORE=new RewriteRuleTokenStream(adaptor,"token UNDERSCORE");
        RewriteRuleTokenStream stream_Num=new RewriteRuleTokenStream(adaptor,"token Num");
        RewriteRuleTokenStream stream_SQUARE_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token SQUARE_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_SQUARE_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token SQUARE_BRACKET_OPEN");
        RewriteRuleSubtreeStream stream_mselem_pattern=new RewriteRuleSubtreeStream(adaptor,"rule mselem_pattern");
        RewriteRuleSubtreeStream stream_token_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_ARROW");
        RewriteRuleSubtreeStream stream_bracket_pattern=new RewriteRuleSubtreeStream(adaptor,"rule bracket_pattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:2: ( Id | '_' -> ANY | String | Num | L_true | L_false | L_nil | '-' ( NL )? Num -> ^( UMINUS Num ) | '[' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )? ']' -> ^( SQUARE_LIST ( bracket_pattern )* ) | '(' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) ) | '{' ( NL )? ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) )
            int alt64=12;
            alt64 = dfa64.predict(input);
            switch (alt64) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:4: Id
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Id90=(Token)match(input,Id,FOLLOW_Id_in_primitive_pattern2355); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Id90_tree = (CommonTree)adaptor.create(Id90);
                    adaptor.addChild(root_0, Id90_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:477:4: '_'
                    {
                    char_literal91=(Token)match(input,UNDERSCORE,FOLLOW_UNDERSCORE_in_primitive_pattern2360); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNDERSCORE.add(char_literal91);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 477:8: -> ANY
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(ANY, "ANY"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:4: String
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    String92=(Token)match(input,String,FOLLOW_String_in_primitive_pattern2369); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    String92_tree = (CommonTree)adaptor.create(String92);
                    adaptor.addChild(root_0, String92_tree);
                    }

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:479:4: Num
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Num93=(Token)match(input,Num,FOLLOW_Num_in_primitive_pattern2374); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Num93_tree = (CommonTree)adaptor.create(Num93);
                    adaptor.addChild(root_0, Num93_tree);
                    }

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:4: L_true
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_true94=(Token)match(input,L_true,FOLLOW_L_true_in_primitive_pattern2379); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_true94_tree = (CommonTree)adaptor.create(L_true94);
                    adaptor.addChild(root_0, L_true94_tree);
                    }

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:481:4: L_false
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_false95=(Token)match(input,L_false,FOLLOW_L_false_in_primitive_pattern2384); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_false95_tree = (CommonTree)adaptor.create(L_false95);
                    adaptor.addChild(root_0, L_false95_tree);
                    }

                    }
                    break;
                case 7 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:482:4: L_nil
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_nil96=(Token)match(input,L_nil,FOLLOW_L_nil_in_primitive_pattern2389); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_nil96_tree = (CommonTree)adaptor.create(L_nil96);
                    adaptor.addChild(root_0, L_nil96_tree);
                    }

                    }
                    break;
                case 8 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:485:4: '-' ( NL )? Num
                    {
                    char_literal97=(Token)match(input,MINUS,FOLLOW_MINUS_in_primitive_pattern2397); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(char_literal97);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:485:8: ( NL )?
                    int alt41=2;
                    int LA41_0 = input.LA(1);

                    if ( (LA41_0==NL) ) {
                        alt41=1;
                    }
                    switch (alt41) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:485:8: NL
                            {
                            NL98=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2399); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL98);


                            }
                            break;

                    }

                    Num99=(Token)match(input,Num,FOLLOW_Num_in_primitive_pattern2402); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Num.add(Num99);



                    // AST REWRITE
                    // elements: Num
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 485:16: -> ^( UMINUS Num )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:485:19: ^( UMINUS Num )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UMINUS, "UMINUS"), root_1);

                        adaptor.addChild(root_1, stream_Num.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:486:4: '[' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )? ']'
                    {
                    char_literal100=(Token)match(input,SQUARE_BRACKET_OPEN,FOLLOW_SQUARE_BRACKET_OPEN_in_primitive_pattern2415); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_OPEN.add(char_literal100);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:486:9: ( NL )?
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==NL) ) {
                        alt42=1;
                    }
                    switch (alt42) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:486:9: NL
                            {
                            NL101=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2418); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL101);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:486:13: ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )?
                    int alt47=2;
                    int LA47_0 = input.LA(1);

                    if ( (LA47_0==L_begin||(LA47_0>=L_obj && LA47_0<=L_if)||(LA47_0>=L_while && LA47_0<=L_for)||LA47_0==L_match||LA47_0==L_val||LA47_0==L_exception||LA47_0==L_try||(LA47_0>=L_concurrent && LA47_0<=L_lazy)||(LA47_0>=L_true && LA47_0<=L_nil)||LA47_0==L_typeof||LA47_0==L_not||(LA47_0>=L_root && LA47_0<=L_lens)||LA47_0==MINUS||(LA47_0>=A_ELLIPSIS && LA47_0<=U_ELLIPSIS)||LA47_0==L_force||(LA47_0>=Constr && LA47_0<=Id)||(LA47_0>=Float && LA47_0<=Num)||(LA47_0>=String && LA47_0<=ROUND_BRACKET_OPEN)||LA47_0==SQUARE_BRACKET_OPEN||LA47_0==CURLY_BRACKET_OPEN||LA47_0==UNDERSCORE) ) {
                        alt47=1;
                    }
                    switch (alt47) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:486:14: bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )*
                            {
                            pushFollow(FOLLOW_bracket_pattern_in_primitive_pattern2422);
                            bracket_pattern102=bracket_pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern102.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:486:30: ( NL )?
                            int alt43=2;
                            int LA43_0 = input.LA(1);

                            if ( (LA43_0==NL) ) {
                                alt43=1;
                            }
                            switch (alt43) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:486:30: NL
                                    {
                                    NL103=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2424); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL103);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:486:34: ( COMMA ( NL )? bracket_pattern ( NL )? )*
                            loop46:
                            do {
                                int alt46=2;
                                int LA46_0 = input.LA(1);

                                if ( (LA46_0==COMMA) ) {
                                    alt46=1;
                                }


                                switch (alt46) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:486:36: COMMA ( NL )? bracket_pattern ( NL )?
                            	    {
                            	    COMMA104=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitive_pattern2429); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA104);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:486:42: ( NL )?
                            	    int alt44=2;
                            	    int LA44_0 = input.LA(1);

                            	    if ( (LA44_0==NL) ) {
                            	        alt44=1;
                            	    }
                            	    switch (alt44) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:486:42: NL
                            	            {
                            	            NL105=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2431); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL105);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_bracket_pattern_in_primitive_pattern2434);
                            	    bracket_pattern106=bracket_pattern();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern106.getTree());
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:486:62: ( NL )?
                            	    int alt45=2;
                            	    int LA45_0 = input.LA(1);

                            	    if ( (LA45_0==NL) ) {
                            	        alt45=1;
                            	    }
                            	    switch (alt45) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:486:62: NL
                            	            {
                            	            NL107=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2436); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL107);


                            	            }
                            	            break;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop46;
                                }
                            } while (true);


                            }
                            break;

                    }

                    char_literal108=(Token)match(input,SQUARE_BRACKET_CLOSE,FOLLOW_SQUARE_BRACKET_CLOSE_in_primitive_pattern2444); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_CLOSE.add(char_literal108);



                    // AST REWRITE
                    // elements: bracket_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 487:6: -> ^( SQUARE_LIST ( bracket_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:487:9: ^( SQUARE_LIST ( bracket_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SQUARE_LIST, "SQUARE_LIST"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:487:23: ( bracket_pattern )*
                        while ( stream_bracket_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_bracket_pattern.nextTree());

                        }
                        stream_bracket_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:4: '(' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )? ')'
                    {
                    char_literal109=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_primitive_pattern2464); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal109);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:9: ( NL )?
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==NL) ) {
                        alt48=1;
                    }
                    switch (alt48) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:9: NL
                            {
                            NL110=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2467); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL110);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:13: ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )?
                    int alt55=2;
                    int LA55_0 = input.LA(1);

                    if ( (LA55_0==L_begin||(LA55_0>=L_obj && LA55_0<=L_if)||(LA55_0>=L_while && LA55_0<=L_for)||LA55_0==L_match||LA55_0==L_val||LA55_0==L_exception||LA55_0==L_try||(LA55_0>=L_concurrent && LA55_0<=L_lazy)||(LA55_0>=L_true && LA55_0<=L_nil)||LA55_0==L_typeof||LA55_0==L_not||(LA55_0>=L_root && LA55_0<=L_lens)||LA55_0==MINUS||(LA55_0>=A_ELLIPSIS && LA55_0<=U_ELLIPSIS)||LA55_0==L_force||(LA55_0>=Constr && LA55_0<=Id)||(LA55_0>=Float && LA55_0<=Num)||(LA55_0>=String && LA55_0<=ROUND_BRACKET_OPEN)||LA55_0==SQUARE_BRACKET_OPEN||LA55_0==CURLY_BRACKET_OPEN||LA55_0==UNDERSCORE) ) {
                        alt55=1;
                    }
                    switch (alt55) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:14: bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )?
                            {
                            pushFollow(FOLLOW_bracket_pattern_in_primitive_pattern2471);
                            bracket_pattern111=bracket_pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern111.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:30: ( NL )?
                            int alt49=2;
                            int LA49_0 = input.LA(1);

                            if ( (LA49_0==NL) ) {
                                alt49=1;
                            }
                            switch (alt49) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:30: NL
                                    {
                                    NL112=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2473); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL112);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:34: ( COMMA ( NL )? bracket_pattern ( NL )? )*
                            loop52:
                            do {
                                int alt52=2;
                                int LA52_0 = input.LA(1);

                                if ( (LA52_0==COMMA) ) {
                                    int LA52_1 = input.LA(2);

                                    if ( (LA52_1==NL) ) {
                                        int LA52_3 = input.LA(3);

                                        if ( (LA52_3==L_begin||(LA52_3>=L_obj && LA52_3<=L_if)||(LA52_3>=L_while && LA52_3<=L_for)||LA52_3==L_match||LA52_3==L_val||LA52_3==L_exception||LA52_3==L_try||(LA52_3>=L_concurrent && LA52_3<=L_lazy)||(LA52_3>=L_true && LA52_3<=L_nil)||LA52_3==L_typeof||LA52_3==L_not||(LA52_3>=L_root && LA52_3<=L_lens)||LA52_3==MINUS||(LA52_3>=A_ELLIPSIS && LA52_3<=U_ELLIPSIS)||LA52_3==L_force||(LA52_3>=Constr && LA52_3<=Id)||(LA52_3>=Float && LA52_3<=Num)||(LA52_3>=String && LA52_3<=ROUND_BRACKET_OPEN)||LA52_3==SQUARE_BRACKET_OPEN||LA52_3==CURLY_BRACKET_OPEN||LA52_3==UNDERSCORE) ) {
                                            alt52=1;
                                        }


                                    }
                                    else if ( (LA52_1==L_begin||(LA52_1>=L_obj && LA52_1<=L_if)||(LA52_1>=L_while && LA52_1<=L_for)||LA52_1==L_match||LA52_1==L_val||LA52_1==L_exception||LA52_1==L_try||(LA52_1>=L_concurrent && LA52_1<=L_lazy)||(LA52_1>=L_true && LA52_1<=L_nil)||LA52_1==L_typeof||LA52_1==L_not||(LA52_1>=L_root && LA52_1<=L_lens)||LA52_1==MINUS||(LA52_1>=A_ELLIPSIS && LA52_1<=U_ELLIPSIS)||LA52_1==L_force||(LA52_1>=Constr && LA52_1<=Id)||(LA52_1>=Float && LA52_1<=Num)||(LA52_1>=String && LA52_1<=ROUND_BRACKET_OPEN)||LA52_1==SQUARE_BRACKET_OPEN||LA52_1==CURLY_BRACKET_OPEN||LA52_1==UNDERSCORE) ) {
                                        alt52=1;
                                    }


                                }


                                switch (alt52) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:36: COMMA ( NL )? bracket_pattern ( NL )?
                            	    {
                            	    COMMA113=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitive_pattern2478); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA113);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:43: ( NL )?
                            	    int alt50=2;
                            	    int LA50_0 = input.LA(1);

                            	    if ( (LA50_0==NL) ) {
                            	        alt50=1;
                            	    }
                            	    switch (alt50) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:43: NL
                            	            {
                            	            NL114=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2481); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL114);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_bracket_pattern_in_primitive_pattern2484);
                            	    bracket_pattern115=bracket_pattern();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern115.getTree());
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:63: ( NL )?
                            	    int alt51=2;
                            	    int LA51_0 = input.LA(1);

                            	    if ( (LA51_0==NL) ) {
                            	        alt51=1;
                            	    }
                            	    switch (alt51) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:63: NL
                            	            {
                            	            NL116=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2486); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL116);


                            	            }
                            	            break;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop52;
                                }
                            } while (true);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:69: ( COMMA ( NL )? )?
                            int alt54=2;
                            int LA54_0 = input.LA(1);

                            if ( (LA54_0==COMMA) ) {
                                alt54=1;
                            }
                            switch (alt54) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:70: COMMA ( NL )?
                                    {
                                    COMMA117=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitive_pattern2492); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA117);

                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:76: ( NL )?
                                    int alt53=2;
                                    int LA53_0 = input.LA(1);

                                    if ( (LA53_0==NL) ) {
                                        alt53=1;
                                    }
                                    switch (alt53) {
                                        case 1 :
                                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:76: NL
                                            {
                                            NL118=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2494); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_NL.add(NL118);


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    char_literal119=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_primitive_pattern2501); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal119);



                    // AST REWRITE
                    // elements: bracket_pattern, COMMA
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 489:5: -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:489:8: ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROUND_LIST, "ROUND_LIST"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:489:21: ^( NIL_TOKEN ( COMMA )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:489:33: ( COMMA )*
                        while ( stream_COMMA.hasNext() ) {
                            adaptor.addChild(root_2, stream_COMMA.nextNode());

                        }
                        stream_COMMA.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:489:41: ^( NIL_TOKEN ( bracket_pattern )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:489:53: ( bracket_pattern )*
                        while ( stream_bracket_pattern.hasNext() ) {
                            adaptor.addChild(root_2, stream_bracket_pattern.nextTree());

                        }
                        stream_bracket_pattern.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:490:4: '{' ( NL )? ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )? '}'
                    {
                    char_literal120=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_primitive_pattern2533); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal120);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:490:9: ( NL )?
                    int alt56=2;
                    int LA56_0 = input.LA(1);

                    if ( (LA56_0==NL) ) {
                        alt56=1;
                    }
                    switch (alt56) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:490:9: NL
                            {
                            NL121=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2536); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL121);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:490:13: ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )?
                    int alt61=2;
                    int LA61_0 = input.LA(1);

                    if ( (LA61_0==L_begin||(LA61_0>=L_obj && LA61_0<=L_if)||(LA61_0>=L_while && LA61_0<=L_for)||LA61_0==L_match||LA61_0==L_val||LA61_0==L_exception||LA61_0==L_try||(LA61_0>=L_concurrent && LA61_0<=L_lazy)||(LA61_0>=L_true && LA61_0<=L_nil)||LA61_0==L_typeof||LA61_0==L_not||(LA61_0>=L_root && LA61_0<=L_lens)||LA61_0==MINUS||(LA61_0>=A_ELLIPSIS && LA61_0<=U_ELLIPSIS)||LA61_0==L_force||(LA61_0>=Constr && LA61_0<=Id)||(LA61_0>=Float && LA61_0<=Num)||(LA61_0>=String && LA61_0<=ROUND_BRACKET_OPEN)||LA61_0==SQUARE_BRACKET_OPEN||LA61_0==CURLY_BRACKET_OPEN||LA61_0==UNDERSCORE) ) {
                        alt61=1;
                    }
                    switch (alt61) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:490:14: mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )*
                            {
                            pushFollow(FOLLOW_mselem_pattern_in_primitive_pattern2540);
                            mselem_pattern122=mselem_pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_mselem_pattern.add(mselem_pattern122.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:490:29: ( NL )?
                            int alt57=2;
                            int LA57_0 = input.LA(1);

                            if ( (LA57_0==NL) ) {
                                alt57=1;
                            }
                            switch (alt57) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:490:29: NL
                                    {
                                    NL123=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2542); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL123);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:490:33: ( COMMA ( NL )? mselem_pattern ( NL )? )*
                            loop60:
                            do {
                                int alt60=2;
                                int LA60_0 = input.LA(1);

                                if ( (LA60_0==COMMA) ) {
                                    alt60=1;
                                }


                                switch (alt60) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:490:35: COMMA ( NL )? mselem_pattern ( NL )?
                            	    {
                            	    COMMA124=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitive_pattern2547); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA124);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:490:42: ( NL )?
                            	    int alt58=2;
                            	    int LA58_0 = input.LA(1);

                            	    if ( (LA58_0==NL) ) {
                            	        alt58=1;
                            	    }
                            	    switch (alt58) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:490:42: NL
                            	            {
                            	            NL125=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2550); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL125);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_mselem_pattern_in_primitive_pattern2553);
                            	    mselem_pattern126=mselem_pattern();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_mselem_pattern.add(mselem_pattern126.getTree());
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:490:61: ( NL )?
                            	    int alt59=2;
                            	    int LA59_0 = input.LA(1);

                            	    if ( (LA59_0==NL) ) {
                            	        alt59=1;
                            	    }
                            	    switch (alt59) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:490:61: NL
                            	            {
                            	            NL127=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2555); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL127);


                            	            }
                            	            break;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop60;
                                }
                            } while (true);


                            }
                            break;

                    }

                    char_literal128=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_primitive_pattern2563); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal128);



                    // AST REWRITE
                    // elements: mselem_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 491:5: -> ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:491:8: ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MAP_OR_SET_OR_OBJ, "MAP_OR_SET_OR_OBJ"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:491:28: ( mselem_pattern )*
                        while ( stream_mselem_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_mselem_pattern.nextTree());

                        }
                        stream_mselem_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:492:4: '{' ( NL )? token_ARROW ( NL )? '}'
                    {
                    char_literal129=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_primitive_pattern2581); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal129);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:492:8: ( NL )?
                    int alt62=2;
                    int LA62_0 = input.LA(1);

                    if ( (LA62_0==NL) ) {
                        alt62=1;
                    }
                    switch (alt62) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:492:8: NL
                            {
                            NL130=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2583); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL130);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_token_ARROW_in_primitive_pattern2586);
                    token_ARROW131=token_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_ARROW.add(token_ARROW131.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:492:24: ( NL )?
                    int alt63=2;
                    int LA63_0 = input.LA(1);

                    if ( (LA63_0==NL) ) {
                        alt63=1;
                    }
                    switch (alt63) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:492:24: NL
                            {
                            NL132=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2588); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL132);


                            }
                            break;

                    }

                    char_literal133=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_primitive_pattern2591); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal133);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 492:32: -> ^( EMPTY_MAP )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:492:35: ^( EMPTY_MAP )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EMPTY_MAP, "EMPTY_MAP"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "primitive_pattern"

    public static class sep_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sep"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:495:1: sep : ( NL | SC )+ ;
    public final babel17Parser.sep_return sep() throws RecognitionException {
        babel17Parser.sep_return retval = new babel17Parser.sep_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set134=null;

        CommonTree set134_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:495:5: ( ( NL | SC )+ )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:495:7: ( NL | SC )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:495:7: ( NL | SC )+
            int cnt65=0;
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==SC||LA65_0==NL) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            	    {
            	    set134=(Token)input.LT(1);
            	    if ( input.LA(1)==SC||input.LA(1)==NL ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set134));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt65 >= 1 ) break loop65;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(65, input);
                        throw eee;
                }
                cnt65++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sep"

    public static class block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:497:1: block : ( ( sep )? statement ( sep statement )* ( sep )? -> ^( BLOCK ( statement )* ) | ( sep )? -> ^( BLOCK ) );
    public final babel17Parser.block_return block() throws RecognitionException {
        babel17Parser.block_return retval = new babel17Parser.block_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.sep_return sep135 = null;

        babel17Parser.statement_return statement136 = null;

        babel17Parser.sep_return sep137 = null;

        babel17Parser.statement_return statement138 = null;

        babel17Parser.sep_return sep139 = null;

        babel17Parser.sep_return sep140 = null;


        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_sep=new RewriteRuleSubtreeStream(adaptor,"rule sep");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:497:8: ( ( sep )? statement ( sep statement )* ( sep )? -> ^( BLOCK ( statement )* ) | ( sep )? -> ^( BLOCK ) )
            int alt70=2;
            alt70 = dfa70.predict(input);
            switch (alt70) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:497:10: ( sep )? statement ( sep statement )* ( sep )?
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:497:10: ( sep )?
                    int alt66=2;
                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==SC||LA66_0==NL) ) {
                        alt66=1;
                    }
                    switch (alt66) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:497:10: sep
                            {
                            pushFollow(FOLLOW_sep_in_block2623);
                            sep135=sep();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_sep.add(sep135.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_statement_in_block2626);
                    statement136=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement136.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:497:25: ( sep statement )*
                    loop67:
                    do {
                        int alt67=2;
                        alt67 = dfa67.predict(input);
                        switch (alt67) {
                    	case 1 :
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:497:26: sep statement
                    	    {
                    	    pushFollow(FOLLOW_sep_in_block2629);
                    	    sep137=sep();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_sep.add(sep137.getTree());
                    	    pushFollow(FOLLOW_statement_in_block2631);
                    	    statement138=statement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_statement.add(statement138.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop67;
                        }
                    } while (true);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:497:42: ( sep )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==SC||LA68_0==NL) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:497:42: sep
                            {
                            pushFollow(FOLLOW_sep_in_block2635);
                            sep139=sep();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_sep.add(sep139.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 497:47: -> ^( BLOCK ( statement )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:497:50: ^( BLOCK ( statement )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK, "BLOCK"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:497:58: ( statement )*
                        while ( stream_statement.hasNext() ) {
                            adaptor.addChild(root_1, stream_statement.nextTree());

                        }
                        stream_statement.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:498:4: ( sep )?
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:498:4: ( sep )?
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==SC||LA69_0==NL) ) {
                        alt69=1;
                    }
                    switch (alt69) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:498:4: sep
                            {
                            pushFollow(FOLLOW_sep_in_block2651);
                            sep140=sep();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_sep.add(sep140.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 498:9: -> ^( BLOCK )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:498:12: ^( BLOCK )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK, "BLOCK"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class pure_block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pure_block"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:500:1: pure_block : statement ( sep statement )* -> ^( BLOCK ( statement )* ) ;
    public final babel17Parser.pure_block_return pure_block() throws RecognitionException {
        babel17Parser.pure_block_return retval = new babel17Parser.pure_block_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.statement_return statement141 = null;

        babel17Parser.sep_return sep142 = null;

        babel17Parser.statement_return statement143 = null;


        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_sep=new RewriteRuleSubtreeStream(adaptor,"rule sep");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:501:2: ( statement ( sep statement )* -> ^( BLOCK ( statement )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:501:4: statement ( sep statement )*
            {
            pushFollow(FOLLOW_statement_in_pure_block2668);
            statement141=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_statement.add(statement141.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:501:14: ( sep statement )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==NL) ) {
                    int LA71_1 = input.LA(2);

                    if ( (LA71_1==L_begin||(LA71_1>=L_obj && LA71_1<=L_if)||(LA71_1>=L_while && LA71_1<=L_for)||(LA71_1>=L_yield && LA71_1<=L_match)||(LA71_1>=L_val && LA71_1<=L_def)||LA71_1==L_exception||LA71_1==L_try||(LA71_1>=L_concurrent && LA71_1<=L_nil)||(LA71_1>=L_module && LA71_1<=L_import)||LA71_1==L_not||(LA71_1>=L_root && LA71_1<=L_lens)||LA71_1==SC||LA71_1==MINUS||(LA71_1>=A_ELLIPSIS && LA71_1<=U_ELLIPSIS)||LA71_1==L_force||(LA71_1>=NL && LA71_1<=Id)||(LA71_1>=Float && LA71_1<=Num)||(LA71_1>=String && LA71_1<=ROUND_BRACKET_OPEN)||LA71_1==SQUARE_BRACKET_OPEN||LA71_1==CURLY_BRACKET_OPEN||LA71_1==UNDERSCORE||(LA71_1>=PRAGMA_LOG && LA71_1<=PRAGMA_CATCH)) ) {
                        alt71=1;
                    }


                }
                else if ( (LA71_0==SC) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:501:15: sep statement
            	    {
            	    pushFollow(FOLLOW_sep_in_pure_block2671);
            	    sep142=sep();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sep.add(sep142.getTree());
            	    pushFollow(FOLLOW_statement_in_pure_block2673);
            	    statement143=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_statement.add(statement143.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);



            // AST REWRITE
            // elements: statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 501:31: -> ^( BLOCK ( statement )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:501:34: ^( BLOCK ( statement )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK, "BLOCK"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:501:42: ( statement )*
                while ( stream_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_statement.nextTree());

                }
                stream_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pure_block"

    public static class statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:503:1: statement : ( st_typedef | st_val | st_def | st_yield | st_memoize | st_private | st_module | st_import | expr_or_assign | PRAGMA_PRINT ( NL )? expr -> ^( PRAGMA_PRINT expr ) | PRAGMA_LOG ( NL )? expr -> ^( PRAGMA_LOG expr ) | PRAGMA_PROFILE ( NL )? expr -> ^( PRAGMA_PROFILE expr ) | PRAGMA_ASSERT ( NL )? expr -> ^( PRAGMA_ASSERT expr ) | PRAGMA_CATCH ( NL )? casepattern ( NL )? L_try ( NL )? COLON ( NL )? expr -> ^( PRAGMA_CATCH expr casepattern ) );
    public final babel17Parser.statement_return statement() throws RecognitionException {
        babel17Parser.statement_return retval = new babel17Parser.statement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PRAGMA_PRINT153=null;
        Token NL154=null;
        Token PRAGMA_LOG156=null;
        Token NL157=null;
        Token PRAGMA_PROFILE159=null;
        Token NL160=null;
        Token PRAGMA_ASSERT162=null;
        Token NL163=null;
        Token PRAGMA_CATCH165=null;
        Token NL166=null;
        Token NL168=null;
        Token L_try169=null;
        Token NL170=null;
        Token COLON171=null;
        Token NL172=null;
        babel17Parser.st_typedef_return st_typedef144 = null;

        babel17Parser.st_val_return st_val145 = null;

        babel17Parser.st_def_return st_def146 = null;

        babel17Parser.st_yield_return st_yield147 = null;

        babel17Parser.st_memoize_return st_memoize148 = null;

        babel17Parser.st_private_return st_private149 = null;

        babel17Parser.st_module_return st_module150 = null;

        babel17Parser.st_import_return st_import151 = null;

        babel17Parser.expr_or_assign_return expr_or_assign152 = null;

        babel17Parser.expr_return expr155 = null;

        babel17Parser.expr_return expr158 = null;

        babel17Parser.expr_return expr161 = null;

        babel17Parser.expr_return expr164 = null;

        babel17Parser.casepattern_return casepattern167 = null;

        babel17Parser.expr_return expr173 = null;


        CommonTree PRAGMA_PRINT153_tree=null;
        CommonTree NL154_tree=null;
        CommonTree PRAGMA_LOG156_tree=null;
        CommonTree NL157_tree=null;
        CommonTree PRAGMA_PROFILE159_tree=null;
        CommonTree NL160_tree=null;
        CommonTree PRAGMA_ASSERT162_tree=null;
        CommonTree NL163_tree=null;
        CommonTree PRAGMA_CATCH165_tree=null;
        CommonTree NL166_tree=null;
        CommonTree NL168_tree=null;
        CommonTree L_try169_tree=null;
        CommonTree NL170_tree=null;
        CommonTree COLON171_tree=null;
        CommonTree NL172_tree=null;
        RewriteRuleTokenStream stream_PRAGMA_CATCH=new RewriteRuleTokenStream(adaptor,"token PRAGMA_CATCH");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_PRAGMA_PROFILE=new RewriteRuleTokenStream(adaptor,"token PRAGMA_PROFILE");
        RewriteRuleTokenStream stream_PRAGMA_ASSERT=new RewriteRuleTokenStream(adaptor,"token PRAGMA_ASSERT");
        RewriteRuleTokenStream stream_PRAGMA_LOG=new RewriteRuleTokenStream(adaptor,"token PRAGMA_LOG");
        RewriteRuleTokenStream stream_L_try=new RewriteRuleTokenStream(adaptor,"token L_try");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_PRAGMA_PRINT=new RewriteRuleTokenStream(adaptor,"token PRAGMA_PRINT");
        RewriteRuleSubtreeStream stream_casepattern=new RewriteRuleSubtreeStream(adaptor,"rule casepattern");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:504:2: ( st_typedef | st_val | st_def | st_yield | st_memoize | st_private | st_module | st_import | expr_or_assign | PRAGMA_PRINT ( NL )? expr -> ^( PRAGMA_PRINT expr ) | PRAGMA_LOG ( NL )? expr -> ^( PRAGMA_LOG expr ) | PRAGMA_PROFILE ( NL )? expr -> ^( PRAGMA_PROFILE expr ) | PRAGMA_ASSERT ( NL )? expr -> ^( PRAGMA_ASSERT expr ) | PRAGMA_CATCH ( NL )? casepattern ( NL )? L_try ( NL )? COLON ( NL )? expr -> ^( PRAGMA_CATCH expr casepattern ) )
            int alt80=14;
            alt80 = dfa80.predict(input);
            switch (alt80) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:504:4: st_typedef
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_typedef_in_statement2694);
                    st_typedef144=st_typedef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_typedef144.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:505:10: st_val
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_val_in_statement2705);
                    st_val145=st_val();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_val145.getTree());

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:4: st_def
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_def_in_statement2710);
                    st_def146=st_def();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_def146.getTree());

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:507:4: st_yield
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_yield_in_statement2715);
                    st_yield147=st_yield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_yield147.getTree());

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:4: st_memoize
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_memoize_in_statement2720);
                    st_memoize148=st_memoize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_memoize148.getTree());

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:509:4: st_private
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_private_in_statement2725);
                    st_private149=st_private();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_private149.getTree());

                    }
                    break;
                case 7 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:4: st_module
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_module_in_statement2730);
                    st_module150=st_module();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_module150.getTree());

                    }
                    break;
                case 8 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:511:4: st_import
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_import_in_statement2735);
                    st_import151=st_import();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_import151.getTree());

                    }
                    break;
                case 9 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:4: expr_or_assign
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expr_or_assign_in_statement2740);
                    expr_or_assign152=expr_or_assign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_or_assign152.getTree());

                    }
                    break;
                case 10 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:513:5: PRAGMA_PRINT ( NL )? expr
                    {
                    PRAGMA_PRINT153=(Token)match(input,PRAGMA_PRINT,FOLLOW_PRAGMA_PRINT_in_statement2746); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRAGMA_PRINT.add(PRAGMA_PRINT153);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:513:18: ( NL )?
                    int alt72=2;
                    int LA72_0 = input.LA(1);

                    if ( (LA72_0==NL) ) {
                        alt72=1;
                    }
                    switch (alt72) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:513:18: NL
                            {
                            NL154=(Token)match(input,NL,FOLLOW_NL_in_statement2748); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL154);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_statement2751);
                    expr155=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr155.getTree());


                    // AST REWRITE
                    // elements: expr, PRAGMA_PRINT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 513:27: -> ^( PRAGMA_PRINT expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:513:30: ^( PRAGMA_PRINT expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PRAGMA_PRINT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:5: PRAGMA_LOG ( NL )? expr
                    {
                    PRAGMA_LOG156=(Token)match(input,PRAGMA_LOG,FOLLOW_PRAGMA_LOG_in_statement2765); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRAGMA_LOG.add(PRAGMA_LOG156);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:16: ( NL )?
                    int alt73=2;
                    int LA73_0 = input.LA(1);

                    if ( (LA73_0==NL) ) {
                        alt73=1;
                    }
                    switch (alt73) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:16: NL
                            {
                            NL157=(Token)match(input,NL,FOLLOW_NL_in_statement2767); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL157);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_statement2770);
                    expr158=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr158.getTree());


                    // AST REWRITE
                    // elements: PRAGMA_LOG, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 514:25: -> ^( PRAGMA_LOG expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:28: ^( PRAGMA_LOG expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PRAGMA_LOG.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:515:5: PRAGMA_PROFILE ( NL )? expr
                    {
                    PRAGMA_PROFILE159=(Token)match(input,PRAGMA_PROFILE,FOLLOW_PRAGMA_PROFILE_in_statement2784); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRAGMA_PROFILE.add(PRAGMA_PROFILE159);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:515:20: ( NL )?
                    int alt74=2;
                    int LA74_0 = input.LA(1);

                    if ( (LA74_0==NL) ) {
                        alt74=1;
                    }
                    switch (alt74) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:515:20: NL
                            {
                            NL160=(Token)match(input,NL,FOLLOW_NL_in_statement2786); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL160);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_statement2789);
                    expr161=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr161.getTree());


                    // AST REWRITE
                    // elements: PRAGMA_PROFILE, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 515:29: -> ^( PRAGMA_PROFILE expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:515:32: ^( PRAGMA_PROFILE expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PRAGMA_PROFILE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:516:5: PRAGMA_ASSERT ( NL )? expr
                    {
                    PRAGMA_ASSERT162=(Token)match(input,PRAGMA_ASSERT,FOLLOW_PRAGMA_ASSERT_in_statement2803); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRAGMA_ASSERT.add(PRAGMA_ASSERT162);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:516:19: ( NL )?
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==NL) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:516:19: NL
                            {
                            NL163=(Token)match(input,NL,FOLLOW_NL_in_statement2805); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL163);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_statement2808);
                    expr164=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr164.getTree());


                    // AST REWRITE
                    // elements: PRAGMA_ASSERT, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 516:28: -> ^( PRAGMA_ASSERT expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:516:31: ^( PRAGMA_ASSERT expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PRAGMA_ASSERT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 14 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:4: PRAGMA_CATCH ( NL )? casepattern ( NL )? L_try ( NL )? COLON ( NL )? expr
                    {
                    PRAGMA_CATCH165=(Token)match(input,PRAGMA_CATCH,FOLLOW_PRAGMA_CATCH_in_statement2821); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRAGMA_CATCH.add(PRAGMA_CATCH165);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:17: ( NL )?
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==NL) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:17: NL
                            {
                            NL166=(Token)match(input,NL,FOLLOW_NL_in_statement2823); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL166);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_casepattern_in_statement2826);
                    casepattern167=casepattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_casepattern.add(casepattern167.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:33: ( NL )?
                    int alt77=2;
                    int LA77_0 = input.LA(1);

                    if ( (LA77_0==NL) ) {
                        alt77=1;
                    }
                    switch (alt77) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:33: NL
                            {
                            NL168=(Token)match(input,NL,FOLLOW_NL_in_statement2828); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL168);


                            }
                            break;

                    }

                    L_try169=(Token)match(input,L_try,FOLLOW_L_try_in_statement2831); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_try.add(L_try169);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:43: ( NL )?
                    int alt78=2;
                    int LA78_0 = input.LA(1);

                    if ( (LA78_0==NL) ) {
                        alt78=1;
                    }
                    switch (alt78) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:43: NL
                            {
                            NL170=(Token)match(input,NL,FOLLOW_NL_in_statement2833); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL170);


                            }
                            break;

                    }

                    COLON171=(Token)match(input,COLON,FOLLOW_COLON_in_statement2836); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON171);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:53: ( NL )?
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==NL) ) {
                        alt79=1;
                    }
                    switch (alt79) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:53: NL
                            {
                            NL172=(Token)match(input,NL,FOLLOW_NL_in_statement2838); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL172);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_statement2841);
                    expr173=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr173.getTree());


                    // AST REWRITE
                    // elements: PRAGMA_CATCH, expr, casepattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 517:62: -> ^( PRAGMA_CATCH expr casepattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:65: ^( PRAGMA_CATCH expr casepattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PRAGMA_CATCH.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());
                        adaptor.addChild(root_1, stream_casepattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class st_val_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_val"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:1: st_val : L_val ( NL )? pattern ( NL )? '=' ( NL )? expr -> ^( VAL pattern expr ) ;
    public final babel17Parser.st_val_return st_val() throws RecognitionException {
        babel17Parser.st_val_return retval = new babel17Parser.st_val_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_val174=null;
        Token NL175=null;
        Token NL177=null;
        Token char_literal178=null;
        Token NL179=null;
        babel17Parser.pattern_return pattern176 = null;

        babel17Parser.expr_return expr180 = null;


        CommonTree L_val174_tree=null;
        CommonTree NL175_tree=null;
        CommonTree NL177_tree=null;
        CommonTree char_literal178_tree=null;
        CommonTree NL179_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_val=new RewriteRuleTokenStream(adaptor,"token L_val");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:8: ( L_val ( NL )? pattern ( NL )? '=' ( NL )? expr -> ^( VAL pattern expr ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:10: L_val ( NL )? pattern ( NL )? '=' ( NL )? expr
            {
            L_val174=(Token)match(input,L_val,FOLLOW_L_val_in_st_val2860); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_val.add(L_val174);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:16: ( NL )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==NL) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:16: NL
                    {
                    NL175=(Token)match(input,NL,FOLLOW_NL_in_st_val2862); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL175);


                    }
                    break;

            }

            pushFollow(FOLLOW_pattern_in_st_val2865);
            pattern176=pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pattern.add(pattern176.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:28: ( NL )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==NL) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:28: NL
                    {
                    NL177=(Token)match(input,NL,FOLLOW_NL_in_st_val2867); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL177);


                    }
                    break;

            }

            char_literal178=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_st_val2870); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal178);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:36: ( NL )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==NL) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:36: NL
                    {
                    NL179=(Token)match(input,NL,FOLLOW_NL_in_st_val2872); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL179);


                    }
                    break;

            }

            pushFollow(FOLLOW_expr_in_st_val2875);
            expr180=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr180.getTree());


            // AST REWRITE
            // elements: pattern, expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 519:45: -> ^( VAL pattern expr )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:48: ^( VAL pattern expr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAL, "VAL"), root_1);

                adaptor.addChild(root_1, stream_pattern.nextTree());
                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_val"

    public static class st_def_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_def"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:1: st_def : ( L_def ( NL )? Id ( NL )? ( defpattern ( NL )? )? ( ':' ( NL )? typeid ( NL )? )? '=' ( NL )? expr -> ^( DEF Id ( typeid )? ( defpattern )? expr ) | L_def ( NL )? L_this ( NL )? ':' ( NL )? typeid ( NL )? '=' ( NL )? expr -> ^( AUTOMATIC_CONVERSION typeid expr ) | L_def ( NL )? L_this ( NL )? ':>' ( NL )? typeid ( NL )? '=' ( NL )? expr -> ^( CONVERSION typeid expr ) );
    public final babel17Parser.st_def_return st_def() throws RecognitionException {
        babel17Parser.st_def_return retval = new babel17Parser.st_def_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_def181=null;
        Token NL182=null;
        Token Id183=null;
        Token NL184=null;
        Token NL186=null;
        Token char_literal187=null;
        Token NL188=null;
        Token NL190=null;
        Token char_literal191=null;
        Token NL192=null;
        Token L_def194=null;
        Token NL195=null;
        Token L_this196=null;
        Token NL197=null;
        Token char_literal198=null;
        Token NL199=null;
        Token NL201=null;
        Token char_literal202=null;
        Token NL203=null;
        Token L_def205=null;
        Token NL206=null;
        Token L_this207=null;
        Token NL208=null;
        Token string_literal209=null;
        Token NL210=null;
        Token NL212=null;
        Token char_literal213=null;
        Token NL214=null;
        babel17Parser.defpattern_return defpattern185 = null;

        babel17Parser.typeid_return typeid189 = null;

        babel17Parser.expr_return expr193 = null;

        babel17Parser.typeid_return typeid200 = null;

        babel17Parser.expr_return expr204 = null;

        babel17Parser.typeid_return typeid211 = null;

        babel17Parser.expr_return expr215 = null;


        CommonTree L_def181_tree=null;
        CommonTree NL182_tree=null;
        CommonTree Id183_tree=null;
        CommonTree NL184_tree=null;
        CommonTree NL186_tree=null;
        CommonTree char_literal187_tree=null;
        CommonTree NL188_tree=null;
        CommonTree NL190_tree=null;
        CommonTree char_literal191_tree=null;
        CommonTree NL192_tree=null;
        CommonTree L_def194_tree=null;
        CommonTree NL195_tree=null;
        CommonTree L_this196_tree=null;
        CommonTree NL197_tree=null;
        CommonTree char_literal198_tree=null;
        CommonTree NL199_tree=null;
        CommonTree NL201_tree=null;
        CommonTree char_literal202_tree=null;
        CommonTree NL203_tree=null;
        CommonTree L_def205_tree=null;
        CommonTree NL206_tree=null;
        CommonTree L_this207_tree=null;
        CommonTree NL208_tree=null;
        CommonTree string_literal209_tree=null;
        CommonTree NL210_tree=null;
        CommonTree NL212_tree=null;
        CommonTree char_literal213_tree=null;
        CommonTree NL214_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_L_this=new RewriteRuleTokenStream(adaptor,"token L_this");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_L_def=new RewriteRuleTokenStream(adaptor,"token L_def");
        RewriteRuleTokenStream stream_TOK_CONVERT=new RewriteRuleTokenStream(adaptor,"token TOK_CONVERT");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_typeid=new RewriteRuleSubtreeStream(adaptor,"rule typeid");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_defpattern=new RewriteRuleSubtreeStream(adaptor,"rule defpattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:8: ( L_def ( NL )? Id ( NL )? ( defpattern ( NL )? )? ( ':' ( NL )? typeid ( NL )? )? '=' ( NL )? expr -> ^( DEF Id ( typeid )? ( defpattern )? expr ) | L_def ( NL )? L_this ( NL )? ':' ( NL )? typeid ( NL )? '=' ( NL )? expr -> ^( AUTOMATIC_CONVERSION typeid expr ) | L_def ( NL )? L_this ( NL )? ':>' ( NL )? typeid ( NL )? '=' ( NL )? expr -> ^( CONVERSION typeid expr ) )
            int alt102=3;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==L_def) ) {
                switch ( input.LA(2) ) {
                case NL:
                    {
                    int LA102_2 = input.LA(3);

                    if ( (LA102_2==L_this) ) {
                        switch ( input.LA(4) ) {
                        case NL:
                            {
                            int LA102_5 = input.LA(5);

                            if ( (LA102_5==COLON) ) {
                                alt102=2;
                            }
                            else if ( (LA102_5==TOK_CONVERT) ) {
                                alt102=3;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 102, 5, input);

                                throw nvae;
                            }
                            }
                            break;
                        case COLON:
                            {
                            alt102=2;
                            }
                            break;
                        case TOK_CONVERT:
                            {
                            alt102=3;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 102, 3, input);

                            throw nvae;
                        }

                    }
                    else if ( (LA102_2==Id) ) {
                        alt102=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 102, 2, input);

                        throw nvae;
                    }
                    }
                    break;
                case L_this:
                    {
                    switch ( input.LA(3) ) {
                    case NL:
                        {
                        int LA102_5 = input.LA(4);

                        if ( (LA102_5==COLON) ) {
                            alt102=2;
                        }
                        else if ( (LA102_5==TOK_CONVERT) ) {
                            alt102=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 102, 5, input);

                            throw nvae;
                        }
                        }
                        break;
                    case COLON:
                        {
                        alt102=2;
                        }
                        break;
                    case TOK_CONVERT:
                        {
                        alt102=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 102, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                case Id:
                    {
                    alt102=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 102, 1, input);

                    throw nvae;
                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 102, 0, input);

                throw nvae;
            }
            switch (alt102) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:10: L_def ( NL )? Id ( NL )? ( defpattern ( NL )? )? ( ':' ( NL )? typeid ( NL )? )? '=' ( NL )? expr
                    {
                    L_def181=(Token)match(input,L_def,FOLLOW_L_def_in_st_def2895); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_def.add(L_def181);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:16: ( NL )?
                    int alt84=2;
                    int LA84_0 = input.LA(1);

                    if ( (LA84_0==NL) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:16: NL
                            {
                            NL182=(Token)match(input,NL,FOLLOW_NL_in_st_def2897); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL182);


                            }
                            break;

                    }

                    Id183=(Token)match(input,Id,FOLLOW_Id_in_st_def2900); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id183);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:23: ( NL )?
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==NL) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:23: NL
                            {
                            NL184=(Token)match(input,NL,FOLLOW_NL_in_st_def2902); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL184);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:27: ( defpattern ( NL )? )?
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( ((LA87_0>=L_true && LA87_0<=L_false)||LA87_0==L_nil||LA87_0==MINUS||(LA87_0>=Constr && LA87_0<=Id)||LA87_0==Num||(LA87_0>=String && LA87_0<=ROUND_BRACKET_OPEN)||LA87_0==SQUARE_BRACKET_OPEN||LA87_0==CURLY_BRACKET_OPEN||LA87_0==UNDERSCORE) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:28: defpattern ( NL )?
                            {
                            pushFollow(FOLLOW_defpattern_in_st_def2906);
                            defpattern185=defpattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_defpattern.add(defpattern185.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:39: ( NL )?
                            int alt86=2;
                            int LA86_0 = input.LA(1);

                            if ( (LA86_0==NL) ) {
                                alt86=1;
                            }
                            switch (alt86) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:39: NL
                                    {
                                    NL186=(Token)match(input,NL,FOLLOW_NL_in_st_def2908); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL186);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:45: ( ':' ( NL )? typeid ( NL )? )?
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==COLON) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:46: ':' ( NL )? typeid ( NL )?
                            {
                            char_literal187=(Token)match(input,COLON,FOLLOW_COLON_in_st_def2914); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(char_literal187);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:50: ( NL )?
                            int alt88=2;
                            int LA88_0 = input.LA(1);

                            if ( (LA88_0==NL) ) {
                                alt88=1;
                            }
                            switch (alt88) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:50: NL
                                    {
                                    NL188=(Token)match(input,NL,FOLLOW_NL_in_st_def2916); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL188);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_typeid_in_st_def2919);
                            typeid189=typeid();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typeid.add(typeid189.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:61: ( NL )?
                            int alt89=2;
                            int LA89_0 = input.LA(1);

                            if ( (LA89_0==NL) ) {
                                alt89=1;
                            }
                            switch (alt89) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:61: NL
                                    {
                                    NL190=(Token)match(input,NL,FOLLOW_NL_in_st_def2921); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL190);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    char_literal191=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_st_def2926); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal191);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:71: ( NL )?
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==NL) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:71: NL
                            {
                            NL192=(Token)match(input,NL,FOLLOW_NL_in_st_def2928); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL192);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_st_def2931);
                    expr193=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr193.getTree());


                    // AST REWRITE
                    // elements: Id, expr, typeid, defpattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 522:5: -> ^( DEF Id ( typeid )? ( defpattern )? expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:8: ^( DEF Id ( typeid )? ( defpattern )? expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DEF, "DEF"), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:17: ( typeid )?
                        if ( stream_typeid.hasNext() ) {
                            adaptor.addChild(root_1, stream_typeid.nextTree());

                        }
                        stream_typeid.reset();
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:522:25: ( defpattern )?
                        if ( stream_defpattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_defpattern.nextTree());

                        }
                        stream_defpattern.reset();
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:523:4: L_def ( NL )? L_this ( NL )? ':' ( NL )? typeid ( NL )? '=' ( NL )? expr
                    {
                    L_def194=(Token)match(input,L_def,FOLLOW_L_def_in_st_def2957); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_def.add(L_def194);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:523:10: ( NL )?
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( (LA92_0==NL) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:523:10: NL
                            {
                            NL195=(Token)match(input,NL,FOLLOW_NL_in_st_def2959); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL195);


                            }
                            break;

                    }

                    L_this196=(Token)match(input,L_this,FOLLOW_L_this_in_st_def2962); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_this.add(L_this196);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:523:21: ( NL )?
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==NL) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:523:21: NL
                            {
                            NL197=(Token)match(input,NL,FOLLOW_NL_in_st_def2964); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL197);


                            }
                            break;

                    }

                    char_literal198=(Token)match(input,COLON,FOLLOW_COLON_in_st_def2967); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(char_literal198);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:523:29: ( NL )?
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==NL) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:523:29: NL
                            {
                            NL199=(Token)match(input,NL,FOLLOW_NL_in_st_def2969); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL199);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeid_in_st_def2972);
                    typeid200=typeid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeid.add(typeid200.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:523:40: ( NL )?
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==NL) ) {
                        alt95=1;
                    }
                    switch (alt95) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:523:40: NL
                            {
                            NL201=(Token)match(input,NL,FOLLOW_NL_in_st_def2974); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL201);


                            }
                            break;

                    }

                    char_literal202=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_st_def2977); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal202);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:523:48: ( NL )?
                    int alt96=2;
                    int LA96_0 = input.LA(1);

                    if ( (LA96_0==NL) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:523:48: NL
                            {
                            NL203=(Token)match(input,NL,FOLLOW_NL_in_st_def2979); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL203);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_st_def2982);
                    expr204=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr204.getTree());


                    // AST REWRITE
                    // elements: expr, typeid
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 523:57: -> ^( AUTOMATIC_CONVERSION typeid expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:523:60: ^( AUTOMATIC_CONVERSION typeid expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AUTOMATIC_CONVERSION, "AUTOMATIC_CONVERSION"), root_1);

                        adaptor.addChild(root_1, stream_typeid.nextTree());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:4: L_def ( NL )? L_this ( NL )? ':>' ( NL )? typeid ( NL )? '=' ( NL )? expr
                    {
                    L_def205=(Token)match(input,L_def,FOLLOW_L_def_in_st_def2997); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_def.add(L_def205);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:10: ( NL )?
                    int alt97=2;
                    int LA97_0 = input.LA(1);

                    if ( (LA97_0==NL) ) {
                        alt97=1;
                    }
                    switch (alt97) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:10: NL
                            {
                            NL206=(Token)match(input,NL,FOLLOW_NL_in_st_def2999); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL206);


                            }
                            break;

                    }

                    L_this207=(Token)match(input,L_this,FOLLOW_L_this_in_st_def3002); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_this.add(L_this207);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:21: ( NL )?
                    int alt98=2;
                    int LA98_0 = input.LA(1);

                    if ( (LA98_0==NL) ) {
                        alt98=1;
                    }
                    switch (alt98) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:21: NL
                            {
                            NL208=(Token)match(input,NL,FOLLOW_NL_in_st_def3004); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL208);


                            }
                            break;

                    }

                    string_literal209=(Token)match(input,TOK_CONVERT,FOLLOW_TOK_CONVERT_in_st_def3007); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TOK_CONVERT.add(string_literal209);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:30: ( NL )?
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( (LA99_0==NL) ) {
                        alt99=1;
                    }
                    switch (alt99) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:30: NL
                            {
                            NL210=(Token)match(input,NL,FOLLOW_NL_in_st_def3009); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL210);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeid_in_st_def3012);
                    typeid211=typeid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeid.add(typeid211.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:41: ( NL )?
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==NL) ) {
                        alt100=1;
                    }
                    switch (alt100) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:41: NL
                            {
                            NL212=(Token)match(input,NL,FOLLOW_NL_in_st_def3014); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL212);


                            }
                            break;

                    }

                    char_literal213=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_st_def3017); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal213);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:49: ( NL )?
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==NL) ) {
                        alt101=1;
                    }
                    switch (alt101) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:49: NL
                            {
                            NL214=(Token)match(input,NL,FOLLOW_NL_in_st_def3019); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL214);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_st_def3022);
                    expr215=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr215.getTree());


                    // AST REWRITE
                    // elements: expr, typeid
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 524:58: -> ^( CONVERSION typeid expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:61: ^( CONVERSION typeid expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONVERSION, "CONVERSION"), root_1);

                        adaptor.addChild(root_1, stream_typeid.nextTree());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_def"

    public static class st_typedef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_typedef"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:526:1: st_typedef : L_typedef ( NL )? Id ( NL )? typedef_clause ( ( NL )? COMMA ( NL )? typedef_clause )* -> ^( TYPEDEF Id ^( NIL_TOKEN ( typedef_clause )* ) ) ;
    public final babel17Parser.st_typedef_return st_typedef() throws RecognitionException {
        babel17Parser.st_typedef_return retval = new babel17Parser.st_typedef_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_typedef216=null;
        Token NL217=null;
        Token Id218=null;
        Token NL219=null;
        Token NL221=null;
        Token COMMA222=null;
        Token NL223=null;
        babel17Parser.typedef_clause_return typedef_clause220 = null;

        babel17Parser.typedef_clause_return typedef_clause224 = null;


        CommonTree L_typedef216_tree=null;
        CommonTree NL217_tree=null;
        CommonTree Id218_tree=null;
        CommonTree NL219_tree=null;
        CommonTree NL221_tree=null;
        CommonTree COMMA222_tree=null;
        CommonTree NL223_tree=null;
        RewriteRuleTokenStream stream_L_typedef=new RewriteRuleTokenStream(adaptor,"token L_typedef");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleSubtreeStream stream_typedef_clause=new RewriteRuleSubtreeStream(adaptor,"rule typedef_clause");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:2: ( L_typedef ( NL )? Id ( NL )? typedef_clause ( ( NL )? COMMA ( NL )? typedef_clause )* -> ^( TYPEDEF Id ^( NIL_TOKEN ( typedef_clause )* ) ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:4: L_typedef ( NL )? Id ( NL )? typedef_clause ( ( NL )? COMMA ( NL )? typedef_clause )*
            {
            L_typedef216=(Token)match(input,L_typedef,FOLLOW_L_typedef_in_st_typedef3045); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_typedef.add(L_typedef216);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:14: ( NL )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==NL) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:14: NL
                    {
                    NL217=(Token)match(input,NL,FOLLOW_NL_in_st_typedef3047); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL217);


                    }
                    break;

            }

            Id218=(Token)match(input,Id,FOLLOW_Id_in_st_typedef3050); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id218);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:21: ( NL )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==NL) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:21: NL
                    {
                    NL219=(Token)match(input,NL,FOLLOW_NL_in_st_typedef3052); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL219);


                    }
                    break;

            }

            pushFollow(FOLLOW_typedef_clause_in_st_typedef3055);
            typedef_clause220=typedef_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_clause.add(typedef_clause220.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:40: ( ( NL )? COMMA ( NL )? typedef_clause )*
            loop107:
            do {
                int alt107=2;
                int LA107_0 = input.LA(1);

                if ( (LA107_0==NL) ) {
                    int LA107_1 = input.LA(2);

                    if ( (LA107_1==COMMA) ) {
                        alt107=1;
                    }


                }
                else if ( (LA107_0==COMMA) ) {
                    alt107=1;
                }


                switch (alt107) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:41: ( NL )? COMMA ( NL )? typedef_clause
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:41: ( NL )?
            	    int alt105=2;
            	    int LA105_0 = input.LA(1);

            	    if ( (LA105_0==NL) ) {
            	        alt105=1;
            	    }
            	    switch (alt105) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:41: NL
            	            {
            	            NL221=(Token)match(input,NL,FOLLOW_NL_in_st_typedef3058); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL221);


            	            }
            	            break;

            	    }

            	    COMMA222=(Token)match(input,COMMA,FOLLOW_COMMA_in_st_typedef3061); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA222);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:51: ( NL )?
            	    int alt106=2;
            	    int LA106_0 = input.LA(1);

            	    if ( (LA106_0==NL) ) {
            	        alt106=1;
            	    }
            	    switch (alt106) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:51: NL
            	            {
            	            NL223=(Token)match(input,NL,FOLLOW_NL_in_st_typedef3063); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL223);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_typedef_clause_in_st_typedef3066);
            	    typedef_clause224=typedef_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typedef_clause.add(typedef_clause224.getTree());

            	    }
            	    break;

            	default :
            	    break loop107;
                }
            } while (true);



            // AST REWRITE
            // elements: Id, typedef_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 527:72: -> ^( TYPEDEF Id ^( NIL_TOKEN ( typedef_clause )* ) )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:75: ^( TYPEDEF Id ^( NIL_TOKEN ( typedef_clause )* ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEDEF, "TYPEDEF"), root_1);

                adaptor.addChild(root_1, stream_Id.nextNode());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:88: ^( NIL_TOKEN ( typedef_clause )* )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:100: ( typedef_clause )*
                while ( stream_typedef_clause.hasNext() ) {
                    adaptor.addChild(root_2, stream_typedef_clause.nextTree());

                }
                stream_typedef_clause.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_typedef"

    public static class typedef_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typedef_clause"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:529:1: typedef_clause : ( ( defpattern ( NL )? '=' )=> defpattern ( NL )? '=' ( NL )? expr -> ^( TYPEDEF_CLAUSE defpattern expr ) | defpattern -> ^( TYPEDEF_CLAUSE defpattern ) );
    public final babel17Parser.typedef_clause_return typedef_clause() throws RecognitionException {
        babel17Parser.typedef_clause_return retval = new babel17Parser.typedef_clause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL226=null;
        Token char_literal227=null;
        Token NL228=null;
        babel17Parser.defpattern_return defpattern225 = null;

        babel17Parser.expr_return expr229 = null;

        babel17Parser.defpattern_return defpattern230 = null;


        CommonTree NL226_tree=null;
        CommonTree char_literal227_tree=null;
        CommonTree NL228_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_defpattern=new RewriteRuleSubtreeStream(adaptor,"rule defpattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:530:2: ( ( defpattern ( NL )? '=' )=> defpattern ( NL )? '=' ( NL )? expr -> ^( TYPEDEF_CLAUSE defpattern expr ) | defpattern -> ^( TYPEDEF_CLAUSE defpattern ) )
            int alt110=2;
            alt110 = dfa110.predict(input);
            switch (alt110) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:530:4: ( defpattern ( NL )? '=' )=> defpattern ( NL )? '=' ( NL )? expr
                    {
                    pushFollow(FOLLOW_defpattern_in_typedef_clause3104);
                    defpattern225=defpattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_defpattern.add(defpattern225.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:530:39: ( NL )?
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==NL) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:530:39: NL
                            {
                            NL226=(Token)match(input,NL,FOLLOW_NL_in_typedef_clause3106); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL226);


                            }
                            break;

                    }

                    char_literal227=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_typedef_clause3109); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal227);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:530:47: ( NL )?
                    int alt109=2;
                    int LA109_0 = input.LA(1);

                    if ( (LA109_0==NL) ) {
                        alt109=1;
                    }
                    switch (alt109) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:530:47: NL
                            {
                            NL228=(Token)match(input,NL,FOLLOW_NL_in_typedef_clause3111); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL228);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_typedef_clause3114);
                    expr229=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr229.getTree());


                    // AST REWRITE
                    // elements: defpattern, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 530:56: -> ^( TYPEDEF_CLAUSE defpattern expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:530:59: ^( TYPEDEF_CLAUSE defpattern expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEDEF_CLAUSE, "TYPEDEF_CLAUSE"), root_1);

                        adaptor.addChild(root_1, stream_defpattern.nextTree());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:531:4: defpattern
                    {
                    pushFollow(FOLLOW_defpattern_in_typedef_clause3129);
                    defpattern230=defpattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_defpattern.add(defpattern230.getTree());


                    // AST REWRITE
                    // elements: defpattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 531:15: -> ^( TYPEDEF_CLAUSE defpattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:531:18: ^( TYPEDEF_CLAUSE defpattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEDEF_CLAUSE, "TYPEDEF_CLAUSE"), root_1);

                        adaptor.addChild(root_1, stream_defpattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typedef_clause"

    public static class st_yield_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_yield"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:533:1: st_yield : L_yield expr -> ^( YIELD expr ) ;
    public final babel17Parser.st_yield_return st_yield() throws RecognitionException {
        babel17Parser.st_yield_return retval = new babel17Parser.st_yield_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_yield231=null;
        babel17Parser.expr_return expr232 = null;


        CommonTree L_yield231_tree=null;
        RewriteRuleTokenStream stream_L_yield=new RewriteRuleTokenStream(adaptor,"token L_yield");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:533:9: ( L_yield expr -> ^( YIELD expr ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:533:11: L_yield expr
            {
            L_yield231=(Token)match(input,L_yield,FOLLOW_L_yield_in_st_yield3148); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_yield.add(L_yield231);

            pushFollow(FOLLOW_expr_in_st_yield3150);
            expr232=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr232.getTree());


            // AST REWRITE
            // elements: expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 533:24: -> ^( YIELD expr )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:533:27: ^( YIELD expr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YIELD, "YIELD"), root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_yield"

    public static class st_memoize_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_memoize"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:535:1: st_memoize : L_memoize memo_id ( ( NL )? COMMA ( NL )? memo_id )* -> ^( MEMOIZE ( memo_id )* ) ;
    public final babel17Parser.st_memoize_return st_memoize() throws RecognitionException {
        babel17Parser.st_memoize_return retval = new babel17Parser.st_memoize_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_memoize233=null;
        Token NL235=null;
        Token COMMA236=null;
        Token NL237=null;
        babel17Parser.memo_id_return memo_id234 = null;

        babel17Parser.memo_id_return memo_id238 = null;


        CommonTree L_memoize233_tree=null;
        CommonTree NL235_tree=null;
        CommonTree COMMA236_tree=null;
        CommonTree NL237_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_memoize=new RewriteRuleTokenStream(adaptor,"token L_memoize");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_memo_id=new RewriteRuleSubtreeStream(adaptor,"rule memo_id");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:536:2: ( L_memoize memo_id ( ( NL )? COMMA ( NL )? memo_id )* -> ^( MEMOIZE ( memo_id )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:536:4: L_memoize memo_id ( ( NL )? COMMA ( NL )? memo_id )*
            {
            L_memoize233=(Token)match(input,L_memoize,FOLLOW_L_memoize_in_st_memoize3171); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_memoize.add(L_memoize233);

            pushFollow(FOLLOW_memo_id_in_st_memoize3173);
            memo_id234=memo_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_memo_id.add(memo_id234.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:536:22: ( ( NL )? COMMA ( NL )? memo_id )*
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==NL) ) {
                    int LA113_1 = input.LA(2);

                    if ( (LA113_1==COMMA) ) {
                        alt113=1;
                    }


                }
                else if ( (LA113_0==COMMA) ) {
                    alt113=1;
                }


                switch (alt113) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:536:23: ( NL )? COMMA ( NL )? memo_id
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:536:23: ( NL )?
            	    int alt111=2;
            	    int LA111_0 = input.LA(1);

            	    if ( (LA111_0==NL) ) {
            	        alt111=1;
            	    }
            	    switch (alt111) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:536:23: NL
            	            {
            	            NL235=(Token)match(input,NL,FOLLOW_NL_in_st_memoize3176); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL235);


            	            }
            	            break;

            	    }

            	    COMMA236=(Token)match(input,COMMA,FOLLOW_COMMA_in_st_memoize3179); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA236);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:536:33: ( NL )?
            	    int alt112=2;
            	    int LA112_0 = input.LA(1);

            	    if ( (LA112_0==NL) ) {
            	        alt112=1;
            	    }
            	    switch (alt112) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:536:33: NL
            	            {
            	            NL237=(Token)match(input,NL,FOLLOW_NL_in_st_memoize3181); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL237);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_memo_id_in_st_memoize3184);
            	    memo_id238=memo_id();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_memo_id.add(memo_id238.getTree());

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);



            // AST REWRITE
            // elements: memo_id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 537:5: -> ^( MEMOIZE ( memo_id )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:537:8: ^( MEMOIZE ( memo_id )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MEMOIZE, "MEMOIZE"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:537:18: ( memo_id )*
                while ( stream_memo_id.hasNext() ) {
                    adaptor.addChild(root_1, stream_memo_id.nextTree());

                }
                stream_memo_id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_memoize"

    public static class memo_id_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "memo_id"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:539:1: memo_id : ( Id -> ^( MEMOID_STRONG Id ) | '(' Id ')' -> ^( MEMOID_WEAK Id ) );
    public final babel17Parser.memo_id_return memo_id() throws RecognitionException {
        babel17Parser.memo_id_return retval = new babel17Parser.memo_id_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id239=null;
        Token char_literal240=null;
        Token Id241=null;
        Token char_literal242=null;

        CommonTree Id239_tree=null;
        CommonTree char_literal240_tree=null;
        CommonTree Id241_tree=null;
        CommonTree char_literal242_tree=null;
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:539:9: ( Id -> ^( MEMOID_STRONG Id ) | '(' Id ')' -> ^( MEMOID_WEAK Id ) )
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==Id) ) {
                alt114=1;
            }
            else if ( (LA114_0==ROUND_BRACKET_OPEN) ) {
                alt114=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;
            }
            switch (alt114) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:539:11: Id
                    {
                    Id239=(Token)match(input,Id,FOLLOW_Id_in_memo_id3213); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id239);



                    // AST REWRITE
                    // elements: Id
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 539:14: -> ^( MEMOID_STRONG Id )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:539:17: ^( MEMOID_STRONG Id )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MEMOID_STRONG, "MEMOID_STRONG"), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:540:4: '(' Id ')'
                    {
                    char_literal240=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_memo_id3226); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal240);

                    Id241=(Token)match(input,Id,FOLLOW_Id_in_memo_id3228); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id241);

                    char_literal242=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_memo_id3230); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal242);



                    // AST REWRITE
                    // elements: Id
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 540:15: -> ^( MEMOID_WEAK Id )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:540:18: ^( MEMOID_WEAK Id )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MEMOID_WEAK, "MEMOID_WEAK"), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "memo_id"

    public static class st_private_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_private"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:542:1: st_private : L_private private_id ( ( NL )? COMMA ( NL )? private_id )* -> ^( PRIVATE ( private_id )* ) ;
    public final babel17Parser.st_private_return st_private() throws RecognitionException {
        babel17Parser.st_private_return retval = new babel17Parser.st_private_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_private243=null;
        Token NL245=null;
        Token COMMA246=null;
        Token NL247=null;
        babel17Parser.private_id_return private_id244 = null;

        babel17Parser.private_id_return private_id248 = null;


        CommonTree L_private243_tree=null;
        CommonTree NL245_tree=null;
        CommonTree COMMA246_tree=null;
        CommonTree NL247_tree=null;
        RewriteRuleTokenStream stream_L_private=new RewriteRuleTokenStream(adaptor,"token L_private");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_private_id=new RewriteRuleSubtreeStream(adaptor,"rule private_id");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:2: ( L_private private_id ( ( NL )? COMMA ( NL )? private_id )* -> ^( PRIVATE ( private_id )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:4: L_private private_id ( ( NL )? COMMA ( NL )? private_id )*
            {
            L_private243=(Token)match(input,L_private,FOLLOW_L_private_in_st_private3247); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_private.add(L_private243);

            pushFollow(FOLLOW_private_id_in_st_private3249);
            private_id244=private_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_private_id.add(private_id244.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:25: ( ( NL )? COMMA ( NL )? private_id )*
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);

                if ( (LA117_0==NL) ) {
                    int LA117_1 = input.LA(2);

                    if ( (LA117_1==COMMA) ) {
                        alt117=1;
                    }


                }
                else if ( (LA117_0==COMMA) ) {
                    alt117=1;
                }


                switch (alt117) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:26: ( NL )? COMMA ( NL )? private_id
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:26: ( NL )?
            	    int alt115=2;
            	    int LA115_0 = input.LA(1);

            	    if ( (LA115_0==NL) ) {
            	        alt115=1;
            	    }
            	    switch (alt115) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:26: NL
            	            {
            	            NL245=(Token)match(input,NL,FOLLOW_NL_in_st_private3252); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL245);


            	            }
            	            break;

            	    }

            	    COMMA246=(Token)match(input,COMMA,FOLLOW_COMMA_in_st_private3255); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA246);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:36: ( NL )?
            	    int alt116=2;
            	    int LA116_0 = input.LA(1);

            	    if ( (LA116_0==NL) ) {
            	        alt116=1;
            	    }
            	    switch (alt116) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:36: NL
            	            {
            	            NL247=(Token)match(input,NL,FOLLOW_NL_in_st_private3257); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL247);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_private_id_in_st_private3260);
            	    private_id248=private_id();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_private_id.add(private_id248.getTree());

            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);



            // AST REWRITE
            // elements: private_id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 544:5: -> ^( PRIVATE ( private_id )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:544:8: ^( PRIVATE ( private_id )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRIVATE, "PRIVATE"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:544:18: ( private_id )*
                while ( stream_private_id.hasNext() ) {
                    adaptor.addChild(root_1, stream_private_id.nextTree());

                }
                stream_private_id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_private"

    public static class private_id_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "private_id"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:546:1: private_id : Id -> ^( PRIVATEID Id ) ;
    public final babel17Parser.private_id_return private_id() throws RecognitionException {
        babel17Parser.private_id_return retval = new babel17Parser.private_id_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id249=null;

        CommonTree Id249_tree=null;
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:547:2: ( Id -> ^( PRIVATEID Id ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:547:4: Id
            {
            Id249=(Token)match(input,Id,FOLLOW_Id_in_private_id3286); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id249);



            // AST REWRITE
            // elements: Id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 547:7: -> ^( PRIVATEID Id )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:547:10: ^( PRIVATEID Id )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRIVATEID, "PRIVATEID"), root_1);

                adaptor.addChild(root_1, stream_Id.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "private_id"

    public static class testid_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "testid"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:1: testid : ( Id | L_unittest );
    public final babel17Parser.testid_return testid() throws RecognitionException {
        babel17Parser.testid_return retval = new babel17Parser.testid_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set250=null;

        CommonTree set250_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:8: ( Id | L_unittest )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set250=(Token)input.LT(1);
            if ( input.LA(1)==L_unittest||input.LA(1)==Id ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set250));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "testid"

    public static class moduleid_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moduleid"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:552:1: moduleid : Id ( ( NL )? PERIOD ( NL )? testid )* -> ^( MODULEID ( Id )? ( testid )* ) ;
    public final babel17Parser.moduleid_return moduleid() throws RecognitionException {
        babel17Parser.moduleid_return retval = new babel17Parser.moduleid_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id251=null;
        Token NL252=null;
        Token PERIOD253=null;
        Token NL254=null;
        babel17Parser.testid_return testid255 = null;


        CommonTree Id251_tree=null;
        CommonTree NL252_tree=null;
        CommonTree PERIOD253_tree=null;
        CommonTree NL254_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_testid=new RewriteRuleSubtreeStream(adaptor,"rule testid");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:2: ( Id ( ( NL )? PERIOD ( NL )? testid )* -> ^( MODULEID ( Id )? ( testid )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:4: Id ( ( NL )? PERIOD ( NL )? testid )*
            {
            Id251=(Token)match(input,Id,FOLLOW_Id_in_moduleid3319); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id251);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:7: ( ( NL )? PERIOD ( NL )? testid )*
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==NL) ) {
                    int LA120_1 = input.LA(2);

                    if ( (LA120_1==PERIOD) ) {
                        alt120=1;
                    }


                }
                else if ( (LA120_0==PERIOD) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:8: ( NL )? PERIOD ( NL )? testid
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:8: ( NL )?
            	    int alt118=2;
            	    int LA118_0 = input.LA(1);

            	    if ( (LA118_0==NL) ) {
            	        alt118=1;
            	    }
            	    switch (alt118) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:8: NL
            	            {
            	            NL252=(Token)match(input,NL,FOLLOW_NL_in_moduleid3322); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL252);


            	            }
            	            break;

            	    }

            	    PERIOD253=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_moduleid3325); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD253);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:19: ( NL )?
            	    int alt119=2;
            	    int LA119_0 = input.LA(1);

            	    if ( (LA119_0==NL) ) {
            	        alt119=1;
            	    }
            	    switch (alt119) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:19: NL
            	            {
            	            NL254=(Token)match(input,NL,FOLLOW_NL_in_moduleid3327); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL254);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_testid_in_moduleid3330);
            	    testid255=testid();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_testid.add(testid255.getTree());

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);



            // AST REWRITE
            // elements: testid, Id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 553:32: -> ^( MODULEID ( Id )? ( testid )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:35: ^( MODULEID ( Id )? ( testid )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MODULEID, "MODULEID"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:46: ( Id )?
                if ( stream_Id.hasNext() ) {
                    adaptor.addChild(root_1, stream_Id.nextNode());

                }
                stream_Id.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:50: ( testid )*
                while ( stream_testid.hasNext() ) {
                    adaptor.addChild(root_1, stream_testid.nextTree());

                }
                stream_testid.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moduleid"

    public static class st_module_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_module"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:1: st_module : L_module ( NL )? moduleid block ( L_unittest block )? L_end -> ^( L_module moduleid block ( L_unittest )? ( block )? ) ;
    public final babel17Parser.st_module_return st_module() throws RecognitionException {
        babel17Parser.st_module_return retval = new babel17Parser.st_module_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_module256=null;
        Token NL257=null;
        Token L_unittest260=null;
        Token L_end262=null;
        babel17Parser.moduleid_return moduleid258 = null;

        babel17Parser.block_return block259 = null;

        babel17Parser.block_return block261 = null;


        CommonTree L_module256_tree=null;
        CommonTree NL257_tree=null;
        CommonTree L_unittest260_tree=null;
        CommonTree L_end262_tree=null;
        RewriteRuleTokenStream stream_L_module=new RewriteRuleTokenStream(adaptor,"token L_module");
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_unittest=new RewriteRuleTokenStream(adaptor,"token L_unittest");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_moduleid=new RewriteRuleSubtreeStream(adaptor,"rule moduleid");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:556:2: ( L_module ( NL )? moduleid block ( L_unittest block )? L_end -> ^( L_module moduleid block ( L_unittest )? ( block )? ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:556:4: L_module ( NL )? moduleid block ( L_unittest block )? L_end
            {
            L_module256=(Token)match(input,L_module,FOLLOW_L_module_in_st_module3353); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_module.add(L_module256);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:556:13: ( NL )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==NL) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:556:13: NL
                    {
                    NL257=(Token)match(input,NL,FOLLOW_NL_in_st_module3355); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL257);


                    }
                    break;

            }

            pushFollow(FOLLOW_moduleid_in_st_module3358);
            moduleid258=moduleid();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moduleid.add(moduleid258.getTree());
            pushFollow(FOLLOW_block_in_st_module3360);
            block259=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block259.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:556:32: ( L_unittest block )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==L_unittest) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:556:33: L_unittest block
                    {
                    L_unittest260=(Token)match(input,L_unittest,FOLLOW_L_unittest_in_st_module3363); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_unittest.add(L_unittest260);

                    pushFollow(FOLLOW_block_in_st_module3365);
                    block261=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block261.getTree());

                    }
                    break;

            }

            L_end262=(Token)match(input,L_end,FOLLOW_L_end_in_st_module3369); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end262);



            // AST REWRITE
            // elements: block, moduleid, L_unittest, block, L_module
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 556:58: -> ^( L_module moduleid block ( L_unittest )? ( block )? )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:556:61: ^( L_module moduleid block ( L_unittest )? ( block )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_L_module.nextNode(), root_1);

                adaptor.addChild(root_1, stream_moduleid.nextTree());
                adaptor.addChild(root_1, stream_block.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:556:87: ( L_unittest )?
                if ( stream_L_unittest.hasNext() ) {
                    adaptor.addChild(root_1, stream_L_unittest.nextNode());

                }
                stream_L_unittest.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:556:99: ( block )?
                if ( stream_block.hasNext() ) {
                    adaptor.addChild(root_1, stream_block.nextTree());

                }
                stream_block.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_module"

    public static class importprefix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importprefix"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:1: importprefix : ( L_root | testid ) ( ( NL )? PERIOD ( NL )? testid )* -> ^( IMPORT_PREFIX ( L_root )? ( testid )* ) ;
    public final babel17Parser.importprefix_return importprefix() throws RecognitionException {
        babel17Parser.importprefix_return retval = new babel17Parser.importprefix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_root263=null;
        Token NL265=null;
        Token PERIOD266=null;
        Token NL267=null;
        babel17Parser.testid_return testid264 = null;

        babel17Parser.testid_return testid268 = null;


        CommonTree L_root263_tree=null;
        CommonTree NL265_tree=null;
        CommonTree PERIOD266_tree=null;
        CommonTree NL267_tree=null;
        RewriteRuleTokenStream stream_L_root=new RewriteRuleTokenStream(adaptor,"token L_root");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_testid=new RewriteRuleSubtreeStream(adaptor,"rule testid");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:559:2: ( ( L_root | testid ) ( ( NL )? PERIOD ( NL )? testid )* -> ^( IMPORT_PREFIX ( L_root )? ( testid )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:559:4: ( L_root | testid ) ( ( NL )? PERIOD ( NL )? testid )*
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:559:4: ( L_root | testid )
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==L_root) ) {
                alt123=1;
            }
            else if ( (LA123_0==L_unittest||LA123_0==Id) ) {
                alt123=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;
            }
            switch (alt123) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:559:5: L_root
                    {
                    L_root263=(Token)match(input,L_root,FOLLOW_L_root_in_importprefix3396); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_root.add(L_root263);


                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:559:14: testid
                    {
                    pushFollow(FOLLOW_testid_in_importprefix3400);
                    testid264=testid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_testid.add(testid264.getTree());

                    }
                    break;

            }

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:559:22: ( ( NL )? PERIOD ( NL )? testid )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==NL) ) {
                    int LA126_1 = input.LA(2);

                    if ( (LA126_1==PERIOD) ) {
                        int LA126_2 = input.LA(3);

                        if ( (LA126_2==NL) ) {
                            int LA126_4 = input.LA(4);

                            if ( (LA126_4==L_unittest||LA126_4==Id) ) {
                                alt126=1;
                            }


                        }
                        else if ( (LA126_2==L_unittest||LA126_2==Id) ) {
                            alt126=1;
                        }


                    }


                }
                else if ( (LA126_0==PERIOD) ) {
                    int LA126_2 = input.LA(2);

                    if ( (LA126_2==NL) ) {
                        int LA126_4 = input.LA(3);

                        if ( (LA126_4==L_unittest||LA126_4==Id) ) {
                            alt126=1;
                        }


                    }
                    else if ( (LA126_2==L_unittest||LA126_2==Id) ) {
                        alt126=1;
                    }


                }


                switch (alt126) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:559:23: ( NL )? PERIOD ( NL )? testid
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:559:23: ( NL )?
            	    int alt124=2;
            	    int LA124_0 = input.LA(1);

            	    if ( (LA124_0==NL) ) {
            	        alt124=1;
            	    }
            	    switch (alt124) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:559:23: NL
            	            {
            	            NL265=(Token)match(input,NL,FOLLOW_NL_in_importprefix3404); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL265);


            	            }
            	            break;

            	    }

            	    PERIOD266=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_importprefix3407); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD266);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:559:34: ( NL )?
            	    int alt125=2;
            	    int LA125_0 = input.LA(1);

            	    if ( (LA125_0==NL) ) {
            	        alt125=1;
            	    }
            	    switch (alt125) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:559:34: NL
            	            {
            	            NL267=(Token)match(input,NL,FOLLOW_NL_in_importprefix3409); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL267);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_testid_in_importprefix3412);
            	    testid268=testid();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_testid.add(testid268.getTree());

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);



            // AST REWRITE
            // elements: L_root, testid
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 559:47: -> ^( IMPORT_PREFIX ( L_root )? ( testid )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:559:50: ^( IMPORT_PREFIX ( L_root )? ( testid )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_PREFIX, "IMPORT_PREFIX"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:559:66: ( L_root )?
                if ( stream_L_root.hasNext() ) {
                    adaptor.addChild(root_1, stream_L_root.nextNode());

                }
                stream_L_root.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:559:74: ( testid )*
                while ( stream_testid.hasNext() ) {
                    adaptor.addChild(root_1, stream_testid.nextTree());

                }
                stream_testid.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "importprefix"

    public static class importall_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importall"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:1: importall : UNDERSCORE -> ^( IMPORT_ALL ) ;
    public final babel17Parser.importall_return importall() throws RecognitionException {
        babel17Parser.importall_return retval = new babel17Parser.importall_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token UNDERSCORE269=null;

        CommonTree UNDERSCORE269_tree=null;
        RewriteRuleTokenStream stream_UNDERSCORE=new RewriteRuleTokenStream(adaptor,"token UNDERSCORE");

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:562:2: ( UNDERSCORE -> ^( IMPORT_ALL ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:562:4: UNDERSCORE
            {
            UNDERSCORE269=(Token)match(input,UNDERSCORE,FOLLOW_UNDERSCORE_in_importall3437); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UNDERSCORE.add(UNDERSCORE269);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 562:15: -> ^( IMPORT_ALL )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:562:18: ^( IMPORT_ALL )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_ALL, "IMPORT_ALL"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "importall"

    public static class importsetclause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importsetclause"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:1: importsetclause : ( testid ( ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )? )? -> ^( IMPORT_PLUS testid ( Id )? ) | '-' ( NL )? testid -> ^( IMPORT_MINUS testid ) | importall );
    public final babel17Parser.importsetclause_return importsetclause() throws RecognitionException {
        babel17Parser.importsetclause_return retval = new babel17Parser.importsetclause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL271=null;
        Token NL273=null;
        Token Id274=null;
        Token char_literal275=null;
        Token NL276=null;
        babel17Parser.testid_return testid270 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW272 = null;

        babel17Parser.testid_return testid277 = null;

        babel17Parser.importall_return importall278 = null;


        CommonTree NL271_tree=null;
        CommonTree NL273_tree=null;
        CommonTree Id274_tree=null;
        CommonTree char_literal275_tree=null;
        CommonTree NL276_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_testid=new RewriteRuleSubtreeStream(adaptor,"rule testid");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:2: ( testid ( ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )? )? -> ^( IMPORT_PLUS testid ( Id )? ) | '-' ( NL )? testid -> ^( IMPORT_MINUS testid ) | importall )
            int alt132=3;
            switch ( input.LA(1) ) {
            case L_unittest:
            case Id:
                {
                alt132=1;
                }
                break;
            case MINUS:
                {
                alt132=2;
                }
                break;
            case UNDERSCORE:
                {
                alt132=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 132, 0, input);

                throw nvae;
            }

            switch (alt132) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:4: testid ( ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )? )?
                    {
                    pushFollow(FOLLOW_testid_in_importsetclause3453);
                    testid270=testid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_testid.add(testid270.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:11: ( ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )? )?
                    int alt130=2;
                    int LA130_0 = input.LA(1);

                    if ( (LA130_0==NL) ) {
                        int LA130_1 = input.LA(2);

                        if ( ((LA130_1>=A_DOUBLE_ARROW && LA130_1<=U_DOUBLE_ARROW)) ) {
                            alt130=1;
                        }
                    }
                    else if ( ((LA130_0>=A_DOUBLE_ARROW && LA130_0<=U_DOUBLE_ARROW)) ) {
                        alt130=1;
                    }
                    switch (alt130) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:12: ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )?
                            {
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:12: ( NL )?
                            int alt127=2;
                            int LA127_0 = input.LA(1);

                            if ( (LA127_0==NL) ) {
                                alt127=1;
                            }
                            switch (alt127) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:12: NL
                                    {
                                    NL271=(Token)match(input,NL,FOLLOW_NL_in_importsetclause3456); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL271);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_importsetclause3459);
                            token_DOUBLE_ARROW272=token_DOUBLE_ARROW();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW272.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:35: ( ( NL )? Id )?
                            int alt129=2;
                            int LA129_0 = input.LA(1);

                            if ( (LA129_0==NL) ) {
                                int LA129_1 = input.LA(2);

                                if ( (LA129_1==Id) ) {
                                    alt129=1;
                                }
                            }
                            else if ( (LA129_0==Id) ) {
                                alt129=1;
                            }
                            switch (alt129) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:36: ( NL )? Id
                                    {
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:36: ( NL )?
                                    int alt128=2;
                                    int LA128_0 = input.LA(1);

                                    if ( (LA128_0==NL) ) {
                                        alt128=1;
                                    }
                                    switch (alt128) {
                                        case 1 :
                                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:36: NL
                                            {
                                            NL273=(Token)match(input,NL,FOLLOW_NL_in_importsetclause3462); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_NL.add(NL273);


                                            }
                                            break;

                                    }

                                    Id274=(Token)match(input,Id,FOLLOW_Id_in_importsetclause3465); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_Id.add(Id274);


                                    }
                                    break;

                            }


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: Id, testid
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 565:47: -> ^( IMPORT_PLUS testid ( Id )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:50: ^( IMPORT_PLUS testid ( Id )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_PLUS, "IMPORT_PLUS"), root_1);

                        adaptor.addChild(root_1, stream_testid.nextTree());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:71: ( Id )?
                        if ( stream_Id.hasNext() ) {
                            adaptor.addChild(root_1, stream_Id.nextNode());

                        }
                        stream_Id.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:566:4: '-' ( NL )? testid
                    {
                    char_literal275=(Token)match(input,MINUS,FOLLOW_MINUS_in_importsetclause3485); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(char_literal275);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:566:8: ( NL )?
                    int alt131=2;
                    int LA131_0 = input.LA(1);

                    if ( (LA131_0==NL) ) {
                        alt131=1;
                    }
                    switch (alt131) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:566:8: NL
                            {
                            NL276=(Token)match(input,NL,FOLLOW_NL_in_importsetclause3487); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL276);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_testid_in_importsetclause3490);
                    testid277=testid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_testid.add(testid277.getTree());


                    // AST REWRITE
                    // elements: testid
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 566:19: -> ^( IMPORT_MINUS testid )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:566:22: ^( IMPORT_MINUS testid )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_MINUS, "IMPORT_MINUS"), root_1);

                        adaptor.addChild(root_1, stream_testid.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:567:4: importall
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_importall_in_importsetclause3503);
                    importall278=importall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, importall278.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "importsetclause"

    public static class importset_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importset"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:569:1: importset : '{' ( NL )? importsetclause ( ( NL )? ',' ( NL )? importsetclause )* ( NL )? '}' -> ^( IMPORT_SET ( importsetclause )* ) ;
    public final babel17Parser.importset_return importset() throws RecognitionException {
        babel17Parser.importset_return retval = new babel17Parser.importset_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal279=null;
        Token NL280=null;
        Token NL282=null;
        Token char_literal283=null;
        Token NL284=null;
        Token NL286=null;
        Token char_literal287=null;
        babel17Parser.importsetclause_return importsetclause281 = null;

        babel17Parser.importsetclause_return importsetclause285 = null;


        CommonTree char_literal279_tree=null;
        CommonTree NL280_tree=null;
        CommonTree NL282_tree=null;
        CommonTree char_literal283_tree=null;
        CommonTree NL284_tree=null;
        CommonTree NL286_tree=null;
        CommonTree char_literal287_tree=null;
        RewriteRuleTokenStream stream_CURLY_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_OPEN");
        RewriteRuleTokenStream stream_CURLY_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_importsetclause=new RewriteRuleSubtreeStream(adaptor,"rule importsetclause");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:570:2: ( '{' ( NL )? importsetclause ( ( NL )? ',' ( NL )? importsetclause )* ( NL )? '}' -> ^( IMPORT_SET ( importsetclause )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:570:4: '{' ( NL )? importsetclause ( ( NL )? ',' ( NL )? importsetclause )* ( NL )? '}'
            {
            char_literal279=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_importset3513); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal279);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:570:8: ( NL )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==NL) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:570:8: NL
                    {
                    NL280=(Token)match(input,NL,FOLLOW_NL_in_importset3515); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL280);


                    }
                    break;

            }

            pushFollow(FOLLOW_importsetclause_in_importset3518);
            importsetclause281=importsetclause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importsetclause.add(importsetclause281.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:570:28: ( ( NL )? ',' ( NL )? importsetclause )*
            loop136:
            do {
                int alt136=2;
                int LA136_0 = input.LA(1);

                if ( (LA136_0==NL) ) {
                    int LA136_1 = input.LA(2);

                    if ( (LA136_1==COMMA) ) {
                        alt136=1;
                    }


                }
                else if ( (LA136_0==COMMA) ) {
                    alt136=1;
                }


                switch (alt136) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:570:29: ( NL )? ',' ( NL )? importsetclause
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:570:29: ( NL )?
            	    int alt134=2;
            	    int LA134_0 = input.LA(1);

            	    if ( (LA134_0==NL) ) {
            	        alt134=1;
            	    }
            	    switch (alt134) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:570:29: NL
            	            {
            	            NL282=(Token)match(input,NL,FOLLOW_NL_in_importset3521); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL282);


            	            }
            	            break;

            	    }

            	    char_literal283=(Token)match(input,COMMA,FOLLOW_COMMA_in_importset3524); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal283);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:570:37: ( NL )?
            	    int alt135=2;
            	    int LA135_0 = input.LA(1);

            	    if ( (LA135_0==NL) ) {
            	        alt135=1;
            	    }
            	    switch (alt135) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:570:37: NL
            	            {
            	            NL284=(Token)match(input,NL,FOLLOW_NL_in_importset3526); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL284);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_importsetclause_in_importset3529);
            	    importsetclause285=importsetclause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_importsetclause.add(importsetclause285.getTree());

            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:570:59: ( NL )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==NL) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:570:59: NL
                    {
                    NL286=(Token)match(input,NL,FOLLOW_NL_in_importset3533); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL286);


                    }
                    break;

            }

            char_literal287=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_importset3536); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal287);



            // AST REWRITE
            // elements: importsetclause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 570:67: -> ^( IMPORT_SET ( importsetclause )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:570:70: ^( IMPORT_SET ( importsetclause )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_SET, "IMPORT_SET"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:570:83: ( importsetclause )*
                while ( stream_importsetclause.hasNext() ) {
                    adaptor.addChild(root_1, stream_importsetclause.nextTree());

                }
                stream_importsetclause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "importset"

    public static class st_import_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_import"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:572:1: st_import : L_import ( NL )? importprefix ( ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id ) )? -> ^( L_import importprefix ( importall )? ( importset )? ( Id )? ) ;
    public final babel17Parser.st_import_return st_import() throws RecognitionException {
        babel17Parser.st_import_return retval = new babel17Parser.st_import_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_import288=null;
        Token NL289=null;
        Token NL291=null;
        Token PERIOD292=null;
        Token NL293=null;
        Token PERIOD295=null;
        Token NL296=null;
        Token NL299=null;
        Token Id300=null;
        babel17Parser.importprefix_return importprefix290 = null;

        babel17Parser.importall_return importall294 = null;

        babel17Parser.importset_return importset297 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW298 = null;


        CommonTree L_import288_tree=null;
        CommonTree NL289_tree=null;
        CommonTree NL291_tree=null;
        CommonTree PERIOD292_tree=null;
        CommonTree NL293_tree=null;
        CommonTree PERIOD295_tree=null;
        CommonTree NL296_tree=null;
        CommonTree NL299_tree=null;
        CommonTree Id300_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_L_import=new RewriteRuleTokenStream(adaptor,"token L_import");
        RewriteRuleSubtreeStream stream_importprefix=new RewriteRuleSubtreeStream(adaptor,"rule importprefix");
        RewriteRuleSubtreeStream stream_importset=new RewriteRuleSubtreeStream(adaptor,"rule importset");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_importall=new RewriteRuleSubtreeStream(adaptor,"rule importall");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:2: ( L_import ( NL )? importprefix ( ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id ) )? -> ^( L_import importprefix ( importall )? ( importset )? ( Id )? ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:4: L_import ( NL )? importprefix ( ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id ) )?
            {
            L_import288=(Token)match(input,L_import,FOLLOW_L_import_in_st_import3554); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_import.add(L_import288);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:13: ( NL )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==NL) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:13: NL
                    {
                    NL289=(Token)match(input,NL,FOLLOW_NL_in_st_import3556); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL289);


                    }
                    break;

            }

            pushFollow(FOLLOW_importprefix_in_st_import3559);
            importprefix290=importprefix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importprefix.add(importprefix290.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:30: ( ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id ) )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==NL) ) {
                int LA144_1 = input.LA(2);

                if ( ((LA144_1>=A_DOUBLE_ARROW && LA144_1<=U_DOUBLE_ARROW)||LA144_1==PERIOD) ) {
                    alt144=1;
                }
            }
            else if ( ((LA144_0>=A_DOUBLE_ARROW && LA144_0<=U_DOUBLE_ARROW)||LA144_0==PERIOD) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:31: ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id )
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:31: ( NL )?
                    int alt139=2;
                    int LA139_0 = input.LA(1);

                    if ( (LA139_0==NL) ) {
                        alt139=1;
                    }
                    switch (alt139) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:31: NL
                            {
                            NL291=(Token)match(input,NL,FOLLOW_NL_in_st_import3562); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL291);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:35: ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id )
                    int alt143=3;
                    int LA143_0 = input.LA(1);

                    if ( (LA143_0==PERIOD) ) {
                        switch ( input.LA(2) ) {
                        case NL:
                            {
                            int LA143_3 = input.LA(3);

                            if ( (LA143_3==UNDERSCORE) ) {
                                alt143=1;
                            }
                            else if ( (LA143_3==CURLY_BRACKET_OPEN) ) {
                                alt143=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 143, 3, input);

                                throw nvae;
                            }
                            }
                            break;
                        case UNDERSCORE:
                            {
                            alt143=1;
                            }
                            break;
                        case CURLY_BRACKET_OPEN:
                            {
                            alt143=2;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 143, 1, input);

                            throw nvae;
                        }

                    }
                    else if ( ((LA143_0>=A_DOUBLE_ARROW && LA143_0<=U_DOUBLE_ARROW)) ) {
                        alt143=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 143, 0, input);

                        throw nvae;
                    }
                    switch (alt143) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:36: PERIOD ( NL )? importall
                            {
                            PERIOD292=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_st_import3566); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD292);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:43: ( NL )?
                            int alt140=2;
                            int LA140_0 = input.LA(1);

                            if ( (LA140_0==NL) ) {
                                alt140=1;
                            }
                            switch (alt140) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:43: NL
                                    {
                                    NL293=(Token)match(input,NL,FOLLOW_NL_in_st_import3568); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL293);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_importall_in_st_import3571);
                            importall294=importall();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_importall.add(importall294.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:59: PERIOD ( NL )? importset
                            {
                            PERIOD295=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_st_import3575); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD295);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:66: ( NL )?
                            int alt141=2;
                            int LA141_0 = input.LA(1);

                            if ( (LA141_0==NL) ) {
                                alt141=1;
                            }
                            switch (alt141) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:66: NL
                                    {
                                    NL296=(Token)match(input,NL,FOLLOW_NL_in_st_import3577); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL296);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_importset_in_st_import3580);
                            importset297=importset();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_importset.add(importset297.getTree());

                            }
                            break;
                        case 3 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:82: token_DOUBLE_ARROW ( NL )? Id
                            {
                            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_st_import3584);
                            token_DOUBLE_ARROW298=token_DOUBLE_ARROW();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW298.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:101: ( NL )?
                            int alt142=2;
                            int LA142_0 = input.LA(1);

                            if ( (LA142_0==NL) ) {
                                alt142=1;
                            }
                            switch (alt142) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:101: NL
                                    {
                                    NL299=(Token)match(input,NL,FOLLOW_NL_in_st_import3586); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL299);


                                    }
                                    break;

                            }

                            Id300=(Token)match(input,Id,FOLLOW_Id_in_st_import3589); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Id.add(Id300);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: importprefix, importset, Id, L_import, importall
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 573:111: -> ^( L_import importprefix ( importall )? ( importset )? ( Id )? )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:114: ^( L_import importprefix ( importall )? ( importset )? ( Id )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_L_import.nextNode(), root_1);

                adaptor.addChild(root_1, stream_importprefix.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:138: ( importall )?
                if ( stream_importall.hasNext() ) {
                    adaptor.addChild(root_1, stream_importall.nextTree());

                }
                stream_importall.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:149: ( importset )?
                if ( stream_importset.hasNext() ) {
                    adaptor.addChild(root_1, stream_importset.nextTree());

                }
                stream_importset.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:160: ( Id )?
                if ( stream_Id.hasNext() ) {
                    adaptor.addChild(root_1, stream_Id.nextNode());

                }
                stream_Id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_import"

    public static class expr_or_assign_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_or_assign"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:575:1: expr_or_assign : ( ( pattern ( NL )? '=' )=> pattern ( NL )? '=' ( NL )? expr -> ^( ASSIGN pattern expr ) | ( term_expr ( NL )? '=' )=> term_expr ( NL )? '=' ( NL )? expr -> ^( LENS_ASSIGN term_expr expr ) | expr );
    public final babel17Parser.expr_or_assign_return expr_or_assign() throws RecognitionException {
        babel17Parser.expr_or_assign_return retval = new babel17Parser.expr_or_assign_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL302=null;
        Token char_literal303=null;
        Token NL304=null;
        Token NL307=null;
        Token char_literal308=null;
        Token NL309=null;
        babel17Parser.pattern_return pattern301 = null;

        babel17Parser.expr_return expr305 = null;

        babel17Parser.term_expr_return term_expr306 = null;

        babel17Parser.expr_return expr310 = null;

        babel17Parser.expr_return expr311 = null;


        CommonTree NL302_tree=null;
        CommonTree char_literal303_tree=null;
        CommonTree NL304_tree=null;
        CommonTree NL307_tree=null;
        CommonTree char_literal308_tree=null;
        CommonTree NL309_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_term_expr=new RewriteRuleSubtreeStream(adaptor,"rule term_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:2: ( ( pattern ( NL )? '=' )=> pattern ( NL )? '=' ( NL )? expr -> ^( ASSIGN pattern expr ) | ( term_expr ( NL )? '=' )=> term_expr ( NL )? '=' ( NL )? expr -> ^( LENS_ASSIGN term_expr expr ) | expr )
            int alt149=3;
            alt149 = dfa149.predict(input);
            switch (alt149) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:4: ( pattern ( NL )? '=' )=> pattern ( NL )? '=' ( NL )? expr
                    {
                    pushFollow(FOLLOW_pattern_in_expr_or_assign3633);
                    pattern301=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern301.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:34: ( NL )?
                    int alt145=2;
                    int LA145_0 = input.LA(1);

                    if ( (LA145_0==NL) ) {
                        alt145=1;
                    }
                    switch (alt145) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:34: NL
                            {
                            NL302=(Token)match(input,NL,FOLLOW_NL_in_expr_or_assign3635); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL302);


                            }
                            break;

                    }

                    char_literal303=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_expr_or_assign3638); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal303);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:42: ( NL )?
                    int alt146=2;
                    int LA146_0 = input.LA(1);

                    if ( (LA146_0==NL) ) {
                        alt146=1;
                    }
                    switch (alt146) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:42: NL
                            {
                            NL304=(Token)match(input,NL,FOLLOW_NL_in_expr_or_assign3640); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL304);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_expr_or_assign3643);
                    expr305=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr305.getTree());


                    // AST REWRITE
                    // elements: pattern, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 577:51: -> ^( ASSIGN pattern expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:54: ^( ASSIGN pattern expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_pattern.nextTree());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:578:4: ( term_expr ( NL )? '=' )=> term_expr ( NL )? '=' ( NL )? expr
                    {
                    pushFollow(FOLLOW_term_expr_in_expr_or_assign3670);
                    term_expr306=term_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_term_expr.add(term_expr306.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:578:38: ( NL )?
                    int alt147=2;
                    int LA147_0 = input.LA(1);

                    if ( (LA147_0==NL) ) {
                        alt147=1;
                    }
                    switch (alt147) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:578:38: NL
                            {
                            NL307=(Token)match(input,NL,FOLLOW_NL_in_expr_or_assign3672); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL307);


                            }
                            break;

                    }

                    char_literal308=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_expr_or_assign3675); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal308);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:578:46: ( NL )?
                    int alt148=2;
                    int LA148_0 = input.LA(1);

                    if ( (LA148_0==NL) ) {
                        alt148=1;
                    }
                    switch (alt148) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:578:46: NL
                            {
                            NL309=(Token)match(input,NL,FOLLOW_NL_in_expr_or_assign3677); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL309);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_expr_or_assign3680);
                    expr310=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr310.getTree());


                    // AST REWRITE
                    // elements: expr, term_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 578:55: -> ^( LENS_ASSIGN term_expr expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:578:58: ^( LENS_ASSIGN term_expr expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LENS_ASSIGN, "LENS_ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_term_expr.nextTree());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:579:4: expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expr_in_expr_or_assign3695);
                    expr311=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr311.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expr_or_assign"

    public static class expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:581:1: expr : lop_expr ;
    public final babel17Parser.expr_return expr() throws RecognitionException {
        babel17Parser.expr_return retval = new babel17Parser.expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.lop_expr_return lop_expr312 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:582:2: ( lop_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:582:4: lop_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_lop_expr_in_expr3706);
            lop_expr312=lop_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lop_expr312.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expr"

    public static class control_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "control_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:585:1: control_expr : ( if_expr | while_do_expr | match_expr | for_expr | try_expr | begin_end );
    public final babel17Parser.control_expr_return control_expr() throws RecognitionException {
        babel17Parser.control_expr_return retval = new babel17Parser.control_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.if_expr_return if_expr313 = null;

        babel17Parser.while_do_expr_return while_do_expr314 = null;

        babel17Parser.match_expr_return match_expr315 = null;

        babel17Parser.for_expr_return for_expr316 = null;

        babel17Parser.try_expr_return try_expr317 = null;

        babel17Parser.begin_end_return begin_end318 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:586:2: ( if_expr | while_do_expr | match_expr | for_expr | try_expr | begin_end )
            int alt150=6;
            switch ( input.LA(1) ) {
            case L_if:
                {
                alt150=1;
                }
                break;
            case L_while:
                {
                alt150=2;
                }
                break;
            case L_match:
                {
                alt150=3;
                }
                break;
            case L_for:
                {
                alt150=4;
                }
                break;
            case L_try:
                {
                alt150=5;
                }
                break;
            case L_begin:
                {
                alt150=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);

                throw nvae;
            }

            switch (alt150) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:586:4: if_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_if_expr_in_control_expr3718);
                    if_expr313=if_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_expr313.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:587:4: while_do_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_while_do_expr_in_control_expr3723);
                    while_do_expr314=while_do_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_do_expr314.getTree());

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:588:4: match_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_match_expr_in_control_expr3728);
                    match_expr315=match_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, match_expr315.getTree());

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:589:4: for_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_for_expr_in_control_expr3733);
                    for_expr316=for_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_expr316.getTree());

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:590:5: try_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_try_expr_in_control_expr3739);
                    try_expr317=try_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, try_expr317.getTree());

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:591:4: begin_end
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_begin_end_in_control_expr3744);
                    begin_end318=begin_end();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, begin_end318.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "control_expr"

    public static class with_control_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "with_control_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:593:1: with_control_expr : ( control_expr | L_with ( NL )? protected_expr ( NL )? L_do block L_end -> ^( WITH protected_expr ^( BEGIN block ) ) );
    public final babel17Parser.with_control_expr_return with_control_expr() throws RecognitionException {
        babel17Parser.with_control_expr_return retval = new babel17Parser.with_control_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_with320=null;
        Token NL321=null;
        Token NL323=null;
        Token L_do324=null;
        Token L_end326=null;
        babel17Parser.control_expr_return control_expr319 = null;

        babel17Parser.protected_expr_return protected_expr322 = null;

        babel17Parser.block_return block325 = null;


        CommonTree L_with320_tree=null;
        CommonTree NL321_tree=null;
        CommonTree NL323_tree=null;
        CommonTree L_do324_tree=null;
        CommonTree L_end326_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_do=new RewriteRuleTokenStream(adaptor,"token L_do");
        RewriteRuleTokenStream stream_L_with=new RewriteRuleTokenStream(adaptor,"token L_with");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:594:2: ( control_expr | L_with ( NL )? protected_expr ( NL )? L_do block L_end -> ^( WITH protected_expr ^( BEGIN block ) ) )
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==L_begin||LA153_0==L_if||(LA153_0>=L_while && LA153_0<=L_for)||LA153_0==L_match||LA153_0==L_try) ) {
                alt153=1;
            }
            else if ( (LA153_0==L_with) ) {
                alt153=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);

                throw nvae;
            }
            switch (alt153) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:594:4: control_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_control_expr_in_with_control_expr3754);
                    control_expr319=control_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, control_expr319.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:595:4: L_with ( NL )? protected_expr ( NL )? L_do block L_end
                    {
                    L_with320=(Token)match(input,L_with,FOLLOW_L_with_in_with_control_expr3759); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_with.add(L_with320);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:595:11: ( NL )?
                    int alt151=2;
                    int LA151_0 = input.LA(1);

                    if ( (LA151_0==NL) ) {
                        alt151=1;
                    }
                    switch (alt151) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:595:11: NL
                            {
                            NL321=(Token)match(input,NL,FOLLOW_NL_in_with_control_expr3761); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL321);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_in_with_control_expr3764);
                    protected_expr322=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr322.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:595:30: ( NL )?
                    int alt152=2;
                    int LA152_0 = input.LA(1);

                    if ( (LA152_0==NL) ) {
                        alt152=1;
                    }
                    switch (alt152) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:595:30: NL
                            {
                            NL323=(Token)match(input,NL,FOLLOW_NL_in_with_control_expr3766); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL323);


                            }
                            break;

                    }

                    L_do324=(Token)match(input,L_do,FOLLOW_L_do_in_with_control_expr3769); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_do.add(L_do324);

                    pushFollow(FOLLOW_block_in_with_control_expr3771);
                    block325=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block325.getTree());
                    L_end326=(Token)match(input,L_end,FOLLOW_L_end_in_with_control_expr3773); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_end.add(L_end326);



                    // AST REWRITE
                    // elements: protected_expr, block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 595:51: -> ^( WITH protected_expr ^( BEGIN block ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:595:54: ^( WITH protected_expr ^( BEGIN block ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WITH, "WITH"), root_1);

                        adaptor.addChild(root_1, stream_protected_expr.nextTree());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:595:76: ^( BEGIN block )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BEGIN, "BEGIN"), root_2);

                        adaptor.addChild(root_2, stream_block.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "with_control_expr"

    public static class protected_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "protected_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:598:1: protected_expr : p_lop_expr ;
    public final babel17Parser.protected_expr_return protected_expr() throws RecognitionException {
        babel17Parser.protected_expr_return retval = new babel17Parser.protected_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.p_lop_expr_return p_lop_expr327 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:2: ( p_lop_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:4: p_lop_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_lop_expr_in_protected_expr3798);
            p_lop_expr327=p_lop_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_lop_expr327.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "protected_expr"

    public static class protected_expr_nc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "protected_expr_nc"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:602:1: protected_expr_nc : protected_expr ;
    public final babel17Parser.protected_expr_nc_return protected_expr_nc() throws RecognitionException {
        babel17Parser.protected_expr_nc_return retval = new babel17Parser.protected_expr_nc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.protected_expr_return protected_expr328 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:603:2: ( protected_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:603:4: protected_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_protected_expr_in_protected_expr_nc3811);
            protected_expr328=protected_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, protected_expr328.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "protected_expr_nc"

    public static class begin_end_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "begin_end"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:605:1: begin_end : L_begin block L_end -> ^( BEGIN block ) ;
    public final babel17Parser.begin_end_return begin_end() throws RecognitionException {
        babel17Parser.begin_end_return retval = new babel17Parser.begin_end_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_begin329=null;
        Token L_end331=null;
        babel17Parser.block_return block330 = null;


        CommonTree L_begin329_tree=null;
        CommonTree L_end331_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_begin=new RewriteRuleTokenStream(adaptor,"token L_begin");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:606:2: ( L_begin block L_end -> ^( BEGIN block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:606:4: L_begin block L_end
            {
            L_begin329=(Token)match(input,L_begin,FOLLOW_L_begin_in_begin_end3821); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_begin.add(L_begin329);

            pushFollow(FOLLOW_block_in_begin_end3823);
            block330=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block330.getTree());
            L_end331=(Token)match(input,L_end,FOLLOW_L_end_in_begin_end3825); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end331);



            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 606:24: -> ^( BEGIN block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:606:27: ^( BEGIN block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BEGIN, "BEGIN"), root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "begin_end"

    public static class parents_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parents"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:609:1: parents : ( '+' primitive_expr -> ^( PARENTS_PLUS primitive_expr ) | '*' primitive_expr -> ^( PARENTS_MUL primitive_expr ) );
    public final babel17Parser.parents_return parents() throws RecognitionException {
        babel17Parser.parents_return retval = new babel17Parser.parents_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal332=null;
        Token char_literal334=null;
        babel17Parser.primitive_expr_return primitive_expr333 = null;

        babel17Parser.primitive_expr_return primitive_expr335 = null;


        CommonTree char_literal332_tree=null;
        CommonTree char_literal334_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_TIMES=new RewriteRuleTokenStream(adaptor,"token TIMES");
        RewriteRuleSubtreeStream stream_primitive_expr=new RewriteRuleSubtreeStream(adaptor,"rule primitive_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:609:9: ( '+' primitive_expr -> ^( PARENTS_PLUS primitive_expr ) | '*' primitive_expr -> ^( PARENTS_MUL primitive_expr ) )
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==PLUS) ) {
                alt154=1;
            }
            else if ( (LA154_0==TIMES) ) {
                alt154=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 154, 0, input);

                throw nvae;
            }
            switch (alt154) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:609:11: '+' primitive_expr
                    {
                    char_literal332=(Token)match(input,PLUS,FOLLOW_PLUS_in_parents3843); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(char_literal332);

                    pushFollow(FOLLOW_primitive_expr_in_parents3845);
                    primitive_expr333=primitive_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitive_expr.add(primitive_expr333.getTree());


                    // AST REWRITE
                    // elements: primitive_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 609:30: -> ^( PARENTS_PLUS primitive_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:609:33: ^( PARENTS_PLUS primitive_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARENTS_PLUS, "PARENTS_PLUS"), root_1);

                        adaptor.addChild(root_1, stream_primitive_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:610:4: '*' primitive_expr
                    {
                    char_literal334=(Token)match(input,TIMES,FOLLOW_TIMES_in_parents3858); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMES.add(char_literal334);

                    pushFollow(FOLLOW_primitive_expr_in_parents3860);
                    primitive_expr335=primitive_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitive_expr.add(primitive_expr335.getTree());


                    // AST REWRITE
                    // elements: primitive_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 610:23: -> ^( PARENTS_MUL primitive_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:610:26: ^( PARENTS_MUL primitive_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARENTS_MUL, "PARENTS_MUL"), root_1);

                        adaptor.addChild(root_1, stream_primitive_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parents"

    public static class obj_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "obj_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:1: obj_expr : ( ( L_obj ( NL )? parents )=> L_obj ( NL )? parents block L_end -> ^( OBJ block parents ) | L_obj block L_end -> ^( OBJ block ) );
    public final babel17Parser.obj_expr_return obj_expr() throws RecognitionException {
        babel17Parser.obj_expr_return retval = new babel17Parser.obj_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_obj336=null;
        Token NL337=null;
        Token L_end340=null;
        Token L_obj341=null;
        Token L_end343=null;
        babel17Parser.parents_return parents338 = null;

        babel17Parser.block_return block339 = null;

        babel17Parser.block_return block342 = null;


        CommonTree L_obj336_tree=null;
        CommonTree NL337_tree=null;
        CommonTree L_end340_tree=null;
        CommonTree L_obj341_tree=null;
        CommonTree L_end343_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_obj=new RewriteRuleTokenStream(adaptor,"token L_obj");
        RewriteRuleSubtreeStream stream_parents=new RewriteRuleSubtreeStream(adaptor,"rule parents");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:9: ( ( L_obj ( NL )? parents )=> L_obj ( NL )? parents block L_end -> ^( OBJ block parents ) | L_obj block L_end -> ^( OBJ block ) )
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==L_obj) ) {
                int LA156_1 = input.LA(2);

                if ( (LA156_1==NL) ) {
                    int LA156_2 = input.LA(3);

                    if ( ((LA156_2>=L_begin && LA156_2<=L_if)||(LA156_2>=L_while && LA156_2<=L_for)||(LA156_2>=L_yield && LA156_2<=L_match)||(LA156_2>=L_val && LA156_2<=L_def)||LA156_2==L_exception||LA156_2==L_try||(LA156_2>=L_concurrent && LA156_2<=L_nil)||(LA156_2>=L_module && LA156_2<=L_import)||LA156_2==L_not||(LA156_2>=L_root && LA156_2<=L_lens)||LA156_2==SC||LA156_2==MINUS||(LA156_2>=A_ELLIPSIS && LA156_2<=U_ELLIPSIS)||LA156_2==L_force||(LA156_2>=NL && LA156_2<=Id)||(LA156_2>=Float && LA156_2<=Num)||(LA156_2>=String && LA156_2<=ROUND_BRACKET_OPEN)||LA156_2==SQUARE_BRACKET_OPEN||LA156_2==CURLY_BRACKET_OPEN||LA156_2==UNDERSCORE||(LA156_2>=PRAGMA_LOG && LA156_2<=PRAGMA_CATCH)) ) {
                        alt156=2;
                    }
                    else if ( (LA156_2==PLUS) && (synpred10_babel17())) {
                        alt156=1;
                    }
                    else if ( (LA156_2==TIMES) && (synpred10_babel17())) {
                        alt156=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 156, 2, input);

                        throw nvae;
                    }
                }
                else if ( ((LA156_1>=L_begin && LA156_1<=L_if)||(LA156_1>=L_while && LA156_1<=L_for)||(LA156_1>=L_yield && LA156_1<=L_match)||(LA156_1>=L_val && LA156_1<=L_def)||LA156_1==L_exception||LA156_1==L_try||(LA156_1>=L_concurrent && LA156_1<=L_nil)||(LA156_1>=L_module && LA156_1<=L_import)||LA156_1==L_not||(LA156_1>=L_root && LA156_1<=L_lens)||LA156_1==SC||LA156_1==MINUS||(LA156_1>=A_ELLIPSIS && LA156_1<=U_ELLIPSIS)||LA156_1==L_force||(LA156_1>=Constr && LA156_1<=Id)||(LA156_1>=Float && LA156_1<=Num)||(LA156_1>=String && LA156_1<=ROUND_BRACKET_OPEN)||LA156_1==SQUARE_BRACKET_OPEN||LA156_1==CURLY_BRACKET_OPEN||LA156_1==UNDERSCORE||(LA156_1>=PRAGMA_LOG && LA156_1<=PRAGMA_CATCH)) ) {
                    alt156=2;
                }
                else if ( (LA156_1==PLUS) && (synpred10_babel17())) {
                    alt156=1;
                }
                else if ( (LA156_1==TIMES) && (synpred10_babel17())) {
                    alt156=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 156, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;
            }
            switch (alt156) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:11: ( L_obj ( NL )? parents )=> L_obj ( NL )? parents block L_end
                    {
                    L_obj336=(Token)match(input,L_obj,FOLLOW_L_obj_in_obj_expr3888); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_obj.add(L_obj336);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:40: ( NL )?
                    int alt155=2;
                    int LA155_0 = input.LA(1);

                    if ( (LA155_0==NL) ) {
                        alt155=1;
                    }
                    switch (alt155) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:40: NL
                            {
                            NL337=(Token)match(input,NL,FOLLOW_NL_in_obj_expr3890); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL337);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_parents_in_obj_expr3893);
                    parents338=parents();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parents.add(parents338.getTree());
                    pushFollow(FOLLOW_block_in_obj_expr3895);
                    block339=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block339.getTree());
                    L_end340=(Token)match(input,L_end,FOLLOW_L_end_in_obj_expr3897); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_end.add(L_end340);



                    // AST REWRITE
                    // elements: parents, block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 613:64: -> ^( OBJ block parents )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:67: ^( OBJ block parents )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJ, "OBJ"), root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());
                        adaptor.addChild(root_1, stream_parents.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:614:17: L_obj block L_end
                    {
                    L_obj341=(Token)match(input,L_obj,FOLLOW_L_obj_in_obj_expr3925); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_obj.add(L_obj341);

                    pushFollow(FOLLOW_block_in_obj_expr3927);
                    block342=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block342.getTree());
                    L_end343=(Token)match(input,L_end,FOLLOW_L_end_in_obj_expr3929); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_end.add(L_end343);



                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 614:35: -> ^( OBJ block )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:614:38: ^( OBJ block )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJ, "OBJ"), root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "obj_expr"

    public static class lop_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lop_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:616:1: lop_expr : ( ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | op_expr );
    public final babel17Parser.lop_expr_return lop_expr() throws RecognitionException {
        babel17Parser.lop_expr_return retval = new babel17Parser.lop_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.lambda_expr_nobrackets_return lambda_expr_nobrackets344 = null;

        babel17Parser.op_expr_return op_expr345 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:618:2: ( ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | op_expr )
            int alt157=2;
            alt157 = dfa157.predict(input);
            switch (alt157) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:618:4: ( lambda_expr_nobrackets )=> lambda_expr_nobrackets
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lambda_expr_nobrackets_in_lop_expr3959);
                    lambda_expr_nobrackets344=lambda_expr_nobrackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lambda_expr_nobrackets344.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:619:4: op_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_op_expr_in_lop_expr3964);
                    op_expr345=op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op_expr345.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lop_expr"

    public static class p_lop_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_lop_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:621:1: p_lop_expr : ( ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | p_op_expr );
    public final babel17Parser.p_lop_expr_return p_lop_expr() throws RecognitionException {
        babel17Parser.p_lop_expr_return retval = new babel17Parser.p_lop_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.lambda_expr_nobrackets_return lambda_expr_nobrackets346 = null;

        babel17Parser.p_op_expr_return p_op_expr347 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:623:2: ( ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | p_op_expr )
            int alt158=2;
            alt158 = dfa158.predict(input);
            switch (alt158) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:623:4: ( lambda_expr_nobrackets )=> lambda_expr_nobrackets
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lambda_expr_nobrackets_in_p_lop_expr3982);
                    lambda_expr_nobrackets346=lambda_expr_nobrackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lambda_expr_nobrackets346.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:624:4: p_op_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_op_expr_in_p_lop_expr3987);
                    p_op_expr347=p_op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_op_expr347.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_lop_expr"

    public static class if_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "if_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:626:1: if_expr : L_if ( NL )? protected_expr ( NL )? L_then block ( L_elseif ( NL )? protected_expr ( NL )? L_then block )* ( L_else block )? L_end -> ^( IF ( protected_expr )* ( block )* ) ;
    public final babel17Parser.if_expr_return if_expr() throws RecognitionException {
        babel17Parser.if_expr_return retval = new babel17Parser.if_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_if348=null;
        Token NL349=null;
        Token NL351=null;
        Token L_then352=null;
        Token L_elseif354=null;
        Token NL355=null;
        Token NL357=null;
        Token L_then358=null;
        Token L_else360=null;
        Token L_end362=null;
        babel17Parser.protected_expr_return protected_expr350 = null;

        babel17Parser.block_return block353 = null;

        babel17Parser.protected_expr_return protected_expr356 = null;

        babel17Parser.block_return block359 = null;

        babel17Parser.block_return block361 = null;


        CommonTree L_if348_tree=null;
        CommonTree NL349_tree=null;
        CommonTree NL351_tree=null;
        CommonTree L_then352_tree=null;
        CommonTree L_elseif354_tree=null;
        CommonTree NL355_tree=null;
        CommonTree NL357_tree=null;
        CommonTree L_then358_tree=null;
        CommonTree L_else360_tree=null;
        CommonTree L_end362_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_else=new RewriteRuleTokenStream(adaptor,"token L_else");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_elseif=new RewriteRuleTokenStream(adaptor,"token L_elseif");
        RewriteRuleTokenStream stream_L_then=new RewriteRuleTokenStream(adaptor,"token L_then");
        RewriteRuleTokenStream stream_L_if=new RewriteRuleTokenStream(adaptor,"token L_if");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:626:9: ( L_if ( NL )? protected_expr ( NL )? L_then block ( L_elseif ( NL )? protected_expr ( NL )? L_then block )* ( L_else block )? L_end -> ^( IF ( protected_expr )* ( block )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:626:11: L_if ( NL )? protected_expr ( NL )? L_then block ( L_elseif ( NL )? protected_expr ( NL )? L_then block )* ( L_else block )? L_end
            {
            L_if348=(Token)match(input,L_if,FOLLOW_L_if_in_if_expr3997); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_if.add(L_if348);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:626:16: ( NL )?
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==NL) ) {
                alt159=1;
            }
            switch (alt159) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:626:16: NL
                    {
                    NL349=(Token)match(input,NL,FOLLOW_NL_in_if_expr3999); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL349);


                    }
                    break;

            }

            pushFollow(FOLLOW_protected_expr_in_if_expr4002);
            protected_expr350=protected_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr350.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:626:35: ( NL )?
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==NL) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:626:35: NL
                    {
                    NL351=(Token)match(input,NL,FOLLOW_NL_in_if_expr4004); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL351);


                    }
                    break;

            }

            L_then352=(Token)match(input,L_then,FOLLOW_L_then_in_if_expr4007); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_then.add(L_then352);

            pushFollow(FOLLOW_block_in_if_expr4009);
            block353=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block353.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:627:3: ( L_elseif ( NL )? protected_expr ( NL )? L_then block )*
            loop163:
            do {
                int alt163=2;
                int LA163_0 = input.LA(1);

                if ( (LA163_0==L_elseif) ) {
                    alt163=1;
                }


                switch (alt163) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:627:4: L_elseif ( NL )? protected_expr ( NL )? L_then block
            	    {
            	    L_elseif354=(Token)match(input,L_elseif,FOLLOW_L_elseif_in_if_expr4015); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_L_elseif.add(L_elseif354);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:627:13: ( NL )?
            	    int alt161=2;
            	    int LA161_0 = input.LA(1);

            	    if ( (LA161_0==NL) ) {
            	        alt161=1;
            	    }
            	    switch (alt161) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:627:13: NL
            	            {
            	            NL355=(Token)match(input,NL,FOLLOW_NL_in_if_expr4017); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL355);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_protected_expr_in_if_expr4020);
            	    protected_expr356=protected_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr356.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:627:32: ( NL )?
            	    int alt162=2;
            	    int LA162_0 = input.LA(1);

            	    if ( (LA162_0==NL) ) {
            	        alt162=1;
            	    }
            	    switch (alt162) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:627:32: NL
            	            {
            	            NL357=(Token)match(input,NL,FOLLOW_NL_in_if_expr4022); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL357);


            	            }
            	            break;

            	    }

            	    L_then358=(Token)match(input,L_then,FOLLOW_L_then_in_if_expr4025); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_L_then.add(L_then358);

            	    pushFollow(FOLLOW_block_in_if_expr4027);
            	    block359=block();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_block.add(block359.getTree());

            	    }
            	    break;

            	default :
            	    break loop163;
                }
            } while (true);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:628:3: ( L_else block )?
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==L_else) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:628:4: L_else block
                    {
                    L_else360=(Token)match(input,L_else,FOLLOW_L_else_in_if_expr4035); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_else.add(L_else360);

                    pushFollow(FOLLOW_block_in_if_expr4037);
                    block361=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block361.getTree());

                    }
                    break;

            }

            L_end362=(Token)match(input,L_end,FOLLOW_L_end_in_if_expr4041); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end362);



            // AST REWRITE
            // elements: block, protected_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 628:26: -> ^( IF ( protected_expr )* ( block )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:628:29: ^( IF ( protected_expr )* ( block )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IF, "IF"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:628:34: ( protected_expr )*
                while ( stream_protected_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_protected_expr.nextTree());

                }
                stream_protected_expr.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:628:50: ( block )*
                while ( stream_block.hasNext() ) {
                    adaptor.addChild(root_1, stream_block.nextTree());

                }
                stream_block.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "if_expr"

    public static class while_do_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "while_do_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:630:1: while_do_expr : L_while ( NL )? protected_expr ( NL )? L_do block L_end -> ^( WHILE_DO protected_expr block ) ;
    public final babel17Parser.while_do_expr_return while_do_expr() throws RecognitionException {
        babel17Parser.while_do_expr_return retval = new babel17Parser.while_do_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_while363=null;
        Token NL364=null;
        Token NL366=null;
        Token L_do367=null;
        Token L_end369=null;
        babel17Parser.protected_expr_return protected_expr365 = null;

        babel17Parser.block_return block368 = null;


        CommonTree L_while363_tree=null;
        CommonTree NL364_tree=null;
        CommonTree NL366_tree=null;
        CommonTree L_do367_tree=null;
        CommonTree L_end369_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_do=new RewriteRuleTokenStream(adaptor,"token L_do");
        RewriteRuleTokenStream stream_L_while=new RewriteRuleTokenStream(adaptor,"token L_while");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:631:2: ( L_while ( NL )? protected_expr ( NL )? L_do block L_end -> ^( WHILE_DO protected_expr block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:631:4: L_while ( NL )? protected_expr ( NL )? L_do block L_end
            {
            L_while363=(Token)match(input,L_while,FOLLOW_L_while_in_while_do_expr4065); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_while.add(L_while363);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:631:12: ( NL )?
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==NL) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:631:12: NL
                    {
                    NL364=(Token)match(input,NL,FOLLOW_NL_in_while_do_expr4067); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL364);


                    }
                    break;

            }

            pushFollow(FOLLOW_protected_expr_in_while_do_expr4070);
            protected_expr365=protected_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr365.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:631:31: ( NL )?
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==NL) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:631:31: NL
                    {
                    NL366=(Token)match(input,NL,FOLLOW_NL_in_while_do_expr4072); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL366);


                    }
                    break;

            }

            L_do367=(Token)match(input,L_do,FOLLOW_L_do_in_while_do_expr4075); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_do.add(L_do367);

            pushFollow(FOLLOW_block_in_while_do_expr4077);
            block368=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block368.getTree());
            L_end369=(Token)match(input,L_end,FOLLOW_L_end_in_while_do_expr4079); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end369);



            // AST REWRITE
            // elements: protected_expr, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 632:5: -> ^( WHILE_DO protected_expr block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:632:8: ^( WHILE_DO protected_expr block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHILE_DO, "WHILE_DO"), root_1);

                adaptor.addChild(root_1, stream_protected_expr.nextTree());
                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "while_do_expr"

    public static class cases_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cases"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:634:1: cases : ( full_cases | pattern ( NL )? token_DOUBLE_ARROW block -> ^( CASES ^( NIL_TOKEN pattern block ) ) );
    public final babel17Parser.cases_return cases() throws RecognitionException {
        babel17Parser.cases_return retval = new babel17Parser.cases_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL372=null;
        babel17Parser.full_cases_return full_cases370 = null;

        babel17Parser.pattern_return pattern371 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW373 = null;

        babel17Parser.block_return block374 = null;


        CommonTree NL372_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:635:2: ( full_cases | pattern ( NL )? token_DOUBLE_ARROW block -> ^( CASES ^( NIL_TOKEN pattern block ) ) )
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==L_case) ) {
                alt168=1;
            }
            else if ( (LA168_0==L_exception||(LA168_0>=L_true && LA168_0<=L_false)||LA168_0==L_nil||LA168_0==MINUS||(LA168_0>=A_ELLIPSIS && LA168_0<=U_ELLIPSIS)||(LA168_0>=Constr && LA168_0<=Id)||LA168_0==Num||(LA168_0>=String && LA168_0<=ROUND_BRACKET_OPEN)||LA168_0==SQUARE_BRACKET_OPEN||LA168_0==CURLY_BRACKET_OPEN||LA168_0==UNDERSCORE) ) {
                alt168=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);

                throw nvae;
            }
            switch (alt168) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:635:4: full_cases
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_full_cases_in_cases4109);
                    full_cases370=full_cases();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, full_cases370.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:636:4: pattern ( NL )? token_DOUBLE_ARROW block
                    {
                    pushFollow(FOLLOW_pattern_in_cases4114);
                    pattern371=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern371.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:636:12: ( NL )?
                    int alt167=2;
                    int LA167_0 = input.LA(1);

                    if ( (LA167_0==NL) ) {
                        alt167=1;
                    }
                    switch (alt167) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:636:12: NL
                            {
                            NL372=(Token)match(input,NL,FOLLOW_NL_in_cases4116); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL372);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_token_DOUBLE_ARROW_in_cases4119);
                    token_DOUBLE_ARROW373=token_DOUBLE_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW373.getTree());
                    pushFollow(FOLLOW_block_in_cases4121);
                    block374=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block374.getTree());


                    // AST REWRITE
                    // elements: pattern, block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 636:41: -> ^( CASES ^( NIL_TOKEN pattern block ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:636:44: ^( CASES ^( NIL_TOKEN pattern block ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:636:52: ^( NIL_TOKEN pattern block )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        adaptor.addChild(root_2, stream_pattern.nextTree());
                        adaptor.addChild(root_2, stream_block.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cases"

    public static class full_cases_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "full_cases"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:638:1: full_cases : ( case_expr )+ -> ^( CASES ( case_expr )+ ) ;
    public final babel17Parser.full_cases_return full_cases() throws RecognitionException {
        babel17Parser.full_cases_return retval = new babel17Parser.full_cases_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.case_expr_return case_expr375 = null;


        RewriteRuleSubtreeStream stream_case_expr=new RewriteRuleSubtreeStream(adaptor,"rule case_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:639:2: ( ( case_expr )+ -> ^( CASES ( case_expr )+ ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:639:4: ( case_expr )+
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:639:4: ( case_expr )+
            int cnt169=0;
            loop169:
            do {
                int alt169=2;
                int LA169_0 = input.LA(1);

                if ( (LA169_0==L_case) ) {
                    alt169=1;
                }


                switch (alt169) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:639:4: case_expr
            	    {
            	    pushFollow(FOLLOW_case_expr_in_full_cases4144);
            	    case_expr375=case_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_case_expr.add(case_expr375.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt169 >= 1 ) break loop169;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(169, input);
                        throw eee;
                }
                cnt169++;
            } while (true);



            // AST REWRITE
            // elements: case_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 639:15: -> ^( CASES ( case_expr )+ )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:639:18: ^( CASES ( case_expr )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                if ( !(stream_case_expr.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_case_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_case_expr.nextTree());

                }
                stream_case_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "full_cases"

    public static class case_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "case_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:641:1: case_expr : ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block ) -> ^( NIL_TOKEN casepattern block ) ;
    public final babel17Parser.case_expr_return case_expr() throws RecognitionException {
        babel17Parser.case_expr_return retval = new babel17Parser.case_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_case376=null;
        Token NL377=null;
        Token NL379=null;
        babel17Parser.casepattern_return casepattern378 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW380 = null;

        babel17Parser.block_return block381 = null;


        CommonTree L_case376_tree=null;
        CommonTree NL377_tree=null;
        CommonTree NL379_tree=null;
        RewriteRuleTokenStream stream_L_case=new RewriteRuleTokenStream(adaptor,"token L_case");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_casepattern=new RewriteRuleSubtreeStream(adaptor,"rule casepattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:642:2: ( ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block ) -> ^( NIL_TOKEN casepattern block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:642:4: ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block )
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:642:4: ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:642:5: L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block
            {
            L_case376=(Token)match(input,L_case,FOLLOW_L_case_in_case_expr4165); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_case.add(L_case376);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:642:12: ( NL )?
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==NL) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:642:12: NL
                    {
                    NL377=(Token)match(input,NL,FOLLOW_NL_in_case_expr4167); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL377);


                    }
                    break;

            }

            pushFollow(FOLLOW_casepattern_in_case_expr4170);
            casepattern378=casepattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_casepattern.add(casepattern378.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:642:28: ( NL )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==NL) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:642:28: NL
                    {
                    NL379=(Token)match(input,NL,FOLLOW_NL_in_case_expr4172); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL379);


                    }
                    break;

            }

            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_case_expr4175);
            token_DOUBLE_ARROW380=token_DOUBLE_ARROW();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW380.getTree());
            pushFollow(FOLLOW_block_in_case_expr4177);
            block381=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block381.getTree());

            }



            // AST REWRITE
            // elements: casepattern, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 642:58: -> ^( NIL_TOKEN casepattern block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:642:61: ^( NIL_TOKEN casepattern block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_1);

                adaptor.addChild(root_1, stream_casepattern.nextTree());
                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "case_expr"

    public static class match_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "match_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:644:1: match_expr : L_match ( NL )? p_op_expr ( NL )? full_cases L_end -> ^( MATCH p_op_expr full_cases ) ;
    public final babel17Parser.match_expr_return match_expr() throws RecognitionException {
        babel17Parser.match_expr_return retval = new babel17Parser.match_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_match382=null;
        Token NL383=null;
        Token NL385=null;
        Token L_end387=null;
        babel17Parser.p_op_expr_return p_op_expr384 = null;

        babel17Parser.full_cases_return full_cases386 = null;


        CommonTree L_match382_tree=null;
        CommonTree NL383_tree=null;
        CommonTree NL385_tree=null;
        CommonTree L_end387_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_match=new RewriteRuleTokenStream(adaptor,"token L_match");
        RewriteRuleSubtreeStream stream_full_cases=new RewriteRuleSubtreeStream(adaptor,"rule full_cases");
        RewriteRuleSubtreeStream stream_p_op_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_op_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:645:2: ( L_match ( NL )? p_op_expr ( NL )? full_cases L_end -> ^( MATCH p_op_expr full_cases ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:645:4: L_match ( NL )? p_op_expr ( NL )? full_cases L_end
            {
            L_match382=(Token)match(input,L_match,FOLLOW_L_match_in_match_expr4198); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_match.add(L_match382);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:645:12: ( NL )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==NL) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:645:12: NL
                    {
                    NL383=(Token)match(input,NL,FOLLOW_NL_in_match_expr4200); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL383);


                    }
                    break;

            }

            pushFollow(FOLLOW_p_op_expr_in_match_expr4203);
            p_op_expr384=p_op_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_op_expr.add(p_op_expr384.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:645:26: ( NL )?
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==NL) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:645:26: NL
                    {
                    NL385=(Token)match(input,NL,FOLLOW_NL_in_match_expr4205); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL385);


                    }
                    break;

            }

            pushFollow(FOLLOW_full_cases_in_match_expr4208);
            full_cases386=full_cases();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_full_cases.add(full_cases386.getTree());
            L_end387=(Token)match(input,L_end,FOLLOW_L_end_in_match_expr4210); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end387);



            // AST REWRITE
            // elements: full_cases, p_op_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 646:5: -> ^( MATCH p_op_expr full_cases )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:646:8: ^( MATCH p_op_expr full_cases )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH, "MATCH"), root_1);

                adaptor.addChild(root_1, stream_p_op_expr.nextTree());
                adaptor.addChild(root_1, stream_full_cases.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "match_expr"

    public static class try_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "try_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:648:1: try_expr : L_try ( NL )? pure_block ( NL )? L_catch ( NL )? full_cases L_end -> ^( TRY pure_block full_cases ) ;
    public final babel17Parser.try_expr_return try_expr() throws RecognitionException {
        babel17Parser.try_expr_return retval = new babel17Parser.try_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_try388=null;
        Token NL389=null;
        Token NL391=null;
        Token L_catch392=null;
        Token NL393=null;
        Token L_end395=null;
        babel17Parser.pure_block_return pure_block390 = null;

        babel17Parser.full_cases_return full_cases394 = null;


        CommonTree L_try388_tree=null;
        CommonTree NL389_tree=null;
        CommonTree NL391_tree=null;
        CommonTree L_catch392_tree=null;
        CommonTree NL393_tree=null;
        CommonTree L_end395_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_try=new RewriteRuleTokenStream(adaptor,"token L_try");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_catch=new RewriteRuleTokenStream(adaptor,"token L_catch");
        RewriteRuleSubtreeStream stream_full_cases=new RewriteRuleSubtreeStream(adaptor,"rule full_cases");
        RewriteRuleSubtreeStream stream_pure_block=new RewriteRuleSubtreeStream(adaptor,"rule pure_block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:648:9: ( L_try ( NL )? pure_block ( NL )? L_catch ( NL )? full_cases L_end -> ^( TRY pure_block full_cases ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:648:11: L_try ( NL )? pure_block ( NL )? L_catch ( NL )? full_cases L_end
            {
            L_try388=(Token)match(input,L_try,FOLLOW_L_try_in_try_expr4236); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_try.add(L_try388);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:648:17: ( NL )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==NL) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:648:17: NL
                    {
                    NL389=(Token)match(input,NL,FOLLOW_NL_in_try_expr4238); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL389);


                    }
                    break;

            }

            pushFollow(FOLLOW_pure_block_in_try_expr4241);
            pure_block390=pure_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pure_block.add(pure_block390.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:648:32: ( NL )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==NL) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:648:32: NL
                    {
                    NL391=(Token)match(input,NL,FOLLOW_NL_in_try_expr4243); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL391);


                    }
                    break;

            }

            L_catch392=(Token)match(input,L_catch,FOLLOW_L_catch_in_try_expr4246); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_catch.add(L_catch392);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:648:44: ( NL )?
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==NL) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:648:44: NL
                    {
                    NL393=(Token)match(input,NL,FOLLOW_NL_in_try_expr4248); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL393);


                    }
                    break;

            }

            pushFollow(FOLLOW_full_cases_in_try_expr4251);
            full_cases394=full_cases();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_full_cases.add(full_cases394.getTree());
            L_end395=(Token)match(input,L_end,FOLLOW_L_end_in_try_expr4253); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end395);



            // AST REWRITE
            // elements: full_cases, pure_block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 649:5: -> ^( TRY pure_block full_cases )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:649:8: ^( TRY pure_block full_cases )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TRY, "TRY"), root_1);

                adaptor.addChild(root_1, stream_pure_block.nextTree());
                adaptor.addChild(root_1, stream_full_cases.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "try_expr"

    public static class lambda_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:651:1: lambda_expr : '(' ( NL )? lambda_cases ( NL )? ')' -> ^( LAMBDA lambda_cases ) ;
    public final babel17Parser.lambda_expr_return lambda_expr() throws RecognitionException {
        babel17Parser.lambda_expr_return retval = new babel17Parser.lambda_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal396=null;
        Token NL397=null;
        Token NL399=null;
        Token char_literal400=null;
        babel17Parser.lambda_cases_return lambda_cases398 = null;


        CommonTree char_literal396_tree=null;
        CommonTree NL397_tree=null;
        CommonTree NL399_tree=null;
        CommonTree char_literal400_tree=null;
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleSubtreeStream stream_lambda_cases=new RewriteRuleSubtreeStream(adaptor,"rule lambda_cases");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:652:2: ( '(' ( NL )? lambda_cases ( NL )? ')' -> ^( LAMBDA lambda_cases ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:652:4: '(' ( NL )? lambda_cases ( NL )? ')'
            {
            char_literal396=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_lambda_expr4277); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal396);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:652:8: ( NL )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==NL) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:652:8: NL
                    {
                    NL397=(Token)match(input,NL,FOLLOW_NL_in_lambda_expr4279); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL397);


                    }
                    break;

            }

            pushFollow(FOLLOW_lambda_cases_in_lambda_expr4282);
            lambda_cases398=lambda_cases();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lambda_cases.add(lambda_cases398.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:652:25: ( NL )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==NL) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:652:25: NL
                    {
                    NL399=(Token)match(input,NL,FOLLOW_NL_in_lambda_expr4284); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL399);


                    }
                    break;

            }

            char_literal400=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_lambda_expr4287); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal400);



            // AST REWRITE
            // elements: lambda_cases
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 652:33: -> ^( LAMBDA lambda_cases )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:652:36: ^( LAMBDA lambda_cases )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAMBDA, "LAMBDA"), root_1);

                adaptor.addChild(root_1, stream_lambda_cases.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_expr"

    public static class lambda_expr_nobrackets_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_expr_nobrackets"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:654:1: lambda_expr_nobrackets : lambda_cases_nobrackets -> ^( LAMBDA lambda_cases_nobrackets ) ;
    public final babel17Parser.lambda_expr_nobrackets_return lambda_expr_nobrackets() throws RecognitionException {
        babel17Parser.lambda_expr_nobrackets_return retval = new babel17Parser.lambda_expr_nobrackets_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.lambda_cases_nobrackets_return lambda_cases_nobrackets401 = null;


        RewriteRuleSubtreeStream stream_lambda_cases_nobrackets=new RewriteRuleSubtreeStream(adaptor,"rule lambda_cases_nobrackets");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:655:2: ( lambda_cases_nobrackets -> ^( LAMBDA lambda_cases_nobrackets ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:655:4: lambda_cases_nobrackets
            {
            pushFollow(FOLLOW_lambda_cases_nobrackets_in_lambda_expr_nobrackets4306);
            lambda_cases_nobrackets401=lambda_cases_nobrackets();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lambda_cases_nobrackets.add(lambda_cases_nobrackets401.getTree());


            // AST REWRITE
            // elements: lambda_cases_nobrackets
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 655:28: -> ^( LAMBDA lambda_cases_nobrackets )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:655:31: ^( LAMBDA lambda_cases_nobrackets )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAMBDA, "LAMBDA"), root_1);

                adaptor.addChild(root_1, stream_lambda_cases_nobrackets.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_expr_nobrackets"

    public static class lambda_cases_nobrackets_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_cases_nobrackets"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:657:1: lambda_cases_nobrackets : pattern ( NL )? token_DOUBLE_ARROW ( NL )? lop_expr -> ^( CASES ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) ) ) ;
    public final babel17Parser.lambda_cases_nobrackets_return lambda_cases_nobrackets() throws RecognitionException {
        babel17Parser.lambda_cases_nobrackets_return retval = new babel17Parser.lambda_cases_nobrackets_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL403=null;
        Token NL405=null;
        babel17Parser.pattern_return pattern402 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW404 = null;

        babel17Parser.lop_expr_return lop_expr406 = null;


        CommonTree NL403_tree=null;
        CommonTree NL405_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_lop_expr=new RewriteRuleSubtreeStream(adaptor,"rule lop_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:658:2: ( pattern ( NL )? token_DOUBLE_ARROW ( NL )? lop_expr -> ^( CASES ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) ) ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:658:4: pattern ( NL )? token_DOUBLE_ARROW ( NL )? lop_expr
            {
            pushFollow(FOLLOW_pattern_in_lambda_cases_nobrackets4324);
            pattern402=pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pattern.add(pattern402.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:658:12: ( NL )?
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==NL) ) {
                alt179=1;
            }
            switch (alt179) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:658:12: NL
                    {
                    NL403=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases_nobrackets4326); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL403);


                    }
                    break;

            }

            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_lambda_cases_nobrackets4329);
            token_DOUBLE_ARROW404=token_DOUBLE_ARROW();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW404.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:658:35: ( NL )?
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==NL) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:658:35: NL
                    {
                    NL405=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases_nobrackets4331); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL405);


                    }
                    break;

            }

            pushFollow(FOLLOW_lop_expr_in_lambda_cases_nobrackets4334);
            lop_expr406=lop_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lop_expr.add(lop_expr406.getTree());


            // AST REWRITE
            // elements: pattern, lop_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 658:48: -> ^( CASES ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) ) )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:658:51: ^( CASES ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:658:59: ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                adaptor.addChild(root_2, stream_pattern.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:658:79: ^( BLOCK lop_expr )
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK, "BLOCK"), root_3);

                adaptor.addChild(root_3, stream_lop_expr.nextTree());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_cases_nobrackets"

    public static class lambda_case_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_case_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:660:1: lambda_case_expr : ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block ) -> ^( NIL_TOKEN casepattern pure_block ) ;
    public final babel17Parser.lambda_case_expr_return lambda_case_expr() throws RecognitionException {
        babel17Parser.lambda_case_expr_return retval = new babel17Parser.lambda_case_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_case407=null;
        Token NL408=null;
        Token NL410=null;
        Token NL412=null;
        babel17Parser.casepattern_return casepattern409 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW411 = null;

        babel17Parser.pure_block_return pure_block413 = null;


        CommonTree L_case407_tree=null;
        CommonTree NL408_tree=null;
        CommonTree NL410_tree=null;
        CommonTree NL412_tree=null;
        RewriteRuleTokenStream stream_L_case=new RewriteRuleTokenStream(adaptor,"token L_case");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_casepattern=new RewriteRuleSubtreeStream(adaptor,"rule casepattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_pure_block=new RewriteRuleSubtreeStream(adaptor,"rule pure_block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:661:2: ( ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block ) -> ^( NIL_TOKEN casepattern pure_block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:661:4: ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block )
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:661:4: ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:661:5: L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block
            {
            L_case407=(Token)match(input,L_case,FOLLOW_L_case_in_lambda_case_expr4362); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_case.add(L_case407);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:661:12: ( NL )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==NL) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:661:12: NL
                    {
                    NL408=(Token)match(input,NL,FOLLOW_NL_in_lambda_case_expr4364); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL408);


                    }
                    break;

            }

            pushFollow(FOLLOW_casepattern_in_lambda_case_expr4367);
            casepattern409=casepattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_casepattern.add(casepattern409.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:661:28: ( NL )?
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==NL) ) {
                alt182=1;
            }
            switch (alt182) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:661:28: NL
                    {
                    NL410=(Token)match(input,NL,FOLLOW_NL_in_lambda_case_expr4369); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL410);


                    }
                    break;

            }

            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_lambda_case_expr4372);
            token_DOUBLE_ARROW411=token_DOUBLE_ARROW();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW411.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:661:51: ( NL )?
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==NL) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:661:51: NL
                    {
                    NL412=(Token)match(input,NL,FOLLOW_NL_in_lambda_case_expr4374); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL412);


                    }
                    break;

            }

            pushFollow(FOLLOW_pure_block_in_lambda_case_expr4377);
            pure_block413=pure_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pure_block.add(pure_block413.getTree());

            }



            // AST REWRITE
            // elements: pure_block, casepattern
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 661:67: -> ^( NIL_TOKEN casepattern pure_block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:661:70: ^( NIL_TOKEN casepattern pure_block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_1);

                adaptor.addChild(root_1, stream_casepattern.nextTree());
                adaptor.addChild(root_1, stream_pure_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_case_expr"

    public static class lambda_cases_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_cases"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:663:1: lambda_cases : ( pattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block -> ^( CASES ^( NIL_TOKEN pattern pure_block ) ) | lambda_case_expr ( ( NL )? lambda_case_expr )* -> ^( CASES ( lambda_case_expr )+ ) );
    public final babel17Parser.lambda_cases_return lambda_cases() throws RecognitionException {
        babel17Parser.lambda_cases_return retval = new babel17Parser.lambda_cases_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL415=null;
        Token NL417=null;
        Token NL420=null;
        babel17Parser.pattern_return pattern414 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW416 = null;

        babel17Parser.pure_block_return pure_block418 = null;

        babel17Parser.lambda_case_expr_return lambda_case_expr419 = null;

        babel17Parser.lambda_case_expr_return lambda_case_expr421 = null;


        CommonTree NL415_tree=null;
        CommonTree NL417_tree=null;
        CommonTree NL420_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_lambda_case_expr=new RewriteRuleSubtreeStream(adaptor,"rule lambda_case_expr");
        RewriteRuleSubtreeStream stream_pure_block=new RewriteRuleSubtreeStream(adaptor,"rule pure_block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:664:2: ( pattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block -> ^( CASES ^( NIL_TOKEN pattern pure_block ) ) | lambda_case_expr ( ( NL )? lambda_case_expr )* -> ^( CASES ( lambda_case_expr )+ ) )
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==L_exception||(LA188_0>=L_true && LA188_0<=L_false)||LA188_0==L_nil||LA188_0==MINUS||(LA188_0>=A_ELLIPSIS && LA188_0<=U_ELLIPSIS)||(LA188_0>=Constr && LA188_0<=Id)||LA188_0==Num||(LA188_0>=String && LA188_0<=ROUND_BRACKET_OPEN)||LA188_0==SQUARE_BRACKET_OPEN||LA188_0==CURLY_BRACKET_OPEN||LA188_0==UNDERSCORE) ) {
                alt188=1;
            }
            else if ( (LA188_0==L_case) ) {
                alt188=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 188, 0, input);

                throw nvae;
            }
            switch (alt188) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:664:4: pattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block
                    {
                    pushFollow(FOLLOW_pattern_in_lambda_cases4398);
                    pattern414=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern414.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:664:12: ( NL )?
                    int alt184=2;
                    int LA184_0 = input.LA(1);

                    if ( (LA184_0==NL) ) {
                        alt184=1;
                    }
                    switch (alt184) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:664:12: NL
                            {
                            NL415=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases4400); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL415);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_token_DOUBLE_ARROW_in_lambda_cases4403);
                    token_DOUBLE_ARROW416=token_DOUBLE_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW416.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:664:35: ( NL )?
                    int alt185=2;
                    int LA185_0 = input.LA(1);

                    if ( (LA185_0==NL) ) {
                        alt185=1;
                    }
                    switch (alt185) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:664:35: NL
                            {
                            NL417=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases4405); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL417);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_pure_block_in_lambda_cases4408);
                    pure_block418=pure_block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pure_block.add(pure_block418.getTree());


                    // AST REWRITE
                    // elements: pattern, pure_block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 664:50: -> ^( CASES ^( NIL_TOKEN pattern pure_block ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:664:53: ^( CASES ^( NIL_TOKEN pattern pure_block ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:664:61: ^( NIL_TOKEN pattern pure_block )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        adaptor.addChild(root_2, stream_pattern.nextTree());
                        adaptor.addChild(root_2, stream_pure_block.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:665:4: lambda_case_expr ( ( NL )? lambda_case_expr )*
                    {
                    pushFollow(FOLLOW_lambda_case_expr_in_lambda_cases4427);
                    lambda_case_expr419=lambda_case_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lambda_case_expr.add(lambda_case_expr419.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:665:21: ( ( NL )? lambda_case_expr )*
                    loop187:
                    do {
                        int alt187=2;
                        int LA187_0 = input.LA(1);

                        if ( (LA187_0==NL) ) {
                            int LA187_1 = input.LA(2);

                            if ( (LA187_1==L_case) ) {
                                alt187=1;
                            }


                        }
                        else if ( (LA187_0==L_case) ) {
                            alt187=1;
                        }


                        switch (alt187) {
                    	case 1 :
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:665:22: ( NL )? lambda_case_expr
                    	    {
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:665:22: ( NL )?
                    	    int alt186=2;
                    	    int LA186_0 = input.LA(1);

                    	    if ( (LA186_0==NL) ) {
                    	        alt186=1;
                    	    }
                    	    switch (alt186) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:665:22: NL
                    	            {
                    	            NL420=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases4430); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL420);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_lambda_case_expr_in_lambda_cases4433);
                    	    lambda_case_expr421=lambda_case_expr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_lambda_case_expr.add(lambda_case_expr421.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop187;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: lambda_case_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 665:45: -> ^( CASES ( lambda_case_expr )+ )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:665:48: ^( CASES ( lambda_case_expr )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                        if ( !(stream_lambda_case_expr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_lambda_case_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_lambda_case_expr.nextTree());

                        }
                        stream_lambda_case_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_cases"

    public static class for_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:667:1: for_expr : L_for ( NL )? pattern ( NL )? L_in ( NL )? protected_expr ( NL )? L_do block L_end -> ^( FOR_EXPR pattern protected_expr block ) ;
    public final babel17Parser.for_expr_return for_expr() throws RecognitionException {
        babel17Parser.for_expr_return retval = new babel17Parser.for_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_for422=null;
        Token NL423=null;
        Token NL425=null;
        Token L_in426=null;
        Token NL427=null;
        Token NL429=null;
        Token L_do430=null;
        Token L_end432=null;
        babel17Parser.pattern_return pattern424 = null;

        babel17Parser.protected_expr_return protected_expr428 = null;

        babel17Parser.block_return block431 = null;


        CommonTree L_for422_tree=null;
        CommonTree NL423_tree=null;
        CommonTree NL425_tree=null;
        CommonTree L_in426_tree=null;
        CommonTree NL427_tree=null;
        CommonTree NL429_tree=null;
        CommonTree L_do430_tree=null;
        CommonTree L_end432_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_for=new RewriteRuleTokenStream(adaptor,"token L_for");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_in=new RewriteRuleTokenStream(adaptor,"token L_in");
        RewriteRuleTokenStream stream_L_do=new RewriteRuleTokenStream(adaptor,"token L_do");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:667:9: ( L_for ( NL )? pattern ( NL )? L_in ( NL )? protected_expr ( NL )? L_do block L_end -> ^( FOR_EXPR pattern protected_expr block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:667:11: L_for ( NL )? pattern ( NL )? L_in ( NL )? protected_expr ( NL )? L_do block L_end
            {
            L_for422=(Token)match(input,L_for,FOLLOW_L_for_in_for_expr4451); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_for.add(L_for422);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:667:17: ( NL )?
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==NL) ) {
                alt189=1;
            }
            switch (alt189) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:667:17: NL
                    {
                    NL423=(Token)match(input,NL,FOLLOW_NL_in_for_expr4453); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL423);


                    }
                    break;

            }

            pushFollow(FOLLOW_pattern_in_for_expr4456);
            pattern424=pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pattern.add(pattern424.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:667:29: ( NL )?
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==NL) ) {
                alt190=1;
            }
            switch (alt190) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:667:29: NL
                    {
                    NL425=(Token)match(input,NL,FOLLOW_NL_in_for_expr4458); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL425);


                    }
                    break;

            }

            L_in426=(Token)match(input,L_in,FOLLOW_L_in_in_for_expr4461); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_in.add(L_in426);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:667:38: ( NL )?
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==NL) ) {
                alt191=1;
            }
            switch (alt191) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:667:38: NL
                    {
                    NL427=(Token)match(input,NL,FOLLOW_NL_in_for_expr4463); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL427);


                    }
                    break;

            }

            pushFollow(FOLLOW_protected_expr_in_for_expr4466);
            protected_expr428=protected_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr428.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:667:57: ( NL )?
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==NL) ) {
                alt192=1;
            }
            switch (alt192) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:667:57: NL
                    {
                    NL429=(Token)match(input,NL,FOLLOW_NL_in_for_expr4468); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL429);


                    }
                    break;

            }

            L_do430=(Token)match(input,L_do,FOLLOW_L_do_in_for_expr4471); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_do.add(L_do430);

            pushFollow(FOLLOW_block_in_for_expr4473);
            block431=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block431.getTree());
            L_end432=(Token)match(input,L_end,FOLLOW_L_end_in_for_expr4475); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end432);



            // AST REWRITE
            // elements: block, pattern, protected_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 668:5: -> ^( FOR_EXPR pattern protected_expr block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:668:8: ^( FOR_EXPR pattern protected_expr block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_EXPR, "FOR_EXPR"), root_1);

                adaptor.addChild(root_1, stream_pattern.nextTree());
                adaptor.addChild(root_1, stream_protected_expr.nextTree());
                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "for_expr"

    public static class op_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "op_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:671:1: op_expr : ( builtin_primitive op_expr | lens_expr | bool_expr );
    public final babel17Parser.op_expr_return op_expr() throws RecognitionException {
        babel17Parser.op_expr_return retval = new babel17Parser.op_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.builtin_primitive_return builtin_primitive433 = null;

        babel17Parser.op_expr_return op_expr434 = null;

        babel17Parser.lens_expr_return lens_expr435 = null;

        babel17Parser.bool_expr_return bool_expr436 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:672:2: ( builtin_primitive op_expr | lens_expr | bool_expr )
            int alt193=3;
            switch ( input.LA(1) ) {
            case L_exception:
            case L_concurrent:
            case L_lazy:
            case L_force:
                {
                alt193=1;
                }
                break;
            case L_lens:
                {
                alt193=2;
                }
                break;
            case L_begin:
            case L_obj:
            case L_with:
            case L_if:
            case L_while:
            case L_for:
            case L_match:
            case L_try:
            case L_choose:
            case L_true:
            case L_false:
            case L_this:
            case L_random:
            case L_nil:
            case L_typeof:
            case L_not:
            case L_root:
            case L_native:
            case L_min:
            case L_max:
            case MINUS:
            case Constr:
            case Id:
            case Float:
            case Num:
            case String:
            case ROUND_BRACKET_OPEN:
            case SQUARE_BRACKET_OPEN:
            case CURLY_BRACKET_OPEN:
                {
                alt193=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 193, 0, input);

                throw nvae;
            }

            switch (alt193) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:672:4: builtin_primitive op_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_builtin_primitive_in_op_expr4504);
                    builtin_primitive433=builtin_primitive();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(builtin_primitive433.getTree(), root_0);
                    pushFollow(FOLLOW_op_expr_in_op_expr4507);
                    op_expr434=op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op_expr434.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:673:4: lens_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lens_expr_in_op_expr4512);
                    lens_expr435=lens_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lens_expr435.getTree());

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:674:4: bool_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_bool_expr_in_op_expr4517);
                    bool_expr436=bool_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_expr436.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "op_expr"

    public static class p_op_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_op_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:676:1: p_op_expr : ( builtin_primitive ( NL )? p_op_expr | p_lens_expr | p_bool_expr );
    public final babel17Parser.p_op_expr_return p_op_expr() throws RecognitionException {
        babel17Parser.p_op_expr_return retval = new babel17Parser.p_op_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL438=null;
        babel17Parser.builtin_primitive_return builtin_primitive437 = null;

        babel17Parser.p_op_expr_return p_op_expr439 = null;

        babel17Parser.p_lens_expr_return p_lens_expr440 = null;

        babel17Parser.p_bool_expr_return p_bool_expr441 = null;


        CommonTree NL438_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:677:2: ( builtin_primitive ( NL )? p_op_expr | p_lens_expr | p_bool_expr )
            int alt195=3;
            switch ( input.LA(1) ) {
            case L_exception:
            case L_concurrent:
            case L_lazy:
            case L_force:
                {
                alt195=1;
                }
                break;
            case L_lens:
                {
                alt195=2;
                }
                break;
            case L_begin:
            case L_obj:
            case L_with:
            case L_if:
            case L_while:
            case L_for:
            case L_match:
            case L_try:
            case L_choose:
            case L_true:
            case L_false:
            case L_this:
            case L_random:
            case L_nil:
            case L_typeof:
            case L_not:
            case L_root:
            case L_native:
            case L_min:
            case L_max:
            case MINUS:
            case Constr:
            case Id:
            case Float:
            case Num:
            case String:
            case ROUND_BRACKET_OPEN:
            case SQUARE_BRACKET_OPEN:
            case CURLY_BRACKET_OPEN:
                {
                alt195=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);

                throw nvae;
            }

            switch (alt195) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:677:4: builtin_primitive ( NL )? p_op_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_builtin_primitive_in_p_op_expr4527);
                    builtin_primitive437=builtin_primitive();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(builtin_primitive437.getTree(), root_0);
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:677:25: ( NL )?
                    int alt194=2;
                    int LA194_0 = input.LA(1);

                    if ( (LA194_0==NL) ) {
                        alt194=1;
                    }
                    switch (alt194) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:677:25: NL
                            {
                            NL438=(Token)match(input,NL,FOLLOW_NL_in_p_op_expr4530); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_op_expr_in_p_op_expr4534);
                    p_op_expr439=p_op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_op_expr439.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:678:4: p_lens_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_lens_expr_in_p_op_expr4539);
                    p_lens_expr440=p_lens_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_lens_expr440.getTree());

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:679:4: p_bool_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_bool_expr_in_p_op_expr4544);
                    p_bool_expr441=p_bool_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_expr441.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_op_expr"

    public static class builtin_primitive_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtin_primitive"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:681:1: builtin_primitive : ( L_exception | L_lazy | L_concurrent | L_force );
    public final babel17Parser.builtin_primitive_return builtin_primitive() throws RecognitionException {
        babel17Parser.builtin_primitive_return retval = new babel17Parser.builtin_primitive_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set442=null;

        CommonTree set442_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:682:2: ( L_exception | L_lazy | L_concurrent | L_force )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set442=(Token)input.LT(1);
            if ( input.LA(1)==L_exception||input.LA(1)==L_concurrent||input.LA(1)==L_lazy||input.LA(1)==L_force ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set442));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtin_primitive"

    public static class lens_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lens_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:684:1: lens_expr : ( L_lens ( NL )? Id ( NL )? token_DOUBLE_ARROW ( NL )? op_expr -> ^( L_lens Id op_expr ) | L_lens ( NL )? ROUND_BRACKET_OPEN ( NL )? protected_expr ( NL )? COMMA ( NL )? protected_expr ( NL )? ROUND_BRACKET_CLOSE -> ^( FUNCTIONS_LENS protected_expr protected_expr ) );
    public final babel17Parser.lens_expr_return lens_expr() throws RecognitionException {
        babel17Parser.lens_expr_return retval = new babel17Parser.lens_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_lens443=null;
        Token NL444=null;
        Token Id445=null;
        Token NL446=null;
        Token NL448=null;
        Token L_lens450=null;
        Token NL451=null;
        Token ROUND_BRACKET_OPEN452=null;
        Token NL453=null;
        Token NL455=null;
        Token COMMA456=null;
        Token NL457=null;
        Token NL459=null;
        Token ROUND_BRACKET_CLOSE460=null;
        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW447 = null;

        babel17Parser.op_expr_return op_expr449 = null;

        babel17Parser.protected_expr_return protected_expr454 = null;

        babel17Parser.protected_expr_return protected_expr458 = null;


        CommonTree L_lens443_tree=null;
        CommonTree NL444_tree=null;
        CommonTree Id445_tree=null;
        CommonTree NL446_tree=null;
        CommonTree NL448_tree=null;
        CommonTree L_lens450_tree=null;
        CommonTree NL451_tree=null;
        CommonTree ROUND_BRACKET_OPEN452_tree=null;
        CommonTree NL453_tree=null;
        CommonTree NL455_tree=null;
        CommonTree COMMA456_tree=null;
        CommonTree NL457_tree=null;
        CommonTree NL459_tree=null;
        CommonTree ROUND_BRACKET_CLOSE460_tree=null;
        RewriteRuleTokenStream stream_L_lens=new RewriteRuleTokenStream(adaptor,"token L_lens");
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_op_expr=new RewriteRuleSubtreeStream(adaptor,"rule op_expr");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:685:2: ( L_lens ( NL )? Id ( NL )? token_DOUBLE_ARROW ( NL )? op_expr -> ^( L_lens Id op_expr ) | L_lens ( NL )? ROUND_BRACKET_OPEN ( NL )? protected_expr ( NL )? COMMA ( NL )? protected_expr ( NL )? ROUND_BRACKET_CLOSE -> ^( FUNCTIONS_LENS protected_expr protected_expr ) )
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==L_lens) ) {
                switch ( input.LA(2) ) {
                case NL:
                    {
                    int LA204_2 = input.LA(3);

                    if ( (LA204_2==ROUND_BRACKET_OPEN) ) {
                        alt204=2;
                    }
                    else if ( (LA204_2==Id) ) {
                        alt204=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 204, 2, input);

                        throw nvae;
                    }
                    }
                    break;
                case ROUND_BRACKET_OPEN:
                    {
                    alt204=2;
                    }
                    break;
                case Id:
                    {
                    alt204=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 204, 1, input);

                    throw nvae;
                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 204, 0, input);

                throw nvae;
            }
            switch (alt204) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:685:4: L_lens ( NL )? Id ( NL )? token_DOUBLE_ARROW ( NL )? op_expr
                    {
                    L_lens443=(Token)match(input,L_lens,FOLLOW_L_lens_in_lens_expr4575); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_lens.add(L_lens443);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:685:11: ( NL )?
                    int alt196=2;
                    int LA196_0 = input.LA(1);

                    if ( (LA196_0==NL) ) {
                        alt196=1;
                    }
                    switch (alt196) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:685:11: NL
                            {
                            NL444=(Token)match(input,NL,FOLLOW_NL_in_lens_expr4577); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL444);


                            }
                            break;

                    }

                    Id445=(Token)match(input,Id,FOLLOW_Id_in_lens_expr4580); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id445);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:685:18: ( NL )?
                    int alt197=2;
                    int LA197_0 = input.LA(1);

                    if ( (LA197_0==NL) ) {
                        alt197=1;
                    }
                    switch (alt197) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:685:18: NL
                            {
                            NL446=(Token)match(input,NL,FOLLOW_NL_in_lens_expr4582); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL446);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_token_DOUBLE_ARROW_in_lens_expr4585);
                    token_DOUBLE_ARROW447=token_DOUBLE_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW447.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:685:41: ( NL )?
                    int alt198=2;
                    int LA198_0 = input.LA(1);

                    if ( (LA198_0==NL) ) {
                        alt198=1;
                    }
                    switch (alt198) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:685:41: NL
                            {
                            NL448=(Token)match(input,NL,FOLLOW_NL_in_lens_expr4587); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL448);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_op_expr_in_lens_expr4590);
                    op_expr449=op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_op_expr.add(op_expr449.getTree());


                    // AST REWRITE
                    // elements: op_expr, Id, L_lens
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 685:53: -> ^( L_lens Id op_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:685:56: ^( L_lens Id op_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_L_lens.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());
                        adaptor.addChild(root_1, stream_op_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:686:4: L_lens ( NL )? ROUND_BRACKET_OPEN ( NL )? protected_expr ( NL )? COMMA ( NL )? protected_expr ( NL )? ROUND_BRACKET_CLOSE
                    {
                    L_lens450=(Token)match(input,L_lens,FOLLOW_L_lens_in_lens_expr4605); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_lens.add(L_lens450);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:686:11: ( NL )?
                    int alt199=2;
                    int LA199_0 = input.LA(1);

                    if ( (LA199_0==NL) ) {
                        alt199=1;
                    }
                    switch (alt199) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:686:11: NL
                            {
                            NL451=(Token)match(input,NL,FOLLOW_NL_in_lens_expr4607); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL451);


                            }
                            break;

                    }

                    ROUND_BRACKET_OPEN452=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_lens_expr4610); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(ROUND_BRACKET_OPEN452);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:686:34: ( NL )?
                    int alt200=2;
                    int LA200_0 = input.LA(1);

                    if ( (LA200_0==NL) ) {
                        alt200=1;
                    }
                    switch (alt200) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:686:34: NL
                            {
                            NL453=(Token)match(input,NL,FOLLOW_NL_in_lens_expr4612); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL453);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_in_lens_expr4615);
                    protected_expr454=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr454.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:686:53: ( NL )?
                    int alt201=2;
                    int LA201_0 = input.LA(1);

                    if ( (LA201_0==NL) ) {
                        alt201=1;
                    }
                    switch (alt201) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:686:53: NL
                            {
                            NL455=(Token)match(input,NL,FOLLOW_NL_in_lens_expr4617); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL455);


                            }
                            break;

                    }

                    COMMA456=(Token)match(input,COMMA,FOLLOW_COMMA_in_lens_expr4620); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA456);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:686:63: ( NL )?
                    int alt202=2;
                    int LA202_0 = input.LA(1);

                    if ( (LA202_0==NL) ) {
                        alt202=1;
                    }
                    switch (alt202) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:686:63: NL
                            {
                            NL457=(Token)match(input,NL,FOLLOW_NL_in_lens_expr4622); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL457);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_in_lens_expr4625);
                    protected_expr458=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr458.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:686:82: ( NL )?
                    int alt203=2;
                    int LA203_0 = input.LA(1);

                    if ( (LA203_0==NL) ) {
                        alt203=1;
                    }
                    switch (alt203) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:686:82: NL
                            {
                            NL459=(Token)match(input,NL,FOLLOW_NL_in_lens_expr4627); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL459);


                            }
                            break;

                    }

                    ROUND_BRACKET_CLOSE460=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_lens_expr4630); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(ROUND_BRACKET_CLOSE460);



                    // AST REWRITE
                    // elements: protected_expr, protected_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 686:106: -> ^( FUNCTIONS_LENS protected_expr protected_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:686:109: ^( FUNCTIONS_LENS protected_expr protected_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTIONS_LENS, "FUNCTIONS_LENS"), root_1);

                        adaptor.addChild(root_1, stream_protected_expr.nextTree());
                        adaptor.addChild(root_1, stream_protected_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lens_expr"

    public static class p_lens_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_lens_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:688:1: p_lens_expr : ( L_lens ( NL )? Id ( NL )? token_DOUBLE_ARROW ( NL )? p_op_expr -> ^( L_lens token_DOUBLE_ARROW Id p_op_expr ) | L_lens ( NL )? ROUND_BRACKET_OPEN ( NL )? protected_expr ( NL )? COMMA ( NL )? protected_expr ( NL )? ROUND_BRACKET_CLOSE -> ^( FUNCTIONS_LENS protected_expr protected_expr ) );
    public final babel17Parser.p_lens_expr_return p_lens_expr() throws RecognitionException {
        babel17Parser.p_lens_expr_return retval = new babel17Parser.p_lens_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_lens461=null;
        Token NL462=null;
        Token Id463=null;
        Token NL464=null;
        Token NL466=null;
        Token L_lens468=null;
        Token NL469=null;
        Token ROUND_BRACKET_OPEN470=null;
        Token NL471=null;
        Token NL473=null;
        Token COMMA474=null;
        Token NL475=null;
        Token NL477=null;
        Token ROUND_BRACKET_CLOSE478=null;
        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW465 = null;

        babel17Parser.p_op_expr_return p_op_expr467 = null;

        babel17Parser.protected_expr_return protected_expr472 = null;

        babel17Parser.protected_expr_return protected_expr476 = null;


        CommonTree L_lens461_tree=null;
        CommonTree NL462_tree=null;
        CommonTree Id463_tree=null;
        CommonTree NL464_tree=null;
        CommonTree NL466_tree=null;
        CommonTree L_lens468_tree=null;
        CommonTree NL469_tree=null;
        CommonTree ROUND_BRACKET_OPEN470_tree=null;
        CommonTree NL471_tree=null;
        CommonTree NL473_tree=null;
        CommonTree COMMA474_tree=null;
        CommonTree NL475_tree=null;
        CommonTree NL477_tree=null;
        CommonTree ROUND_BRACKET_CLOSE478_tree=null;
        RewriteRuleTokenStream stream_L_lens=new RewriteRuleTokenStream(adaptor,"token L_lens");
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_p_op_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_op_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:689:2: ( L_lens ( NL )? Id ( NL )? token_DOUBLE_ARROW ( NL )? p_op_expr -> ^( L_lens token_DOUBLE_ARROW Id p_op_expr ) | L_lens ( NL )? ROUND_BRACKET_OPEN ( NL )? protected_expr ( NL )? COMMA ( NL )? protected_expr ( NL )? ROUND_BRACKET_CLOSE -> ^( FUNCTIONS_LENS protected_expr protected_expr ) )
            int alt213=2;
            int LA213_0 = input.LA(1);

            if ( (LA213_0==L_lens) ) {
                switch ( input.LA(2) ) {
                case NL:
                    {
                    int LA213_2 = input.LA(3);

                    if ( (LA213_2==Id) ) {
                        alt213=1;
                    }
                    else if ( (LA213_2==ROUND_BRACKET_OPEN) ) {
                        alt213=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 213, 2, input);

                        throw nvae;
                    }
                    }
                    break;
                case ROUND_BRACKET_OPEN:
                    {
                    alt213=2;
                    }
                    break;
                case Id:
                    {
                    alt213=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 213, 1, input);

                    throw nvae;
                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 213, 0, input);

                throw nvae;
            }
            switch (alt213) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:689:4: L_lens ( NL )? Id ( NL )? token_DOUBLE_ARROW ( NL )? p_op_expr
                    {
                    L_lens461=(Token)match(input,L_lens,FOLLOW_L_lens_in_p_lens_expr4650); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_lens.add(L_lens461);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:689:11: ( NL )?
                    int alt205=2;
                    int LA205_0 = input.LA(1);

                    if ( (LA205_0==NL) ) {
                        alt205=1;
                    }
                    switch (alt205) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:689:11: NL
                            {
                            NL462=(Token)match(input,NL,FOLLOW_NL_in_p_lens_expr4652); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL462);


                            }
                            break;

                    }

                    Id463=(Token)match(input,Id,FOLLOW_Id_in_p_lens_expr4655); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id463);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:689:18: ( NL )?
                    int alt206=2;
                    int LA206_0 = input.LA(1);

                    if ( (LA206_0==NL) ) {
                        alt206=1;
                    }
                    switch (alt206) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:689:18: NL
                            {
                            NL464=(Token)match(input,NL,FOLLOW_NL_in_p_lens_expr4657); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL464);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_token_DOUBLE_ARROW_in_p_lens_expr4660);
                    token_DOUBLE_ARROW465=token_DOUBLE_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW465.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:689:41: ( NL )?
                    int alt207=2;
                    int LA207_0 = input.LA(1);

                    if ( (LA207_0==NL) ) {
                        alt207=1;
                    }
                    switch (alt207) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:689:41: NL
                            {
                            NL466=(Token)match(input,NL,FOLLOW_NL_in_p_lens_expr4662); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL466);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_op_expr_in_p_lens_expr4665);
                    p_op_expr467=p_op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_op_expr.add(p_op_expr467.getTree());


                    // AST REWRITE
                    // elements: L_lens, p_op_expr, Id, token_DOUBLE_ARROW
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 689:55: -> ^( L_lens token_DOUBLE_ARROW Id p_op_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:689:58: ^( L_lens token_DOUBLE_ARROW Id p_op_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_L_lens.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_token_DOUBLE_ARROW.nextTree());
                        adaptor.addChild(root_1, stream_Id.nextNode());
                        adaptor.addChild(root_1, stream_p_op_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:690:4: L_lens ( NL )? ROUND_BRACKET_OPEN ( NL )? protected_expr ( NL )? COMMA ( NL )? protected_expr ( NL )? ROUND_BRACKET_CLOSE
                    {
                    L_lens468=(Token)match(input,L_lens,FOLLOW_L_lens_in_p_lens_expr4682); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_lens.add(L_lens468);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:690:11: ( NL )?
                    int alt208=2;
                    int LA208_0 = input.LA(1);

                    if ( (LA208_0==NL) ) {
                        alt208=1;
                    }
                    switch (alt208) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:690:11: NL
                            {
                            NL469=(Token)match(input,NL,FOLLOW_NL_in_p_lens_expr4684); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL469);


                            }
                            break;

                    }

                    ROUND_BRACKET_OPEN470=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_p_lens_expr4687); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(ROUND_BRACKET_OPEN470);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:690:34: ( NL )?
                    int alt209=2;
                    int LA209_0 = input.LA(1);

                    if ( (LA209_0==NL) ) {
                        alt209=1;
                    }
                    switch (alt209) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:690:34: NL
                            {
                            NL471=(Token)match(input,NL,FOLLOW_NL_in_p_lens_expr4689); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL471);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_in_p_lens_expr4692);
                    protected_expr472=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr472.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:690:53: ( NL )?
                    int alt210=2;
                    int LA210_0 = input.LA(1);

                    if ( (LA210_0==NL) ) {
                        alt210=1;
                    }
                    switch (alt210) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:690:53: NL
                            {
                            NL473=(Token)match(input,NL,FOLLOW_NL_in_p_lens_expr4694); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL473);


                            }
                            break;

                    }

                    COMMA474=(Token)match(input,COMMA,FOLLOW_COMMA_in_p_lens_expr4697); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA474);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:690:63: ( NL )?
                    int alt211=2;
                    int LA211_0 = input.LA(1);

                    if ( (LA211_0==NL) ) {
                        alt211=1;
                    }
                    switch (alt211) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:690:63: NL
                            {
                            NL475=(Token)match(input,NL,FOLLOW_NL_in_p_lens_expr4699); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL475);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_in_p_lens_expr4702);
                    protected_expr476=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr476.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:690:82: ( NL )?
                    int alt212=2;
                    int LA212_0 = input.LA(1);

                    if ( (LA212_0==NL) ) {
                        alt212=1;
                    }
                    switch (alt212) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:690:82: NL
                            {
                            NL477=(Token)match(input,NL,FOLLOW_NL_in_p_lens_expr4704); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL477);


                            }
                            break;

                    }

                    ROUND_BRACKET_CLOSE478=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_p_lens_expr4707); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(ROUND_BRACKET_CLOSE478);



                    // AST REWRITE
                    // elements: protected_expr, protected_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 690:106: -> ^( FUNCTIONS_LENS protected_expr protected_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:690:109: ^( FUNCTIONS_LENS protected_expr protected_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTIONS_LENS, "FUNCTIONS_LENS"), root_1);

                        adaptor.addChild(root_1, stream_protected_expr.nextTree());
                        adaptor.addChild(root_1, stream_protected_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_lens_expr"

    public static class bool_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bool_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:692:1: bool_expr : bool_or_expr ;
    public final babel17Parser.bool_expr_return bool_expr() throws RecognitionException {
        babel17Parser.bool_expr_return retval = new babel17Parser.bool_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.bool_or_expr_return bool_or_expr479 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:693:2: ( bool_or_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:693:4: bool_or_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_bool_or_expr_in_bool_expr4727);
            bool_or_expr479=bool_or_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_or_expr479.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bool_expr"

    public static class p_bool_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_bool_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:695:1: p_bool_expr : p_bool_or_expr ;
    public final babel17Parser.p_bool_expr_return p_bool_expr() throws RecognitionException {
        babel17Parser.p_bool_expr_return retval = new babel17Parser.p_bool_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.p_bool_or_expr_return p_bool_or_expr480 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:696:2: ( p_bool_or_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:696:4: p_bool_or_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_bool_or_expr_in_p_bool_expr4737);
            p_bool_or_expr480=p_bool_or_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_or_expr480.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_bool_expr"

    public static class bool_or_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bool_or_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:698:1: bool_or_expr : bool_and_expr ( ( NL )? token_OR ( NL )? bool_and_expr )* ;
    public final babel17Parser.bool_or_expr_return bool_or_expr() throws RecognitionException {
        babel17Parser.bool_or_expr_return retval = new babel17Parser.bool_or_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL482=null;
        Token NL484=null;
        babel17Parser.bool_and_expr_return bool_and_expr481 = null;

        babel17Parser.token_OR_return token_OR483 = null;

        babel17Parser.bool_and_expr_return bool_and_expr485 = null;


        CommonTree NL482_tree=null;
        CommonTree NL484_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:2: ( bool_and_expr ( ( NL )? token_OR ( NL )? bool_and_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:4: bool_and_expr ( ( NL )? token_OR ( NL )? bool_and_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_bool_and_expr_in_bool_or_expr4746);
            bool_and_expr481=bool_and_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_and_expr481.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:18: ( ( NL )? token_OR ( NL )? bool_and_expr )*
            loop216:
            do {
                int alt216=2;
                int LA216_0 = input.LA(1);

                if ( (LA216_0==NL) ) {
                    int LA216_1 = input.LA(2);

                    if ( (LA216_1==L_or) ) {
                        alt216=1;
                    }


                }
                else if ( (LA216_0==L_or) ) {
                    alt216=1;
                }


                switch (alt216) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:19: ( NL )? token_OR ( NL )? bool_and_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:21: ( NL )?
            	    int alt214=2;
            	    int LA214_0 = input.LA(1);

            	    if ( (LA214_0==NL) ) {
            	        alt214=1;
            	    }
            	    switch (alt214) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:21: NL
            	            {
            	            NL482=(Token)match(input,NL,FOLLOW_NL_in_bool_or_expr4749); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_OR_in_bool_or_expr4753);
            	    token_OR483=token_OR();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_OR483.getTree(), root_0);
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:36: ( NL )?
            	    int alt215=2;
            	    int LA215_0 = input.LA(1);

            	    if ( (LA215_0==NL) ) {
            	        alt215=1;
            	    }
            	    switch (alt215) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:36: NL
            	            {
            	            NL484=(Token)match(input,NL,FOLLOW_NL_in_bool_or_expr4756); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_bool_and_expr_in_bool_or_expr4760);
            	    bool_and_expr485=bool_and_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_and_expr485.getTree());

            	    }
            	    break;

            	default :
            	    break loop216;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bool_or_expr"

    public static class p_bool_or_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_bool_or_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:701:1: p_bool_or_expr : p_bool_and_expr ( ( NL )? token_OR ( NL )? p_bool_and_expr )* ;
    public final babel17Parser.p_bool_or_expr_return p_bool_or_expr() throws RecognitionException {
        babel17Parser.p_bool_or_expr_return retval = new babel17Parser.p_bool_or_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL487=null;
        Token NL489=null;
        babel17Parser.p_bool_and_expr_return p_bool_and_expr486 = null;

        babel17Parser.token_OR_return token_OR488 = null;

        babel17Parser.p_bool_and_expr_return p_bool_and_expr490 = null;


        CommonTree NL487_tree=null;
        CommonTree NL489_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:702:2: ( p_bool_and_expr ( ( NL )? token_OR ( NL )? p_bool_and_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:702:4: p_bool_and_expr ( ( NL )? token_OR ( NL )? p_bool_and_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_bool_and_expr_in_p_bool_or_expr4772);
            p_bool_and_expr486=p_bool_and_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_and_expr486.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:702:20: ( ( NL )? token_OR ( NL )? p_bool_and_expr )*
            loop219:
            do {
                int alt219=2;
                int LA219_0 = input.LA(1);

                if ( (LA219_0==NL) ) {
                    int LA219_2 = input.LA(2);

                    if ( (LA219_2==L_or) ) {
                        alt219=1;
                    }


                }
                else if ( (LA219_0==L_or) ) {
                    alt219=1;
                }


                switch (alt219) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:702:21: ( NL )? token_OR ( NL )? p_bool_and_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:702:23: ( NL )?
            	    int alt217=2;
            	    int LA217_0 = input.LA(1);

            	    if ( (LA217_0==NL) ) {
            	        alt217=1;
            	    }
            	    switch (alt217) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:702:23: NL
            	            {
            	            NL487=(Token)match(input,NL,FOLLOW_NL_in_p_bool_or_expr4775); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_OR_in_p_bool_or_expr4779);
            	    token_OR488=token_OR();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_OR488.getTree(), root_0);
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:702:38: ( NL )?
            	    int alt218=2;
            	    int LA218_0 = input.LA(1);

            	    if ( (LA218_0==NL) ) {
            	        alt218=1;
            	    }
            	    switch (alt218) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:702:38: NL
            	            {
            	            NL489=(Token)match(input,NL,FOLLOW_NL_in_p_bool_or_expr4782); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_bool_and_expr_in_p_bool_or_expr4786);
            	    p_bool_and_expr490=p_bool_and_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_and_expr490.getTree());

            	    }
            	    break;

            	default :
            	    break loop219;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_bool_or_expr"

    public static class bool_and_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bool_and_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:704:1: bool_and_expr : bool_not_expr ( ( NL )? token_AND ( NL )? bool_not_expr )* ;
    public final babel17Parser.bool_and_expr_return bool_and_expr() throws RecognitionException {
        babel17Parser.bool_and_expr_return retval = new babel17Parser.bool_and_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL492=null;
        Token NL494=null;
        babel17Parser.bool_not_expr_return bool_not_expr491 = null;

        babel17Parser.token_AND_return token_AND493 = null;

        babel17Parser.bool_not_expr_return bool_not_expr495 = null;


        CommonTree NL492_tree=null;
        CommonTree NL494_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:2: ( bool_not_expr ( ( NL )? token_AND ( NL )? bool_not_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:4: bool_not_expr ( ( NL )? token_AND ( NL )? bool_not_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_bool_not_expr_in_bool_and_expr4798);
            bool_not_expr491=bool_not_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_not_expr491.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:18: ( ( NL )? token_AND ( NL )? bool_not_expr )*
            loop222:
            do {
                int alt222=2;
                int LA222_0 = input.LA(1);

                if ( (LA222_0==NL) ) {
                    int LA222_1 = input.LA(2);

                    if ( (LA222_1==L_and) ) {
                        alt222=1;
                    }


                }
                else if ( (LA222_0==L_and) ) {
                    alt222=1;
                }


                switch (alt222) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:19: ( NL )? token_AND ( NL )? bool_not_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:21: ( NL )?
            	    int alt220=2;
            	    int LA220_0 = input.LA(1);

            	    if ( (LA220_0==NL) ) {
            	        alt220=1;
            	    }
            	    switch (alt220) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:21: NL
            	            {
            	            NL492=(Token)match(input,NL,FOLLOW_NL_in_bool_and_expr4801); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_AND_in_bool_and_expr4805);
            	    token_AND493=token_AND();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_AND493.getTree(), root_0);
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:37: ( NL )?
            	    int alt221=2;
            	    int LA221_0 = input.LA(1);

            	    if ( (LA221_0==NL) ) {
            	        alt221=1;
            	    }
            	    switch (alt221) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:37: NL
            	            {
            	            NL494=(Token)match(input,NL,FOLLOW_NL_in_bool_and_expr4808); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_bool_not_expr_in_bool_and_expr4812);
            	    bool_not_expr495=bool_not_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_not_expr495.getTree());

            	    }
            	    break;

            	default :
            	    break loop222;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bool_and_expr"

    public static class p_bool_and_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_bool_and_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:1: p_bool_and_expr : p_bool_not_expr ( ( NL )? token_AND ( NL )? p_bool_not_expr )* ;
    public final babel17Parser.p_bool_and_expr_return p_bool_and_expr() throws RecognitionException {
        babel17Parser.p_bool_and_expr_return retval = new babel17Parser.p_bool_and_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL497=null;
        Token NL499=null;
        babel17Parser.p_bool_not_expr_return p_bool_not_expr496 = null;

        babel17Parser.token_AND_return token_AND498 = null;

        babel17Parser.p_bool_not_expr_return p_bool_not_expr500 = null;


        CommonTree NL497_tree=null;
        CommonTree NL499_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:708:2: ( p_bool_not_expr ( ( NL )? token_AND ( NL )? p_bool_not_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:708:4: p_bool_not_expr ( ( NL )? token_AND ( NL )? p_bool_not_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_bool_not_expr_in_p_bool_and_expr4824);
            p_bool_not_expr496=p_bool_not_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_not_expr496.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:708:20: ( ( NL )? token_AND ( NL )? p_bool_not_expr )*
            loop225:
            do {
                int alt225=2;
                int LA225_0 = input.LA(1);

                if ( (LA225_0==NL) ) {
                    int LA225_1 = input.LA(2);

                    if ( (LA225_1==L_and) ) {
                        alt225=1;
                    }


                }
                else if ( (LA225_0==L_and) ) {
                    alt225=1;
                }


                switch (alt225) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:708:21: ( NL )? token_AND ( NL )? p_bool_not_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:708:23: ( NL )?
            	    int alt223=2;
            	    int LA223_0 = input.LA(1);

            	    if ( (LA223_0==NL) ) {
            	        alt223=1;
            	    }
            	    switch (alt223) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:708:23: NL
            	            {
            	            NL497=(Token)match(input,NL,FOLLOW_NL_in_p_bool_and_expr4827); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_AND_in_p_bool_and_expr4831);
            	    token_AND498=token_AND();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_AND498.getTree(), root_0);
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:708:39: ( NL )?
            	    int alt224=2;
            	    int LA224_0 = input.LA(1);

            	    if ( (LA224_0==NL) ) {
            	        alt224=1;
            	    }
            	    switch (alt224) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:708:39: NL
            	            {
            	            NL499=(Token)match(input,NL,FOLLOW_NL_in_p_bool_and_expr4834); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_bool_not_expr_in_p_bool_and_expr4838);
            	    p_bool_not_expr500=p_bool_not_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_not_expr500.getTree());

            	    }
            	    break;

            	default :
            	    break loop225;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_bool_and_expr"

    public static class bool_not_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bool_not_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:711:1: bool_not_expr : ( token_NOT ( NL )? bool_not_expr | rel_expr );
    public final babel17Parser.bool_not_expr_return bool_not_expr() throws RecognitionException {
        babel17Parser.bool_not_expr_return retval = new babel17Parser.bool_not_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL502=null;
        babel17Parser.token_NOT_return token_NOT501 = null;

        babel17Parser.bool_not_expr_return bool_not_expr503 = null;

        babel17Parser.rel_expr_return rel_expr504 = null;


        CommonTree NL502_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:712:2: ( token_NOT ( NL )? bool_not_expr | rel_expr )
            int alt227=2;
            int LA227_0 = input.LA(1);

            if ( (LA227_0==L_not) ) {
                alt227=1;
            }
            else if ( (LA227_0==L_begin||(LA227_0>=L_obj && LA227_0<=L_if)||(LA227_0>=L_while && LA227_0<=L_for)||LA227_0==L_match||LA227_0==L_try||LA227_0==L_choose||(LA227_0>=L_true && LA227_0<=L_nil)||LA227_0==L_typeof||(LA227_0>=L_root && LA227_0<=L_max)||LA227_0==MINUS||(LA227_0>=Constr && LA227_0<=Id)||(LA227_0>=Float && LA227_0<=Num)||(LA227_0>=String && LA227_0<=ROUND_BRACKET_OPEN)||LA227_0==SQUARE_BRACKET_OPEN||LA227_0==CURLY_BRACKET_OPEN) ) {
                alt227=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 227, 0, input);

                throw nvae;
            }
            switch (alt227) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:712:4: token_NOT ( NL )? bool_not_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_NOT_in_bool_not_expr4850);
                    token_NOT501=token_NOT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_NOT501.getTree(), root_0);
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:712:17: ( NL )?
                    int alt226=2;
                    int LA226_0 = input.LA(1);

                    if ( (LA226_0==NL) ) {
                        alt226=1;
                    }
                    switch (alt226) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:712:17: NL
                            {
                            NL502=(Token)match(input,NL,FOLLOW_NL_in_bool_not_expr4853); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_bool_not_expr_in_bool_not_expr4857);
                    bool_not_expr503=bool_not_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_not_expr503.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:713:4: rel_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rel_expr_in_bool_not_expr4862);
                    rel_expr504=rel_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_expr504.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bool_not_expr"

    public static class p_bool_not_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_bool_not_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:715:1: p_bool_not_expr : ( token_NOT ( NL )? p_bool_not_expr | p_rel_expr );
    public final babel17Parser.p_bool_not_expr_return p_bool_not_expr() throws RecognitionException {
        babel17Parser.p_bool_not_expr_return retval = new babel17Parser.p_bool_not_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL506=null;
        babel17Parser.token_NOT_return token_NOT505 = null;

        babel17Parser.p_bool_not_expr_return p_bool_not_expr507 = null;

        babel17Parser.p_rel_expr_return p_rel_expr508 = null;


        CommonTree NL506_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:716:2: ( token_NOT ( NL )? p_bool_not_expr | p_rel_expr )
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( (LA229_0==L_not) ) {
                alt229=1;
            }
            else if ( (LA229_0==L_begin||(LA229_0>=L_obj && LA229_0<=L_if)||(LA229_0>=L_while && LA229_0<=L_for)||LA229_0==L_match||LA229_0==L_try||LA229_0==L_choose||(LA229_0>=L_true && LA229_0<=L_nil)||LA229_0==L_typeof||(LA229_0>=L_root && LA229_0<=L_max)||LA229_0==MINUS||(LA229_0>=Constr && LA229_0<=Id)||(LA229_0>=Float && LA229_0<=Num)||(LA229_0>=String && LA229_0<=ROUND_BRACKET_OPEN)||LA229_0==SQUARE_BRACKET_OPEN||LA229_0==CURLY_BRACKET_OPEN) ) {
                alt229=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 229, 0, input);

                throw nvae;
            }
            switch (alt229) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:716:4: token_NOT ( NL )? p_bool_not_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_NOT_in_p_bool_not_expr4873);
                    token_NOT505=token_NOT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_NOT505.getTree(), root_0);
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:716:17: ( NL )?
                    int alt228=2;
                    int LA228_0 = input.LA(1);

                    if ( (LA228_0==NL) ) {
                        alt228=1;
                    }
                    switch (alt228) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:716:17: NL
                            {
                            NL506=(Token)match(input,NL,FOLLOW_NL_in_p_bool_not_expr4876); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_bool_not_expr_in_p_bool_not_expr4880);
                    p_bool_not_expr507=p_bool_not_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_not_expr507.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:717:4: p_rel_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_rel_expr_in_p_bool_not_expr4885);
                    p_rel_expr508=p_rel_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_rel_expr508.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_bool_not_expr"

    public static class rel_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rel_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:720:1: rel_expr : relate_expr ( ( NL )? rel_op ( NL )? relate_expr )* -> ^( COMPARE relate_expr ( rel_op relate_expr )* ) ;
    public final babel17Parser.rel_expr_return rel_expr() throws RecognitionException {
        babel17Parser.rel_expr_return retval = new babel17Parser.rel_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL510=null;
        Token NL512=null;
        babel17Parser.relate_expr_return relate_expr509 = null;

        babel17Parser.rel_op_return rel_op511 = null;

        babel17Parser.relate_expr_return relate_expr513 = null;


        CommonTree NL510_tree=null;
        CommonTree NL512_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_relate_expr=new RewriteRuleSubtreeStream(adaptor,"rule relate_expr");
        RewriteRuleSubtreeStream stream_rel_op=new RewriteRuleSubtreeStream(adaptor,"rule rel_op");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:721:2: ( relate_expr ( ( NL )? rel_op ( NL )? relate_expr )* -> ^( COMPARE relate_expr ( rel_op relate_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:721:4: relate_expr ( ( NL )? rel_op ( NL )? relate_expr )*
            {
            pushFollow(FOLLOW_relate_expr_in_rel_expr4895);
            relate_expr509=relate_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_relate_expr.add(relate_expr509.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:721:16: ( ( NL )? rel_op ( NL )? relate_expr )*
            loop232:
            do {
                int alt232=2;
                int LA232_0 = input.LA(1);

                if ( (LA232_0==NL) ) {
                    int LA232_1 = input.LA(2);

                    if ( ((LA232_1>=A_EQUAL && LA232_1<=U_GREATER_EQ)) ) {
                        alt232=1;
                    }


                }
                else if ( ((LA232_0>=A_EQUAL && LA232_0<=U_GREATER_EQ)) ) {
                    alt232=1;
                }


                switch (alt232) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:721:17: ( NL )? rel_op ( NL )? relate_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:721:17: ( NL )?
            	    int alt230=2;
            	    int LA230_0 = input.LA(1);

            	    if ( (LA230_0==NL) ) {
            	        alt230=1;
            	    }
            	    switch (alt230) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:721:17: NL
            	            {
            	            NL510=(Token)match(input,NL,FOLLOW_NL_in_rel_expr4898); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL510);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_rel_op_in_rel_expr4901);
            	    rel_op511=rel_op();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_rel_op.add(rel_op511.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:721:28: ( NL )?
            	    int alt231=2;
            	    int LA231_0 = input.LA(1);

            	    if ( (LA231_0==NL) ) {
            	        alt231=1;
            	    }
            	    switch (alt231) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:721:28: NL
            	            {
            	            NL512=(Token)match(input,NL,FOLLOW_NL_in_rel_expr4903); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL512);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_relate_expr_in_rel_expr4906);
            	    relate_expr513=relate_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_relate_expr.add(relate_expr513.getTree());

            	    }
            	    break;

            	default :
            	    break loop232;
                }
            } while (true);



            // AST REWRITE
            // elements: relate_expr, relate_expr, rel_op
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 721:46: -> ^( COMPARE relate_expr ( rel_op relate_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:721:49: ^( COMPARE relate_expr ( rel_op relate_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPARE, "COMPARE"), root_1);

                adaptor.addChild(root_1, stream_relate_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:721:71: ( rel_op relate_expr )*
                while ( stream_relate_expr.hasNext()||stream_rel_op.hasNext() ) {
                    adaptor.addChild(root_1, stream_rel_op.nextTree());
                    adaptor.addChild(root_1, stream_relate_expr.nextTree());

                }
                stream_relate_expr.reset();
                stream_rel_op.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rel_expr"

    public static class p_rel_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_rel_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:723:1: p_rel_expr : p_relate_expr ( ( NL )? rel_op ( NL )? p_relate_expr )* -> ^( COMPARE p_relate_expr ( rel_op p_relate_expr )* ) ;
    public final babel17Parser.p_rel_expr_return p_rel_expr() throws RecognitionException {
        babel17Parser.p_rel_expr_return retval = new babel17Parser.p_rel_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL515=null;
        Token NL517=null;
        babel17Parser.p_relate_expr_return p_relate_expr514 = null;

        babel17Parser.rel_op_return rel_op516 = null;

        babel17Parser.p_relate_expr_return p_relate_expr518 = null;


        CommonTree NL515_tree=null;
        CommonTree NL517_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_p_relate_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_relate_expr");
        RewriteRuleSubtreeStream stream_rel_op=new RewriteRuleSubtreeStream(adaptor,"rule rel_op");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:724:2: ( p_relate_expr ( ( NL )? rel_op ( NL )? p_relate_expr )* -> ^( COMPARE p_relate_expr ( rel_op p_relate_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:724:4: p_relate_expr ( ( NL )? rel_op ( NL )? p_relate_expr )*
            {
            pushFollow(FOLLOW_p_relate_expr_in_p_rel_expr4933);
            p_relate_expr514=p_relate_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_relate_expr.add(p_relate_expr514.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:724:18: ( ( NL )? rel_op ( NL )? p_relate_expr )*
            loop235:
            do {
                int alt235=2;
                int LA235_0 = input.LA(1);

                if ( (LA235_0==NL) ) {
                    int LA235_1 = input.LA(2);

                    if ( ((LA235_1>=A_EQUAL && LA235_1<=U_GREATER_EQ)) ) {
                        alt235=1;
                    }


                }
                else if ( ((LA235_0>=A_EQUAL && LA235_0<=U_GREATER_EQ)) ) {
                    alt235=1;
                }


                switch (alt235) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:724:19: ( NL )? rel_op ( NL )? p_relate_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:724:19: ( NL )?
            	    int alt233=2;
            	    int LA233_0 = input.LA(1);

            	    if ( (LA233_0==NL) ) {
            	        alt233=1;
            	    }
            	    switch (alt233) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:724:19: NL
            	            {
            	            NL515=(Token)match(input,NL,FOLLOW_NL_in_p_rel_expr4936); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL515);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_rel_op_in_p_rel_expr4939);
            	    rel_op516=rel_op();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_rel_op.add(rel_op516.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:724:30: ( NL )?
            	    int alt234=2;
            	    int LA234_0 = input.LA(1);

            	    if ( (LA234_0==NL) ) {
            	        alt234=1;
            	    }
            	    switch (alt234) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:724:30: NL
            	            {
            	            NL517=(Token)match(input,NL,FOLLOW_NL_in_p_rel_expr4941); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL517);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_relate_expr_in_p_rel_expr4944);
            	    p_relate_expr518=p_relate_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_relate_expr.add(p_relate_expr518.getTree());

            	    }
            	    break;

            	default :
            	    break loop235;
                }
            } while (true);



            // AST REWRITE
            // elements: p_relate_expr, p_relate_expr, rel_op
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 724:50: -> ^( COMPARE p_relate_expr ( rel_op p_relate_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:724:53: ^( COMPARE p_relate_expr ( rel_op p_relate_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPARE, "COMPARE"), root_1);

                adaptor.addChild(root_1, stream_p_relate_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:724:77: ( rel_op p_relate_expr )*
                while ( stream_p_relate_expr.hasNext()||stream_rel_op.hasNext() ) {
                    adaptor.addChild(root_1, stream_rel_op.nextTree());
                    adaptor.addChild(root_1, stream_p_relate_expr.nextTree());

                }
                stream_p_relate_expr.reset();
                stream_rel_op.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_rel_expr"

    public static class rel_op_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rel_op"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:727:1: rel_op : ( token_EQUAL | token_NOT_EQUAL | GREATER | token_GREATER_EQ | LESS | token_LESS_EQ );
    public final babel17Parser.rel_op_return rel_op() throws RecognitionException {
        babel17Parser.rel_op_return retval = new babel17Parser.rel_op_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token GREATER521=null;
        Token LESS523=null;
        babel17Parser.token_EQUAL_return token_EQUAL519 = null;

        babel17Parser.token_NOT_EQUAL_return token_NOT_EQUAL520 = null;

        babel17Parser.token_GREATER_EQ_return token_GREATER_EQ522 = null;

        babel17Parser.token_LESS_EQ_return token_LESS_EQ524 = null;


        CommonTree GREATER521_tree=null;
        CommonTree LESS523_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:727:8: ( token_EQUAL | token_NOT_EQUAL | GREATER | token_GREATER_EQ | LESS | token_LESS_EQ )
            int alt236=6;
            switch ( input.LA(1) ) {
            case A_EQUAL:
            case U_EQUAL:
                {
                alt236=1;
                }
                break;
            case A_NOT_EQUAL:
            case U_NOT_EQUAL:
                {
                alt236=2;
                }
                break;
            case GREATER:
                {
                alt236=3;
                }
                break;
            case A_GREATER_EQ:
            case U_GREATER_EQ:
                {
                alt236=4;
                }
                break;
            case LESS:
                {
                alt236=5;
                }
                break;
            case A_LESS_EQ:
            case U_LESS_EQ:
                {
                alt236=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 236, 0, input);

                throw nvae;
            }

            switch (alt236) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:727:10: token_EQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_EQUAL_in_rel_op4970);
                    token_EQUAL519=token_EQUAL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_EQUAL519.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:727:24: token_NOT_EQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_NOT_EQUAL_in_rel_op4974);
                    token_NOT_EQUAL520=token_NOT_EQUAL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_NOT_EQUAL520.getTree());

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:727:42: GREATER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    GREATER521=(Token)match(input,GREATER,FOLLOW_GREATER_in_rel_op4978); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER521_tree = (CommonTree)adaptor.create(GREATER521);
                    adaptor.addChild(root_0, GREATER521_tree);
                    }

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:727:52: token_GREATER_EQ
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_GREATER_EQ_in_rel_op4982);
                    token_GREATER_EQ522=token_GREATER_EQ();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_GREATER_EQ522.getTree());

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:727:71: LESS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LESS523=(Token)match(input,LESS,FOLLOW_LESS_in_rel_op4986); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LESS523_tree = (CommonTree)adaptor.create(LESS523);
                    adaptor.addChild(root_0, LESS523_tree);
                    }

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:727:78: token_LESS_EQ
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_LESS_EQ_in_rel_op4990);
                    token_LESS_EQ524=token_LESS_EQ();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_LESS_EQ524.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rel_op"

    public static class relate_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relate_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:729:1: relate_expr : convert_expr ( ( NL )? TOK_RELATE ( NL )? convert_expr )? -> ^( RELATE ( convert_expr )* ) ;
    public final babel17Parser.relate_expr_return relate_expr() throws RecognitionException {
        babel17Parser.relate_expr_return retval = new babel17Parser.relate_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL526=null;
        Token TOK_RELATE527=null;
        Token NL528=null;
        babel17Parser.convert_expr_return convert_expr525 = null;

        babel17Parser.convert_expr_return convert_expr529 = null;


        CommonTree NL526_tree=null;
        CommonTree TOK_RELATE527_tree=null;
        CommonTree NL528_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_TOK_RELATE=new RewriteRuleTokenStream(adaptor,"token TOK_RELATE");
        RewriteRuleSubtreeStream stream_convert_expr=new RewriteRuleSubtreeStream(adaptor,"rule convert_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:729:12: ( convert_expr ( ( NL )? TOK_RELATE ( NL )? convert_expr )? -> ^( RELATE ( convert_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:729:14: convert_expr ( ( NL )? TOK_RELATE ( NL )? convert_expr )?
            {
            pushFollow(FOLLOW_convert_expr_in_relate_expr4999);
            convert_expr525=convert_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_convert_expr.add(convert_expr525.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:729:27: ( ( NL )? TOK_RELATE ( NL )? convert_expr )?
            int alt239=2;
            int LA239_0 = input.LA(1);

            if ( (LA239_0==NL) ) {
                int LA239_1 = input.LA(2);

                if ( (LA239_1==TOK_RELATE) ) {
                    alt239=1;
                }
            }
            else if ( (LA239_0==TOK_RELATE) ) {
                alt239=1;
            }
            switch (alt239) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:729:28: ( NL )? TOK_RELATE ( NL )? convert_expr
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:729:28: ( NL )?
                    int alt237=2;
                    int LA237_0 = input.LA(1);

                    if ( (LA237_0==NL) ) {
                        alt237=1;
                    }
                    switch (alt237) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:729:28: NL
                            {
                            NL526=(Token)match(input,NL,FOLLOW_NL_in_relate_expr5002); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL526);


                            }
                            break;

                    }

                    TOK_RELATE527=(Token)match(input,TOK_RELATE,FOLLOW_TOK_RELATE_in_relate_expr5005); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TOK_RELATE.add(TOK_RELATE527);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:729:43: ( NL )?
                    int alt238=2;
                    int LA238_0 = input.LA(1);

                    if ( (LA238_0==NL) ) {
                        alt238=1;
                    }
                    switch (alt238) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:729:43: NL
                            {
                            NL528=(Token)match(input,NL,FOLLOW_NL_in_relate_expr5007); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL528);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_convert_expr_in_relate_expr5010);
                    convert_expr529=convert_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_convert_expr.add(convert_expr529.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: convert_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 729:62: -> ^( RELATE ( convert_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:729:65: ^( RELATE ( convert_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RELATE, "RELATE"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:729:74: ( convert_expr )*
                while ( stream_convert_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_convert_expr.nextTree());

                }
                stream_convert_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "relate_expr"

    public static class p_relate_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_relate_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:731:1: p_relate_expr : p_convert_expr ( ( NL )? TOK_RELATE ( NL )? p_convert_expr )? -> ^( RELATE ( p_convert_expr )* ) ;
    public final babel17Parser.p_relate_expr_return p_relate_expr() throws RecognitionException {
        babel17Parser.p_relate_expr_return retval = new babel17Parser.p_relate_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL531=null;
        Token TOK_RELATE532=null;
        Token NL533=null;
        babel17Parser.p_convert_expr_return p_convert_expr530 = null;

        babel17Parser.p_convert_expr_return p_convert_expr534 = null;


        CommonTree NL531_tree=null;
        CommonTree TOK_RELATE532_tree=null;
        CommonTree NL533_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_TOK_RELATE=new RewriteRuleTokenStream(adaptor,"token TOK_RELATE");
        RewriteRuleSubtreeStream stream_p_convert_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_convert_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:731:14: ( p_convert_expr ( ( NL )? TOK_RELATE ( NL )? p_convert_expr )? -> ^( RELATE ( p_convert_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:731:16: p_convert_expr ( ( NL )? TOK_RELATE ( NL )? p_convert_expr )?
            {
            pushFollow(FOLLOW_p_convert_expr_in_p_relate_expr5029);
            p_convert_expr530=p_convert_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_convert_expr.add(p_convert_expr530.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:731:31: ( ( NL )? TOK_RELATE ( NL )? p_convert_expr )?
            int alt242=2;
            int LA242_0 = input.LA(1);

            if ( (LA242_0==NL) ) {
                int LA242_1 = input.LA(2);

                if ( (LA242_1==TOK_RELATE) ) {
                    alt242=1;
                }
            }
            else if ( (LA242_0==TOK_RELATE) ) {
                alt242=1;
            }
            switch (alt242) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:731:32: ( NL )? TOK_RELATE ( NL )? p_convert_expr
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:731:32: ( NL )?
                    int alt240=2;
                    int LA240_0 = input.LA(1);

                    if ( (LA240_0==NL) ) {
                        alt240=1;
                    }
                    switch (alt240) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:731:32: NL
                            {
                            NL531=(Token)match(input,NL,FOLLOW_NL_in_p_relate_expr5032); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL531);


                            }
                            break;

                    }

                    TOK_RELATE532=(Token)match(input,TOK_RELATE,FOLLOW_TOK_RELATE_in_p_relate_expr5035); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TOK_RELATE.add(TOK_RELATE532);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:731:47: ( NL )?
                    int alt241=2;
                    int LA241_0 = input.LA(1);

                    if ( (LA241_0==NL) ) {
                        alt241=1;
                    }
                    switch (alt241) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:731:47: NL
                            {
                            NL533=(Token)match(input,NL,FOLLOW_NL_in_p_relate_expr5037); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL533);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_convert_expr_in_p_relate_expr5040);
                    p_convert_expr534=p_convert_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_convert_expr.add(p_convert_expr534.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: p_convert_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 731:68: -> ^( RELATE ( p_convert_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:731:71: ^( RELATE ( p_convert_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RELATE, "RELATE"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:731:80: ( p_convert_expr )*
                while ( stream_p_convert_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_convert_expr.nextTree());

                }
                stream_p_convert_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_relate_expr"

    public static class convert_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "convert_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:733:1: convert_expr : term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )? -> ^( CONVERT term_expr ( typeannotation )? ) ;
    public final babel17Parser.convert_expr_return convert_expr() throws RecognitionException {
        babel17Parser.convert_expr_return retval = new babel17Parser.convert_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL536=null;
        Token TOK_CONVERT537=null;
        Token NL538=null;
        babel17Parser.term_expr_return term_expr535 = null;

        babel17Parser.typeannotation_return typeannotation539 = null;


        CommonTree NL536_tree=null;
        CommonTree TOK_CONVERT537_tree=null;
        CommonTree NL538_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_TOK_CONVERT=new RewriteRuleTokenStream(adaptor,"token TOK_CONVERT");
        RewriteRuleSubtreeStream stream_typeannotation=new RewriteRuleSubtreeStream(adaptor,"rule typeannotation");
        RewriteRuleSubtreeStream stream_term_expr=new RewriteRuleSubtreeStream(adaptor,"rule term_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:734:2: ( term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )? -> ^( CONVERT term_expr ( typeannotation )? ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:734:4: term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )?
            {
            pushFollow(FOLLOW_term_expr_in_convert_expr5061);
            term_expr535=term_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_term_expr.add(term_expr535.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:734:14: ( ( NL )? TOK_CONVERT ( NL )? typeannotation )?
            int alt245=2;
            int LA245_0 = input.LA(1);

            if ( (LA245_0==NL) ) {
                int LA245_1 = input.LA(2);

                if ( (LA245_1==TOK_CONVERT) ) {
                    alt245=1;
                }
            }
            else if ( (LA245_0==TOK_CONVERT) ) {
                alt245=1;
            }
            switch (alt245) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:734:15: ( NL )? TOK_CONVERT ( NL )? typeannotation
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:734:15: ( NL )?
                    int alt243=2;
                    int LA243_0 = input.LA(1);

                    if ( (LA243_0==NL) ) {
                        alt243=1;
                    }
                    switch (alt243) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:734:15: NL
                            {
                            NL536=(Token)match(input,NL,FOLLOW_NL_in_convert_expr5064); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL536);


                            }
                            break;

                    }

                    TOK_CONVERT537=(Token)match(input,TOK_CONVERT,FOLLOW_TOK_CONVERT_in_convert_expr5067); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TOK_CONVERT.add(TOK_CONVERT537);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:734:31: ( NL )?
                    int alt244=2;
                    int LA244_0 = input.LA(1);

                    if ( (LA244_0==NL) ) {
                        alt244=1;
                    }
                    switch (alt244) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:734:31: NL
                            {
                            NL538=(Token)match(input,NL,FOLLOW_NL_in_convert_expr5069); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL538);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeannotation_in_convert_expr5072);
                    typeannotation539=typeannotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeannotation.add(typeannotation539.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: term_expr, typeannotation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 734:52: -> ^( CONVERT term_expr ( typeannotation )? )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:734:55: ^( CONVERT term_expr ( typeannotation )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONVERT, "CONVERT"), root_1);

                adaptor.addChild(root_1, stream_term_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:734:75: ( typeannotation )?
                if ( stream_typeannotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeannotation.nextTree());

                }
                stream_typeannotation.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "convert_expr"

    public static class p_convert_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_convert_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:1: p_convert_expr : p_term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )? -> ^( CONVERT p_term_expr ( typeannotation )? ) ;
    public final babel17Parser.p_convert_expr_return p_convert_expr() throws RecognitionException {
        babel17Parser.p_convert_expr_return retval = new babel17Parser.p_convert_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL541=null;
        Token TOK_CONVERT542=null;
        Token NL543=null;
        babel17Parser.p_term_expr_return p_term_expr540 = null;

        babel17Parser.typeannotation_return typeannotation544 = null;


        CommonTree NL541_tree=null;
        CommonTree TOK_CONVERT542_tree=null;
        CommonTree NL543_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_TOK_CONVERT=new RewriteRuleTokenStream(adaptor,"token TOK_CONVERT");
        RewriteRuleSubtreeStream stream_typeannotation=new RewriteRuleSubtreeStream(adaptor,"rule typeannotation");
        RewriteRuleSubtreeStream stream_p_term_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_term_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:2: ( p_term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )? -> ^( CONVERT p_term_expr ( typeannotation )? ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:4: p_term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )?
            {
            pushFollow(FOLLOW_p_term_expr_in_p_convert_expr5094);
            p_term_expr540=p_term_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_term_expr.add(p_term_expr540.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:16: ( ( NL )? TOK_CONVERT ( NL )? typeannotation )?
            int alt248=2;
            int LA248_0 = input.LA(1);

            if ( (LA248_0==NL) ) {
                int LA248_1 = input.LA(2);

                if ( (LA248_1==TOK_CONVERT) ) {
                    alt248=1;
                }
            }
            else if ( (LA248_0==TOK_CONVERT) ) {
                alt248=1;
            }
            switch (alt248) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:17: ( NL )? TOK_CONVERT ( NL )? typeannotation
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:17: ( NL )?
                    int alt246=2;
                    int LA246_0 = input.LA(1);

                    if ( (LA246_0==NL) ) {
                        alt246=1;
                    }
                    switch (alt246) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:17: NL
                            {
                            NL541=(Token)match(input,NL,FOLLOW_NL_in_p_convert_expr5097); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL541);


                            }
                            break;

                    }

                    TOK_CONVERT542=(Token)match(input,TOK_CONVERT,FOLLOW_TOK_CONVERT_in_p_convert_expr5100); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TOK_CONVERT.add(TOK_CONVERT542);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:33: ( NL )?
                    int alt247=2;
                    int LA247_0 = input.LA(1);

                    if ( (LA247_0==NL) ) {
                        alt247=1;
                    }
                    switch (alt247) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:33: NL
                            {
                            NL543=(Token)match(input,NL,FOLLOW_NL_in_p_convert_expr5102); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL543);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeannotation_in_p_convert_expr5105);
                    typeannotation544=typeannotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeannotation.add(typeannotation544.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: p_term_expr, typeannotation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 737:54: -> ^( CONVERT p_term_expr ( typeannotation )? )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:57: ^( CONVERT p_term_expr ( typeannotation )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONVERT, "CONVERT"), root_1);

                adaptor.addChild(root_1, stream_p_term_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:79: ( typeannotation )?
                if ( stream_typeannotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeannotation.nextTree());

                }
                stream_typeannotation.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_convert_expr"

    public static class term_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "term_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:739:1: term_expr : ( builtin_fun term_expr | arith_expr );
    public final babel17Parser.term_expr_return term_expr() throws RecognitionException {
        babel17Parser.term_expr_return retval = new babel17Parser.term_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.builtin_fun_return builtin_fun545 = null;

        babel17Parser.term_expr_return term_expr546 = null;

        babel17Parser.arith_expr_return arith_expr547 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:2: ( builtin_fun term_expr | arith_expr )
            int alt249=2;
            int LA249_0 = input.LA(1);

            if ( (LA249_0==L_choose||LA249_0==L_random||LA249_0==L_typeof||(LA249_0>=L_native && LA249_0<=L_max)) ) {
                alt249=1;
            }
            else if ( (LA249_0==L_begin||(LA249_0>=L_obj && LA249_0<=L_if)||(LA249_0>=L_while && LA249_0<=L_for)||LA249_0==L_match||LA249_0==L_try||(LA249_0>=L_true && LA249_0<=L_this)||LA249_0==L_nil||LA249_0==L_root||LA249_0==MINUS||(LA249_0>=Constr && LA249_0<=Id)||(LA249_0>=Float && LA249_0<=Num)||(LA249_0>=String && LA249_0<=ROUND_BRACKET_OPEN)||LA249_0==SQUARE_BRACKET_OPEN||LA249_0==CURLY_BRACKET_OPEN) ) {
                alt249=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 249, 0, input);

                throw nvae;
            }
            switch (alt249) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:4: builtin_fun term_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_builtin_fun_in_term_expr5128);
                    builtin_fun545=builtin_fun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(builtin_fun545.getTree(), root_0);
                    pushFollow(FOLLOW_term_expr_in_term_expr5131);
                    term_expr546=term_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, term_expr546.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:741:4: arith_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arith_expr_in_term_expr5136);
                    arith_expr547=arith_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_expr547.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "term_expr"

    public static class p_term_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_term_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:743:1: p_term_expr : ( builtin_fun ( NL )? p_term_expr | p_arith_expr );
    public final babel17Parser.p_term_expr_return p_term_expr() throws RecognitionException {
        babel17Parser.p_term_expr_return retval = new babel17Parser.p_term_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL549=null;
        babel17Parser.builtin_fun_return builtin_fun548 = null;

        babel17Parser.p_term_expr_return p_term_expr550 = null;

        babel17Parser.p_arith_expr_return p_arith_expr551 = null;


        CommonTree NL549_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:744:2: ( builtin_fun ( NL )? p_term_expr | p_arith_expr )
            int alt251=2;
            int LA251_0 = input.LA(1);

            if ( (LA251_0==L_choose||LA251_0==L_random||LA251_0==L_typeof||(LA251_0>=L_native && LA251_0<=L_max)) ) {
                alt251=1;
            }
            else if ( (LA251_0==L_begin||(LA251_0>=L_obj && LA251_0<=L_if)||(LA251_0>=L_while && LA251_0<=L_for)||LA251_0==L_match||LA251_0==L_try||(LA251_0>=L_true && LA251_0<=L_this)||LA251_0==L_nil||LA251_0==L_root||LA251_0==MINUS||(LA251_0>=Constr && LA251_0<=Id)||(LA251_0>=Float && LA251_0<=Num)||(LA251_0>=String && LA251_0<=ROUND_BRACKET_OPEN)||LA251_0==SQUARE_BRACKET_OPEN||LA251_0==CURLY_BRACKET_OPEN) ) {
                alt251=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 251, 0, input);

                throw nvae;
            }
            switch (alt251) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:744:4: builtin_fun ( NL )? p_term_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_builtin_fun_in_p_term_expr5146);
                    builtin_fun548=builtin_fun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(builtin_fun548.getTree(), root_0);
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:744:19: ( NL )?
                    int alt250=2;
                    int LA250_0 = input.LA(1);

                    if ( (LA250_0==NL) ) {
                        alt250=1;
                    }
                    switch (alt250) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:744:19: NL
                            {
                            NL549=(Token)match(input,NL,FOLLOW_NL_in_p_term_expr5149); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_term_expr_in_p_term_expr5153);
                    p_term_expr550=p_term_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_term_expr550.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:745:4: p_arith_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_arith_expr_in_p_term_expr5158);
                    p_arith_expr551=p_arith_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_expr551.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_term_expr"

    public static class builtin_fun_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtin_fun"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:747:1: builtin_fun : ( L_random | L_choose | L_typeof | L_native | L_min | L_max );
    public final babel17Parser.builtin_fun_return builtin_fun() throws RecognitionException {
        babel17Parser.builtin_fun_return retval = new babel17Parser.builtin_fun_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set552=null;

        CommonTree set552_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:748:2: ( L_random | L_choose | L_typeof | L_native | L_min | L_max )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set552=(Token)input.LT(1);
            if ( input.LA(1)==L_choose||input.LA(1)==L_random||input.LA(1)==L_typeof||(input.LA(1)>=L_native && input.LA(1)<=L_max) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set552));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtin_fun"

    public static class arith_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:750:1: arith_expr : plusplus_expr ;
    public final babel17Parser.arith_expr_return arith_expr() throws RecognitionException {
        babel17Parser.arith_expr_return retval = new babel17Parser.arith_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.plusplus_expr_return plusplus_expr553 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:751:2: ( plusplus_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:751:4: plusplus_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_plusplus_expr_in_arith_expr5196);
            plusplus_expr553=plusplus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, plusplus_expr553.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_expr"

    public static class p_arith_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:753:1: p_arith_expr : p_plusplus_expr ;
    public final babel17Parser.p_arith_expr_return p_arith_expr() throws RecognitionException {
        babel17Parser.p_arith_expr_return retval = new babel17Parser.p_arith_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.p_plusplus_expr_return p_plusplus_expr554 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:754:2: ( p_plusplus_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:754:4: p_plusplus_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_plusplus_expr_in_p_arith_expr5205);
            p_plusplus_expr554=p_plusplus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_plusplus_expr554.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_expr"

    public static class plusplus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "plusplus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:756:1: plusplus_expr : timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr )* ;
    public final babel17Parser.plusplus_expr_return plusplus_expr() throws RecognitionException {
        babel17Parser.plusplus_expr_return retval = new babel17Parser.plusplus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL556=null;
        Token PLUSPLUS557=null;
        Token MINUSMINUS558=null;
        Token NL559=null;
        babel17Parser.timestimes_expr_return timestimes_expr555 = null;

        babel17Parser.timestimes_expr_return timestimes_expr560 = null;


        CommonTree NL556_tree=null;
        CommonTree PLUSPLUS557_tree=null;
        CommonTree MINUSMINUS558_tree=null;
        CommonTree NL559_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:2: ( timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:4: timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_timestimes_expr_in_plusplus_expr5215);
            timestimes_expr555=timestimes_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, timestimes_expr555.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:20: ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr )*
            loop255:
            do {
                int alt255=2;
                int LA255_0 = input.LA(1);

                if ( (LA255_0==NL) ) {
                    int LA255_1 = input.LA(2);

                    if ( ((LA255_1>=PLUSPLUS && LA255_1<=MINUSMINUS)) ) {
                        alt255=1;
                    }


                }
                else if ( ((LA255_0>=PLUSPLUS && LA255_0<=MINUSMINUS)) ) {
                    alt255=1;
                }


                switch (alt255) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:21: ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:23: ( NL )?
            	    int alt252=2;
            	    int LA252_0 = input.LA(1);

            	    if ( (LA252_0==NL) ) {
            	        alt252=1;
            	    }
            	    switch (alt252) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:23: NL
            	            {
            	            NL556=(Token)match(input,NL,FOLLOW_NL_in_plusplus_expr5218); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:26: ( PLUSPLUS | MINUSMINUS )
            	    int alt253=2;
            	    int LA253_0 = input.LA(1);

            	    if ( (LA253_0==PLUSPLUS) ) {
            	        alt253=1;
            	    }
            	    else if ( (LA253_0==MINUSMINUS) ) {
            	        alt253=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 253, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt253) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:27: PLUSPLUS
            	            {
            	            PLUSPLUS557=(Token)match(input,PLUSPLUS,FOLLOW_PLUSPLUS_in_plusplus_expr5223); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUSPLUS557_tree = (CommonTree)adaptor.create(PLUSPLUS557);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUSPLUS557_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:37: MINUSMINUS
            	            {
            	            MINUSMINUS558=(Token)match(input,MINUSMINUS,FOLLOW_MINUSMINUS_in_plusplus_expr5226); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUSMINUS558_tree = (CommonTree)adaptor.create(MINUSMINUS558);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUSMINUS558_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:52: ( NL )?
            	    int alt254=2;
            	    int LA254_0 = input.LA(1);

            	    if ( (LA254_0==NL) ) {
            	        alt254=1;
            	    }
            	    switch (alt254) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:52: NL
            	            {
            	            NL559=(Token)match(input,NL,FOLLOW_NL_in_plusplus_expr5230); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_timestimes_expr_in_plusplus_expr5234);
            	    timestimes_expr560=timestimes_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, timestimes_expr560.getTree());

            	    }
            	    break;

            	default :
            	    break loop255;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "plusplus_expr"

    public static class p_plusplus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_plusplus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:759:1: p_plusplus_expr : p_timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr )* ;
    public final babel17Parser.p_plusplus_expr_return p_plusplus_expr() throws RecognitionException {
        babel17Parser.p_plusplus_expr_return retval = new babel17Parser.p_plusplus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL562=null;
        Token PLUSPLUS563=null;
        Token MINUSMINUS564=null;
        Token NL565=null;
        babel17Parser.p_timestimes_expr_return p_timestimes_expr561 = null;

        babel17Parser.p_timestimes_expr_return p_timestimes_expr566 = null;


        CommonTree NL562_tree=null;
        CommonTree PLUSPLUS563_tree=null;
        CommonTree MINUSMINUS564_tree=null;
        CommonTree NL565_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:2: ( p_timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:4: p_timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_timestimes_expr_in_p_plusplus_expr5246);
            p_timestimes_expr561=p_timestimes_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_timestimes_expr561.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:22: ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr )*
            loop259:
            do {
                int alt259=2;
                int LA259_0 = input.LA(1);

                if ( (LA259_0==NL) ) {
                    int LA259_1 = input.LA(2);

                    if ( ((LA259_1>=PLUSPLUS && LA259_1<=MINUSMINUS)) ) {
                        alt259=1;
                    }


                }
                else if ( ((LA259_0>=PLUSPLUS && LA259_0<=MINUSMINUS)) ) {
                    alt259=1;
                }


                switch (alt259) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:23: ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:25: ( NL )?
            	    int alt256=2;
            	    int LA256_0 = input.LA(1);

            	    if ( (LA256_0==NL) ) {
            	        alt256=1;
            	    }
            	    switch (alt256) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:25: NL
            	            {
            	            NL562=(Token)match(input,NL,FOLLOW_NL_in_p_plusplus_expr5249); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:28: ( PLUSPLUS | MINUSMINUS )
            	    int alt257=2;
            	    int LA257_0 = input.LA(1);

            	    if ( (LA257_0==PLUSPLUS) ) {
            	        alt257=1;
            	    }
            	    else if ( (LA257_0==MINUSMINUS) ) {
            	        alt257=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 257, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt257) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:29: PLUSPLUS
            	            {
            	            PLUSPLUS563=(Token)match(input,PLUSPLUS,FOLLOW_PLUSPLUS_in_p_plusplus_expr5254); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUSPLUS563_tree = (CommonTree)adaptor.create(PLUSPLUS563);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUSPLUS563_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:39: MINUSMINUS
            	            {
            	            MINUSMINUS564=(Token)match(input,MINUSMINUS,FOLLOW_MINUSMINUS_in_p_plusplus_expr5257); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUSMINUS564_tree = (CommonTree)adaptor.create(MINUSMINUS564);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUSMINUS564_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:54: ( NL )?
            	    int alt258=2;
            	    int LA258_0 = input.LA(1);

            	    if ( (LA258_0==NL) ) {
            	        alt258=1;
            	    }
            	    switch (alt258) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:54: NL
            	            {
            	            NL565=(Token)match(input,NL,FOLLOW_NL_in_p_plusplus_expr5261); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_timestimes_expr_in_p_plusplus_expr5265);
            	    p_timestimes_expr566=p_timestimes_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_timestimes_expr566.getTree());

            	    }
            	    break;

            	default :
            	    break loop259;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_plusplus_expr"

    public static class timestimes_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timestimes_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:763:1: timestimes_expr : simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr )* ;
    public final babel17Parser.timestimes_expr_return timestimes_expr() throws RecognitionException {
        babel17Parser.timestimes_expr_return retval = new babel17Parser.timestimes_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL568=null;
        Token TIMESTIMES569=null;
        Token QUOTIENTQUOTIENT570=null;
        Token NL571=null;
        babel17Parser.simple_expr_return simple_expr567 = null;

        babel17Parser.simple_expr_return simple_expr572 = null;


        CommonTree NL568_tree=null;
        CommonTree TIMESTIMES569_tree=null;
        CommonTree QUOTIENTQUOTIENT570_tree=null;
        CommonTree NL571_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:764:2: ( simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:764:4: simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_simple_expr_in_timestimes_expr5277);
            simple_expr567=simple_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expr567.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:764:16: ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr )*
            loop263:
            do {
                int alt263=2;
                int LA263_0 = input.LA(1);

                if ( (LA263_0==NL) ) {
                    int LA263_1 = input.LA(2);

                    if ( ((LA263_1>=TIMESTIMES && LA263_1<=QUOTIENTQUOTIENT)) ) {
                        alt263=1;
                    }


                }
                else if ( ((LA263_0>=TIMESTIMES && LA263_0<=QUOTIENTQUOTIENT)) ) {
                    alt263=1;
                }


                switch (alt263) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:764:17: ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:764:19: ( NL )?
            	    int alt260=2;
            	    int LA260_0 = input.LA(1);

            	    if ( (LA260_0==NL) ) {
            	        alt260=1;
            	    }
            	    switch (alt260) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:764:19: NL
            	            {
            	            NL568=(Token)match(input,NL,FOLLOW_NL_in_timestimes_expr5280); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:764:22: ( TIMESTIMES | QUOTIENTQUOTIENT )
            	    int alt261=2;
            	    int LA261_0 = input.LA(1);

            	    if ( (LA261_0==TIMESTIMES) ) {
            	        alt261=1;
            	    }
            	    else if ( (LA261_0==QUOTIENTQUOTIENT) ) {
            	        alt261=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 261, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt261) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:764:23: TIMESTIMES
            	            {
            	            TIMESTIMES569=(Token)match(input,TIMESTIMES,FOLLOW_TIMESTIMES_in_timestimes_expr5285); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            TIMESTIMES569_tree = (CommonTree)adaptor.create(TIMESTIMES569);
            	            root_0 = (CommonTree)adaptor.becomeRoot(TIMESTIMES569_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:764:35: QUOTIENTQUOTIENT
            	            {
            	            QUOTIENTQUOTIENT570=(Token)match(input,QUOTIENTQUOTIENT,FOLLOW_QUOTIENTQUOTIENT_in_timestimes_expr5288); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            QUOTIENTQUOTIENT570_tree = (CommonTree)adaptor.create(QUOTIENTQUOTIENT570);
            	            root_0 = (CommonTree)adaptor.becomeRoot(QUOTIENTQUOTIENT570_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:764:56: ( NL )?
            	    int alt262=2;
            	    int LA262_0 = input.LA(1);

            	    if ( (LA262_0==NL) ) {
            	        alt262=1;
            	    }
            	    switch (alt262) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:764:56: NL
            	            {
            	            NL571=(Token)match(input,NL,FOLLOW_NL_in_timestimes_expr5292); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_simple_expr_in_timestimes_expr5296);
            	    simple_expr572=simple_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expr572.getTree());

            	    }
            	    break;

            	default :
            	    break loop263;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timestimes_expr"

    public static class p_timestimes_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_timestimes_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:766:1: p_timestimes_expr : p_simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr )* ;
    public final babel17Parser.p_timestimes_expr_return p_timestimes_expr() throws RecognitionException {
        babel17Parser.p_timestimes_expr_return retval = new babel17Parser.p_timestimes_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL574=null;
        Token TIMESTIMES575=null;
        Token QUOTIENTQUOTIENT576=null;
        Token NL577=null;
        babel17Parser.p_simple_expr_return p_simple_expr573 = null;

        babel17Parser.p_simple_expr_return p_simple_expr578 = null;


        CommonTree NL574_tree=null;
        CommonTree TIMESTIMES575_tree=null;
        CommonTree QUOTIENTQUOTIENT576_tree=null;
        CommonTree NL577_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:767:2: ( p_simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:767:4: p_simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_simple_expr_in_p_timestimes_expr5309);
            p_simple_expr573=p_simple_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_simple_expr573.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:767:18: ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr )*
            loop267:
            do {
                int alt267=2;
                int LA267_0 = input.LA(1);

                if ( (LA267_0==NL) ) {
                    int LA267_1 = input.LA(2);

                    if ( ((LA267_1>=TIMESTIMES && LA267_1<=QUOTIENTQUOTIENT)) ) {
                        alt267=1;
                    }


                }
                else if ( ((LA267_0>=TIMESTIMES && LA267_0<=QUOTIENTQUOTIENT)) ) {
                    alt267=1;
                }


                switch (alt267) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:767:19: ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:767:21: ( NL )?
            	    int alt264=2;
            	    int LA264_0 = input.LA(1);

            	    if ( (LA264_0==NL) ) {
            	        alt264=1;
            	    }
            	    switch (alt264) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:767:21: NL
            	            {
            	            NL574=(Token)match(input,NL,FOLLOW_NL_in_p_timestimes_expr5312); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:767:24: ( TIMESTIMES | QUOTIENTQUOTIENT )
            	    int alt265=2;
            	    int LA265_0 = input.LA(1);

            	    if ( (LA265_0==TIMESTIMES) ) {
            	        alt265=1;
            	    }
            	    else if ( (LA265_0==QUOTIENTQUOTIENT) ) {
            	        alt265=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 265, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt265) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:767:25: TIMESTIMES
            	            {
            	            TIMESTIMES575=(Token)match(input,TIMESTIMES,FOLLOW_TIMESTIMES_in_p_timestimes_expr5317); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            TIMESTIMES575_tree = (CommonTree)adaptor.create(TIMESTIMES575);
            	            root_0 = (CommonTree)adaptor.becomeRoot(TIMESTIMES575_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:767:37: QUOTIENTQUOTIENT
            	            {
            	            QUOTIENTQUOTIENT576=(Token)match(input,QUOTIENTQUOTIENT,FOLLOW_QUOTIENTQUOTIENT_in_p_timestimes_expr5320); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            QUOTIENTQUOTIENT576_tree = (CommonTree)adaptor.create(QUOTIENTQUOTIENT576);
            	            root_0 = (CommonTree)adaptor.becomeRoot(QUOTIENTQUOTIENT576_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:767:58: ( NL )?
            	    int alt266=2;
            	    int LA266_0 = input.LA(1);

            	    if ( (LA266_0==NL) ) {
            	        alt266=1;
            	    }
            	    switch (alt266) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:767:58: NL
            	            {
            	            NL577=(Token)match(input,NL,FOLLOW_NL_in_p_timestimes_expr5324); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_simple_expr_in_p_timestimes_expr5328);
            	    p_simple_expr578=p_simple_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_simple_expr578.getTree());

            	    }
            	    break;

            	default :
            	    break loop267;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_timestimes_expr"

    public static class simple_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:769:1: simple_expr : cons_expr ;
    public final babel17Parser.simple_expr_return simple_expr() throws RecognitionException {
        babel17Parser.simple_expr_return retval = new babel17Parser.simple_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.cons_expr_return cons_expr579 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:770:2: ( cons_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:770:4: cons_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_cons_expr_in_simple_expr5339);
            cons_expr579=cons_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cons_expr579.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "simple_expr"

    public static class p_simple_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_simple_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:772:1: p_simple_expr : p_cons_expr ;
    public final babel17Parser.p_simple_expr_return p_simple_expr() throws RecognitionException {
        babel17Parser.p_simple_expr_return retval = new babel17Parser.p_simple_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.p_cons_expr_return p_cons_expr580 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:773:2: ( p_cons_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:773:4: p_cons_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_cons_expr_in_p_simple_expr5348);
            p_cons_expr580=p_cons_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_cons_expr580.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_simple_expr"

    public static class cons_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cons_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:775:1: cons_expr : to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? to_expr )* -> ^( LIST_CONS ( to_expr )* ) ;
    public final babel17Parser.cons_expr_return cons_expr() throws RecognitionException {
        babel17Parser.cons_expr_return retval = new babel17Parser.cons_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL582=null;
        Token NL584=null;
        babel17Parser.to_expr_return to_expr581 = null;

        babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON583 = null;

        babel17Parser.to_expr_return to_expr585 = null;


        CommonTree NL582_tree=null;
        CommonTree NL584_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_token_DOUBLE_COLON=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_COLON");
        RewriteRuleSubtreeStream stream_to_expr=new RewriteRuleSubtreeStream(adaptor,"rule to_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:776:2: ( to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? to_expr )* -> ^( LIST_CONS ( to_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:776:4: to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? to_expr )*
            {
            pushFollow(FOLLOW_to_expr_in_cons_expr5357);
            to_expr581=to_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_to_expr.add(to_expr581.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:776:12: ( ( NL )? token_DOUBLE_COLON ( NL )? to_expr )*
            loop270:
            do {
                int alt270=2;
                int LA270_0 = input.LA(1);

                if ( (LA270_0==NL) ) {
                    int LA270_1 = input.LA(2);

                    if ( ((LA270_1>=A_DOUBLE_COLON && LA270_1<=U_DOUBLE_COLON)) ) {
                        alt270=1;
                    }


                }
                else if ( ((LA270_0>=A_DOUBLE_COLON && LA270_0<=U_DOUBLE_COLON)) ) {
                    alt270=1;
                }


                switch (alt270) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:776:13: ( NL )? token_DOUBLE_COLON ( NL )? to_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:776:13: ( NL )?
            	    int alt268=2;
            	    int LA268_0 = input.LA(1);

            	    if ( (LA268_0==NL) ) {
            	        alt268=1;
            	    }
            	    switch (alt268) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:776:13: NL
            	            {
            	            NL582=(Token)match(input,NL,FOLLOW_NL_in_cons_expr5360); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL582);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_DOUBLE_COLON_in_cons_expr5363);
            	    token_DOUBLE_COLON583=token_DOUBLE_COLON();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_token_DOUBLE_COLON.add(token_DOUBLE_COLON583.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:776:36: ( NL )?
            	    int alt269=2;
            	    int LA269_0 = input.LA(1);

            	    if ( (LA269_0==NL) ) {
            	        alt269=1;
            	    }
            	    switch (alt269) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:776:36: NL
            	            {
            	            NL584=(Token)match(input,NL,FOLLOW_NL_in_cons_expr5365); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL584);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_to_expr_in_cons_expr5368);
            	    to_expr585=to_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_to_expr.add(to_expr585.getTree());

            	    }
            	    break;

            	default :
            	    break loop270;
                }
            } while (true);



            // AST REWRITE
            // elements: to_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 776:50: -> ^( LIST_CONS ( to_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:776:53: ^( LIST_CONS ( to_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST_CONS, "LIST_CONS"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:776:65: ( to_expr )*
                while ( stream_to_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_to_expr.nextTree());

                }
                stream_to_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cons_expr"

    public static class p_cons_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_cons_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:778:1: p_cons_expr : p_to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr )* -> ^( LIST_CONS ( p_to_expr )* ) ;
    public final babel17Parser.p_cons_expr_return p_cons_expr() throws RecognitionException {
        babel17Parser.p_cons_expr_return retval = new babel17Parser.p_cons_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL587=null;
        Token NL589=null;
        babel17Parser.p_to_expr_return p_to_expr586 = null;

        babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON588 = null;

        babel17Parser.p_to_expr_return p_to_expr590 = null;


        CommonTree NL587_tree=null;
        CommonTree NL589_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_p_to_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_to_expr");
        RewriteRuleSubtreeStream stream_token_DOUBLE_COLON=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_COLON");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:779:2: ( p_to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr )* -> ^( LIST_CONS ( p_to_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:779:4: p_to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr )*
            {
            pushFollow(FOLLOW_p_to_expr_in_p_cons_expr5388);
            p_to_expr586=p_to_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_to_expr.add(p_to_expr586.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:779:14: ( ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr )*
            loop273:
            do {
                int alt273=2;
                int LA273_0 = input.LA(1);

                if ( (LA273_0==NL) ) {
                    int LA273_1 = input.LA(2);

                    if ( ((LA273_1>=A_DOUBLE_COLON && LA273_1<=U_DOUBLE_COLON)) ) {
                        alt273=1;
                    }


                }
                else if ( ((LA273_0>=A_DOUBLE_COLON && LA273_0<=U_DOUBLE_COLON)) ) {
                    alt273=1;
                }


                switch (alt273) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:779:15: ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:779:15: ( NL )?
            	    int alt271=2;
            	    int LA271_0 = input.LA(1);

            	    if ( (LA271_0==NL) ) {
            	        alt271=1;
            	    }
            	    switch (alt271) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:779:15: NL
            	            {
            	            NL587=(Token)match(input,NL,FOLLOW_NL_in_p_cons_expr5391); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL587);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_DOUBLE_COLON_in_p_cons_expr5394);
            	    token_DOUBLE_COLON588=token_DOUBLE_COLON();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_token_DOUBLE_COLON.add(token_DOUBLE_COLON588.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:779:38: ( NL )?
            	    int alt272=2;
            	    int LA272_0 = input.LA(1);

            	    if ( (LA272_0==NL) ) {
            	        alt272=1;
            	    }
            	    switch (alt272) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:779:38: NL
            	            {
            	            NL589=(Token)match(input,NL,FOLLOW_NL_in_p_cons_expr5396); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL589);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_to_expr_in_p_cons_expr5399);
            	    p_to_expr590=p_to_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_to_expr.add(p_to_expr590.getTree());

            	    }
            	    break;

            	default :
            	    break loop273;
                }
            } while (true);



            // AST REWRITE
            // elements: p_to_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 779:54: -> ^( LIST_CONS ( p_to_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:779:57: ^( LIST_CONS ( p_to_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST_CONS, "LIST_CONS"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:779:69: ( p_to_expr )*
                while ( stream_p_to_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_to_expr.nextTree());

                }
                stream_p_to_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_cons_expr"

    public static class to_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:782:1: to_expr : arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr )? ;
    public final babel17Parser.to_expr_return to_expr() throws RecognitionException {
        babel17Parser.to_expr_return retval = new babel17Parser.to_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL592=null;
        Token L_to593=null;
        Token L_downto594=null;
        Token NL595=null;
        babel17Parser.arith_plus_expr_return arith_plus_expr591 = null;

        babel17Parser.arith_plus_expr_return arith_plus_expr596 = null;


        CommonTree NL592_tree=null;
        CommonTree L_to593_tree=null;
        CommonTree L_downto594_tree=null;
        CommonTree NL595_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:782:9: ( arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr )? )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:782:11: arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_arith_plus_expr_in_to_expr5419);
            arith_plus_expr591=arith_plus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_plus_expr591.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:782:27: ( ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr )?
            int alt277=2;
            int LA277_0 = input.LA(1);

            if ( (LA277_0==NL) ) {
                int LA277_1 = input.LA(2);

                if ( ((LA277_1>=L_to && LA277_1<=L_downto)) ) {
                    alt277=1;
                }
            }
            else if ( ((LA277_0>=L_to && LA277_0<=L_downto)) ) {
                alt277=1;
            }
            switch (alt277) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:782:28: ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:782:30: ( NL )?
                    int alt274=2;
                    int LA274_0 = input.LA(1);

                    if ( (LA274_0==NL) ) {
                        alt274=1;
                    }
                    switch (alt274) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:782:30: NL
                            {
                            NL592=(Token)match(input,NL,FOLLOW_NL_in_to_expr5422); if (state.failed) return retval;

                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:782:33: ( L_to | L_downto )
                    int alt275=2;
                    int LA275_0 = input.LA(1);

                    if ( (LA275_0==L_to) ) {
                        alt275=1;
                    }
                    else if ( (LA275_0==L_downto) ) {
                        alt275=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 275, 0, input);

                        throw nvae;
                    }
                    switch (alt275) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:782:34: L_to
                            {
                            L_to593=(Token)match(input,L_to,FOLLOW_L_to_in_to_expr5427); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            L_to593_tree = (CommonTree)adaptor.create(L_to593);
                            root_0 = (CommonTree)adaptor.becomeRoot(L_to593_tree, root_0);
                            }

                            }
                            break;
                        case 2 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:782:41: L_downto
                            {
                            L_downto594=(Token)match(input,L_downto,FOLLOW_L_downto_in_to_expr5431); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            L_downto594_tree = (CommonTree)adaptor.create(L_downto594);
                            root_0 = (CommonTree)adaptor.becomeRoot(L_downto594_tree, root_0);
                            }

                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:782:54: ( NL )?
                    int alt276=2;
                    int LA276_0 = input.LA(1);

                    if ( (LA276_0==NL) ) {
                        alt276=1;
                    }
                    switch (alt276) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:782:54: NL
                            {
                            NL595=(Token)match(input,NL,FOLLOW_NL_in_to_expr5435); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_arith_plus_expr_in_to_expr5439);
                    arith_plus_expr596=arith_plus_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_plus_expr596.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "to_expr"

    public static class p_to_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_to_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:784:1: p_to_expr : p_arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr )? ;
    public final babel17Parser.p_to_expr_return p_to_expr() throws RecognitionException {
        babel17Parser.p_to_expr_return retval = new babel17Parser.p_to_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL598=null;
        Token L_to599=null;
        Token L_downto600=null;
        Token NL601=null;
        babel17Parser.p_arith_plus_expr_return p_arith_plus_expr597 = null;

        babel17Parser.p_arith_plus_expr_return p_arith_plus_expr602 = null;


        CommonTree NL598_tree=null;
        CommonTree L_to599_tree=null;
        CommonTree L_downto600_tree=null;
        CommonTree NL601_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:2: ( p_arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr )? )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:4: p_arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_arith_plus_expr_in_p_to_expr5452);
            p_arith_plus_expr597=p_arith_plus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_plus_expr597.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:22: ( ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr )?
            int alt281=2;
            int LA281_0 = input.LA(1);

            if ( (LA281_0==NL) ) {
                int LA281_1 = input.LA(2);

                if ( ((LA281_1>=L_to && LA281_1<=L_downto)) ) {
                    alt281=1;
                }
            }
            else if ( ((LA281_0>=L_to && LA281_0<=L_downto)) ) {
                alt281=1;
            }
            switch (alt281) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:23: ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:25: ( NL )?
                    int alt278=2;
                    int LA278_0 = input.LA(1);

                    if ( (LA278_0==NL) ) {
                        alt278=1;
                    }
                    switch (alt278) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:25: NL
                            {
                            NL598=(Token)match(input,NL,FOLLOW_NL_in_p_to_expr5455); if (state.failed) return retval;

                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:28: ( L_to | L_downto )
                    int alt279=2;
                    int LA279_0 = input.LA(1);

                    if ( (LA279_0==L_to) ) {
                        alt279=1;
                    }
                    else if ( (LA279_0==L_downto) ) {
                        alt279=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 279, 0, input);

                        throw nvae;
                    }
                    switch (alt279) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:29: L_to
                            {
                            L_to599=(Token)match(input,L_to,FOLLOW_L_to_in_p_to_expr5460); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            L_to599_tree = (CommonTree)adaptor.create(L_to599);
                            root_0 = (CommonTree)adaptor.becomeRoot(L_to599_tree, root_0);
                            }

                            }
                            break;
                        case 2 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:36: L_downto
                            {
                            L_downto600=(Token)match(input,L_downto,FOLLOW_L_downto_in_p_to_expr5464); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            L_downto600_tree = (CommonTree)adaptor.create(L_downto600);
                            root_0 = (CommonTree)adaptor.becomeRoot(L_downto600_tree, root_0);
                            }

                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:49: ( NL )?
                    int alt280=2;
                    int LA280_0 = input.LA(1);

                    if ( (LA280_0==NL) ) {
                        alt280=1;
                    }
                    switch (alt280) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:49: NL
                            {
                            NL601=(Token)match(input,NL,FOLLOW_NL_in_p_to_expr5468); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_arith_plus_expr_in_p_to_expr5472);
                    p_arith_plus_expr602=p_arith_plus_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_plus_expr602.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_to_expr"

    public static class arith_plus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_plus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:787:1: arith_plus_expr : arith_uminus_expr ( ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr )* ;
    public final babel17Parser.arith_plus_expr_return arith_plus_expr() throws RecognitionException {
        babel17Parser.arith_plus_expr_return retval = new babel17Parser.arith_plus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL604=null;
        Token PLUS605=null;
        Token MINUS606=null;
        Token NL607=null;
        babel17Parser.arith_uminus_expr_return arith_uminus_expr603 = null;

        babel17Parser.arith_uminus_expr_return arith_uminus_expr608 = null;


        CommonTree NL604_tree=null;
        CommonTree PLUS605_tree=null;
        CommonTree MINUS606_tree=null;
        CommonTree NL607_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:2: ( arith_uminus_expr ( ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:4: arith_uminus_expr ( ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_arith_uminus_expr_in_arith_plus_expr5484);
            arith_uminus_expr603=arith_uminus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_uminus_expr603.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:22: ( ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr )*
            loop285:
            do {
                int alt285=2;
                int LA285_0 = input.LA(1);

                if ( (LA285_0==NL) ) {
                    int LA285_1 = input.LA(2);

                    if ( (LA285_1==PLUS) ) {
                        alt285=1;
                    }


                }
                else if ( ((LA285_0>=PLUS && LA285_0<=MINUS)) ) {
                    alt285=1;
                }


                switch (alt285) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:23: ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:23: ( ( NL )? PLUS | MINUS )
            	    int alt283=2;
            	    int LA283_0 = input.LA(1);

            	    if ( (LA283_0==PLUS||LA283_0==NL) ) {
            	        alt283=1;
            	    }
            	    else if ( (LA283_0==MINUS) ) {
            	        alt283=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 283, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt283) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:24: ( NL )? PLUS
            	            {
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:26: ( NL )?
            	            int alt282=2;
            	            int LA282_0 = input.LA(1);

            	            if ( (LA282_0==NL) ) {
            	                alt282=1;
            	            }
            	            switch (alt282) {
            	                case 1 :
            	                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:26: NL
            	                    {
            	                    NL604=(Token)match(input,NL,FOLLOW_NL_in_arith_plus_expr5488); if (state.failed) return retval;

            	                    }
            	                    break;

            	            }

            	            PLUS605=(Token)match(input,PLUS,FOLLOW_PLUS_in_arith_plus_expr5492); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS605_tree = (CommonTree)adaptor.create(PLUS605);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS605_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:37: MINUS
            	            {
            	            MINUS606=(Token)match(input,MINUS,FOLLOW_MINUS_in_arith_plus_expr5497); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS606_tree = (CommonTree)adaptor.create(MINUS606);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS606_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:47: ( NL )?
            	    int alt284=2;
            	    int LA284_0 = input.LA(1);

            	    if ( (LA284_0==NL) ) {
            	        alt284=1;
            	    }
            	    switch (alt284) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:47: NL
            	            {
            	            NL607=(Token)match(input,NL,FOLLOW_NL_in_arith_plus_expr5501); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_arith_uminus_expr_in_arith_plus_expr5505);
            	    arith_uminus_expr608=arith_uminus_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_uminus_expr608.getTree());

            	    }
            	    break;

            	default :
            	    break loop285;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_plus_expr"

    public static class p_arith_plus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_plus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:790:1: p_arith_plus_expr : p_arith_uminus_expr ( ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr )* ;
    public final babel17Parser.p_arith_plus_expr_return p_arith_plus_expr() throws RecognitionException {
        babel17Parser.p_arith_plus_expr_return retval = new babel17Parser.p_arith_plus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL610=null;
        Token set611=null;
        Token NL612=null;
        babel17Parser.p_arith_uminus_expr_return p_arith_uminus_expr609 = null;

        babel17Parser.p_arith_uminus_expr_return p_arith_uminus_expr613 = null;


        CommonTree NL610_tree=null;
        CommonTree set611_tree=null;
        CommonTree NL612_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:791:2: ( p_arith_uminus_expr ( ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:791:4: p_arith_uminus_expr ( ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_arith_uminus_expr_in_p_arith_plus_expr5516);
            p_arith_uminus_expr609=p_arith_uminus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_uminus_expr609.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:791:24: ( ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr )*
            loop288:
            do {
                int alt288=2;
                int LA288_0 = input.LA(1);

                if ( (LA288_0==NL) ) {
                    int LA288_1 = input.LA(2);

                    if ( ((LA288_1>=PLUS && LA288_1<=MINUS)) ) {
                        alt288=1;
                    }


                }
                else if ( ((LA288_0>=PLUS && LA288_0<=MINUS)) ) {
                    alt288=1;
                }


                switch (alt288) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:791:25: ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:791:27: ( NL )?
            	    int alt286=2;
            	    int LA286_0 = input.LA(1);

            	    if ( (LA286_0==NL) ) {
            	        alt286=1;
            	    }
            	    switch (alt286) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:791:27: NL
            	            {
            	            NL610=(Token)match(input,NL,FOLLOW_NL_in_p_arith_plus_expr5519); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    set611=(Token)input.LT(1);
            	    set611=(Token)input.LT(1);
            	    if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set611), root_0);
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:791:48: ( NL )?
            	    int alt287=2;
            	    int LA287_0 = input.LA(1);

            	    if ( (LA287_0==NL) ) {
            	        alt287=1;
            	    }
            	    switch (alt287) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:791:48: NL
            	            {
            	            NL612=(Token)match(input,NL,FOLLOW_NL_in_p_arith_plus_expr5532); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_arith_uminus_expr_in_p_arith_plus_expr5536);
            	    p_arith_uminus_expr613=p_arith_uminus_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_uminus_expr613.getTree());

            	    }
            	    break;

            	default :
            	    break loop288;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_plus_expr"

    public static class arith_uminus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_uminus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:793:1: arith_uminus_expr : ( MINUS ( NL )? arith_mult_expr -> ^( UMINUS arith_mult_expr ) | arith_mult_expr );
    public final babel17Parser.arith_uminus_expr_return arith_uminus_expr() throws RecognitionException {
        babel17Parser.arith_uminus_expr_return retval = new babel17Parser.arith_uminus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS614=null;
        Token NL615=null;
        babel17Parser.arith_mult_expr_return arith_mult_expr616 = null;

        babel17Parser.arith_mult_expr_return arith_mult_expr617 = null;


        CommonTree MINUS614_tree=null;
        CommonTree NL615_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_arith_mult_expr=new RewriteRuleSubtreeStream(adaptor,"rule arith_mult_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:794:2: ( MINUS ( NL )? arith_mult_expr -> ^( UMINUS arith_mult_expr ) | arith_mult_expr )
            int alt290=2;
            int LA290_0 = input.LA(1);

            if ( (LA290_0==MINUS) ) {
                alt290=1;
            }
            else if ( (LA290_0==L_begin||(LA290_0>=L_obj && LA290_0<=L_if)||(LA290_0>=L_while && LA290_0<=L_for)||LA290_0==L_match||LA290_0==L_try||(LA290_0>=L_true && LA290_0<=L_this)||LA290_0==L_nil||LA290_0==L_root||(LA290_0>=Constr && LA290_0<=Id)||(LA290_0>=Float && LA290_0<=Num)||(LA290_0>=String && LA290_0<=ROUND_BRACKET_OPEN)||LA290_0==SQUARE_BRACKET_OPEN||LA290_0==CURLY_BRACKET_OPEN) ) {
                alt290=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 290, 0, input);

                throw nvae;
            }
            switch (alt290) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:794:4: MINUS ( NL )? arith_mult_expr
                    {
                    MINUS614=(Token)match(input,MINUS,FOLLOW_MINUS_in_arith_uminus_expr5549); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS614);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:794:10: ( NL )?
                    int alt289=2;
                    int LA289_0 = input.LA(1);

                    if ( (LA289_0==NL) ) {
                        alt289=1;
                    }
                    switch (alt289) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:794:10: NL
                            {
                            NL615=(Token)match(input,NL,FOLLOW_NL_in_arith_uminus_expr5551); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL615);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_arith_mult_expr_in_arith_uminus_expr5554);
                    arith_mult_expr616=arith_mult_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arith_mult_expr.add(arith_mult_expr616.getTree());


                    // AST REWRITE
                    // elements: arith_mult_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 794:30: -> ^( UMINUS arith_mult_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:794:33: ^( UMINUS arith_mult_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UMINUS, "UMINUS"), root_1);

                        adaptor.addChild(root_1, stream_arith_mult_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:795:4: arith_mult_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arith_mult_expr_in_arith_uminus_expr5567);
                    arith_mult_expr617=arith_mult_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_mult_expr617.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_uminus_expr"

    public static class p_arith_uminus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_uminus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:797:1: p_arith_uminus_expr : ( MINUS ( NL )? p_arith_mult_expr -> ^( UMINUS p_arith_mult_expr ) | p_arith_mult_expr );
    public final babel17Parser.p_arith_uminus_expr_return p_arith_uminus_expr() throws RecognitionException {
        babel17Parser.p_arith_uminus_expr_return retval = new babel17Parser.p_arith_uminus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS618=null;
        Token NL619=null;
        babel17Parser.p_arith_mult_expr_return p_arith_mult_expr620 = null;

        babel17Parser.p_arith_mult_expr_return p_arith_mult_expr621 = null;


        CommonTree MINUS618_tree=null;
        CommonTree NL619_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_p_arith_mult_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_arith_mult_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:798:2: ( MINUS ( NL )? p_arith_mult_expr -> ^( UMINUS p_arith_mult_expr ) | p_arith_mult_expr )
            int alt292=2;
            int LA292_0 = input.LA(1);

            if ( (LA292_0==MINUS) ) {
                alt292=1;
            }
            else if ( (LA292_0==L_begin||(LA292_0>=L_obj && LA292_0<=L_if)||(LA292_0>=L_while && LA292_0<=L_for)||LA292_0==L_match||LA292_0==L_try||(LA292_0>=L_true && LA292_0<=L_this)||LA292_0==L_nil||LA292_0==L_root||(LA292_0>=Constr && LA292_0<=Id)||(LA292_0>=Float && LA292_0<=Num)||(LA292_0>=String && LA292_0<=ROUND_BRACKET_OPEN)||LA292_0==SQUARE_BRACKET_OPEN||LA292_0==CURLY_BRACKET_OPEN) ) {
                alt292=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 292, 0, input);

                throw nvae;
            }
            switch (alt292) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:798:4: MINUS ( NL )? p_arith_mult_expr
                    {
                    MINUS618=(Token)match(input,MINUS,FOLLOW_MINUS_in_p_arith_uminus_expr5578); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS618);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:798:10: ( NL )?
                    int alt291=2;
                    int LA291_0 = input.LA(1);

                    if ( (LA291_0==NL) ) {
                        alt291=1;
                    }
                    switch (alt291) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:798:10: NL
                            {
                            NL619=(Token)match(input,NL,FOLLOW_NL_in_p_arith_uminus_expr5580); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL619);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_arith_mult_expr_in_p_arith_uminus_expr5583);
                    p_arith_mult_expr620=p_arith_mult_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_arith_mult_expr.add(p_arith_mult_expr620.getTree());


                    // AST REWRITE
                    // elements: p_arith_mult_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 798:32: -> ^( UMINUS p_arith_mult_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:798:35: ^( UMINUS p_arith_mult_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UMINUS, "UMINUS"), root_1);

                        adaptor.addChild(root_1, stream_p_arith_mult_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:799:4: p_arith_mult_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_arith_mult_expr_in_p_arith_uminus_expr5596);
                    p_arith_mult_expr621=p_arith_mult_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_mult_expr621.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_uminus_expr"

    public static class arith_mult_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_mult_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:801:1: arith_mult_expr : arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr )* ;
    public final babel17Parser.arith_mult_expr_return arith_mult_expr() throws RecognitionException {
        babel17Parser.arith_mult_expr_return retval = new babel17Parser.arith_mult_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL623=null;
        Token set624=null;
        Token NL625=null;
        babel17Parser.arith_pow_expr_return arith_pow_expr622 = null;

        babel17Parser.arith_pow_expr_return arith_pow_expr626 = null;


        CommonTree NL623_tree=null;
        CommonTree set624_tree=null;
        CommonTree NL625_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:2: ( arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:4: arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_arith_pow_expr_in_arith_mult_expr5605);
            arith_pow_expr622=arith_pow_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_pow_expr622.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:19: ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr )*
            loop295:
            do {
                int alt295=2;
                int LA295_0 = input.LA(1);

                if ( (LA295_0==NL) ) {
                    int LA295_1 = input.LA(2);

                    if ( ((LA295_1>=L_div && LA295_1<=L_mod)||(LA295_1>=TIMES && LA295_1<=QUOTIENT)) ) {
                        alt295=1;
                    }


                }
                else if ( ((LA295_0>=L_div && LA295_0<=L_mod)||(LA295_0>=TIMES && LA295_0<=QUOTIENT)) ) {
                    alt295=1;
                }


                switch (alt295) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:20: ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:22: ( NL )?
            	    int alt293=2;
            	    int LA293_0 = input.LA(1);

            	    if ( (LA293_0==NL) ) {
            	        alt293=1;
            	    }
            	    switch (alt293) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:22: NL
            	            {
            	            NL623=(Token)match(input,NL,FOLLOW_NL_in_arith_mult_expr5608); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    set624=(Token)input.LT(1);
            	    set624=(Token)input.LT(1);
            	    if ( (input.LA(1)>=L_div && input.LA(1)<=L_mod)||(input.LA(1)>=TIMES && input.LA(1)<=QUOTIENT) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set624), root_0);
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:63: ( NL )?
            	    int alt294=2;
            	    int LA294_0 = input.LA(1);

            	    if ( (LA294_0==NL) ) {
            	        alt294=1;
            	    }
            	    switch (alt294) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:63: NL
            	            {
            	            NL625=(Token)match(input,NL,FOLLOW_NL_in_arith_mult_expr5629); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_arith_pow_expr_in_arith_mult_expr5633);
            	    arith_pow_expr626=arith_pow_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_pow_expr626.getTree());

            	    }
            	    break;

            	default :
            	    break loop295;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_mult_expr"

    public static class p_arith_mult_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_mult_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:804:1: p_arith_mult_expr : p_arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr )* ;
    public final babel17Parser.p_arith_mult_expr_return p_arith_mult_expr() throws RecognitionException {
        babel17Parser.p_arith_mult_expr_return retval = new babel17Parser.p_arith_mult_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL628=null;
        Token set629=null;
        Token NL630=null;
        babel17Parser.p_arith_pow_expr_return p_arith_pow_expr627 = null;

        babel17Parser.p_arith_pow_expr_return p_arith_pow_expr631 = null;


        CommonTree NL628_tree=null;
        CommonTree set629_tree=null;
        CommonTree NL630_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:2: ( p_arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:4: p_arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_arith_pow_expr_in_p_arith_mult_expr5645);
            p_arith_pow_expr627=p_arith_pow_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_pow_expr627.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:21: ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr )*
            loop298:
            do {
                int alt298=2;
                int LA298_0 = input.LA(1);

                if ( (LA298_0==NL) ) {
                    int LA298_1 = input.LA(2);

                    if ( ((LA298_1>=L_div && LA298_1<=L_mod)||(LA298_1>=TIMES && LA298_1<=QUOTIENT)) ) {
                        alt298=1;
                    }


                }
                else if ( ((LA298_0>=L_div && LA298_0<=L_mod)||(LA298_0>=TIMES && LA298_0<=QUOTIENT)) ) {
                    alt298=1;
                }


                switch (alt298) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:22: ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:24: ( NL )?
            	    int alt296=2;
            	    int LA296_0 = input.LA(1);

            	    if ( (LA296_0==NL) ) {
            	        alt296=1;
            	    }
            	    switch (alt296) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:24: NL
            	            {
            	            NL628=(Token)match(input,NL,FOLLOW_NL_in_p_arith_mult_expr5648); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    set629=(Token)input.LT(1);
            	    set629=(Token)input.LT(1);
            	    if ( (input.LA(1)>=L_div && input.LA(1)<=L_mod)||(input.LA(1)>=TIMES && input.LA(1)<=QUOTIENT) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set629), root_0);
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:65: ( NL )?
            	    int alt297=2;
            	    int LA297_0 = input.LA(1);

            	    if ( (LA297_0==NL) ) {
            	        alt297=1;
            	    }
            	    switch (alt297) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:65: NL
            	            {
            	            NL630=(Token)match(input,NL,FOLLOW_NL_in_p_arith_mult_expr5669); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_arith_pow_expr_in_p_arith_mult_expr5673);
            	    p_arith_pow_expr631=p_arith_pow_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_pow_expr631.getTree());

            	    }
            	    break;

            	default :
            	    break loop298;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_mult_expr"

    public static class arith_pow_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_pow_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:807:1: arith_pow_expr : apply_expr ( ( NL )? POW_tok ( NL )? apply_expr )* -> ^( POW ( apply_expr )* ) ;
    public final babel17Parser.arith_pow_expr_return arith_pow_expr() throws RecognitionException {
        babel17Parser.arith_pow_expr_return retval = new babel17Parser.arith_pow_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL633=null;
        Token POW_tok634=null;
        Token NL635=null;
        babel17Parser.apply_expr_return apply_expr632 = null;

        babel17Parser.apply_expr_return apply_expr636 = null;


        CommonTree NL633_tree=null;
        CommonTree POW_tok634_tree=null;
        CommonTree NL635_tree=null;
        RewriteRuleTokenStream stream_POW_tok=new RewriteRuleTokenStream(adaptor,"token POW_tok");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_apply_expr=new RewriteRuleSubtreeStream(adaptor,"rule apply_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:2: ( apply_expr ( ( NL )? POW_tok ( NL )? apply_expr )* -> ^( POW ( apply_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:4: apply_expr ( ( NL )? POW_tok ( NL )? apply_expr )*
            {
            pushFollow(FOLLOW_apply_expr_in_arith_pow_expr5684);
            apply_expr632=apply_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_apply_expr.add(apply_expr632.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:15: ( ( NL )? POW_tok ( NL )? apply_expr )*
            loop301:
            do {
                int alt301=2;
                int LA301_0 = input.LA(1);

                if ( (LA301_0==NL) ) {
                    int LA301_1 = input.LA(2);

                    if ( (LA301_1==POW_tok) ) {
                        alt301=1;
                    }


                }
                else if ( (LA301_0==POW_tok) ) {
                    alt301=1;
                }


                switch (alt301) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:16: ( NL )? POW_tok ( NL )? apply_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:16: ( NL )?
            	    int alt299=2;
            	    int LA299_0 = input.LA(1);

            	    if ( (LA299_0==NL) ) {
            	        alt299=1;
            	    }
            	    switch (alt299) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:16: NL
            	            {
            	            NL633=(Token)match(input,NL,FOLLOW_NL_in_arith_pow_expr5687); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL633);


            	            }
            	            break;

            	    }

            	    POW_tok634=(Token)match(input,POW_tok,FOLLOW_POW_tok_in_arith_pow_expr5690); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_POW_tok.add(POW_tok634);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:28: ( NL )?
            	    int alt300=2;
            	    int LA300_0 = input.LA(1);

            	    if ( (LA300_0==NL) ) {
            	        alt300=1;
            	    }
            	    switch (alt300) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:28: NL
            	            {
            	            NL635=(Token)match(input,NL,FOLLOW_NL_in_arith_pow_expr5692); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL635);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_apply_expr_in_arith_pow_expr5695);
            	    apply_expr636=apply_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_apply_expr.add(apply_expr636.getTree());

            	    }
            	    break;

            	default :
            	    break loop301;
                }
            } while (true);



            // AST REWRITE
            // elements: apply_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 808:45: -> ^( POW ( apply_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:48: ^( POW ( apply_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(POW, "POW"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:54: ( apply_expr )*
                while ( stream_apply_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_apply_expr.nextTree());

                }
                stream_apply_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_pow_expr"

    public static class p_arith_pow_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_pow_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:1: p_arith_pow_expr : p_apply_expr ( ( NL )? POW_tok ( NL )? p_apply_expr )* -> ^( POW ( p_apply_expr )* ) ;
    public final babel17Parser.p_arith_pow_expr_return p_arith_pow_expr() throws RecognitionException {
        babel17Parser.p_arith_pow_expr_return retval = new babel17Parser.p_arith_pow_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL638=null;
        Token POW_tok639=null;
        Token NL640=null;
        babel17Parser.p_apply_expr_return p_apply_expr637 = null;

        babel17Parser.p_apply_expr_return p_apply_expr641 = null;


        CommonTree NL638_tree=null;
        CommonTree POW_tok639_tree=null;
        CommonTree NL640_tree=null;
        RewriteRuleTokenStream stream_POW_tok=new RewriteRuleTokenStream(adaptor,"token POW_tok");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_p_apply_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_apply_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:811:2: ( p_apply_expr ( ( NL )? POW_tok ( NL )? p_apply_expr )* -> ^( POW ( p_apply_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:811:4: p_apply_expr ( ( NL )? POW_tok ( NL )? p_apply_expr )*
            {
            pushFollow(FOLLOW_p_apply_expr_in_p_arith_pow_expr5716);
            p_apply_expr637=p_apply_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_apply_expr.add(p_apply_expr637.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:811:17: ( ( NL )? POW_tok ( NL )? p_apply_expr )*
            loop304:
            do {
                int alt304=2;
                int LA304_0 = input.LA(1);

                if ( (LA304_0==NL) ) {
                    int LA304_1 = input.LA(2);

                    if ( (LA304_1==POW_tok) ) {
                        alt304=1;
                    }


                }
                else if ( (LA304_0==POW_tok) ) {
                    alt304=1;
                }


                switch (alt304) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:811:18: ( NL )? POW_tok ( NL )? p_apply_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:811:18: ( NL )?
            	    int alt302=2;
            	    int LA302_0 = input.LA(1);

            	    if ( (LA302_0==NL) ) {
            	        alt302=1;
            	    }
            	    switch (alt302) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:811:18: NL
            	            {
            	            NL638=(Token)match(input,NL,FOLLOW_NL_in_p_arith_pow_expr5719); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL638);


            	            }
            	            break;

            	    }

            	    POW_tok639=(Token)match(input,POW_tok,FOLLOW_POW_tok_in_p_arith_pow_expr5722); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_POW_tok.add(POW_tok639);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:811:30: ( NL )?
            	    int alt303=2;
            	    int LA303_0 = input.LA(1);

            	    if ( (LA303_0==NL) ) {
            	        alt303=1;
            	    }
            	    switch (alt303) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:811:30: NL
            	            {
            	            NL640=(Token)match(input,NL,FOLLOW_NL_in_p_arith_pow_expr5724); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL640);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_apply_expr_in_p_arith_pow_expr5727);
            	    p_apply_expr641=p_apply_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_apply_expr.add(p_apply_expr641.getTree());

            	    }
            	    break;

            	default :
            	    break loop304;
                }
            } while (true);



            // AST REWRITE
            // elements: p_apply_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 811:49: -> ^( POW ( p_apply_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:811:52: ^( POW ( p_apply_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(POW, "POW"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:811:58: ( p_apply_expr )*
                while ( stream_p_apply_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_apply_expr.nextTree());

                }
                stream_p_apply_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_pow_expr"

    public static class apply_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apply_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:1: apply_expr : ( basic_expr )+ -> ^( APPLY ( basic_expr )* ) ;
    public final babel17Parser.apply_expr_return apply_expr() throws RecognitionException {
        babel17Parser.apply_expr_return retval = new babel17Parser.apply_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.basic_expr_return basic_expr642 = null;


        RewriteRuleSubtreeStream stream_basic_expr=new RewriteRuleSubtreeStream(adaptor,"rule basic_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:814:2: ( ( basic_expr )+ -> ^( APPLY ( basic_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:814:4: ( basic_expr )+
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:814:4: ( basic_expr )+
            int cnt305=0;
            loop305:
            do {
                int alt305=2;
                int LA305_0 = input.LA(1);

                if ( (LA305_0==L_try) ) {
                    int LA305_2 = input.LA(2);

                    if ( (LA305_2==NL) ) {
                        int LA305_4 = input.LA(3);

                        if ( (LA305_4==L_begin||(LA305_4>=L_obj && LA305_4<=L_if)||(LA305_4>=L_while && LA305_4<=L_for)||(LA305_4>=L_yield && LA305_4<=L_match)||(LA305_4>=L_val && LA305_4<=L_def)||LA305_4==L_exception||LA305_4==L_try||(LA305_4>=L_concurrent && LA305_4<=L_nil)||(LA305_4>=L_module && LA305_4<=L_import)||LA305_4==L_not||(LA305_4>=L_root && LA305_4<=L_lens)||LA305_4==MINUS||(LA305_4>=A_ELLIPSIS && LA305_4<=U_ELLIPSIS)||LA305_4==L_force||(LA305_4>=Constr && LA305_4<=Id)||(LA305_4>=Float && LA305_4<=Num)||(LA305_4>=String && LA305_4<=ROUND_BRACKET_OPEN)||LA305_4==SQUARE_BRACKET_OPEN||LA305_4==CURLY_BRACKET_OPEN||LA305_4==UNDERSCORE||(LA305_4>=PRAGMA_LOG && LA305_4<=PRAGMA_CATCH)) ) {
                            alt305=1;
                        }


                    }
                    else if ( (LA305_2==L_begin||(LA305_2>=L_obj && LA305_2<=L_if)||(LA305_2>=L_while && LA305_2<=L_for)||(LA305_2>=L_yield && LA305_2<=L_match)||(LA305_2>=L_val && LA305_2<=L_def)||LA305_2==L_exception||LA305_2==L_try||(LA305_2>=L_concurrent && LA305_2<=L_nil)||(LA305_2>=L_module && LA305_2<=L_import)||LA305_2==L_not||(LA305_2>=L_root && LA305_2<=L_lens)||LA305_2==MINUS||(LA305_2>=A_ELLIPSIS && LA305_2<=U_ELLIPSIS)||LA305_2==L_force||(LA305_2>=Constr && LA305_2<=Id)||(LA305_2>=Float && LA305_2<=Num)||(LA305_2>=String && LA305_2<=ROUND_BRACKET_OPEN)||LA305_2==SQUARE_BRACKET_OPEN||LA305_2==CURLY_BRACKET_OPEN||LA305_2==UNDERSCORE||(LA305_2>=PRAGMA_LOG && LA305_2<=PRAGMA_CATCH)) ) {
                        alt305=1;
                    }


                }
                else if ( (LA305_0==L_begin||(LA305_0>=L_obj && LA305_0<=L_if)||(LA305_0>=L_while && LA305_0<=L_for)||LA305_0==L_match||(LA305_0>=L_true && LA305_0<=L_this)||LA305_0==L_nil||LA305_0==L_root||(LA305_0>=Constr && LA305_0<=Id)||(LA305_0>=Float && LA305_0<=Num)||(LA305_0>=String && LA305_0<=ROUND_BRACKET_OPEN)||LA305_0==SQUARE_BRACKET_OPEN||LA305_0==CURLY_BRACKET_OPEN) ) {
                    alt305=1;
                }


                switch (alt305) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:814:4: basic_expr
            	    {
            	    pushFollow(FOLLOW_basic_expr_in_apply_expr5748);
            	    basic_expr642=basic_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_basic_expr.add(basic_expr642.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt305 >= 1 ) break loop305;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(305, input);
                        throw eee;
                }
                cnt305++;
            } while (true);



            // AST REWRITE
            // elements: basic_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 814:16: -> ^( APPLY ( basic_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:814:19: ^( APPLY ( basic_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(APPLY, "APPLY"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:814:27: ( basic_expr )*
                while ( stream_basic_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_basic_expr.nextTree());

                }
                stream_basic_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "apply_expr"

    public static class p_apply_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_apply_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:815:1: p_apply_expr : p_basic_expr ( ( NL )? p_basic_expr )* -> ^( APPLY ( p_basic_expr )* ) ;
    public final babel17Parser.p_apply_expr_return p_apply_expr() throws RecognitionException {
        babel17Parser.p_apply_expr_return retval = new babel17Parser.p_apply_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL644=null;
        babel17Parser.p_basic_expr_return p_basic_expr643 = null;

        babel17Parser.p_basic_expr_return p_basic_expr645 = null;


        CommonTree NL644_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_p_basic_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_basic_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:2: ( p_basic_expr ( ( NL )? p_basic_expr )* -> ^( APPLY ( p_basic_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:4: p_basic_expr ( ( NL )? p_basic_expr )*
            {
            pushFollow(FOLLOW_p_basic_expr_in_p_apply_expr5766);
            p_basic_expr643=p_basic_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_basic_expr.add(p_basic_expr643.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:17: ( ( NL )? p_basic_expr )*
            loop307:
            do {
                int alt307=2;
                switch ( input.LA(1) ) {
                case NL:
                    {
                    int LA307_1 = input.LA(2);

                    if ( (LA307_1==L_try) ) {
                        int LA307_3 = input.LA(3);

                        if ( (LA307_3==NL) ) {
                            int LA307_5 = input.LA(4);

                            if ( (LA307_5==L_begin||(LA307_5>=L_obj && LA307_5<=L_if)||(LA307_5>=L_while && LA307_5<=L_for)||(LA307_5>=L_yield && LA307_5<=L_match)||(LA307_5>=L_val && LA307_5<=L_def)||LA307_5==L_exception||LA307_5==L_try||(LA307_5>=L_concurrent && LA307_5<=L_nil)||(LA307_5>=L_module && LA307_5<=L_import)||LA307_5==L_not||(LA307_5>=L_root && LA307_5<=L_lens)||LA307_5==MINUS||(LA307_5>=A_ELLIPSIS && LA307_5<=U_ELLIPSIS)||LA307_5==L_force||(LA307_5>=Constr && LA307_5<=Id)||(LA307_5>=Float && LA307_5<=Num)||(LA307_5>=String && LA307_5<=ROUND_BRACKET_OPEN)||LA307_5==SQUARE_BRACKET_OPEN||LA307_5==CURLY_BRACKET_OPEN||LA307_5==UNDERSCORE||(LA307_5>=PRAGMA_LOG && LA307_5<=PRAGMA_CATCH)) ) {
                                alt307=1;
                            }


                        }
                        else if ( (LA307_3==L_begin||(LA307_3>=L_obj && LA307_3<=L_if)||(LA307_3>=L_while && LA307_3<=L_for)||(LA307_3>=L_yield && LA307_3<=L_match)||(LA307_3>=L_val && LA307_3<=L_def)||LA307_3==L_exception||LA307_3==L_try||(LA307_3>=L_concurrent && LA307_3<=L_nil)||(LA307_3>=L_module && LA307_3<=L_import)||LA307_3==L_not||(LA307_3>=L_root && LA307_3<=L_lens)||LA307_3==MINUS||(LA307_3>=A_ELLIPSIS && LA307_3<=U_ELLIPSIS)||LA307_3==L_force||(LA307_3>=Constr && LA307_3<=Id)||(LA307_3>=Float && LA307_3<=Num)||(LA307_3>=String && LA307_3<=ROUND_BRACKET_OPEN)||LA307_3==SQUARE_BRACKET_OPEN||LA307_3==CURLY_BRACKET_OPEN||LA307_3==UNDERSCORE||(LA307_3>=PRAGMA_LOG && LA307_3<=PRAGMA_CATCH)) ) {
                            alt307=1;
                        }


                    }
                    else if ( (LA307_1==L_begin||(LA307_1>=L_obj && LA307_1<=L_if)||(LA307_1>=L_while && LA307_1<=L_for)||LA307_1==L_match||(LA307_1>=L_true && LA307_1<=L_this)||LA307_1==L_nil||LA307_1==L_root||(LA307_1>=Constr && LA307_1<=Id)||(LA307_1>=Float && LA307_1<=Num)||(LA307_1>=String && LA307_1<=ROUND_BRACKET_OPEN)||LA307_1==SQUARE_BRACKET_OPEN||LA307_1==CURLY_BRACKET_OPEN) ) {
                        alt307=1;
                    }


                    }
                    break;
                case L_try:
                    {
                    int LA307_3 = input.LA(2);

                    if ( (LA307_3==NL) ) {
                        int LA307_5 = input.LA(3);

                        if ( (LA307_5==L_begin||(LA307_5>=L_obj && LA307_5<=L_if)||(LA307_5>=L_while && LA307_5<=L_for)||(LA307_5>=L_yield && LA307_5<=L_match)||(LA307_5>=L_val && LA307_5<=L_def)||LA307_5==L_exception||LA307_5==L_try||(LA307_5>=L_concurrent && LA307_5<=L_nil)||(LA307_5>=L_module && LA307_5<=L_import)||LA307_5==L_not||(LA307_5>=L_root && LA307_5<=L_lens)||LA307_5==MINUS||(LA307_5>=A_ELLIPSIS && LA307_5<=U_ELLIPSIS)||LA307_5==L_force||(LA307_5>=Constr && LA307_5<=Id)||(LA307_5>=Float && LA307_5<=Num)||(LA307_5>=String && LA307_5<=ROUND_BRACKET_OPEN)||LA307_5==SQUARE_BRACKET_OPEN||LA307_5==CURLY_BRACKET_OPEN||LA307_5==UNDERSCORE||(LA307_5>=PRAGMA_LOG && LA307_5<=PRAGMA_CATCH)) ) {
                            alt307=1;
                        }


                    }
                    else if ( (LA307_3==L_begin||(LA307_3>=L_obj && LA307_3<=L_if)||(LA307_3>=L_while && LA307_3<=L_for)||(LA307_3>=L_yield && LA307_3<=L_match)||(LA307_3>=L_val && LA307_3<=L_def)||LA307_3==L_exception||LA307_3==L_try||(LA307_3>=L_concurrent && LA307_3<=L_nil)||(LA307_3>=L_module && LA307_3<=L_import)||LA307_3==L_not||(LA307_3>=L_root && LA307_3<=L_lens)||LA307_3==MINUS||(LA307_3>=A_ELLIPSIS && LA307_3<=U_ELLIPSIS)||LA307_3==L_force||(LA307_3>=Constr && LA307_3<=Id)||(LA307_3>=Float && LA307_3<=Num)||(LA307_3>=String && LA307_3<=ROUND_BRACKET_OPEN)||LA307_3==SQUARE_BRACKET_OPEN||LA307_3==CURLY_BRACKET_OPEN||LA307_3==UNDERSCORE||(LA307_3>=PRAGMA_LOG && LA307_3<=PRAGMA_CATCH)) ) {
                        alt307=1;
                    }


                    }
                    break;
                case L_begin:
                case L_obj:
                case L_with:
                case L_if:
                case L_while:
                case L_for:
                case L_match:
                case L_true:
                case L_false:
                case L_this:
                case L_nil:
                case L_root:
                case Constr:
                case Id:
                case Float:
                case Num:
                case String:
                case ROUND_BRACKET_OPEN:
                case SQUARE_BRACKET_OPEN:
                case CURLY_BRACKET_OPEN:
                    {
                    alt307=1;
                    }
                    break;

                }

                switch (alt307) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:18: ( NL )? p_basic_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:18: ( NL )?
            	    int alt306=2;
            	    int LA306_0 = input.LA(1);

            	    if ( (LA306_0==NL) ) {
            	        alt306=1;
            	    }
            	    switch (alt306) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:18: NL
            	            {
            	            NL644=(Token)match(input,NL,FOLLOW_NL_in_p_apply_expr5769); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL644);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_basic_expr_in_p_apply_expr5772);
            	    p_basic_expr645=p_basic_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_basic_expr.add(p_basic_expr645.getTree());

            	    }
            	    break;

            	default :
            	    break loop307;
                }
            } while (true);



            // AST REWRITE
            // elements: p_basic_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 816:37: -> ^( APPLY ( p_basic_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:40: ^( APPLY ( p_basic_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(APPLY, "APPLY"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:48: ( p_basic_expr )*
                while ( stream_p_basic_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_basic_expr.nextTree());

                }
                stream_p_basic_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_apply_expr"

    public static class basic_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "basic_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:818:1: basic_expr : message_send_expr ;
    public final babel17Parser.basic_expr_return basic_expr() throws RecognitionException {
        babel17Parser.basic_expr_return retval = new babel17Parser.basic_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.message_send_expr_return message_send_expr646 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:819:2: ( message_send_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:819:4: message_send_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_message_send_expr_in_basic_expr5792);
            message_send_expr646=message_send_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, message_send_expr646.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "basic_expr"

    public static class p_basic_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_basic_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:821:1: p_basic_expr : message_send_expr ;
    public final babel17Parser.p_basic_expr_return p_basic_expr() throws RecognitionException {
        babel17Parser.p_basic_expr_return retval = new babel17Parser.p_basic_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.message_send_expr_return message_send_expr647 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:822:2: ( message_send_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:822:4: message_send_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_message_send_expr_in_p_basic_expr5801);
            message_send_expr647=message_send_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, message_send_expr647.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_basic_expr"

    public static class message_send_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "message_send_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:824:1: message_send_expr : primitive_expr ( ( NL )? PERIOD ( NL )? message_expr )* -> ^( MESSAGE_SEND primitive_expr ( message_expr )* ) ;
    public final babel17Parser.message_send_expr_return message_send_expr() throws RecognitionException {
        babel17Parser.message_send_expr_return retval = new babel17Parser.message_send_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL649=null;
        Token PERIOD650=null;
        Token NL651=null;
        babel17Parser.primitive_expr_return primitive_expr648 = null;

        babel17Parser.message_expr_return message_expr652 = null;


        CommonTree NL649_tree=null;
        CommonTree PERIOD650_tree=null;
        CommonTree NL651_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_primitive_expr=new RewriteRuleSubtreeStream(adaptor,"rule primitive_expr");
        RewriteRuleSubtreeStream stream_message_expr=new RewriteRuleSubtreeStream(adaptor,"rule message_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:825:2: ( primitive_expr ( ( NL )? PERIOD ( NL )? message_expr )* -> ^( MESSAGE_SEND primitive_expr ( message_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:825:4: primitive_expr ( ( NL )? PERIOD ( NL )? message_expr )*
            {
            pushFollow(FOLLOW_primitive_expr_in_message_send_expr5810);
            primitive_expr648=primitive_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_primitive_expr.add(primitive_expr648.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:825:19: ( ( NL )? PERIOD ( NL )? message_expr )*
            loop310:
            do {
                int alt310=2;
                int LA310_0 = input.LA(1);

                if ( (LA310_0==NL) ) {
                    int LA310_1 = input.LA(2);

                    if ( (LA310_1==PERIOD) ) {
                        alt310=1;
                    }


                }
                else if ( (LA310_0==PERIOD) ) {
                    alt310=1;
                }


                switch (alt310) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:825:20: ( NL )? PERIOD ( NL )? message_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:825:20: ( NL )?
            	    int alt308=2;
            	    int LA308_0 = input.LA(1);

            	    if ( (LA308_0==NL) ) {
            	        alt308=1;
            	    }
            	    switch (alt308) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:825:20: NL
            	            {
            	            NL649=(Token)match(input,NL,FOLLOW_NL_in_message_send_expr5813); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL649);


            	            }
            	            break;

            	    }

            	    PERIOD650=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_message_send_expr5816); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD650);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:825:31: ( NL )?
            	    int alt309=2;
            	    int LA309_0 = input.LA(1);

            	    if ( (LA309_0==NL) ) {
            	        alt309=1;
            	    }
            	    switch (alt309) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:825:31: NL
            	            {
            	            NL651=(Token)match(input,NL,FOLLOW_NL_in_message_send_expr5818); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL651);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_message_expr_in_message_send_expr5821);
            	    message_expr652=message_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_message_expr.add(message_expr652.getTree());

            	    }
            	    break;

            	default :
            	    break loop310;
                }
            } while (true);



            // AST REWRITE
            // elements: primitive_expr, message_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 825:50: -> ^( MESSAGE_SEND primitive_expr ( message_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:825:53: ^( MESSAGE_SEND primitive_expr ( message_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MESSAGE_SEND, "MESSAGE_SEND"), root_1);

                adaptor.addChild(root_1, stream_primitive_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:825:83: ( message_expr )*
                while ( stream_message_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_message_expr.nextTree());

                }
                stream_message_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "message_send_expr"

    public static class message_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "message_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:827:1: message_expr : ( Id -> ^( MESSAGE_ID Id ) | '(' ( NL )? p_op_expr ( NL )? ')' -> ^( MESSAGE_LENS p_op_expr ) );
    public final babel17Parser.message_expr_return message_expr() throws RecognitionException {
        babel17Parser.message_expr_return retval = new babel17Parser.message_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id653=null;
        Token char_literal654=null;
        Token NL655=null;
        Token NL657=null;
        Token char_literal658=null;
        babel17Parser.p_op_expr_return p_op_expr656 = null;


        CommonTree Id653_tree=null;
        CommonTree char_literal654_tree=null;
        CommonTree NL655_tree=null;
        CommonTree NL657_tree=null;
        CommonTree char_literal658_tree=null;
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleSubtreeStream stream_p_op_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_op_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:828:2: ( Id -> ^( MESSAGE_ID Id ) | '(' ( NL )? p_op_expr ( NL )? ')' -> ^( MESSAGE_LENS p_op_expr ) )
            int alt313=2;
            int LA313_0 = input.LA(1);

            if ( (LA313_0==Id) ) {
                alt313=1;
            }
            else if ( (LA313_0==ROUND_BRACKET_OPEN) ) {
                alt313=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 313, 0, input);

                throw nvae;
            }
            switch (alt313) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:828:4: Id
                    {
                    Id653=(Token)match(input,Id,FOLLOW_Id_in_message_expr5844); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id653);



                    // AST REWRITE
                    // elements: Id
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 828:7: -> ^( MESSAGE_ID Id )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:828:10: ^( MESSAGE_ID Id )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MESSAGE_ID, "MESSAGE_ID"), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:829:4: '(' ( NL )? p_op_expr ( NL )? ')'
                    {
                    char_literal654=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_message_expr5857); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal654);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:829:8: ( NL )?
                    int alt311=2;
                    int LA311_0 = input.LA(1);

                    if ( (LA311_0==NL) ) {
                        alt311=1;
                    }
                    switch (alt311) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:829:8: NL
                            {
                            NL655=(Token)match(input,NL,FOLLOW_NL_in_message_expr5859); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL655);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_op_expr_in_message_expr5862);
                    p_op_expr656=p_op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_op_expr.add(p_op_expr656.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:829:22: ( NL )?
                    int alt312=2;
                    int LA312_0 = input.LA(1);

                    if ( (LA312_0==NL) ) {
                        alt312=1;
                    }
                    switch (alt312) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:829:22: NL
                            {
                            NL657=(Token)match(input,NL,FOLLOW_NL_in_message_expr5864); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL657);


                            }
                            break;

                    }

                    char_literal658=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_message_expr5867); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal658);



                    // AST REWRITE
                    // elements: p_op_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 829:30: -> ^( MESSAGE_LENS p_op_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:829:33: ^( MESSAGE_LENS p_op_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MESSAGE_LENS, "MESSAGE_LENS"), root_1);

                        adaptor.addChild(root_1, stream_p_op_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "message_expr"

    public static class list_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "list_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:831:1: list_expr : ( ( '[' ( NL )? protected_expr_nc ( NL )? ';' )=> '[' ( NL )? protected_expr_nc ( NL )? ';' ( NL )? protected_expr_nc ( NL )? ']' -> ^( INTERVAL ( protected_expr_nc )* ) | '[' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? )? ']' -> ^( SQUARE_LIST ( protected_expr_nc )* ) | '(' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( protected_expr_nc )* ) ) );
    public final babel17Parser.list_expr_return list_expr() throws RecognitionException {
        babel17Parser.list_expr_return retval = new babel17Parser.list_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal659=null;
        Token NL660=null;
        Token NL662=null;
        Token char_literal663=null;
        Token NL664=null;
        Token NL666=null;
        Token char_literal667=null;
        Token char_literal668=null;
        Token NL669=null;
        Token NL671=null;
        Token COMMA672=null;
        Token NL673=null;
        Token NL675=null;
        Token char_literal676=null;
        Token char_literal677=null;
        Token NL678=null;
        Token NL680=null;
        Token COMMA681=null;
        Token NL682=null;
        Token NL684=null;
        Token COMMA685=null;
        Token NL686=null;
        Token char_literal687=null;
        babel17Parser.protected_expr_nc_return protected_expr_nc661 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc665 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc670 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc674 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc679 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc683 = null;


        CommonTree char_literal659_tree=null;
        CommonTree NL660_tree=null;
        CommonTree NL662_tree=null;
        CommonTree char_literal663_tree=null;
        CommonTree NL664_tree=null;
        CommonTree NL666_tree=null;
        CommonTree char_literal667_tree=null;
        CommonTree char_literal668_tree=null;
        CommonTree NL669_tree=null;
        CommonTree NL671_tree=null;
        CommonTree COMMA672_tree=null;
        CommonTree NL673_tree=null;
        CommonTree NL675_tree=null;
        CommonTree char_literal676_tree=null;
        CommonTree char_literal677_tree=null;
        CommonTree NL678_tree=null;
        CommonTree NL680_tree=null;
        CommonTree COMMA681_tree=null;
        CommonTree NL682_tree=null;
        CommonTree NL684_tree=null;
        CommonTree COMMA685_tree=null;
        CommonTree NL686_tree=null;
        CommonTree char_literal687_tree=null;
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_SC=new RewriteRuleTokenStream(adaptor,"token SC");
        RewriteRuleTokenStream stream_SQUARE_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token SQUARE_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_SQUARE_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token SQUARE_BRACKET_OPEN");
        RewriteRuleSubtreeStream stream_protected_expr_nc=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr_nc");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:2: ( ( '[' ( NL )? protected_expr_nc ( NL )? ';' )=> '[' ( NL )? protected_expr_nc ( NL )? ';' ( NL )? protected_expr_nc ( NL )? ']' -> ^( INTERVAL ( protected_expr_nc )* ) | '[' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? )? ']' -> ^( SQUARE_LIST ( protected_expr_nc )* ) | '(' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( protected_expr_nc )* ) ) )
            int alt332=3;
            int LA332_0 = input.LA(1);

            if ( (LA332_0==SQUARE_BRACKET_OPEN) ) {
                int LA332_1 = input.LA(2);

                if ( (synpred13_babel17()) ) {
                    alt332=1;
                }
                else if ( (true) ) {
                    alt332=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 332, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA332_0==ROUND_BRACKET_OPEN) ) {
                alt332=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 332, 0, input);

                throw nvae;
            }
            switch (alt332) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:4: ( '[' ( NL )? protected_expr_nc ( NL )? ';' )=> '[' ( NL )? protected_expr_nc ( NL )? ';' ( NL )? protected_expr_nc ( NL )? ']'
                    {
                    char_literal659=(Token)match(input,SQUARE_BRACKET_OPEN,FOLLOW_SQUARE_BRACKET_OPEN_in_list_expr5902); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_OPEN.add(char_literal659);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:47: ( NL )?
                    int alt314=2;
                    int LA314_0 = input.LA(1);

                    if ( (LA314_0==NL) ) {
                        alt314=1;
                    }
                    switch (alt314) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:47: NL
                            {
                            NL660=(Token)match(input,NL,FOLLOW_NL_in_list_expr5904); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL660);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_list_expr5907);
                    protected_expr_nc661=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc661.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:69: ( NL )?
                    int alt315=2;
                    int LA315_0 = input.LA(1);

                    if ( (LA315_0==NL) ) {
                        alt315=1;
                    }
                    switch (alt315) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:69: NL
                            {
                            NL662=(Token)match(input,NL,FOLLOW_NL_in_list_expr5909); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL662);


                            }
                            break;

                    }

                    char_literal663=(Token)match(input,SC,FOLLOW_SC_in_list_expr5912); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SC.add(char_literal663);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:77: ( NL )?
                    int alt316=2;
                    int LA316_0 = input.LA(1);

                    if ( (LA316_0==NL) ) {
                        alt316=1;
                    }
                    switch (alt316) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:77: NL
                            {
                            NL664=(Token)match(input,NL,FOLLOW_NL_in_list_expr5914); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL664);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_list_expr5917);
                    protected_expr_nc665=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc665.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:99: ( NL )?
                    int alt317=2;
                    int LA317_0 = input.LA(1);

                    if ( (LA317_0==NL) ) {
                        alt317=1;
                    }
                    switch (alt317) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:99: NL
                            {
                            NL666=(Token)match(input,NL,FOLLOW_NL_in_list_expr5919); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL666);


                            }
                            break;

                    }

                    char_literal667=(Token)match(input,SQUARE_BRACKET_CLOSE,FOLLOW_SQUARE_BRACKET_CLOSE_in_list_expr5922); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_CLOSE.add(char_literal667);



                    // AST REWRITE
                    // elements: protected_expr_nc
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 832:107: -> ^( INTERVAL ( protected_expr_nc )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:110: ^( INTERVAL ( protected_expr_nc )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTERVAL, "INTERVAL"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:121: ( protected_expr_nc )*
                        while ( stream_protected_expr_nc.hasNext() ) {
                            adaptor.addChild(root_1, stream_protected_expr_nc.nextTree());

                        }
                        stream_protected_expr_nc.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:833:4: '[' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? )? ']'
                    {
                    char_literal668=(Token)match(input,SQUARE_BRACKET_OPEN,FOLLOW_SQUARE_BRACKET_OPEN_in_list_expr5936); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_OPEN.add(char_literal668);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:833:8: ( NL )?
                    int alt318=2;
                    int LA318_0 = input.LA(1);

                    if ( (LA318_0==NL) ) {
                        alt318=1;
                    }
                    switch (alt318) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:833:8: NL
                            {
                            NL669=(Token)match(input,NL,FOLLOW_NL_in_list_expr5938); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL669);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:833:12: ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? )?
                    int alt323=2;
                    int LA323_0 = input.LA(1);

                    if ( (LA323_0==L_begin||(LA323_0>=L_obj && LA323_0<=L_if)||(LA323_0>=L_while && LA323_0<=L_for)||LA323_0==L_match||LA323_0==L_exception||LA323_0==L_try||(LA323_0>=L_concurrent && LA323_0<=L_lazy)||(LA323_0>=L_true && LA323_0<=L_nil)||LA323_0==L_typeof||LA323_0==L_not||(LA323_0>=L_root && LA323_0<=L_lens)||LA323_0==MINUS||(LA323_0>=A_ELLIPSIS && LA323_0<=U_ELLIPSIS)||LA323_0==L_force||(LA323_0>=Constr && LA323_0<=Id)||(LA323_0>=Float && LA323_0<=Num)||(LA323_0>=String && LA323_0<=ROUND_BRACKET_OPEN)||LA323_0==SQUARE_BRACKET_OPEN||LA323_0==CURLY_BRACKET_OPEN||LA323_0==UNDERSCORE) ) {
                        alt323=1;
                    }
                    switch (alt323) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:833:13: protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )?
                            {
                            pushFollow(FOLLOW_protected_expr_nc_in_list_expr5942);
                            protected_expr_nc670=protected_expr_nc();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc670.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:833:31: ( ( NL )? COMMA ( NL )? protected_expr_nc )*
                            loop321:
                            do {
                                int alt321=2;
                                int LA321_0 = input.LA(1);

                                if ( (LA321_0==NL) ) {
                                    int LA321_1 = input.LA(2);

                                    if ( (LA321_1==COMMA) ) {
                                        alt321=1;
                                    }


                                }
                                else if ( (LA321_0==COMMA) ) {
                                    alt321=1;
                                }


                                switch (alt321) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:833:32: ( NL )? COMMA ( NL )? protected_expr_nc
                            	    {
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:833:32: ( NL )?
                            	    int alt319=2;
                            	    int LA319_0 = input.LA(1);

                            	    if ( (LA319_0==NL) ) {
                            	        alt319=1;
                            	    }
                            	    switch (alt319) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:833:32: NL
                            	            {
                            	            NL671=(Token)match(input,NL,FOLLOW_NL_in_list_expr5945); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL671);


                            	            }
                            	            break;

                            	    }

                            	    COMMA672=(Token)match(input,COMMA,FOLLOW_COMMA_in_list_expr5948); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA672);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:833:42: ( NL )?
                            	    int alt320=2;
                            	    int LA320_0 = input.LA(1);

                            	    if ( (LA320_0==NL) ) {
                            	        alt320=1;
                            	    }
                            	    switch (alt320) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:833:42: NL
                            	            {
                            	            NL673=(Token)match(input,NL,FOLLOW_NL_in_list_expr5950); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL673);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_protected_expr_nc_in_list_expr5953);
                            	    protected_expr_nc674=protected_expr_nc();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc674.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop321;
                                }
                            } while (true);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:833:66: ( NL )?
                            int alt322=2;
                            int LA322_0 = input.LA(1);

                            if ( (LA322_0==NL) ) {
                                alt322=1;
                            }
                            switch (alt322) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:833:66: NL
                                    {
                                    NL675=(Token)match(input,NL,FOLLOW_NL_in_list_expr5957); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL675);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    char_literal676=(Token)match(input,SQUARE_BRACKET_CLOSE,FOLLOW_SQUARE_BRACKET_CLOSE_in_list_expr5962); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_CLOSE.add(char_literal676);



                    // AST REWRITE
                    // elements: protected_expr_nc
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 833:76: -> ^( SQUARE_LIST ( protected_expr_nc )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:833:79: ^( SQUARE_LIST ( protected_expr_nc )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SQUARE_LIST, "SQUARE_LIST"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:833:93: ( protected_expr_nc )*
                        while ( stream_protected_expr_nc.hasNext() ) {
                            adaptor.addChild(root_1, stream_protected_expr_nc.nextTree());

                        }
                        stream_protected_expr_nc.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:834:4: '(' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )? )? ')'
                    {
                    char_literal677=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_list_expr5976); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal677);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:834:8: ( NL )?
                    int alt324=2;
                    int LA324_0 = input.LA(1);

                    if ( (LA324_0==NL) ) {
                        alt324=1;
                    }
                    switch (alt324) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:834:8: NL
                            {
                            NL678=(Token)match(input,NL,FOLLOW_NL_in_list_expr5978); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL678);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:834:12: ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )? )?
                    int alt331=2;
                    int LA331_0 = input.LA(1);

                    if ( (LA331_0==L_begin||(LA331_0>=L_obj && LA331_0<=L_if)||(LA331_0>=L_while && LA331_0<=L_for)||LA331_0==L_match||LA331_0==L_exception||LA331_0==L_try||(LA331_0>=L_concurrent && LA331_0<=L_lazy)||(LA331_0>=L_true && LA331_0<=L_nil)||LA331_0==L_typeof||LA331_0==L_not||(LA331_0>=L_root && LA331_0<=L_lens)||LA331_0==MINUS||(LA331_0>=A_ELLIPSIS && LA331_0<=U_ELLIPSIS)||LA331_0==L_force||(LA331_0>=Constr && LA331_0<=Id)||(LA331_0>=Float && LA331_0<=Num)||(LA331_0>=String && LA331_0<=ROUND_BRACKET_OPEN)||LA331_0==SQUARE_BRACKET_OPEN||LA331_0==CURLY_BRACKET_OPEN||LA331_0==UNDERSCORE) ) {
                        alt331=1;
                    }
                    switch (alt331) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:834:13: protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )?
                            {
                            pushFollow(FOLLOW_protected_expr_nc_in_list_expr5982);
                            protected_expr_nc679=protected_expr_nc();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc679.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:834:31: ( ( NL )? COMMA ( NL )? protected_expr_nc )*
                            loop327:
                            do {
                                int alt327=2;
                                int LA327_0 = input.LA(1);

                                if ( (LA327_0==NL) ) {
                                    int LA327_1 = input.LA(2);

                                    if ( (LA327_1==COMMA) ) {
                                        int LA327_2 = input.LA(3);

                                        if ( (LA327_2==NL) ) {
                                            int LA327_4 = input.LA(4);

                                            if ( (LA327_4==L_begin||(LA327_4>=L_obj && LA327_4<=L_if)||(LA327_4>=L_while && LA327_4<=L_for)||LA327_4==L_match||LA327_4==L_exception||LA327_4==L_try||(LA327_4>=L_concurrent && LA327_4<=L_lazy)||(LA327_4>=L_true && LA327_4<=L_nil)||LA327_4==L_typeof||LA327_4==L_not||(LA327_4>=L_root && LA327_4<=L_lens)||LA327_4==MINUS||(LA327_4>=A_ELLIPSIS && LA327_4<=U_ELLIPSIS)||LA327_4==L_force||(LA327_4>=Constr && LA327_4<=Id)||(LA327_4>=Float && LA327_4<=Num)||(LA327_4>=String && LA327_4<=ROUND_BRACKET_OPEN)||LA327_4==SQUARE_BRACKET_OPEN||LA327_4==CURLY_BRACKET_OPEN||LA327_4==UNDERSCORE) ) {
                                                alt327=1;
                                            }


                                        }
                                        else if ( (LA327_2==L_begin||(LA327_2>=L_obj && LA327_2<=L_if)||(LA327_2>=L_while && LA327_2<=L_for)||LA327_2==L_match||LA327_2==L_exception||LA327_2==L_try||(LA327_2>=L_concurrent && LA327_2<=L_lazy)||(LA327_2>=L_true && LA327_2<=L_nil)||LA327_2==L_typeof||LA327_2==L_not||(LA327_2>=L_root && LA327_2<=L_lens)||LA327_2==MINUS||(LA327_2>=A_ELLIPSIS && LA327_2<=U_ELLIPSIS)||LA327_2==L_force||(LA327_2>=Constr && LA327_2<=Id)||(LA327_2>=Float && LA327_2<=Num)||(LA327_2>=String && LA327_2<=ROUND_BRACKET_OPEN)||LA327_2==SQUARE_BRACKET_OPEN||LA327_2==CURLY_BRACKET_OPEN||LA327_2==UNDERSCORE) ) {
                                            alt327=1;
                                        }


                                    }


                                }
                                else if ( (LA327_0==COMMA) ) {
                                    int LA327_2 = input.LA(2);

                                    if ( (LA327_2==NL) ) {
                                        int LA327_4 = input.LA(3);

                                        if ( (LA327_4==L_begin||(LA327_4>=L_obj && LA327_4<=L_if)||(LA327_4>=L_while && LA327_4<=L_for)||LA327_4==L_match||LA327_4==L_exception||LA327_4==L_try||(LA327_4>=L_concurrent && LA327_4<=L_lazy)||(LA327_4>=L_true && LA327_4<=L_nil)||LA327_4==L_typeof||LA327_4==L_not||(LA327_4>=L_root && LA327_4<=L_lens)||LA327_4==MINUS||(LA327_4>=A_ELLIPSIS && LA327_4<=U_ELLIPSIS)||LA327_4==L_force||(LA327_4>=Constr && LA327_4<=Id)||(LA327_4>=Float && LA327_4<=Num)||(LA327_4>=String && LA327_4<=ROUND_BRACKET_OPEN)||LA327_4==SQUARE_BRACKET_OPEN||LA327_4==CURLY_BRACKET_OPEN||LA327_4==UNDERSCORE) ) {
                                            alt327=1;
                                        }


                                    }
                                    else if ( (LA327_2==L_begin||(LA327_2>=L_obj && LA327_2<=L_if)||(LA327_2>=L_while && LA327_2<=L_for)||LA327_2==L_match||LA327_2==L_exception||LA327_2==L_try||(LA327_2>=L_concurrent && LA327_2<=L_lazy)||(LA327_2>=L_true && LA327_2<=L_nil)||LA327_2==L_typeof||LA327_2==L_not||(LA327_2>=L_root && LA327_2<=L_lens)||LA327_2==MINUS||(LA327_2>=A_ELLIPSIS && LA327_2<=U_ELLIPSIS)||LA327_2==L_force||(LA327_2>=Constr && LA327_2<=Id)||(LA327_2>=Float && LA327_2<=Num)||(LA327_2>=String && LA327_2<=ROUND_BRACKET_OPEN)||LA327_2==SQUARE_BRACKET_OPEN||LA327_2==CURLY_BRACKET_OPEN||LA327_2==UNDERSCORE) ) {
                                        alt327=1;
                                    }


                                }


                                switch (alt327) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:834:32: ( NL )? COMMA ( NL )? protected_expr_nc
                            	    {
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:834:32: ( NL )?
                            	    int alt325=2;
                            	    int LA325_0 = input.LA(1);

                            	    if ( (LA325_0==NL) ) {
                            	        alt325=1;
                            	    }
                            	    switch (alt325) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:834:32: NL
                            	            {
                            	            NL680=(Token)match(input,NL,FOLLOW_NL_in_list_expr5985); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL680);


                            	            }
                            	            break;

                            	    }

                            	    COMMA681=(Token)match(input,COMMA,FOLLOW_COMMA_in_list_expr5988); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA681);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:834:42: ( NL )?
                            	    int alt326=2;
                            	    int LA326_0 = input.LA(1);

                            	    if ( (LA326_0==NL) ) {
                            	        alt326=1;
                            	    }
                            	    switch (alt326) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:834:42: NL
                            	            {
                            	            NL682=(Token)match(input,NL,FOLLOW_NL_in_list_expr5990); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL682);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_protected_expr_nc_in_list_expr5993);
                            	    protected_expr_nc683=protected_expr_nc();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc683.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop327;
                                }
                            } while (true);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:834:66: ( NL )?
                            int alt328=2;
                            int LA328_0 = input.LA(1);

                            if ( (LA328_0==NL) ) {
                                alt328=1;
                            }
                            switch (alt328) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:834:66: NL
                                    {
                                    NL684=(Token)match(input,NL,FOLLOW_NL_in_list_expr5997); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL684);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:834:70: ( COMMA ( NL )? )?
                            int alt330=2;
                            int LA330_0 = input.LA(1);

                            if ( (LA330_0==COMMA) ) {
                                alt330=1;
                            }
                            switch (alt330) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:834:71: COMMA ( NL )?
                                    {
                                    COMMA685=(Token)match(input,COMMA,FOLLOW_COMMA_in_list_expr6001); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA685);

                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:834:77: ( NL )?
                                    int alt329=2;
                                    int LA329_0 = input.LA(1);

                                    if ( (LA329_0==NL) ) {
                                        alt329=1;
                                    }
                                    switch (alt329) {
                                        case 1 :
                                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:834:77: NL
                                            {
                                            NL686=(Token)match(input,NL,FOLLOW_NL_in_list_expr6003); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_NL.add(NL686);


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    char_literal687=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_list_expr6010); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal687);



                    // AST REWRITE
                    // elements: COMMA, protected_expr_nc
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 834:89: -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( protected_expr_nc )* ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:834:92: ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( protected_expr_nc )* ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROUND_LIST, "ROUND_LIST"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:834:105: ^( NIL_TOKEN ( COMMA )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:834:117: ( COMMA )*
                        while ( stream_COMMA.hasNext() ) {
                            adaptor.addChild(root_2, stream_COMMA.nextNode());

                        }
                        stream_COMMA.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:834:125: ^( NIL_TOKEN ( protected_expr_nc )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:834:137: ( protected_expr_nc )*
                        while ( stream_protected_expr_nc.hasNext() ) {
                            adaptor.addChild(root_2, stream_protected_expr_nc.nextTree());

                        }
                        stream_protected_expr_nc.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "list_expr"

    public static class map_or_set_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "map_or_set_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:836:1: map_or_set_expr : ( '{' ( NL )? ( map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( map_or_set_elem_expr )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) );
    public final babel17Parser.map_or_set_expr_return map_or_set_expr() throws RecognitionException {
        babel17Parser.map_or_set_expr_return retval = new babel17Parser.map_or_set_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal688=null;
        Token NL689=null;
        Token NL691=null;
        Token COMMA692=null;
        Token NL693=null;
        Token NL695=null;
        Token char_literal696=null;
        Token char_literal697=null;
        Token NL698=null;
        Token NL700=null;
        Token char_literal701=null;
        babel17Parser.map_or_set_elem_expr_return map_or_set_elem_expr690 = null;

        babel17Parser.map_or_set_elem_expr_return map_or_set_elem_expr694 = null;

        babel17Parser.token_ARROW_return token_ARROW699 = null;


        CommonTree char_literal688_tree=null;
        CommonTree NL689_tree=null;
        CommonTree NL691_tree=null;
        CommonTree COMMA692_tree=null;
        CommonTree NL693_tree=null;
        CommonTree NL695_tree=null;
        CommonTree char_literal696_tree=null;
        CommonTree char_literal697_tree=null;
        CommonTree NL698_tree=null;
        CommonTree NL700_tree=null;
        CommonTree char_literal701_tree=null;
        RewriteRuleTokenStream stream_CURLY_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_OPEN");
        RewriteRuleTokenStream stream_CURLY_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_map_or_set_elem_expr=new RewriteRuleSubtreeStream(adaptor,"rule map_or_set_elem_expr");
        RewriteRuleSubtreeStream stream_token_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_ARROW");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:837:2: ( '{' ( NL )? ( map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( map_or_set_elem_expr )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) )
            int alt341=2;
            int LA341_0 = input.LA(1);

            if ( (LA341_0==CURLY_BRACKET_OPEN) ) {
                switch ( input.LA(2) ) {
                case NL:
                    {
                    int LA341_2 = input.LA(3);

                    if ( (LA341_2==L_begin||(LA341_2>=L_obj && LA341_2<=L_if)||(LA341_2>=L_while && LA341_2<=L_for)||LA341_2==L_match||LA341_2==L_exception||LA341_2==L_try||(LA341_2>=L_concurrent && LA341_2<=L_lazy)||(LA341_2>=L_true && LA341_2<=L_nil)||LA341_2==L_typeof||LA341_2==L_not||(LA341_2>=L_root && LA341_2<=L_lens)||LA341_2==MINUS||(LA341_2>=A_ELLIPSIS && LA341_2<=U_ELLIPSIS)||LA341_2==L_force||(LA341_2>=Constr && LA341_2<=Id)||(LA341_2>=Float && LA341_2<=Num)||(LA341_2>=String && LA341_2<=ROUND_BRACKET_OPEN)||LA341_2==SQUARE_BRACKET_OPEN||(LA341_2>=CURLY_BRACKET_OPEN && LA341_2<=UNDERSCORE)) ) {
                        alt341=1;
                    }
                    else if ( ((LA341_2>=A_ARROW && LA341_2<=U_ARROW)) ) {
                        alt341=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 341, 2, input);

                        throw nvae;
                    }
                    }
                    break;
                case L_begin:
                case L_obj:
                case L_with:
                case L_if:
                case L_while:
                case L_for:
                case L_match:
                case L_exception:
                case L_try:
                case L_concurrent:
                case L_choose:
                case L_lazy:
                case L_true:
                case L_false:
                case L_this:
                case L_random:
                case L_nil:
                case L_typeof:
                case L_not:
                case L_root:
                case L_native:
                case L_min:
                case L_max:
                case L_lens:
                case MINUS:
                case A_ELLIPSIS:
                case U_ELLIPSIS:
                case L_force:
                case Constr:
                case Id:
                case Float:
                case Num:
                case String:
                case ROUND_BRACKET_OPEN:
                case SQUARE_BRACKET_OPEN:
                case CURLY_BRACKET_OPEN:
                case CURLY_BRACKET_CLOSE:
                case UNDERSCORE:
                    {
                    alt341=1;
                    }
                    break;
                case A_ARROW:
                case U_ARROW:
                    {
                    alt341=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 341, 1, input);

                    throw nvae;
                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 341, 0, input);

                throw nvae;
            }
            switch (alt341) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:837:4: '{' ( NL )? ( map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )* )? '}'
                    {
                    char_literal688=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_map_or_set_expr6039); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal688);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:837:8: ( NL )?
                    int alt333=2;
                    int LA333_0 = input.LA(1);

                    if ( (LA333_0==NL) ) {
                        alt333=1;
                    }
                    switch (alt333) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:837:8: NL
                            {
                            NL689=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr6041); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL689);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:837:12: ( map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )* )?
                    int alt338=2;
                    int LA338_0 = input.LA(1);

                    if ( (LA338_0==L_begin||(LA338_0>=L_obj && LA338_0<=L_if)||(LA338_0>=L_while && LA338_0<=L_for)||LA338_0==L_match||LA338_0==L_exception||LA338_0==L_try||(LA338_0>=L_concurrent && LA338_0<=L_lazy)||(LA338_0>=L_true && LA338_0<=L_nil)||LA338_0==L_typeof||LA338_0==L_not||(LA338_0>=L_root && LA338_0<=L_lens)||LA338_0==MINUS||(LA338_0>=A_ELLIPSIS && LA338_0<=U_ELLIPSIS)||LA338_0==L_force||(LA338_0>=Constr && LA338_0<=Id)||(LA338_0>=Float && LA338_0<=Num)||(LA338_0>=String && LA338_0<=ROUND_BRACKET_OPEN)||LA338_0==SQUARE_BRACKET_OPEN||LA338_0==CURLY_BRACKET_OPEN||LA338_0==UNDERSCORE) ) {
                        alt338=1;
                    }
                    switch (alt338) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:837:13: map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )*
                            {
                            pushFollow(FOLLOW_map_or_set_elem_expr_in_map_or_set_expr6045);
                            map_or_set_elem_expr690=map_or_set_elem_expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_map_or_set_elem_expr.add(map_or_set_elem_expr690.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:837:34: ( NL )?
                            int alt334=2;
                            int LA334_0 = input.LA(1);

                            if ( (LA334_0==NL) ) {
                                alt334=1;
                            }
                            switch (alt334) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:837:34: NL
                                    {
                                    NL691=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr6047); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL691);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:837:38: ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )*
                            loop337:
                            do {
                                int alt337=2;
                                int LA337_0 = input.LA(1);

                                if ( (LA337_0==COMMA) ) {
                                    alt337=1;
                                }


                                switch (alt337) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:837:39: COMMA ( NL )? map_or_set_elem_expr ( NL )?
                            	    {
                            	    COMMA692=(Token)match(input,COMMA,FOLLOW_COMMA_in_map_or_set_expr6051); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA692);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:837:45: ( NL )?
                            	    int alt335=2;
                            	    int LA335_0 = input.LA(1);

                            	    if ( (LA335_0==NL) ) {
                            	        alt335=1;
                            	    }
                            	    switch (alt335) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:837:45: NL
                            	            {
                            	            NL693=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr6053); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL693);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_map_or_set_elem_expr_in_map_or_set_expr6056);
                            	    map_or_set_elem_expr694=map_or_set_elem_expr();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_map_or_set_elem_expr.add(map_or_set_elem_expr694.getTree());
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:837:70: ( NL )?
                            	    int alt336=2;
                            	    int LA336_0 = input.LA(1);

                            	    if ( (LA336_0==NL) ) {
                            	        alt336=1;
                            	    }
                            	    switch (alt336) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:837:70: NL
                            	            {
                            	            NL695=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr6058); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL695);


                            	            }
                            	            break;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop337;
                                }
                            } while (true);


                            }
                            break;

                    }

                    char_literal696=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_map_or_set_expr6065); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal696);



                    // AST REWRITE
                    // elements: map_or_set_elem_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 837:82: -> ^( MAP_OR_SET_OR_OBJ ( map_or_set_elem_expr )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:837:85: ^( MAP_OR_SET_OR_OBJ ( map_or_set_elem_expr )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MAP_OR_SET_OR_OBJ, "MAP_OR_SET_OR_OBJ"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:837:105: ( map_or_set_elem_expr )*
                        while ( stream_map_or_set_elem_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_map_or_set_elem_expr.nextTree());

                        }
                        stream_map_or_set_elem_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:838:10: '{' ( NL )? token_ARROW ( NL )? '}'
                    {
                    char_literal697=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_map_or_set_expr6085); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal697);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:838:14: ( NL )?
                    int alt339=2;
                    int LA339_0 = input.LA(1);

                    if ( (LA339_0==NL) ) {
                        alt339=1;
                    }
                    switch (alt339) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:838:14: NL
                            {
                            NL698=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr6087); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL698);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_token_ARROW_in_map_or_set_expr6090);
                    token_ARROW699=token_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_ARROW.add(token_ARROW699.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:838:30: ( NL )?
                    int alt340=2;
                    int LA340_0 = input.LA(1);

                    if ( (LA340_0==NL) ) {
                        alt340=1;
                    }
                    switch (alt340) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:838:30: NL
                            {
                            NL700=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr6092); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL700);


                            }
                            break;

                    }

                    char_literal701=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_map_or_set_expr6095); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal701);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 838:38: -> ^( EMPTY_MAP )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:838:41: ^( EMPTY_MAP )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EMPTY_MAP, "EMPTY_MAP"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "map_or_set_expr"

    public static class map_or_set_elem_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "map_or_set_elem_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:840:1: map_or_set_elem_expr : protected_expr_nc ( ( NL )? arrow_or_assign ( NL )? protected_expr_nc )? -> ^( NIL_TOKEN ^( NIL_TOKEN ( protected_expr_nc )* ) ( arrow_or_assign )* ) ;
    public final babel17Parser.map_or_set_elem_expr_return map_or_set_elem_expr() throws RecognitionException {
        babel17Parser.map_or_set_elem_expr_return retval = new babel17Parser.map_or_set_elem_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL703=null;
        Token NL705=null;
        babel17Parser.protected_expr_nc_return protected_expr_nc702 = null;

        babel17Parser.arrow_or_assign_return arrow_or_assign704 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc706 = null;


        CommonTree NL703_tree=null;
        CommonTree NL705_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_arrow_or_assign=new RewriteRuleSubtreeStream(adaptor,"rule arrow_or_assign");
        RewriteRuleSubtreeStream stream_protected_expr_nc=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr_nc");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:841:2: ( protected_expr_nc ( ( NL )? arrow_or_assign ( NL )? protected_expr_nc )? -> ^( NIL_TOKEN ^( NIL_TOKEN ( protected_expr_nc )* ) ( arrow_or_assign )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:841:4: protected_expr_nc ( ( NL )? arrow_or_assign ( NL )? protected_expr_nc )?
            {
            pushFollow(FOLLOW_protected_expr_nc_in_map_or_set_elem_expr6112);
            protected_expr_nc702=protected_expr_nc();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc702.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:841:22: ( ( NL )? arrow_or_assign ( NL )? protected_expr_nc )?
            int alt344=2;
            int LA344_0 = input.LA(1);

            if ( (LA344_0==NL) ) {
                int LA344_1 = input.LA(2);

                if ( (LA344_1==ASSIGN||(LA344_1>=A_ARROW && LA344_1<=U_ARROW)) ) {
                    alt344=1;
                }
            }
            else if ( (LA344_0==ASSIGN||(LA344_0>=A_ARROW && LA344_0<=U_ARROW)) ) {
                alt344=1;
            }
            switch (alt344) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:841:23: ( NL )? arrow_or_assign ( NL )? protected_expr_nc
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:841:23: ( NL )?
                    int alt342=2;
                    int LA342_0 = input.LA(1);

                    if ( (LA342_0==NL) ) {
                        alt342=1;
                    }
                    switch (alt342) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:841:23: NL
                            {
                            NL703=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_elem_expr6115); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL703);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_arrow_or_assign_in_map_or_set_elem_expr6118);
                    arrow_or_assign704=arrow_or_assign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrow_or_assign.add(arrow_or_assign704.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:841:43: ( NL )?
                    int alt343=2;
                    int LA343_0 = input.LA(1);

                    if ( (LA343_0==NL) ) {
                        alt343=1;
                    }
                    switch (alt343) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:841:43: NL
                            {
                            NL705=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_elem_expr6120); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL705);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_map_or_set_elem_expr6123);
                    protected_expr_nc706=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc706.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: protected_expr_nc, arrow_or_assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 841:67: -> ^( NIL_TOKEN ^( NIL_TOKEN ( protected_expr_nc )* ) ( arrow_or_assign )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:841:70: ^( NIL_TOKEN ^( NIL_TOKEN ( protected_expr_nc )* ) ( arrow_or_assign )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:841:82: ^( NIL_TOKEN ( protected_expr_nc )* )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:841:94: ( protected_expr_nc )*
                while ( stream_protected_expr_nc.hasNext() ) {
                    adaptor.addChild(root_2, stream_protected_expr_nc.nextTree());

                }
                stream_protected_expr_nc.reset();

                adaptor.addChild(root_1, root_2);
                }
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:841:114: ( arrow_or_assign )*
                while ( stream_arrow_or_assign.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrow_or_assign.nextTree());

                }
                stream_arrow_or_assign.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "map_or_set_elem_expr"

    public static class type_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:843:1: type_expr : '(' ( NL )? ':' ( NL )? typeid ( NL )? ')' -> ^( TYPE_EXPR typeid ) ;
    public final babel17Parser.type_expr_return type_expr() throws RecognitionException {
        babel17Parser.type_expr_return retval = new babel17Parser.type_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal707=null;
        Token NL708=null;
        Token char_literal709=null;
        Token NL710=null;
        Token NL712=null;
        Token char_literal713=null;
        babel17Parser.typeid_return typeid711 = null;


        CommonTree char_literal707_tree=null;
        CommonTree NL708_tree=null;
        CommonTree char_literal709_tree=null;
        CommonTree NL710_tree=null;
        CommonTree NL712_tree=null;
        CommonTree char_literal713_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleSubtreeStream stream_typeid=new RewriteRuleSubtreeStream(adaptor,"rule typeid");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:844:2: ( '(' ( NL )? ':' ( NL )? typeid ( NL )? ')' -> ^( TYPE_EXPR typeid ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:844:4: '(' ( NL )? ':' ( NL )? typeid ( NL )? ')'
            {
            char_literal707=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_type_expr6150); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal707);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:844:8: ( NL )?
            int alt345=2;
            int LA345_0 = input.LA(1);

            if ( (LA345_0==NL) ) {
                alt345=1;
            }
            switch (alt345) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:844:8: NL
                    {
                    NL708=(Token)match(input,NL,FOLLOW_NL_in_type_expr6152); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL708);


                    }
                    break;

            }

            char_literal709=(Token)match(input,COLON,FOLLOW_COLON_in_type_expr6155); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(char_literal709);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:844:16: ( NL )?
            int alt346=2;
            int LA346_0 = input.LA(1);

            if ( (LA346_0==NL) ) {
                alt346=1;
            }
            switch (alt346) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:844:16: NL
                    {
                    NL710=(Token)match(input,NL,FOLLOW_NL_in_type_expr6157); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL710);


                    }
                    break;

            }

            pushFollow(FOLLOW_typeid_in_type_expr6160);
            typeid711=typeid();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeid.add(typeid711.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:844:27: ( NL )?
            int alt347=2;
            int LA347_0 = input.LA(1);

            if ( (LA347_0==NL) ) {
                alt347=1;
            }
            switch (alt347) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:844:27: NL
                    {
                    NL712=(Token)match(input,NL,FOLLOW_NL_in_type_expr6162); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL712);


                    }
                    break;

            }

            char_literal713=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_type_expr6165); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal713);



            // AST REWRITE
            // elements: typeid
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 844:35: -> ^( TYPE_EXPR typeid )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:844:38: ^( TYPE_EXPR typeid )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_EXPR, "TYPE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_typeid.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_expr"

    public static class primitive_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitive_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:846:1: primitive_expr : ( Num | Float | String | Id | Constr | L_true | L_false | L_this | L_nil | L_root | ( type_expr )=> type_expr | ( lambda_expr )=> lambda_expr | obj_expr | list_expr | with_control_expr | map_or_set_expr );
    public final babel17Parser.primitive_expr_return primitive_expr() throws RecognitionException {
        babel17Parser.primitive_expr_return retval = new babel17Parser.primitive_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Num714=null;
        Token Float715=null;
        Token String716=null;
        Token Id717=null;
        Token Constr718=null;
        Token L_true719=null;
        Token L_false720=null;
        Token L_this721=null;
        Token L_nil722=null;
        Token L_root723=null;
        babel17Parser.type_expr_return type_expr724 = null;

        babel17Parser.lambda_expr_return lambda_expr725 = null;

        babel17Parser.obj_expr_return obj_expr726 = null;

        babel17Parser.list_expr_return list_expr727 = null;

        babel17Parser.with_control_expr_return with_control_expr728 = null;

        babel17Parser.map_or_set_expr_return map_or_set_expr729 = null;


        CommonTree Num714_tree=null;
        CommonTree Float715_tree=null;
        CommonTree String716_tree=null;
        CommonTree Id717_tree=null;
        CommonTree Constr718_tree=null;
        CommonTree L_true719_tree=null;
        CommonTree L_false720_tree=null;
        CommonTree L_this721_tree=null;
        CommonTree L_nil722_tree=null;
        CommonTree L_root723_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:847:2: ( Num | Float | String | Id | Constr | L_true | L_false | L_this | L_nil | L_root | ( type_expr )=> type_expr | ( lambda_expr )=> lambda_expr | obj_expr | list_expr | with_control_expr | map_or_set_expr )
            int alt348=16;
            alt348 = dfa348.predict(input);
            switch (alt348) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:847:4: Num
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Num714=(Token)match(input,Num,FOLLOW_Num_in_primitive_expr6183); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Num714_tree = (CommonTree)adaptor.create(Num714);
                    adaptor.addChild(root_0, Num714_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:848:4: Float
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Float715=(Token)match(input,Float,FOLLOW_Float_in_primitive_expr6188); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Float715_tree = (CommonTree)adaptor.create(Float715);
                    adaptor.addChild(root_0, Float715_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:849:4: String
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    String716=(Token)match(input,String,FOLLOW_String_in_primitive_expr6193); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    String716_tree = (CommonTree)adaptor.create(String716);
                    adaptor.addChild(root_0, String716_tree);
                    }

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:850:4: Id
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Id717=(Token)match(input,Id,FOLLOW_Id_in_primitive_expr6198); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Id717_tree = (CommonTree)adaptor.create(Id717);
                    adaptor.addChild(root_0, Id717_tree);
                    }

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:851:4: Constr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Constr718=(Token)match(input,Constr,FOLLOW_Constr_in_primitive_expr6203); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Constr718_tree = (CommonTree)adaptor.create(Constr718);
                    adaptor.addChild(root_0, Constr718_tree);
                    }

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:852:4: L_true
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_true719=(Token)match(input,L_true,FOLLOW_L_true_in_primitive_expr6208); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_true719_tree = (CommonTree)adaptor.create(L_true719);
                    adaptor.addChild(root_0, L_true719_tree);
                    }

                    }
                    break;
                case 7 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:853:4: L_false
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_false720=(Token)match(input,L_false,FOLLOW_L_false_in_primitive_expr6213); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_false720_tree = (CommonTree)adaptor.create(L_false720);
                    adaptor.addChild(root_0, L_false720_tree);
                    }

                    }
                    break;
                case 8 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:854:4: L_this
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_this721=(Token)match(input,L_this,FOLLOW_L_this_in_primitive_expr6218); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_this721_tree = (CommonTree)adaptor.create(L_this721);
                    adaptor.addChild(root_0, L_this721_tree);
                    }

                    }
                    break;
                case 9 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:855:4: L_nil
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_nil722=(Token)match(input,L_nil,FOLLOW_L_nil_in_primitive_expr6224); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_nil722_tree = (CommonTree)adaptor.create(L_nil722);
                    adaptor.addChild(root_0, L_nil722_tree);
                    }

                    }
                    break;
                case 10 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:856:4: L_root
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_root723=(Token)match(input,L_root,FOLLOW_L_root_in_primitive_expr6229); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_root723_tree = (CommonTree)adaptor.create(L_root723);
                    adaptor.addChild(root_0, L_root723_tree);
                    }

                    }
                    break;
                case 11 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:857:4: ( type_expr )=> type_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_type_expr_in_primitive_expr6240);
                    type_expr724=type_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_expr724.getTree());

                    }
                    break;
                case 12 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:858:4: ( lambda_expr )=> lambda_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lambda_expr_in_primitive_expr6251);
                    lambda_expr725=lambda_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lambda_expr725.getTree());

                    }
                    break;
                case 13 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:859:4: obj_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_obj_expr_in_primitive_expr6256);
                    obj_expr726=obj_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, obj_expr726.getTree());

                    }
                    break;
                case 14 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:860:5: list_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_list_expr_in_primitive_expr6262);
                    list_expr727=list_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, list_expr727.getTree());

                    }
                    break;
                case 15 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:861:4: with_control_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_with_control_expr_in_primitive_expr6267);
                    with_control_expr728=with_control_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, with_control_expr728.getTree());

                    }
                    break;
                case 16 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:862:4: map_or_set_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_map_or_set_expr_in_primitive_expr6272);
                    map_or_set_expr729=map_or_set_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, map_or_set_expr729.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "primitive_expr"

    // $ANTLR start synpred1_babel17
    public final void synpred1_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:455:10: ( Id ( NL )? L_as )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:455:11: Id ( NL )? L_as
        {
        match(input,Id,FOLLOW_Id_in_synpred1_babel171995); if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:455:14: ( NL )?
        int alt349=2;
        int LA349_0 = input.LA(1);

        if ( (LA349_0==NL) ) {
            alt349=1;
        }
        switch (alt349) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:455:14: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred1_babel171997); if (state.failed) return ;

                }
                break;

        }

        match(input,L_as,FOLLOW_L_as_in_synpred1_babel172000); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_babel17

    // $ANTLR start synpred2_babel17
    public final void synpred2_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:456:4: ( protected_expr ( NL )? QUESTION_MARK )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:456:5: protected_expr ( NL )? QUESTION_MARK
        {
        pushFollow(FOLLOW_protected_expr_in_synpred2_babel172031);
        protected_expr();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:456:20: ( NL )?
        int alt350=2;
        int LA350_0 = input.LA(1);

        if ( (LA350_0==NL) ) {
            alt350=1;
        }
        switch (alt350) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:456:20: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred2_babel172033); if (state.failed) return ;

                }
                break;

        }

        match(input,QUESTION_MARK,FOLLOW_QUESTION_MARK_in_synpred2_babel172036); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_babel17

    // $ANTLR start synpred3_babel17
    public final void synpred3_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:458:4: ( protected_expr ( NL )? EXCLAMATION_MARK )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:458:5: protected_expr ( NL )? EXCLAMATION_MARK
        {
        pushFollow(FOLLOW_protected_expr_in_synpred3_babel172074);
        protected_expr();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:458:20: ( NL )?
        int alt351=2;
        int LA351_0 = input.LA(1);

        if ( (LA351_0==NL) ) {
            alt351=1;
        }
        switch (alt351) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:458:20: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred3_babel172076); if (state.failed) return ;

                }
                break;

        }

        match(input,EXCLAMATION_MARK,FOLLOW_EXCLAMATION_MARK_in_synpred3_babel172079); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_babel17

    // $ANTLR start synpred4_babel17
    public final void synpred4_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:460:4: ( Id pattern )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:460:5: Id pattern
        {
        match(input,Id,FOLLOW_Id_in_synpred4_babel172117); if (state.failed) return ;
        pushFollow(FOLLOW_pattern_in_synpred4_babel172119);
        pattern();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_babel17

    // $ANTLR start synpred5_babel17
    public final void synpred5_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:463:4: ( pattern ( NL )? L_if )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:463:5: pattern ( NL )? L_if
        {
        pushFollow(FOLLOW_pattern_in_synpred5_babel172208);
        pattern();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:463:13: ( NL )?
        int alt352=2;
        int LA352_0 = input.LA(1);

        if ( (LA352_0==NL) ) {
            alt352=1;
        }
        switch (alt352) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:463:13: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred5_babel172210); if (state.failed) return ;

                }
                break;

        }

        match(input,L_if,FOLLOW_L_if_in_synpred5_babel172213); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_babel17

    // $ANTLR start synpred6_babel17
    public final void synpred6_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:464:4: ( pattern ( NL )? ':' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:464:5: pattern ( NL )? ':'
        {
        pushFollow(FOLLOW_pattern_in_synpred6_babel172244);
        pattern();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:464:13: ( NL )?
        int alt353=2;
        int LA353_0 = input.LA(1);

        if ( (LA353_0==NL) ) {
            alt353=1;
        }
        switch (alt353) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:464:13: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred6_babel172246); if (state.failed) return ;

                }
                break;

        }

        match(input,COLON,FOLLOW_COLON_in_synpred6_babel172249); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_babel17

    // $ANTLR start synpred7_babel17
    public final void synpred7_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:530:4: ( defpattern ( NL )? '=' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:530:5: defpattern ( NL )? '='
        {
        pushFollow(FOLLOW_defpattern_in_synpred7_babel173094);
        defpattern();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:530:16: ( NL )?
        int alt354=2;
        int LA354_0 = input.LA(1);

        if ( (LA354_0==NL) ) {
            alt354=1;
        }
        switch (alt354) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:530:16: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred7_babel173096); if (state.failed) return ;

                }
                break;

        }

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred7_babel173099); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_babel17

    // $ANTLR start synpred8_babel17
    public final void synpred8_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:4: ( pattern ( NL )? '=' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:5: pattern ( NL )? '='
        {
        pushFollow(FOLLOW_pattern_in_synpred8_babel173622);
        pattern();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:13: ( NL )?
        int alt355=2;
        int LA355_0 = input.LA(1);

        if ( (LA355_0==NL) ) {
            alt355=1;
        }
        switch (alt355) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:13: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred8_babel173624); if (state.failed) return ;

                }
                break;

        }

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred8_babel173627); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_babel17

    // $ANTLR start synpred9_babel17
    public final void synpred9_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:578:4: ( term_expr ( NL )? '=' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:578:5: term_expr ( NL )? '='
        {
        pushFollow(FOLLOW_term_expr_in_synpred9_babel173659);
        term_expr();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:578:15: ( NL )?
        int alt356=2;
        int LA356_0 = input.LA(1);

        if ( (LA356_0==NL) ) {
            alt356=1;
        }
        switch (alt356) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:578:15: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred9_babel173661); if (state.failed) return ;

                }
                break;

        }

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred9_babel173664); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_babel17

    // $ANTLR start synpred10_babel17
    public final void synpred10_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:11: ( L_obj ( NL )? parents )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:12: L_obj ( NL )? parents
        {
        match(input,L_obj,FOLLOW_L_obj_in_synpred10_babel173878); if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:18: ( NL )?
        int alt357=2;
        int LA357_0 = input.LA(1);

        if ( (LA357_0==NL) ) {
            alt357=1;
        }
        switch (alt357) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:18: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred10_babel173880); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_parents_in_synpred10_babel173883);
        parents();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_babel17

    // $ANTLR start synpred11_babel17
    public final void synpred11_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:618:4: ( lambda_expr_nobrackets )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:618:5: lambda_expr_nobrackets
        {
        pushFollow(FOLLOW_lambda_expr_nobrackets_in_synpred11_babel173954);
        lambda_expr_nobrackets();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_babel17

    // $ANTLR start synpred12_babel17
    public final void synpred12_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:623:4: ( lambda_expr_nobrackets )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:623:5: lambda_expr_nobrackets
        {
        pushFollow(FOLLOW_lambda_expr_nobrackets_in_synpred12_babel173977);
        lambda_expr_nobrackets();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_babel17

    // $ANTLR start synpred13_babel17
    public final void synpred13_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:4: ( '[' ( NL )? protected_expr_nc ( NL )? ';' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:5: '[' ( NL )? protected_expr_nc ( NL )? ';'
        {
        match(input,SQUARE_BRACKET_OPEN,FOLLOW_SQUARE_BRACKET_OPEN_in_synpred13_babel175887); if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:9: ( NL )?
        int alt358=2;
        int LA358_0 = input.LA(1);

        if ( (LA358_0==NL) ) {
            alt358=1;
        }
        switch (alt358) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:9: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred13_babel175889); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_protected_expr_nc_in_synpred13_babel175892);
        protected_expr_nc();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:31: ( NL )?
        int alt359=2;
        int LA359_0 = input.LA(1);

        if ( (LA359_0==NL) ) {
            alt359=1;
        }
        switch (alt359) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:31: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred13_babel175894); if (state.failed) return ;

                }
                break;

        }

        match(input,SC,FOLLOW_SC_in_synpred13_babel175897); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_babel17

    // $ANTLR start synpred14_babel17
    public final void synpred14_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:857:4: ( type_expr )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:857:5: type_expr
        {
        pushFollow(FOLLOW_type_expr_in_synpred14_babel176235);
        type_expr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_babel17

    // $ANTLR start synpred15_babel17
    public final void synpred15_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:858:4: ( lambda_expr )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:858:5: lambda_expr
        {
        pushFollow(FOLLOW_lambda_expr_in_synpred15_babel176246);
        lambda_expr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_babel17

    // Delegated rules

    public final boolean synpred4_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA36 dfa36 = new DFA36(this);
    protected DFA64 dfa64 = new DFA64(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA67 dfa67 = new DFA67(this);
    protected DFA80 dfa80 = new DFA80(this);
    protected DFA110 dfa110 = new DFA110(this);
    protected DFA149 dfa149 = new DFA149(this);
    protected DFA157 dfa157 = new DFA157(this);
    protected DFA158 dfa158 = new DFA158(this);
    protected DFA348 dfa348 = new DFA348(this);
    static final String DFA36_eotS =
        "\47\uffff";
    static final String DFA36_eofS =
        "\47\uffff";
    static final String DFA36_minS =
        "\1\113\35\0\11\uffff";
    static final String DFA36_maxS =
        "\1\u00ae\35\0\11\uffff";
    static final String DFA36_acceptS =
        "\36\uffff\1\5\1\1\1\2\1\3\1\4\1\7\1\10\1\11\1\6";
    static final String DFA36_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\11\uffff}>";
    static final String[] DFA36_transitionS = {
            "\1\34\1\uffff\1\26\1\35\1\27\3\uffff\1\30\1\32\2\uffff\1\31"+
            "\2\uffff\1\36\2\uffff\1\15\2\uffff\1\33\1\uffff\1\17\1\22\1"+
            "\17\1\uffff\1\6\1\7\1\24\1\22\1\10\4\uffff\1\22\4\uffff\1\21"+
            "\1\uffff\1\25\3\22\1\20\14\uffff\1\11\17\uffff\2\16\4\uffff"+
            "\1\17\3\uffff\1\2\1\1\1\uffff\1\23\1\5\1\uffff\1\4\1\13\1\uffff"+
            "\1\12\1\uffff\1\14\1\uffff\1\3",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA36_eot = DFA.unpackEncodedString(DFA36_eotS);
    static final short[] DFA36_eof = DFA.unpackEncodedString(DFA36_eofS);
    static final char[] DFA36_min = DFA.unpackEncodedStringToUnsignedChars(DFA36_minS);
    static final char[] DFA36_max = DFA.unpackEncodedStringToUnsignedChars(DFA36_maxS);
    static final short[] DFA36_accept = DFA.unpackEncodedString(DFA36_acceptS);
    static final short[] DFA36_special = DFA.unpackEncodedString(DFA36_specialS);
    static final short[][] DFA36_transition;

    static {
        int numStates = DFA36_transitionS.length;
        DFA36_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA36_transition[i] = DFA.unpackEncodedString(DFA36_transitionS[i]);
        }
    }

    class DFA36 extends DFA {

        public DFA36(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = DFA36_eot;
            this.eof = DFA36_eof;
            this.min = DFA36_min;
            this.max = DFA36_max;
            this.accept = DFA36_accept;
            this.special = DFA36_special;
            this.transition = DFA36_transition;
        }
        public String getDescription() {
            return "454:1: bracket_pattern : ( ( Id ( NL )? L_as )=> Id ( NL )? L_as ( NL )? pattern -> ^( L_as Id pattern ) | ( protected_expr ( NL )? QUESTION_MARK )=> protected_expr ( NL )? QUESTION_MARK ( ( NL )? pattern )? -> ^( QUESTION_MARK protected_expr ( pattern )? ) | ( protected_expr ( NL )? EXCLAMATION_MARK )=> protected_expr ( NL )? EXCLAMATION_MARK ( ( NL )? pattern )? -> ^( EXCLAMATION_MARK protected_expr ( pattern )? ) | ( Id pattern )=> Id pattern -> ^( INNERVALUE_PATTERN Id pattern ) | L_val ( NL )? protected_expr_nc -> ^( L_val protected_expr_nc ) | L_for ( NL )? ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )? L_end -> ^( L_for ( bracket_pattern )* ) | ( pattern ( NL )? L_if )=> pattern ( NL )? L_if ( NL )? protected_expr_nc -> ^( IF_PATTERN pattern protected_expr_nc ) | ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation -> ^( TYPE_PATTERN typeannotation pattern ) | pattern );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA36_1 = input.LA(1);

                         
                        int index36_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 31;}

                        else if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (synpred4_babel17()) ) {s = 34;}

                        else if ( (synpred5_babel17()) ) {s = 35;}

                        else if ( (synpred6_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA36_2 = input.LA(1);

                         
                        int index36_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (synpred5_babel17()) ) {s = 35;}

                        else if ( (synpred6_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA36_3 = input.LA(1);

                         
                        int index36_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (synpred5_babel17()) ) {s = 35;}

                        else if ( (synpred6_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA36_4 = input.LA(1);

                         
                        int index36_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (synpred5_babel17()) ) {s = 35;}

                        else if ( (synpred6_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA36_5 = input.LA(1);

                         
                        int index36_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (synpred5_babel17()) ) {s = 35;}

                        else if ( (synpred6_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA36_6 = input.LA(1);

                         
                        int index36_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (synpred5_babel17()) ) {s = 35;}

                        else if ( (synpred6_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA36_7 = input.LA(1);

                         
                        int index36_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (synpred5_babel17()) ) {s = 35;}

                        else if ( (synpred6_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA36_8 = input.LA(1);

                         
                        int index36_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (synpred5_babel17()) ) {s = 35;}

                        else if ( (synpred6_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA36_9 = input.LA(1);

                         
                        int index36_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (synpred5_babel17()) ) {s = 35;}

                        else if ( (synpred6_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA36_10 = input.LA(1);

                         
                        int index36_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (synpred5_babel17()) ) {s = 35;}

                        else if ( (synpred6_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA36_11 = input.LA(1);

                         
                        int index36_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (synpred5_babel17()) ) {s = 35;}

                        else if ( (synpred6_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA36_12 = input.LA(1);

                         
                        int index36_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (synpred5_babel17()) ) {s = 35;}

                        else if ( (synpred6_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA36_13 = input.LA(1);

                         
                        int index36_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (synpred5_babel17()) ) {s = 35;}

                        else if ( (synpred6_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA36_14 = input.LA(1);

                         
                        int index36_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (synpred5_babel17()) ) {s = 35;}

                        else if ( (synpred6_babel17()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA36_15 = input.LA(1);

                         
                        int index36_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                         
                        input.seek(index36_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA36_16 = input.LA(1);

                         
                        int index36_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                         
                        input.seek(index36_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA36_17 = input.LA(1);

                         
                        int index36_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                         
                        input.seek(index36_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA36_18 = input.LA(1);

                         
                        int index36_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                         
                        input.seek(index36_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA36_19 = input.LA(1);

                         
                        int index36_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                         
                        input.seek(index36_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA36_20 = input.LA(1);

                         
                        int index36_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                         
                        input.seek(index36_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA36_21 = input.LA(1);

                         
                        int index36_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                         
                        input.seek(index36_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA36_22 = input.LA(1);

                         
                        int index36_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                         
                        input.seek(index36_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA36_23 = input.LA(1);

                         
                        int index36_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                         
                        input.seek(index36_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA36_24 = input.LA(1);

                         
                        int index36_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                         
                        input.seek(index36_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA36_25 = input.LA(1);

                         
                        int index36_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                         
                        input.seek(index36_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA36_26 = input.LA(1);

                         
                        int index36_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index36_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA36_27 = input.LA(1);

                         
                        int index36_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                         
                        input.seek(index36_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA36_28 = input.LA(1);

                         
                        int index36_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                         
                        input.seek(index36_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA36_29 = input.LA(1);

                         
                        int index36_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 32;}

                        else if ( (synpred3_babel17()) ) {s = 33;}

                         
                        input.seek(index36_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 36, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA64_eotS =
        "\17\uffff";
    static final String DFA64_eofS =
        "\17\uffff";
    static final String DFA64_minS =
        "\1\146\12\uffff\2\113\2\uffff";
    static final String DFA64_maxS =
        "\1\u00ae\12\uffff\2\u00ae\2\uffff";
    static final String DFA64_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\2\uffff\1\13"+
        "\1\14";
    static final String DFA64_specialS =
        "\17\uffff}>";
    static final String[] DFA64_transitionS = {
            "\1\5\1\6\2\uffff\1\7\34\uffff\1\10\32\uffff\1\1\2\uffff\1\4"+
            "\1\uffff\1\3\1\12\1\uffff\1\11\1\uffff\1\13\1\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\15\1\uffff\3\15\3\uffff\2\15\2\uffff\1\15\2\uffff\1\15\2"+
            "\uffff\1\15\2\uffff\1\15\1\uffff\3\15\1\uffff\5\15\4\uffff\1"+
            "\15\4\uffff\1\15\1\uffff\5\15\14\uffff\1\15\15\uffff\2\16\2"+
            "\15\4\uffff\1\15\2\uffff\1\14\2\15\1\uffff\2\15\1\uffff\2\15"+
            "\1\uffff\1\15\1\uffff\3\15",
            "\1\15\1\uffff\3\15\3\uffff\2\15\2\uffff\1\15\2\uffff\1\15\2"+
            "\uffff\1\15\2\uffff\1\15\1\uffff\3\15\1\uffff\5\15\4\uffff\1"+
            "\15\4\uffff\1\15\1\uffff\5\15\14\uffff\1\15\15\uffff\2\16\2"+
            "\15\4\uffff\1\15\3\uffff\2\15\1\uffff\2\15\1\uffff\2\15\1\uffff"+
            "\1\15\1\uffff\3\15",
            "",
            ""
    };

    static final short[] DFA64_eot = DFA.unpackEncodedString(DFA64_eotS);
    static final short[] DFA64_eof = DFA.unpackEncodedString(DFA64_eofS);
    static final char[] DFA64_min = DFA.unpackEncodedStringToUnsignedChars(DFA64_minS);
    static final char[] DFA64_max = DFA.unpackEncodedStringToUnsignedChars(DFA64_maxS);
    static final short[] DFA64_accept = DFA.unpackEncodedString(DFA64_acceptS);
    static final short[] DFA64_special = DFA.unpackEncodedString(DFA64_specialS);
    static final short[][] DFA64_transition;

    static {
        int numStates = DFA64_transitionS.length;
        DFA64_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA64_transition[i] = DFA.unpackEncodedString(DFA64_transitionS[i]);
        }
    }

    class DFA64 extends DFA {

        public DFA64(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 64;
            this.eot = DFA64_eot;
            this.eof = DFA64_eof;
            this.min = DFA64_min;
            this.max = DFA64_max;
            this.accept = DFA64_accept;
            this.special = DFA64_special;
            this.transition = DFA64_transition;
        }
        public String getDescription() {
            return "475:1: primitive_pattern : ( Id | '_' -> ANY | String | Num | L_true | L_false | L_nil | '-' ( NL )? Num -> ^( UMINUS Num ) | '[' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )? ']' -> ^( SQUARE_LIST ( bracket_pattern )* ) | '(' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) ) | '{' ( NL )? ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) );";
        }
    }
    static final String DFA70_eotS =
        "\4\uffff";
    static final String DFA70_eofS =
        "\2\3\2\uffff";
    static final String DFA70_minS =
        "\2\113\2\uffff";
    static final String DFA70_maxS =
        "\2\u00b4\2\uffff";
    static final String DFA70_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA70_specialS =
        "\4\uffff}>";
    static final String[] DFA70_transitionS = {
            "\1\2\1\3\3\2\1\uffff\2\3\2\2\1\uffff\2\2\1\3\1\uffff\2\2\1\uffff"+
            "\1\2\2\uffff\1\2\1\uffff\11\2\2\uffff\5\2\1\3\1\uffff\1\2\1"+
            "\uffff\5\2\12\uffff\1\1\1\uffff\1\2\17\uffff\2\2\4\uffff\1\2"+
            "\2\uffff\1\1\2\2\1\uffff\2\2\1\uffff\2\2\1\uffff\1\2\1\uffff"+
            "\1\2\1\uffff\1\2\1\uffff\5\2",
            "\1\2\1\3\3\2\1\uffff\2\3\2\2\1\uffff\2\2\1\3\1\uffff\2\2\1"+
            "\uffff\1\2\2\uffff\1\2\1\uffff\11\2\2\uffff\5\2\1\3\1\uffff"+
            "\1\2\1\uffff\5\2\12\uffff\1\1\1\uffff\1\2\17\uffff\2\2\4\uffff"+
            "\1\2\2\uffff\1\1\2\2\1\uffff\2\2\1\uffff\2\2\1\uffff\1\2\1\uffff"+
            "\1\2\1\uffff\1\2\1\uffff\5\2",
            "",
            ""
    };

    static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_eotS);
    static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_eofS);
    static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_minS);
    static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_maxS);
    static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_acceptS);
    static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_specialS);
    static final short[][] DFA70_transition;

    static {
        int numStates = DFA70_transitionS.length;
        DFA70_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA70_transition[i] = DFA.unpackEncodedString(DFA70_transitionS[i]);
        }
    }

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = DFA70_eot;
            this.eof = DFA70_eof;
            this.min = DFA70_min;
            this.max = DFA70_max;
            this.accept = DFA70_accept;
            this.special = DFA70_special;
            this.transition = DFA70_transition;
        }
        public String getDescription() {
            return "497:1: block : ( ( sep )? statement ( sep statement )* ( sep )? -> ^( BLOCK ( statement )* ) | ( sep )? -> ^( BLOCK ) );";
        }
    }
    static final String DFA67_eotS =
        "\4\uffff";
    static final String DFA67_eofS =
        "\2\2\2\uffff";
    static final String DFA67_minS =
        "\1\114\1\113\2\uffff";
    static final String DFA67_maxS =
        "\1\u00a0\1\u00b4\2\uffff";
    static final String DFA67_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA67_specialS =
        "\4\uffff}>";
    static final String[] DFA67_transitionS = {
            "\1\2\4\uffff\2\2\5\uffff\1\2\31\uffff\1\2\22\uffff\1\1\32\uffff"+
            "\1\1",
            "\1\3\1\2\3\3\1\uffff\2\2\2\3\1\uffff\2\3\1\2\1\uffff\2\3\1"+
            "\uffff\1\3\2\uffff\1\3\1\uffff\11\3\2\uffff\5\3\1\2\1\uffff"+
            "\1\3\1\uffff\5\3\12\uffff\1\1\1\uffff\1\3\17\uffff\2\3\4\uffff"+
            "\1\3\2\uffff\1\1\2\3\1\uffff\2\3\1\uffff\2\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\uffff\1\3\1\uffff\5\3",
            "",
            ""
    };

    static final short[] DFA67_eot = DFA.unpackEncodedString(DFA67_eotS);
    static final short[] DFA67_eof = DFA.unpackEncodedString(DFA67_eofS);
    static final char[] DFA67_min = DFA.unpackEncodedStringToUnsignedChars(DFA67_minS);
    static final char[] DFA67_max = DFA.unpackEncodedStringToUnsignedChars(DFA67_maxS);
    static final short[] DFA67_accept = DFA.unpackEncodedString(DFA67_acceptS);
    static final short[] DFA67_special = DFA.unpackEncodedString(DFA67_specialS);
    static final short[][] DFA67_transition;

    static {
        int numStates = DFA67_transitionS.length;
        DFA67_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA67_transition[i] = DFA.unpackEncodedString(DFA67_transitionS[i]);
        }
    }

    class DFA67 extends DFA {

        public DFA67(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 67;
            this.eot = DFA67_eot;
            this.eof = DFA67_eof;
            this.min = DFA67_min;
            this.max = DFA67_max;
            this.accept = DFA67_accept;
            this.special = DFA67_special;
            this.transition = DFA67_transition;
        }
        public String getDescription() {
            return "()* loopback of 497:25: ( sep statement )*";
        }
    }
    static final String DFA80_eotS =
        "\17\uffff";
    static final String DFA80_eofS =
        "\17\uffff";
    static final String DFA80_minS =
        "\1\113\16\uffff";
    static final String DFA80_maxS =
        "\1\u00b4\16\uffff";
    static final String DFA80_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16";
    static final String DFA80_specialS =
        "\17\uffff}>";
    static final String[] DFA80_transitionS = {
            "\1\11\1\uffff\3\11\3\uffff\2\11\1\uffff\1\4\1\11\2\uffff\1\2"+
            "\1\3\1\uffff\1\11\2\uffff\1\11\1\uffff\3\11\1\5\5\11\2\uffff"+
            "\1\7\1\1\1\11\1\6\1\10\2\uffff\1\11\1\uffff\5\11\14\uffff\1"+
            "\11\17\uffff\2\11\4\uffff\1\11\3\uffff\2\11\1\uffff\2\11\1\uffff"+
            "\2\11\1\uffff\1\11\1\uffff\1\11\1\uffff\1\11\1\uffff\1\13\1"+
            "\12\1\15\1\14\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA80_eot = DFA.unpackEncodedString(DFA80_eotS);
    static final short[] DFA80_eof = DFA.unpackEncodedString(DFA80_eofS);
    static final char[] DFA80_min = DFA.unpackEncodedStringToUnsignedChars(DFA80_minS);
    static final char[] DFA80_max = DFA.unpackEncodedStringToUnsignedChars(DFA80_maxS);
    static final short[] DFA80_accept = DFA.unpackEncodedString(DFA80_acceptS);
    static final short[] DFA80_special = DFA.unpackEncodedString(DFA80_specialS);
    static final short[][] DFA80_transition;

    static {
        int numStates = DFA80_transitionS.length;
        DFA80_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA80_transition[i] = DFA.unpackEncodedString(DFA80_transitionS[i]);
        }
    }

    class DFA80 extends DFA {

        public DFA80(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = DFA80_eot;
            this.eof = DFA80_eof;
            this.min = DFA80_min;
            this.max = DFA80_max;
            this.accept = DFA80_accept;
            this.special = DFA80_special;
            this.transition = DFA80_transition;
        }
        public String getDescription() {
            return "503:1: statement : ( st_typedef | st_val | st_def | st_yield | st_memoize | st_private | st_module | st_import | expr_or_assign | PRAGMA_PRINT ( NL )? expr -> ^( PRAGMA_PRINT expr ) | PRAGMA_LOG ( NL )? expr -> ^( PRAGMA_LOG expr ) | PRAGMA_PROFILE ( NL )? expr -> ^( PRAGMA_PROFILE expr ) | PRAGMA_ASSERT ( NL )? expr -> ^( PRAGMA_ASSERT expr ) | PRAGMA_CATCH ( NL )? casepattern ( NL )? L_try ( NL )? COLON ( NL )? expr -> ^( PRAGMA_CATCH expr casepattern ) );";
        }
    }
    static final String DFA110_eotS =
        "\17\uffff";
    static final String DFA110_eofS =
        "\17\uffff";
    static final String DFA110_minS =
        "\1\146\14\0\2\uffff";
    static final String DFA110_maxS =
        "\1\u00ae\14\0\2\uffff";
    static final String DFA110_acceptS =
        "\15\uffff\1\1\1\2";
    static final String DFA110_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\2\uffff}>";
    static final String[] DFA110_transitionS = {
            "\1\5\1\6\2\uffff\1\7\34\uffff\1\10\31\uffff\1\14\1\1\2\uffff"+
            "\1\4\1\uffff\1\3\1\12\1\uffff\1\11\1\uffff\1\13\1\uffff\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA110_eot = DFA.unpackEncodedString(DFA110_eotS);
    static final short[] DFA110_eof = DFA.unpackEncodedString(DFA110_eofS);
    static final char[] DFA110_min = DFA.unpackEncodedStringToUnsignedChars(DFA110_minS);
    static final char[] DFA110_max = DFA.unpackEncodedStringToUnsignedChars(DFA110_maxS);
    static final short[] DFA110_accept = DFA.unpackEncodedString(DFA110_acceptS);
    static final short[] DFA110_special = DFA.unpackEncodedString(DFA110_specialS);
    static final short[][] DFA110_transition;

    static {
        int numStates = DFA110_transitionS.length;
        DFA110_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA110_transition[i] = DFA.unpackEncodedString(DFA110_transitionS[i]);
        }
    }

    class DFA110 extends DFA {

        public DFA110(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 110;
            this.eot = DFA110_eot;
            this.eof = DFA110_eof;
            this.min = DFA110_min;
            this.max = DFA110_max;
            this.accept = DFA110_accept;
            this.special = DFA110_special;
            this.transition = DFA110_transition;
        }
        public String getDescription() {
            return "529:1: typedef_clause : ( ( defpattern ( NL )? '=' )=> defpattern ( NL )? '=' ( NL )? expr -> ^( TYPEDEF_CLAUSE defpattern expr ) | defpattern -> ^( TYPEDEF_CLAUSE defpattern ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA110_1 = input.LA(1);

                         
                        int index110_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index110_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA110_2 = input.LA(1);

                         
                        int index110_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index110_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA110_3 = input.LA(1);

                         
                        int index110_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index110_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA110_4 = input.LA(1);

                         
                        int index110_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index110_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA110_5 = input.LA(1);

                         
                        int index110_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index110_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA110_6 = input.LA(1);

                         
                        int index110_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index110_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA110_7 = input.LA(1);

                         
                        int index110_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index110_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA110_8 = input.LA(1);

                         
                        int index110_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index110_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA110_9 = input.LA(1);

                         
                        int index110_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index110_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA110_10 = input.LA(1);

                         
                        int index110_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index110_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA110_11 = input.LA(1);

                         
                        int index110_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index110_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA110_12 = input.LA(1);

                         
                        int index110_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index110_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 110, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA149_eotS =
        "\40\uffff";
    static final String DFA149_eofS =
        "\40\uffff";
    static final String DFA149_minS =
        "\1\113\32\0\5\uffff";
    static final String DFA149_maxS =
        "\1\u00ae\32\0\5\uffff";
    static final String DFA149_acceptS =
        "\33\uffff\1\3\2\uffff\1\1\1\2";
    static final String DFA149_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\5\uffff}>";
    static final String[] DFA149_transitionS = {
            "\1\31\1\uffff\1\23\1\32\1\24\3\uffff\1\25\1\27\2\uffff\1\26"+
            "\5\uffff\1\15\2\uffff\1\30\1\uffff\1\33\1\17\1\33\1\uffff\1"+
            "\6\1\7\1\21\1\17\1\10\4\uffff\1\17\4\uffff\1\33\1\uffff\1\22"+
            "\3\17\1\33\14\uffff\1\11\17\uffff\2\16\4\uffff\1\33\3\uffff"+
            "\1\1\1\2\1\uffff\1\20\1\5\1\uffff\1\4\1\13\1\uffff\1\12\1\uffff"+
            "\1\14\1\uffff\1\3",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA149_eot = DFA.unpackEncodedString(DFA149_eotS);
    static final short[] DFA149_eof = DFA.unpackEncodedString(DFA149_eofS);
    static final char[] DFA149_min = DFA.unpackEncodedStringToUnsignedChars(DFA149_minS);
    static final char[] DFA149_max = DFA.unpackEncodedStringToUnsignedChars(DFA149_maxS);
    static final short[] DFA149_accept = DFA.unpackEncodedString(DFA149_acceptS);
    static final short[] DFA149_special = DFA.unpackEncodedString(DFA149_specialS);
    static final short[][] DFA149_transition;

    static {
        int numStates = DFA149_transitionS.length;
        DFA149_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA149_transition[i] = DFA.unpackEncodedString(DFA149_transitionS[i]);
        }
    }

    class DFA149 extends DFA {

        public DFA149(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = DFA149_eot;
            this.eof = DFA149_eof;
            this.min = DFA149_min;
            this.max = DFA149_max;
            this.accept = DFA149_accept;
            this.special = DFA149_special;
            this.transition = DFA149_transition;
        }
        public String getDescription() {
            return "575:1: expr_or_assign : ( ( pattern ( NL )? '=' )=> pattern ( NL )? '=' ( NL )? expr -> ^( ASSIGN pattern expr ) | ( term_expr ( NL )? '=' )=> term_expr ( NL )? '=' ( NL )? expr -> ^( LENS_ASSIGN term_expr expr ) | expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA149_1 = input.LA(1);

                         
                        int index149_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 30;}

                        else if ( (synpred9_babel17()) ) {s = 31;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index149_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA149_2 = input.LA(1);

                         
                        int index149_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 30;}

                        else if ( (synpred9_babel17()) ) {s = 31;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index149_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA149_3 = input.LA(1);

                         
                        int index149_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 30;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index149_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA149_4 = input.LA(1);

                         
                        int index149_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 30;}

                        else if ( (synpred9_babel17()) ) {s = 31;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index149_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA149_5 = input.LA(1);

                         
                        int index149_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 30;}

                        else if ( (synpred9_babel17()) ) {s = 31;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index149_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA149_6 = input.LA(1);

                         
                        int index149_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 30;}

                        else if ( (synpred9_babel17()) ) {s = 31;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index149_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA149_7 = input.LA(1);

                         
                        int index149_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 30;}

                        else if ( (synpred9_babel17()) ) {s = 31;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index149_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA149_8 = input.LA(1);

                         
                        int index149_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 30;}

                        else if ( (synpred9_babel17()) ) {s = 31;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index149_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA149_9 = input.LA(1);

                         
                        int index149_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 30;}

                        else if ( (synpred9_babel17()) ) {s = 31;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index149_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA149_10 = input.LA(1);

                         
                        int index149_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 30;}

                        else if ( (synpred9_babel17()) ) {s = 31;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index149_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA149_11 = input.LA(1);

                         
                        int index149_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 30;}

                        else if ( (synpred9_babel17()) ) {s = 31;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index149_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA149_12 = input.LA(1);

                         
                        int index149_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 30;}

                        else if ( (synpred9_babel17()) ) {s = 31;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index149_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA149_13 = input.LA(1);

                         
                        int index149_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 30;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index149_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA149_14 = input.LA(1);

                         
                        int index149_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 30;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index149_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA149_15 = input.LA(1);

                         
                        int index149_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 31;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index149_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA149_16 = input.LA(1);

                         
                        int index149_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 31;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index149_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA149_17 = input.LA(1);

                         
                        int index149_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 31;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index149_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA149_18 = input.LA(1);

                         
                        int index149_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 31;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index149_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA149_19 = input.LA(1);

                         
                        int index149_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 31;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index149_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA149_20 = input.LA(1);

                         
                        int index149_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 31;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index149_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA149_21 = input.LA(1);

                         
                        int index149_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 31;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index149_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA149_22 = input.LA(1);

                         
                        int index149_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 31;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index149_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA149_23 = input.LA(1);

                         
                        int index149_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 31;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index149_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA149_24 = input.LA(1);

                         
                        int index149_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 31;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index149_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA149_25 = input.LA(1);

                         
                        int index149_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 31;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index149_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA149_26 = input.LA(1);

                         
                        int index149_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 31;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index149_26);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 149, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA157_eotS =
        "\36\uffff";
    static final String DFA157_eofS =
        "\36\uffff";
    static final String DFA157_minS =
        "\1\113\2\0\1\uffff\12\0\20\uffff";
    static final String DFA157_maxS =
        "\1\u00ae\2\0\1\uffff\12\0\20\uffff";
    static final String DFA157_acceptS =
        "\3\uffff\1\1\12\uffff\1\1\1\2\16\uffff";
    static final String DFA157_specialS =
        "\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\20\uffff}>";
    static final String[] DFA157_transitionS = {
            "\1\17\1\uffff\3\17\3\uffff\2\17\2\uffff\1\17\5\uffff\1\15\2"+
            "\uffff\1\17\1\uffff\3\17\1\uffff\1\6\1\7\2\17\1\10\4\uffff\1"+
            "\17\4\uffff\1\17\1\uffff\5\17\14\uffff\1\11\17\uffff\2\16\4"+
            "\uffff\1\17\3\uffff\1\1\1\2\1\uffff\1\17\1\5\1\uffff\1\4\1\13"+
            "\1\uffff\1\12\1\uffff\1\14\1\uffff\1\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA157_eot = DFA.unpackEncodedString(DFA157_eotS);
    static final short[] DFA157_eof = DFA.unpackEncodedString(DFA157_eofS);
    static final char[] DFA157_min = DFA.unpackEncodedStringToUnsignedChars(DFA157_minS);
    static final char[] DFA157_max = DFA.unpackEncodedStringToUnsignedChars(DFA157_maxS);
    static final short[] DFA157_accept = DFA.unpackEncodedString(DFA157_acceptS);
    static final short[] DFA157_special = DFA.unpackEncodedString(DFA157_specialS);
    static final short[][] DFA157_transition;

    static {
        int numStates = DFA157_transitionS.length;
        DFA157_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA157_transition[i] = DFA.unpackEncodedString(DFA157_transitionS[i]);
        }
    }

    class DFA157 extends DFA {

        public DFA157(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = DFA157_eot;
            this.eof = DFA157_eof;
            this.min = DFA157_min;
            this.max = DFA157_max;
            this.accept = DFA157_accept;
            this.special = DFA157_special;
            this.transition = DFA157_transition;
        }
        public String getDescription() {
            return "616:1: lop_expr : ( ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | op_expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA157_0 = input.LA(1);

                         
                        int index157_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA157_0==Constr) ) {s = 1;}

                        else if ( (LA157_0==Id) ) {s = 2;}

                        else if ( (LA157_0==UNDERSCORE) && (synpred11_babel17())) {s = 3;}

                        else if ( (LA157_0==String) ) {s = 4;}

                        else if ( (LA157_0==Num) ) {s = 5;}

                        else if ( (LA157_0==L_true) ) {s = 6;}

                        else if ( (LA157_0==L_false) ) {s = 7;}

                        else if ( (LA157_0==L_nil) ) {s = 8;}

                        else if ( (LA157_0==MINUS) ) {s = 9;}

                        else if ( (LA157_0==SQUARE_BRACKET_OPEN) ) {s = 10;}

                        else if ( (LA157_0==ROUND_BRACKET_OPEN) ) {s = 11;}

                        else if ( (LA157_0==CURLY_BRACKET_OPEN) ) {s = 12;}

                        else if ( (LA157_0==L_exception) ) {s = 13;}

                        else if ( ((LA157_0>=A_ELLIPSIS && LA157_0<=U_ELLIPSIS)) && (synpred11_babel17())) {s = 14;}

                        else if ( (LA157_0==L_begin||(LA157_0>=L_obj && LA157_0<=L_if)||(LA157_0>=L_while && LA157_0<=L_for)||LA157_0==L_match||LA157_0==L_try||(LA157_0>=L_concurrent && LA157_0<=L_lazy)||(LA157_0>=L_this && LA157_0<=L_random)||LA157_0==L_typeof||LA157_0==L_not||(LA157_0>=L_root && LA157_0<=L_lens)||LA157_0==L_force||LA157_0==Float) ) {s = 15;}

                         
                        input.seek(index157_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA157_1 = input.LA(1);

                         
                        int index157_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index157_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA157_2 = input.LA(1);

                         
                        int index157_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index157_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA157_4 = input.LA(1);

                         
                        int index157_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index157_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA157_5 = input.LA(1);

                         
                        int index157_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index157_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA157_6 = input.LA(1);

                         
                        int index157_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index157_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA157_7 = input.LA(1);

                         
                        int index157_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index157_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA157_8 = input.LA(1);

                         
                        int index157_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index157_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA157_9 = input.LA(1);

                         
                        int index157_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index157_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA157_10 = input.LA(1);

                         
                        int index157_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index157_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA157_11 = input.LA(1);

                         
                        int index157_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index157_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA157_12 = input.LA(1);

                         
                        int index157_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index157_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA157_13 = input.LA(1);

                         
                        int index157_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index157_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 157, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA158_eotS =
        "\36\uffff";
    static final String DFA158_eofS =
        "\36\uffff";
    static final String DFA158_minS =
        "\1\113\2\0\1\uffff\12\0\20\uffff";
    static final String DFA158_maxS =
        "\1\u00ae\2\0\1\uffff\12\0\20\uffff";
    static final String DFA158_acceptS =
        "\3\uffff\1\1\12\uffff\1\1\1\2\16\uffff";
    static final String DFA158_specialS =
        "\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\20\uffff}>";
    static final String[] DFA158_transitionS = {
            "\1\17\1\uffff\3\17\3\uffff\2\17\2\uffff\1\17\5\uffff\1\15\2"+
            "\uffff\1\17\1\uffff\3\17\1\uffff\1\6\1\7\2\17\1\10\4\uffff\1"+
            "\17\4\uffff\1\17\1\uffff\5\17\14\uffff\1\11\17\uffff\2\16\4"+
            "\uffff\1\17\3\uffff\1\1\1\2\1\uffff\1\17\1\5\1\uffff\1\4\1\13"+
            "\1\uffff\1\12\1\uffff\1\14\1\uffff\1\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA158_eot = DFA.unpackEncodedString(DFA158_eotS);
    static final short[] DFA158_eof = DFA.unpackEncodedString(DFA158_eofS);
    static final char[] DFA158_min = DFA.unpackEncodedStringToUnsignedChars(DFA158_minS);
    static final char[] DFA158_max = DFA.unpackEncodedStringToUnsignedChars(DFA158_maxS);
    static final short[] DFA158_accept = DFA.unpackEncodedString(DFA158_acceptS);
    static final short[] DFA158_special = DFA.unpackEncodedString(DFA158_specialS);
    static final short[][] DFA158_transition;

    static {
        int numStates = DFA158_transitionS.length;
        DFA158_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA158_transition[i] = DFA.unpackEncodedString(DFA158_transitionS[i]);
        }
    }

    class DFA158 extends DFA {

        public DFA158(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 158;
            this.eot = DFA158_eot;
            this.eof = DFA158_eof;
            this.min = DFA158_min;
            this.max = DFA158_max;
            this.accept = DFA158_accept;
            this.special = DFA158_special;
            this.transition = DFA158_transition;
        }
        public String getDescription() {
            return "621:1: p_lop_expr : ( ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | p_op_expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA158_0 = input.LA(1);

                         
                        int index158_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA158_0==Constr) ) {s = 1;}

                        else if ( (LA158_0==Id) ) {s = 2;}

                        else if ( (LA158_0==UNDERSCORE) && (synpred12_babel17())) {s = 3;}

                        else if ( (LA158_0==String) ) {s = 4;}

                        else if ( (LA158_0==Num) ) {s = 5;}

                        else if ( (LA158_0==L_true) ) {s = 6;}

                        else if ( (LA158_0==L_false) ) {s = 7;}

                        else if ( (LA158_0==L_nil) ) {s = 8;}

                        else if ( (LA158_0==MINUS) ) {s = 9;}

                        else if ( (LA158_0==SQUARE_BRACKET_OPEN) ) {s = 10;}

                        else if ( (LA158_0==ROUND_BRACKET_OPEN) ) {s = 11;}

                        else if ( (LA158_0==CURLY_BRACKET_OPEN) ) {s = 12;}

                        else if ( (LA158_0==L_exception) ) {s = 13;}

                        else if ( ((LA158_0>=A_ELLIPSIS && LA158_0<=U_ELLIPSIS)) && (synpred12_babel17())) {s = 14;}

                        else if ( (LA158_0==L_begin||(LA158_0>=L_obj && LA158_0<=L_if)||(LA158_0>=L_while && LA158_0<=L_for)||LA158_0==L_match||LA158_0==L_try||(LA158_0>=L_concurrent && LA158_0<=L_lazy)||(LA158_0>=L_this && LA158_0<=L_random)||LA158_0==L_typeof||LA158_0==L_not||(LA158_0>=L_root && LA158_0<=L_lens)||LA158_0==L_force||LA158_0==Float) ) {s = 15;}

                         
                        input.seek(index158_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA158_1 = input.LA(1);

                         
                        int index158_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index158_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA158_2 = input.LA(1);

                         
                        int index158_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index158_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA158_4 = input.LA(1);

                         
                        int index158_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index158_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA158_5 = input.LA(1);

                         
                        int index158_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index158_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA158_6 = input.LA(1);

                         
                        int index158_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index158_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA158_7 = input.LA(1);

                         
                        int index158_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index158_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA158_8 = input.LA(1);

                         
                        int index158_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index158_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA158_9 = input.LA(1);

                         
                        int index158_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index158_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA158_10 = input.LA(1);

                         
                        int index158_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index158_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA158_11 = input.LA(1);

                         
                        int index158_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index158_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA158_12 = input.LA(1);

                         
                        int index158_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index158_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA158_13 = input.LA(1);

                         
                        int index158_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index158_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 158, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA348_eotS =
        "\30\uffff";
    static final String DFA348_eofS =
        "\30\uffff";
    static final String DFA348_minS =
        "\1\113\12\uffff\1\0\14\uffff";
    static final String DFA348_maxS =
        "\1\u00ac\12\uffff\1\0\14\uffff";
    static final String DFA348_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\uffff\1\15"+
        "\1\16\1\17\6\uffff\1\20\1\13\1\14";
    static final String DFA348_specialS =
        "\13\uffff\1\0\14\uffff}>";
    static final String[] DFA348_transitionS = {
            "\1\16\1\uffff\1\14\2\16\3\uffff\2\16\2\uffff\1\16\10\uffff\1"+
            "\16\5\uffff\1\6\1\7\1\10\1\uffff\1\11\13\uffff\1\12\52\uffff"+
            "\1\5\1\4\1\uffff\1\2\1\1\1\uffff\1\3\1\13\1\uffff\1\15\1\uffff"+
            "\1\25",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA348_eot = DFA.unpackEncodedString(DFA348_eotS);
    static final short[] DFA348_eof = DFA.unpackEncodedString(DFA348_eofS);
    static final char[] DFA348_min = DFA.unpackEncodedStringToUnsignedChars(DFA348_minS);
    static final char[] DFA348_max = DFA.unpackEncodedStringToUnsignedChars(DFA348_maxS);
    static final short[] DFA348_accept = DFA.unpackEncodedString(DFA348_acceptS);
    static final short[] DFA348_special = DFA.unpackEncodedString(DFA348_specialS);
    static final short[][] DFA348_transition;

    static {
        int numStates = DFA348_transitionS.length;
        DFA348_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA348_transition[i] = DFA.unpackEncodedString(DFA348_transitionS[i]);
        }
    }

    class DFA348 extends DFA {

        public DFA348(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 348;
            this.eot = DFA348_eot;
            this.eof = DFA348_eof;
            this.min = DFA348_min;
            this.max = DFA348_max;
            this.accept = DFA348_accept;
            this.special = DFA348_special;
            this.transition = DFA348_transition;
        }
        public String getDescription() {
            return "846:1: primitive_expr : ( Num | Float | String | Id | Constr | L_true | L_false | L_this | L_nil | L_root | ( type_expr )=> type_expr | ( lambda_expr )=> lambda_expr | obj_expr | list_expr | with_control_expr | map_or_set_expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA348_11 = input.LA(1);

                         
                        int index348_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_babel17()) ) {s = 22;}

                        else if ( (synpred15_babel17()) ) {s = 23;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index348_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 348, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_block_in_prog274 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_prog276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_EQUAL0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_NOT_EQUAL0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_LESS_EQ0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_GREATER_EQ0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_or_in_token_OR1125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_and_in_token_AND1133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_not_in_token_NOT1141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_DOUBLE_COLON0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_DOUBLE_ARROW0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_ARROW0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_ELLIPSIS0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_typeid1791 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000104000000L});
    public static final BitSet FOLLOW_NL_in_typeid1794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_PERIOD_in_typeid1797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_NL_in_typeid1799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Id_in_typeid1802 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000104000000L});
    public static final BitSet FOLLOW_typeid_in_typeannotation1822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_typeannotation1827 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_protected_expr_in_typeannotation1829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_typeannotation1831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Constr_in_pattern1848 = new BitSet(new long[]{0x0000000000000002L,0x000004C020000000L,0x000055A701800080L});
    public static final BitSet FOLLOW_NL_in_pattern1851 = new BitSet(new long[]{0x0000000000000000L,0x000004C020000000L,0x000055A601800080L});
    public static final BitSet FOLLOW_pattern_in_pattern1854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitive_pattern_in_pattern1870 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100006000L});
    public static final BitSet FOLLOW_NL_in_pattern1873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100006000L});
    public static final BitSet FOLLOW_token_DOUBLE_COLON_in_pattern1876 = new BitSet(new long[]{0x0000000000000000L,0x000004C000000000L,0x000055A500000080L});
    public static final BitSet FOLLOW_NL_in_pattern1878 = new BitSet(new long[]{0x0000000000000000L,0x000004C000000000L,0x000055A400000080L});
    public static final BitSet FOLLOW_primitive_pattern_in_pattern1881 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100006000L});
    public static final BitSet FOLLOW_L_exception_in_pattern1900 = new BitSet(new long[]{0x0000000000000000L,0x000004C020000000L,0x000055A701800080L});
    public static final BitSet FOLLOW_NL_in_pattern1902 = new BitSet(new long[]{0x0000000000000000L,0x000004C020000000L,0x000055A601800080L});
    public static final BitSet FOLLOW_pattern_in_pattern1905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_ELLIPSIS_in_pattern1918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitive_pattern_in_defpattern1928 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100006000L});
    public static final BitSet FOLLOW_NL_in_defpattern1931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100006000L});
    public static final BitSet FOLLOW_token_DOUBLE_COLON_in_defpattern1934 = new BitSet(new long[]{0x0000000000000000L,0x000004C000000000L,0x000055A500000080L});
    public static final BitSet FOLLOW_NL_in_defpattern1936 = new BitSet(new long[]{0x0000000000000000L,0x000004C000000000L,0x000055A400000080L});
    public static final BitSet FOLLOW_primitive_pattern_in_defpattern1939 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100006000L});
    public static final BitSet FOLLOW_Constr_in_defpattern1957 = new BitSet(new long[]{0x0000000000000002L,0x000004C000000000L,0x000055A600000080L});
    public static final BitSet FOLLOW_defpattern_in_defpattern1959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bracket_pattern_in_casepattern1978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_bracket_pattern2005 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2007 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_L_as_in_bracket_pattern2010 = new BitSet(new long[]{0x0000000000000000L,0x000004C020000000L,0x000055A701800080L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2012 = new BitSet(new long[]{0x0000000000000000L,0x000004C020000000L,0x000055A601800080L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_bracket_pattern2044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000108000000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_QUESTION_MARK_in_bracket_pattern2049 = new BitSet(new long[]{0x0000000000000002L,0x000004C020000000L,0x000055A701800080L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2052 = new BitSet(new long[]{0x0000000000000000L,0x000004C020000000L,0x000055A601800080L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_bracket_pattern2087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000110000000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_EXCLAMATION_MARK_in_bracket_pattern2092 = new BitSet(new long[]{0x0000000000000002L,0x000004C020000000L,0x000055A701800080L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2095 = new BitSet(new long[]{0x0000000000000000L,0x000004C020000000L,0x000055A601800080L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_bracket_pattern2124 = new BitSet(new long[]{0x0000000000000000L,0x000004C020000000L,0x000055A601800080L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_val_in_bracket_pattern2141 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2143 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_protected_expr_nc_in_bracket_pattern2146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_for_in_bracket_pattern2165 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2498F800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2167 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2498F800L,0x000055B621800080L});
    public static final BitSet FOLLOW_bracket_pattern_in_bracket_pattern2171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000000102000000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_COMMA_in_bracket_pattern2178 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2498E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2180 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2498E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_bracket_pattern_in_bracket_pattern2183 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000000102000000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_L_end_in_bracket_pattern2193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_L_if_in_bracket_pattern2223 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2225 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_protected_expr_nc_in_bracket_pattern2228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800100000000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2256 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COLON_in_bracket_pattern2259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010500000000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010500000000L});
    public static final BitSet FOLLOW_typeannotation_in_bracket_pattern2264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_ARROW_in_arrow_or_assign2289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGN_in_arrow_or_assign2300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bracket_pattern_in_mselem_pattern2315 = new BitSet(new long[]{0x0000000100000002L,0x0000000000000000L,0x0000000100600000L});
    public static final BitSet FOLLOW_NL_in_mselem_pattern2318 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000100600000L});
    public static final BitSet FOLLOW_arrow_or_assign_in_mselem_pattern2321 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2498E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_mselem_pattern2323 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2498E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_bracket_pattern_in_mselem_pattern2326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_primitive_pattern2355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNDERSCORE_in_primitive_pattern2360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_String_in_primitive_pattern2369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Num_in_primitive_pattern2374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_true_in_primitive_pattern2379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_false_in_primitive_pattern2384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_nil_in_primitive_pattern2389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_primitive_pattern2397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002100000000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Num_in_primitive_pattern2402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_OPEN_in_primitive_pattern2415 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2498E800L,0x00005DB721800080L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2418 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2498E800L,0x00005DB621800080L});
    public static final BitSet FOLLOW_bracket_pattern_in_primitive_pattern2422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080102000000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2424 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080002000000L});
    public static final BitSet FOLLOW_COMMA_in_primitive_pattern2429 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2498E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2431 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2498E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_bracket_pattern_in_primitive_pattern2434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080102000000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080002000000L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_CLOSE_in_primitive_pattern2444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_primitive_pattern2464 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2498E800L,0x000057B721800080L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2467 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2498E800L,0x000057B621800080L});
    public static final BitSet FOLLOW_bracket_pattern_in_primitive_pattern2471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020102000000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020002000000L});
    public static final BitSet FOLLOW_COMMA_in_primitive_pattern2478 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2498E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2481 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2498E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_bracket_pattern_in_primitive_pattern2484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020102000000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020002000000L});
    public static final BitSet FOLLOW_COMMA_in_primitive_pattern2492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020100000000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_primitive_pattern2501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_primitive_pattern2533 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2498E800L,0x000075B721800080L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2536 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2498E800L,0x000075B621800080L});
    public static final BitSet FOLLOW_mselem_pattern_in_primitive_pattern2540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200102000000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200002000000L});
    public static final BitSet FOLLOW_COMMA_in_primitive_pattern2547 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2498E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2550 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2498E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_mselem_pattern_in_primitive_pattern2553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200102000000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200002000000L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_primitive_pattern2563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_primitive_pattern2581 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100600000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_token_ARROW_in_primitive_pattern2586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200100000000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2588 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_primitive_pattern2591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_sep2607 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000020L});
    public static final BitSet FOLLOW_sep_in_block2623 = new BitSet(new long[]{0x0000000000000000L,0x07D3E7FD2CD8E800L,0x001F55B621800080L});
    public static final BitSet FOLLOW_statement_in_block2626 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000020L});
    public static final BitSet FOLLOW_sep_in_block2629 = new BitSet(new long[]{0x0000000000000000L,0x07D3E7FD2CD8E800L,0x001F55B621800080L});
    public static final BitSet FOLLOW_statement_in_block2631 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000020L});
    public static final BitSet FOLLOW_sep_in_block2635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sep_in_block2651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_pure_block2668 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000020L});
    public static final BitSet FOLLOW_sep_in_pure_block2671 = new BitSet(new long[]{0x0000000000000000L,0x07D3E7FD2CD8E800L,0x001F55B621800080L});
    public static final BitSet FOLLOW_statement_in_pure_block2673 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000020L});
    public static final BitSet FOLLOW_st_typedef_in_statement2694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_val_in_statement2705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_def_in_statement2710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_yield_in_statement2715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_memoize_in_statement2720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_private_in_statement2725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_module_in_statement2730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_import_in_statement2735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_assign_in_statement2740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_PRINT_in_statement2746 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_statement2748 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_expr_in_statement2751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_LOG_in_statement2765 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_statement2767 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_expr_in_statement2770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_PROFILE_in_statement2784 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_statement2786 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_expr_in_statement2789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_ASSERT_in_statement2803 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_statement2805 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_expr_in_statement2808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_CATCH_in_statement2821 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2498E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_statement2823 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2498E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_casepattern_in_statement2826 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_statement2828 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_L_try_in_statement2831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800100000000L});
    public static final BitSet FOLLOW_NL_in_statement2833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COLON_in_statement2836 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_statement2838 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_expr_in_statement2841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_val_in_st_val2860 = new BitSet(new long[]{0x0000000000000000L,0x000004C020000000L,0x000055A701800080L});
    public static final BitSet FOLLOW_NL_in_st_val2862 = new BitSet(new long[]{0x0000000000000000L,0x000004C020000000L,0x000055A601800080L});
    public static final BitSet FOLLOW_pattern_in_st_val2865 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_st_val2867 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_ASSIGN_in_st_val2870 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_st_val2872 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_expr_in_st_val2875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_def_in_st_def2895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_NL_in_st_def2897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Id_in_st_def2900 = new BitSet(new long[]{0x0000000100000000L,0x000004C000000000L,0x0000D5A700000080L});
    public static final BitSet FOLLOW_NL_in_st_def2902 = new BitSet(new long[]{0x0000000100000000L,0x000004C000000000L,0x0000D5A600000080L});
    public static final BitSet FOLLOW_defpattern_in_st_def2906 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000800100000000L});
    public static final BitSet FOLLOW_NL_in_st_def2908 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COLON_in_st_def2914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_NL_in_st_def2916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_typeid_in_st_def2919 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_st_def2921 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_ASSIGN_in_st_def2926 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_st_def2928 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_expr_in_st_def2931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_def_in_st_def2957 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_st_def2959 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_L_this_in_st_def2962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800100000000L});
    public static final BitSet FOLLOW_NL_in_st_def2964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COLON_in_st_def2967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_NL_in_st_def2969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_typeid_in_st_def2972 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_st_def2974 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_ASSIGN_in_st_def2977 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_st_def2979 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_expr_in_st_def2982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_def_in_st_def2997 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_st_def2999 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_L_this_in_st_def3002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100001000L});
    public static final BitSet FOLLOW_NL_in_st_def3004 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_TOK_CONVERT_in_st_def3007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_NL_in_st_def3009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_typeid_in_st_def3012 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_st_def3014 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_ASSIGN_in_st_def3017 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_st_def3019 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_expr_in_st_def3022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_typedef_in_st_typedef3045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_NL_in_st_typedef3047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Id_in_st_typedef3050 = new BitSet(new long[]{0x0000000000000000L,0x000004C000000000L,0x000055A700000080L});
    public static final BitSet FOLLOW_NL_in_st_typedef3052 = new BitSet(new long[]{0x0000000000000000L,0x000004C000000000L,0x000055A700000080L});
    public static final BitSet FOLLOW_typedef_clause_in_st_typedef3055 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000102000000L});
    public static final BitSet FOLLOW_NL_in_st_typedef3058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_COMMA_in_st_typedef3061 = new BitSet(new long[]{0x0000000000000000L,0x000004C000000000L,0x000055A700000080L});
    public static final BitSet FOLLOW_NL_in_st_typedef3063 = new BitSet(new long[]{0x0000000000000000L,0x000004C000000000L,0x000055A700000080L});
    public static final BitSet FOLLOW_typedef_clause_in_st_typedef3066 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000102000000L});
    public static final BitSet FOLLOW_defpattern_in_typedef_clause3104 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_typedef_clause3106 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_ASSIGN_in_typedef_clause3109 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_typedef_clause3111 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_expr_in_typedef_clause3114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defpattern_in_typedef_clause3129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_yield_in_st_yield3148 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_expr_in_st_yield3150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_memoize_in_st_memoize3171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010400000000L});
    public static final BitSet FOLLOW_memo_id_in_st_memoize3173 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000102000000L});
    public static final BitSet FOLLOW_NL_in_st_memoize3176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_COMMA_in_st_memoize3179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010500000000L});
    public static final BitSet FOLLOW_NL_in_st_memoize3181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010400000000L});
    public static final BitSet FOLLOW_memo_id_in_st_memoize3184 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000102000000L});
    public static final BitSet FOLLOW_Id_in_memo_id3213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_memo_id3226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Id_in_memo_id3228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_memo_id3230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_private_in_st_private3247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_private_id_in_st_private3249 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000102000000L});
    public static final BitSet FOLLOW_NL_in_st_private3252 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_COMMA_in_st_private3255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_NL_in_st_private3257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_private_id_in_st_private3260 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000102000000L});
    public static final BitSet FOLLOW_Id_in_private_id3286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_testid0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_moduleid3319 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000104000000L});
    public static final BitSet FOLLOW_NL_in_moduleid3322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_PERIOD_in_moduleid3325 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_NL_in_moduleid3327 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_testid_in_moduleid3330 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000104000000L});
    public static final BitSet FOLLOW_L_module_in_st_module3353 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_NL_in_st_module3355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_moduleid_in_st_module3358 = new BitSet(new long[]{0x0000000000000000L,0x07D7E7FD2CD8F800L,0x001F55B7218000A0L});
    public static final BitSet FOLLOW_block_in_st_module3360 = new BitSet(new long[]{0x0000000000000000L,0x0004000000001000L});
    public static final BitSet FOLLOW_L_unittest_in_st_module3363 = new BitSet(new long[]{0x0000000000000000L,0x07D3E7FD2CD8F800L,0x001F55B7218000A0L});
    public static final BitSet FOLLOW_block_in_st_module3365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_L_end_in_st_module3369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_root_in_importprefix3396 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000104000000L});
    public static final BitSet FOLLOW_testid_in_importprefix3400 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000104000000L});
    public static final BitSet FOLLOW_NL_in_importprefix3404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_PERIOD_in_importprefix3407 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_NL_in_importprefix3409 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_testid_in_importprefix3412 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000104000000L});
    public static final BitSet FOLLOW_UNDERSCORE_in_importall3437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_testid_in_importsetclause3453 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100180000L});
    public static final BitSet FOLLOW_NL_in_importsetclause3456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100180000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_importsetclause3459 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_NL_in_importsetclause3462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Id_in_importsetclause3465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_importsetclause3485 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_NL_in_importsetclause3487 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_testid_in_importsetclause3490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importall_in_importsetclause3503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_importset3513 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000400500000080L});
    public static final BitSet FOLLOW_NL_in_importset3515 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000400500000080L});
    public static final BitSet FOLLOW_importsetclause_in_importset3518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200102000000L});
    public static final BitSet FOLLOW_NL_in_importset3521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_COMMA_in_importset3524 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000400500000080L});
    public static final BitSet FOLLOW_NL_in_importset3526 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000400500000080L});
    public static final BitSet FOLLOW_importsetclause_in_importset3529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200102000000L});
    public static final BitSet FOLLOW_NL_in_importset3533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_importset3536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_import_in_st_import3554 = new BitSet(new long[]{0x0000000000000000L,0x0044000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_NL_in_st_import3556 = new BitSet(new long[]{0x0000000000000000L,0x0044000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_importprefix_in_st_import3559 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000104180000L});
    public static final BitSet FOLLOW_NL_in_st_import3562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000104180000L});
    public static final BitSet FOLLOW_PERIOD_in_st_import3566 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000400500000080L});
    public static final BitSet FOLLOW_NL_in_st_import3568 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000400500000080L});
    public static final BitSet FOLLOW_importall_in_st_import3571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERIOD_in_st_import3575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100100000000L});
    public static final BitSet FOLLOW_NL_in_st_import3577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100100000000L});
    public static final BitSet FOLLOW_importset_in_st_import3580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_st_import3584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_NL_in_st_import3586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Id_in_st_import3589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_expr_or_assign3633 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_expr_or_assign3635 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_ASSIGN_in_expr_or_assign3638 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_expr_or_assign3640 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_expr_in_expr_or_assign3643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_expr_in_expr_or_assign3670 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_expr_or_assign3672 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_ASSIGN_in_expr_or_assign3675 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_expr_or_assign3677 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_expr_in_expr_or_assign3680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_expr_or_assign3695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lop_expr_in_expr3706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_expr_in_control_expr3718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_do_expr_in_control_expr3723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_match_expr_in_control_expr3728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_expr_in_control_expr3733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_expr_in_control_expr3739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_begin_end_in_control_expr3744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_control_expr_in_with_control_expr3754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_with_in_with_control_expr3759 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_with_control_expr3761 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_protected_expr_in_with_control_expr3764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_with_control_expr3766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_L_do_in_with_control_expr3769 = new BitSet(new long[]{0x0000000000000000L,0x07D3E7FD2CD8F800L,0x001F55B7218000A0L});
    public static final BitSet FOLLOW_block_in_with_control_expr3771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_L_end_in_with_control_expr3773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_lop_expr_in_protected_expr3798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_protected_expr_nc3811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_begin_in_begin_end3821 = new BitSet(new long[]{0x0000000000000000L,0x07D3E7FD2CD8F800L,0x001F55B7218000A0L});
    public static final BitSet FOLLOW_block_in_begin_end3823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_L_end_in_begin_end3825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_parents3843 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_primitive_expr_in_parents3845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMES_in_parents3858 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_primitive_expr_in_parents3860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_obj_in_obj_expr3888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000140L});
    public static final BitSet FOLLOW_NL_in_obj_expr3890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000140L});
    public static final BitSet FOLLOW_parents_in_obj_expr3893 = new BitSet(new long[]{0x0000000000000000L,0x07D3E7FD2CD8F800L,0x001F55B7218000A0L});
    public static final BitSet FOLLOW_block_in_obj_expr3895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_L_end_in_obj_expr3897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_obj_in_obj_expr3925 = new BitSet(new long[]{0x0000000000000000L,0x07D3E7FD2CD8F800L,0x001F55B7218000A0L});
    public static final BitSet FOLLOW_block_in_obj_expr3927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_L_end_in_obj_expr3929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_nobrackets_in_lop_expr3959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_expr_in_lop_expr3964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_nobrackets_in_p_lop_expr3982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_op_expr_in_p_lop_expr3987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_if_in_if_expr3997 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_if_expr3999 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_protected_expr_in_if_expr4002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_if_expr4004 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_L_then_in_if_expr4007 = new BitSet(new long[]{0x0000000000000000L,0x07D3E7FD2CDEF800L,0x001F55B7218000A0L});
    public static final BitSet FOLLOW_block_in_if_expr4009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000061000L});
    public static final BitSet FOLLOW_L_elseif_in_if_expr4015 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_if_expr4017 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_protected_expr_in_if_expr4020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_if_expr4022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_L_then_in_if_expr4025 = new BitSet(new long[]{0x0000000000000000L,0x07D3E7FD2CDEF800L,0x001F55B7218000A0L});
    public static final BitSet FOLLOW_block_in_if_expr4027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000061000L});
    public static final BitSet FOLLOW_L_else_in_if_expr4035 = new BitSet(new long[]{0x0000000000000000L,0x07D3E7FD2CD8F800L,0x001F55B7218000A0L});
    public static final BitSet FOLLOW_block_in_if_expr4037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_L_end_in_if_expr4041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_while_in_while_do_expr4065 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_while_do_expr4067 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_protected_expr_in_while_do_expr4070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_while_do_expr4072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_L_do_in_while_do_expr4075 = new BitSet(new long[]{0x0000000000000000L,0x07D3E7FD2CD8F800L,0x001F55B7218000A0L});
    public static final BitSet FOLLOW_block_in_while_do_expr4077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_L_end_in_while_do_expr4079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_cases_in_cases4109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_cases4114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100180000L});
    public static final BitSet FOLLOW_NL_in_cases4116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100180000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_cases4119 = new BitSet(new long[]{0x0000000000000000L,0x07D3E7FD2CD8E800L,0x001F55B7218000A0L});
    public static final BitSet FOLLOW_block_in_cases4121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_expr_in_full_cases4144 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_L_case_in_case_expr4165 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2498E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_case_expr4167 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2498E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_casepattern_in_case_expr4170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100180000L});
    public static final BitSet FOLLOW_NL_in_case_expr4172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100180000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_case_expr4175 = new BitSet(new long[]{0x0000000000000000L,0x07D3E7FD2CD8E800L,0x001F55B7218000A0L});
    public static final BitSet FOLLOW_block_in_case_expr4177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_match_in_match_expr4198 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_match_expr4200 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_p_op_expr_in_match_expr4203 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_match_expr4205 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_full_cases_in_match_expr4208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_L_end_in_match_expr4210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_try_in_try_expr4236 = new BitSet(new long[]{0x0000000000000000L,0x07D3E7FD2CD8E800L,0x001F55B721800080L});
    public static final BitSet FOLLOW_NL_in_try_expr4238 = new BitSet(new long[]{0x0000000000000000L,0x07D3E7FD2CD8E800L,0x001F55B721800080L});
    public static final BitSet FOLLOW_pure_block_in_try_expr4241 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_try_expr4243 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_L_catch_in_try_expr4246 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_try_expr4248 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_full_cases_in_try_expr4251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_L_end_in_try_expr4253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_lambda_expr4277 = new BitSet(new long[]{0x0000000000000000L,0x000004C021000000L,0x000055A701800080L});
    public static final BitSet FOLLOW_NL_in_lambda_expr4279 = new BitSet(new long[]{0x0000000000000000L,0x000004C021000000L,0x000055A701800080L});
    public static final BitSet FOLLOW_lambda_cases_in_lambda_expr4282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020100000000L});
    public static final BitSet FOLLOW_NL_in_lambda_expr4284 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_lambda_expr4287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_cases_nobrackets_in_lambda_expr_nobrackets4306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_lambda_cases_nobrackets4324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100180000L});
    public static final BitSet FOLLOW_NL_in_lambda_cases_nobrackets4326 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100180000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_lambda_cases_nobrackets4329 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_lambda_cases_nobrackets4331 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_lop_expr_in_lambda_cases_nobrackets4334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_case_in_lambda_case_expr4362 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2498E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_lambda_case_expr4364 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2498E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_casepattern_in_lambda_case_expr4367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100180000L});
    public static final BitSet FOLLOW_NL_in_lambda_case_expr4369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100180000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_lambda_case_expr4372 = new BitSet(new long[]{0x0000000000000000L,0x07D3E7FD2CD8E800L,0x001F55B721800080L});
    public static final BitSet FOLLOW_NL_in_lambda_case_expr4374 = new BitSet(new long[]{0x0000000000000000L,0x07D3E7FD2CD8E800L,0x001F55B721800080L});
    public static final BitSet FOLLOW_pure_block_in_lambda_case_expr4377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_lambda_cases4398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100180000L});
    public static final BitSet FOLLOW_NL_in_lambda_cases4400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100180000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_lambda_cases4403 = new BitSet(new long[]{0x0000000000000000L,0x07D3E7FD2CD8E800L,0x001F55B721800080L});
    public static final BitSet FOLLOW_NL_in_lambda_cases4405 = new BitSet(new long[]{0x0000000000000000L,0x07D3E7FD2CD8E800L,0x001F55B721800080L});
    public static final BitSet FOLLOW_pure_block_in_lambda_cases4408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_case_expr_in_lambda_cases4427 = new BitSet(new long[]{0x0000000000000002L,0x000004C021000000L,0x000055A701800080L});
    public static final BitSet FOLLOW_NL_in_lambda_cases4430 = new BitSet(new long[]{0x0000000000000000L,0x000004C021000000L,0x000055A701800080L});
    public static final BitSet FOLLOW_lambda_case_expr_in_lambda_cases4433 = new BitSet(new long[]{0x0000000000000002L,0x000004C021000000L,0x000055A701800080L});
    public static final BitSet FOLLOW_L_for_in_for_expr4451 = new BitSet(new long[]{0x0000000000000000L,0x000004C020000000L,0x000055A701800080L});
    public static final BitSet FOLLOW_NL_in_for_expr4453 = new BitSet(new long[]{0x0000000000000000L,0x000004C020000000L,0x000055A601800080L});
    public static final BitSet FOLLOW_pattern_in_for_expr4456 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_for_expr4458 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_L_in_in_for_expr4461 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_for_expr4463 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_protected_expr_in_for_expr4466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_for_expr4468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_L_do_in_for_expr4471 = new BitSet(new long[]{0x0000000000000000L,0x07D3E7FD2CD8F800L,0x001F55B7218000A0L});
    public static final BitSet FOLLOW_block_in_for_expr4473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_L_end_in_for_expr4475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtin_primitive_in_op_expr4504 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_op_expr_in_op_expr4507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lens_expr_in_op_expr4512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bool_expr_in_op_expr4517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtin_primitive_in_p_op_expr4527 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_p_op_expr4530 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_p_op_expr_in_p_op_expr4534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_lens_expr_in_p_op_expr4539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_bool_expr_in_p_op_expr4544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_builtin_primitive0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_lens_in_lens_expr4575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_NL_in_lens_expr4577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Id_in_lens_expr4580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100180000L});
    public static final BitSet FOLLOW_NL_in_lens_expr4582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100180000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_lens_expr4585 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_lens_expr4587 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_op_expr_in_lens_expr4590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_lens_in_lens_expr4605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010100000000L});
    public static final BitSet FOLLOW_NL_in_lens_expr4607 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_lens_expr4610 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_lens_expr4612 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_protected_expr_in_lens_expr4615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000102000000L});
    public static final BitSet FOLLOW_NL_in_lens_expr4617 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_COMMA_in_lens_expr4620 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_lens_expr4622 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_protected_expr_in_lens_expr4625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020100000000L});
    public static final BitSet FOLLOW_NL_in_lens_expr4627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_lens_expr4630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_lens_in_p_lens_expr4650 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_NL_in_p_lens_expr4652 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_Id_in_p_lens_expr4655 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100180000L});
    public static final BitSet FOLLOW_NL_in_p_lens_expr4657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100180000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_p_lens_expr4660 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_p_lens_expr4662 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_p_op_expr_in_p_lens_expr4665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_lens_in_p_lens_expr4682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010100000000L});
    public static final BitSet FOLLOW_NL_in_p_lens_expr4684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_p_lens_expr4687 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_p_lens_expr4689 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_protected_expr_in_p_lens_expr4692 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000102000000L});
    public static final BitSet FOLLOW_NL_in_p_lens_expr4694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_COMMA_in_p_lens_expr4697 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_p_lens_expr4699 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_protected_expr_in_p_lens_expr4702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020100000000L});
    public static final BitSet FOLLOW_NL_in_p_lens_expr4704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_p_lens_expr4707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bool_or_expr_in_bool_expr4727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_bool_or_expr_in_p_bool_expr4737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bool_and_expr_in_bool_or_expr4746 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_bool_or_expr4749 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_token_OR_in_bool_or_expr4753 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_bool_or_expr4756 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_bool_and_expr_in_bool_or_expr4760 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_p_bool_and_expr_in_p_bool_or_expr4772 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_p_bool_or_expr4775 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_token_OR_in_p_bool_or_expr4779 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_p_bool_or_expr4782 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_p_bool_and_expr_in_p_bool_or_expr4786 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_bool_not_expr_in_bool_and_expr4798 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_bool_and_expr4801 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_token_AND_in_bool_and_expr4805 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_bool_and_expr4808 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_bool_not_expr_in_bool_and_expr4812 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_p_bool_not_expr_in_p_bool_and_expr4824 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_p_bool_and_expr4827 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_token_AND_in_p_bool_and_expr4831 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_p_bool_and_expr4834 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_p_bool_not_expr_in_p_bool_and_expr4838 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_token_NOT_in_bool_not_expr4850 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_bool_not_expr4853 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_bool_not_expr_in_bool_not_expr4857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_expr_in_bool_not_expr4862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_NOT_in_p_bool_not_expr4873 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_p_bool_not_expr4876 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_p_bool_not_expr_in_p_bool_not_expr4880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_rel_expr_in_p_bool_not_expr4885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relate_expr_in_rel_expr4895 = new BitSet(new long[]{0x0000000000000002L,0xF800000000000000L,0x000000010000001FL});
    public static final BitSet FOLLOW_NL_in_rel_expr4898 = new BitSet(new long[]{0x0000000000000000L,0xF800000000000000L,0x000000010000001FL});
    public static final BitSet FOLLOW_rel_op_in_rel_expr4901 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_rel_expr4903 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_relate_expr_in_rel_expr4906 = new BitSet(new long[]{0x0000000000000002L,0xF800000000000000L,0x000000010000001FL});
    public static final BitSet FOLLOW_p_relate_expr_in_p_rel_expr4933 = new BitSet(new long[]{0x0000000000000002L,0xF800000000000000L,0x000000010000001FL});
    public static final BitSet FOLLOW_NL_in_p_rel_expr4936 = new BitSet(new long[]{0x0000000000000000L,0xF800000000000000L,0x000000010000001FL});
    public static final BitSet FOLLOW_rel_op_in_p_rel_expr4939 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_p_rel_expr4941 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_p_relate_expr_in_p_rel_expr4944 = new BitSet(new long[]{0x0000000000000002L,0xF800000000000000L,0x000000010000001FL});
    public static final BitSet FOLLOW_token_EQUAL_in_rel_op4970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_NOT_EQUAL_in_rel_op4974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_in_rel_op4978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_GREATER_EQ_in_rel_op4982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_in_rel_op4986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_LESS_EQ_in_rel_op4990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_convert_expr_in_relate_expr4999 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000800L});
    public static final BitSet FOLLOW_NL_in_relate_expr5002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_TOK_RELATE_in_relate_expr5005 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_relate_expr5007 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_convert_expr_in_relate_expr5010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_convert_expr_in_p_relate_expr5029 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000800L});
    public static final BitSet FOLLOW_NL_in_p_relate_expr5032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_TOK_RELATE_in_p_relate_expr5035 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_p_relate_expr5037 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_p_convert_expr_in_p_relate_expr5040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_expr_in_convert_expr5061 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100001000L});
    public static final BitSet FOLLOW_NL_in_convert_expr5064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_TOK_CONVERT_in_convert_expr5067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010500000000L});
    public static final BitSet FOLLOW_NL_in_convert_expr5069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010500000000L});
    public static final BitSet FOLLOW_typeannotation_in_convert_expr5072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_term_expr_in_p_convert_expr5094 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100001000L});
    public static final BitSet FOLLOW_NL_in_p_convert_expr5097 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_TOK_CONVERT_in_p_convert_expr5100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010500000000L});
    public static final BitSet FOLLOW_NL_in_p_convert_expr5102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010500000000L});
    public static final BitSet FOLLOW_typeannotation_in_p_convert_expr5105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtin_fun_in_term_expr5128 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_term_expr_in_term_expr5131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arith_expr_in_term_expr5136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtin_fun_in_p_term_expr5146 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_p_term_expr5149 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_p_term_expr_in_p_term_expr5153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_arith_expr_in_p_term_expr5158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_builtin_fun0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plusplus_expr_in_arith_expr5196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_plusplus_expr_in_p_arith_expr5205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timestimes_expr_in_plusplus_expr5215 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100060000L});
    public static final BitSet FOLLOW_NL_in_plusplus_expr5218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000060000L});
    public static final BitSet FOLLOW_PLUSPLUS_in_plusplus_expr5223 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_MINUSMINUS_in_plusplus_expr5226 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_plusplus_expr5230 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_timestimes_expr_in_plusplus_expr5234 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100060000L});
    public static final BitSet FOLLOW_p_timestimes_expr_in_p_plusplus_expr5246 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100060000L});
    public static final BitSet FOLLOW_NL_in_p_plusplus_expr5249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000060000L});
    public static final BitSet FOLLOW_PLUSPLUS_in_p_plusplus_expr5254 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_MINUSMINUS_in_p_plusplus_expr5257 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_p_plusplus_expr5261 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_p_timestimes_expr_in_p_plusplus_expr5265 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100060000L});
    public static final BitSet FOLLOW_simple_expr_in_timestimes_expr5277 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100018000L});
    public static final BitSet FOLLOW_NL_in_timestimes_expr5280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000018000L});
    public static final BitSet FOLLOW_TIMESTIMES_in_timestimes_expr5285 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_QUOTIENTQUOTIENT_in_timestimes_expr5288 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_timestimes_expr5292 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_simple_expr_in_timestimes_expr5296 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100018000L});
    public static final BitSet FOLLOW_p_simple_expr_in_p_timestimes_expr5309 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100018000L});
    public static final BitSet FOLLOW_NL_in_p_timestimes_expr5312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000018000L});
    public static final BitSet FOLLOW_TIMESTIMES_in_p_timestimes_expr5317 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_QUOTIENTQUOTIENT_in_p_timestimes_expr5320 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_p_timestimes_expr5324 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_p_simple_expr_in_p_timestimes_expr5328 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100018000L});
    public static final BitSet FOLLOW_cons_expr_in_simple_expr5339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_cons_expr_in_p_simple_expr5348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_expr_in_cons_expr5357 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100006000L});
    public static final BitSet FOLLOW_NL_in_cons_expr5360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100006000L});
    public static final BitSet FOLLOW_token_DOUBLE_COLON_in_cons_expr5363 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_cons_expr5365 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_to_expr_in_cons_expr5368 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100006000L});
    public static final BitSet FOLLOW_p_to_expr_in_p_cons_expr5388 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100006000L});
    public static final BitSet FOLLOW_NL_in_p_cons_expr5391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100006000L});
    public static final BitSet FOLLOW_token_DOUBLE_COLON_in_p_cons_expr5394 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_p_cons_expr5396 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_p_to_expr_in_p_cons_expr5399 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100006000L});
    public static final BitSet FOLLOW_arith_plus_expr_in_to_expr5419 = new BitSet(new long[]{0x0000000000000002L,0x00000000C0000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_to_expr5422 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_L_to_in_to_expr5427 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_L_downto_in_to_expr5431 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_to_expr5435 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_arith_plus_expr_in_to_expr5439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_arith_plus_expr_in_p_to_expr5452 = new BitSet(new long[]{0x0000000000000002L,0x00000000C0000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_p_to_expr5455 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_L_to_in_p_to_expr5460 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_L_downto_in_p_to_expr5464 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_p_to_expr5468 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_p_arith_plus_expr_in_p_to_expr5472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arith_uminus_expr_in_arith_plus_expr5484 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000001000000C0L});
    public static final BitSet FOLLOW_NL_in_arith_plus_expr5488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_PLUS_in_arith_plus_expr5492 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_MINUS_in_arith_plus_expr5497 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_arith_plus_expr5501 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_arith_uminus_expr_in_arith_plus_expr5505 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000001000000C0L});
    public static final BitSet FOLLOW_p_arith_uminus_expr_in_p_arith_plus_expr5516 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000001000000C0L});
    public static final BitSet FOLLOW_NL_in_p_arith_plus_expr5519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000000000C0L});
    public static final BitSet FOLLOW_set_in_p_arith_plus_expr5523 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_p_arith_plus_expr5532 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_p_arith_uminus_expr_in_p_arith_plus_expr5536 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000001000000C0L});
    public static final BitSet FOLLOW_MINUS_in_arith_uminus_expr5549 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_arith_uminus_expr5551 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_arith_mult_expr_in_arith_uminus_expr5554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arith_mult_expr_in_arith_uminus_expr5567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_p_arith_uminus_expr5578 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_p_arith_uminus_expr5580 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_p_arith_mult_expr_in_p_arith_uminus_expr5583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_arith_mult_expr_in_p_arith_uminus_expr5596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arith_pow_expr_in_arith_mult_expr5605 = new BitSet(new long[]{0x0000000000000002L,0x0000180000000000L,0x0000000100000300L});
    public static final BitSet FOLLOW_NL_in_arith_mult_expr5608 = new BitSet(new long[]{0x0000000000000000L,0x0000180000000000L,0x0000000000000300L});
    public static final BitSet FOLLOW_set_in_arith_mult_expr5612 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_arith_mult_expr5629 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_arith_pow_expr_in_arith_mult_expr5633 = new BitSet(new long[]{0x0000000000000002L,0x0000180000000000L,0x0000000100000300L});
    public static final BitSet FOLLOW_p_arith_pow_expr_in_p_arith_mult_expr5645 = new BitSet(new long[]{0x0000000000000002L,0x0000180000000000L,0x0000000100000300L});
    public static final BitSet FOLLOW_NL_in_p_arith_mult_expr5648 = new BitSet(new long[]{0x0000000000000000L,0x0000180000000000L,0x0000000000000300L});
    public static final BitSet FOLLOW_set_in_p_arith_mult_expr5652 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_p_arith_mult_expr5669 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_p_arith_pow_expr_in_p_arith_mult_expr5673 = new BitSet(new long[]{0x0000000000000002L,0x0000180000000000L,0x0000000100000300L});
    public static final BitSet FOLLOW_apply_expr_in_arith_pow_expr5684 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000400L});
    public static final BitSet FOLLOW_NL_in_arith_pow_expr5687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_POW_tok_in_arith_pow_expr5690 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_arith_pow_expr5692 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_apply_expr_in_arith_pow_expr5695 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000400L});
    public static final BitSet FOLLOW_p_apply_expr_in_p_arith_pow_expr5716 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000400L});
    public static final BitSet FOLLOW_NL_in_p_arith_pow_expr5719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_POW_tok_in_p_arith_pow_expr5722 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_p_arith_pow_expr5724 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_p_apply_expr_in_p_arith_pow_expr5727 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000400L});
    public static final BitSet FOLLOW_basic_expr_in_apply_expr5748 = new BitSet(new long[]{0x0000000000000002L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_p_basic_expr_in_p_apply_expr5766 = new BitSet(new long[]{0x0000000000000002L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_p_apply_expr5769 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_p_basic_expr_in_p_apply_expr5772 = new BitSet(new long[]{0x0000000000000002L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_message_send_expr_in_basic_expr5792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_message_send_expr_in_p_basic_expr5801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitive_expr_in_message_send_expr5810 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000104000000L});
    public static final BitSet FOLLOW_NL_in_message_send_expr5813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_PERIOD_in_message_send_expr5816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010500000000L});
    public static final BitSet FOLLOW_NL_in_message_send_expr5818 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010500000000L});
    public static final BitSet FOLLOW_message_expr_in_message_send_expr5821 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000104000000L});
    public static final BitSet FOLLOW_Id_in_message_expr5844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_message_expr5857 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_message_expr5859 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B621800080L});
    public static final BitSet FOLLOW_p_op_expr_in_message_expr5862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020100000000L});
    public static final BitSet FOLLOW_NL_in_message_expr5864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_message_expr5867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_OPEN_in_list_expr5902 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_list_expr5904 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000020L});
    public static final BitSet FOLLOW_NL_in_list_expr5909 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SC_in_list_expr5912 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_list_expr5914 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5917 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080100000000L});
    public static final BitSet FOLLOW_NL_in_list_expr5919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_CLOSE_in_list_expr5922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_OPEN_in_list_expr5936 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x00005DB721800080L});
    public static final BitSet FOLLOW_NL_in_list_expr5938 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x00005DB721800080L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080102000000L});
    public static final BitSet FOLLOW_NL_in_list_expr5945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_COMMA_in_list_expr5948 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_list_expr5950 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080102000000L});
    public static final BitSet FOLLOW_NL_in_list_expr5957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_CLOSE_in_list_expr5962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_list_expr5976 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000057B721800080L});
    public static final BitSet FOLLOW_NL_in_list_expr5978 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000057B721800080L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020102000000L});
    public static final BitSet FOLLOW_NL_in_list_expr5985 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_COMMA_in_list_expr5988 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_list_expr5990 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5993 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020102000000L});
    public static final BitSet FOLLOW_NL_in_list_expr5997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020002000000L});
    public static final BitSet FOLLOW_COMMA_in_list_expr6001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020100000000L});
    public static final BitSet FOLLOW_NL_in_list_expr6003 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_list_expr6010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_map_or_set_expr6039 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000075B721800080L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr6041 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000075B721800080L});
    public static final BitSet FOLLOW_map_or_set_elem_expr_in_map_or_set_expr6045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200102000000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr6047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200002000000L});
    public static final BitSet FOLLOW_COMMA_in_map_or_set_expr6051 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr6053 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_map_or_set_elem_expr_in_map_or_set_expr6056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200102000000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr6058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200002000000L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_map_or_set_expr6065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_map_or_set_expr6085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100600000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr6087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_token_ARROW_in_map_or_set_expr6090 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200100000000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr6092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_map_or_set_expr6095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_nc_in_map_or_set_elem_expr6112 = new BitSet(new long[]{0x0000000100000002L,0x0000000000000000L,0x0000000100600000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_elem_expr6115 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000100600000L});
    public static final BitSet FOLLOW_arrow_or_assign_in_map_or_set_elem_expr6118 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_map_or_set_elem_expr6120 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_protected_expr_nc_in_map_or_set_elem_expr6123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_type_expr6150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800100000000L});
    public static final BitSet FOLLOW_NL_in_type_expr6152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COLON_in_type_expr6155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_NL_in_type_expr6157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_typeid_in_type_expr6160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020100000000L});
    public static final BitSet FOLLOW_NL_in_type_expr6162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_type_expr6165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Num_in_primitive_expr6183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Float_in_primitive_expr6188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_String_in_primitive_expr6193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_primitive_expr6198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Constr_in_primitive_expr6203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_true_in_primitive_expr6208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_false_in_primitive_expr6213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_this_in_primitive_expr6218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_nil_in_primitive_expr6224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_root_in_primitive_expr6229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_expr_in_primitive_expr6240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_in_primitive_expr6251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_obj_expr_in_primitive_expr6256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_list_expr_in_primitive_expr6262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_control_expr_in_primitive_expr6267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_or_set_expr_in_primitive_expr6272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_synpred1_babel171995 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_synpred1_babel171997 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_L_as_in_synpred1_babel172000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_synpred2_babel172031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000108000000L});
    public static final BitSet FOLLOW_NL_in_synpred2_babel172033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_QUESTION_MARK_in_synpred2_babel172036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_synpred3_babel172074 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000110000000L});
    public static final BitSet FOLLOW_NL_in_synpred3_babel172076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_EXCLAMATION_MARK_in_synpred3_babel172079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_synpred4_babel172117 = new BitSet(new long[]{0x0000000000000000L,0x000004C020000000L,0x000055A601800080L});
    public static final BitSet FOLLOW_pattern_in_synpred4_babel172119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_synpred5_babel172208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_synpred5_babel172210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_L_if_in_synpred5_babel172213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_synpred6_babel172244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800100000000L});
    public static final BitSet FOLLOW_NL_in_synpred6_babel172246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COLON_in_synpred6_babel172249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defpattern_in_synpred7_babel173094 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_synpred7_babel173096 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred7_babel173099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_synpred8_babel173622 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_synpred8_babel173624 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred8_babel173627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_expr_in_synpred9_babel173659 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NL_in_synpred9_babel173661 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred9_babel173664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_obj_in_synpred10_babel173878 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000140L});
    public static final BitSet FOLLOW_NL_in_synpred10_babel173880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000140L});
    public static final BitSet FOLLOW_parents_in_synpred10_babel173883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_nobrackets_in_synpred11_babel173954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_nobrackets_in_synpred12_babel173977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_OPEN_in_synpred13_babel175887 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_NL_in_synpred13_babel175889 = new BitSet(new long[]{0x0000000000000000L,0x07D087DD2098E800L,0x000055B721800080L});
    public static final BitSet FOLLOW_protected_expr_nc_in_synpred13_babel175892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000020L});
    public static final BitSet FOLLOW_NL_in_synpred13_babel175894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SC_in_synpred13_babel175897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_expr_in_synpred14_babel176235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_in_synpred15_babel176246 = new BitSet(new long[]{0x0000000000000002L});

}