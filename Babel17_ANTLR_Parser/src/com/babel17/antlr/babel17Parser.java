// $ANTLR 3.2 Sep 23, 2009 12:02:23 /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g 2011-05-22 23:40:10

package com.babel17.antlr;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class babel17Parser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "PROG", "NIL_TOKEN", "ANY", "LAMBDA", "SQUARE_LIST", "ROUND_LIST", "LIST_CONS", "COMPARE", "APPLY", "IF", "MAP_OR_SET_OR_OBJ", "EMPTY_MAP", "EXCEPTION", "MATCH", "TRY", "CASES", "OBJ", "FOR_EXPR", "WHILE_DO", "MESSAGE_SEND", "UMINUS", "POW", "PARENTS_PLUS", "PARENTS_MUL", "BLOCK", "BEGIN", "WITH", "VAL", "OBJELEM_ASSIGN", "ASSIGN", "ARROW", "DEF", "YIELD", "PRIVATE", "TYPEDEF", "TYPEDEF_CLAUSE", "GETTYPE", "MEMOIZE", "MEMOID_STRONG", "MEMOID_WEAK", "PRIVATEID", "IF_PATTERN", "TYPE_PATTERN", "INNERVALUE_PATTERN", "TYPEID", "TYPEVAL", "MODULEID", "TYPE_EXPR", "TYPEOF", "CONVERSION", "CONVERT", "RELATE", "INTERVAL", "IMPORT_PREFIX", "IMPORT_ALL", "IMPORT_SET", "IMPORT_PLUS", "IMPORT_MINUS", "Newline", "NotNewline", "COMMENT", "LINECOMMENT", "SmallLetter", "BigLetter", "Letter", "Digit", "Hex", "L_begin", "L_end", "L_obj", "L_with", "L_if", "L_then", "L_else", "L_elseif", "L_while", "L_for", "L_do", "L_yield", "L_match", "L_case", "L_as", "L_val", "L_def", "L_in", "L_exception", "L_to", "L_downto", "L_try", "L_catch", "L_concurrent", "L_choose", "L_lazy", "L_memoize", "L_true", "L_false", "L_this", "L_random", "L_nil", "L_div", "L_mod", "L_module", "L_typedef", "L_typeof", "L_private", "L_import", "L_unittest", "L_and", "L_not", "L_or", "A_EQUAL", "U_EQUAL", "A_NOT_EQUAL", "U_NOT_EQUAL", "LESS", "A_LESS_EQ", "U_LESS_EQ", "GREATER", "A_GREATER_EQ", "U_GREATER_EQ", "SC", "PLUS", "MINUS", "TIMES", "QUOTIENT", "POW_tok", "TOK_RELATE", "TOK_CONVERT", "A_DOUBLE_COLON", "U_DOUBLE_COLON", "TIMESTIMES", "QUOTIENTQUOTIENT", "PLUSPLUS", "MINUSMINUS", "A_DOUBLE_ARROW", "U_DOUBLE_ARROW", "A_ARROW", "U_ARROW", "A_ELLIPSIS", "U_ELLIPSIS", "COMMA", "PERIOD", "QUESTION_MARK", "EXCLAMATION_MARK", "L_force", "WsChar", "WS", "NL", "Constr", "Id", "Exponent", "Float", "Num", "Charcode", "String", "ROUND_BRACKET_OPEN", "ROUND_BRACKET_CLOSE", "SQUARE_BRACKET_OPEN", "SQUARE_BRACKET_CLOSE", "CURLY_BRACKET_OPEN", "CURLY_BRACKET_CLOSE", "UNDERSCORE", "COLON", "PRAGMA_LOG", "PRAGMA_PRINT", "PRAGMA_ASSERT", "PRAGMA_PROFILE"
    };
    public static final int L_end=72;
    public static final int U_NOT_EQUAL=117;
    public static final int TIMESTIMES=134;
    public static final int L_try=92;
    public static final int BigLetter=67;
    public static final int TOK_RELATE=130;
    public static final int ROUND_BRACKET_CLOSE=160;
    public static final int L_mod=104;
    public static final int MINUSMINUS=137;
    public static final int IMPORT_PREFIX=57;
    public static final int Newline=62;
    public static final int SQUARE_BRACKET_CLOSE=162;
    public static final int LINECOMMENT=65;
    public static final int MAP_OR_SET_OR_OBJ=14;
    public static final int EOF=-1;
    public static final int U_DOUBLE_ARROW=139;
    public static final int TYPEID=48;
    public static final int L_exception=89;
    public static final int Num=156;
    public static final int GREATER=121;
    public static final int EMPTY_MAP=15;
    public static final int POW=25;
    public static final int L_concurrent=94;
    public static final int L_catch=93;
    public static final int L_false=99;
    public static final int QUOTIENTQUOTIENT=135;
    public static final int L_nil=102;
    public static final int BEGIN=29;
    public static final int LIST_CONS=10;
    public static final int L_with=74;
    public static final int QUESTION_MARK=146;
    public static final int LESS=118;
    public static final int ROUND_BRACKET_OPEN=159;
    public static final int SQUARE_LIST=8;
    public static final int MODULEID=50;
    public static final int VAL=31;
    public static final int L_as=85;
    public static final int NL=151;
    public static final int MESSAGE_SEND=23;
    public static final int A_ARROW=140;
    public static final int A_DOUBLE_COLON=132;
    public static final int COMMENT=64;
    public static final int L_def=87;
    public static final int L_and=111;
    public static final int EXCEPTION=16;
    public static final int TYPE_EXPR=51;
    public static final int L_this=100;
    public static final int IMPORT_ALL=58;
    public static final int L_force=148;
    public static final int L_choose=95;
    public static final int PERIOD=145;
    public static final int PRIVATE=37;
    public static final int L_import=109;
    public static final int SmallLetter=66;
    public static final int NIL_TOKEN=5;
    public static final int PRAGMA_PRINT=168;
    public static final int CURLY_BRACKET_OPEN=163;
    public static final int L_typedef=106;
    public static final int UNDERSCORE=165;
    public static final int MATCH=17;
    public static final int U_LESS_EQ=120;
    public static final int TRY=18;
    public static final int L_to=90;
    public static final int Float=155;
    public static final int L_unittest=110;
    public static final int WS=150;
    public static final int IMPORT_MINUS=61;
    public static final int Charcode=157;
    public static final int TYPEOF=52;
    public static final int L_do=81;
    public static final int L_val=86;
    public static final int TOK_CONVERT=131;
    public static final int L_match=83;
    public static final int L_obj=73;
    public static final int WsChar=149;
    public static final int L_module=105;
    public static final int GETTYPE=40;
    public static final int Hex=70;
    public static final int L_private=108;
    public static final int TYPE_PATTERN=46;
    public static final int L_for=80;
    public static final int MEMOID_WEAK=43;
    public static final int RELATE=55;
    public static final int Letter=68;
    public static final int EXCLAMATION_MARK=147;
    public static final int PRAGMA_ASSERT=169;
    public static final int APPLY=12;
    public static final int U_ARROW=141;
    public static final int PRAGMA_LOG=167;
    public static final int A_EQUAL=114;
    public static final int PRIVATEID=44;
    public static final int L_else=77;
    public static final int DEF=35;
    public static final int L_typeof=107;
    public static final int L_begin=71;
    public static final int L_div=103;
    public static final int L_yield=82;
    public static final int PLUSPLUS=136;
    public static final int MEMOID_STRONG=42;
    public static final int L_while=79;
    public static final int CASES=19;
    public static final int POW_tok=129;
    public static final int Exponent=154;
    public static final int IF_PATTERN=45;
    public static final int A_ELLIPSIS=142;
    public static final int PARENTS_PLUS=26;
    public static final int A_DOUBLE_ARROW=138;
    public static final int INTERVAL=56;
    public static final int SQUARE_BRACKET_OPEN=161;
    public static final int IF=13;
    public static final int L_not=112;
    public static final int PROG=4;
    public static final int COMMA=144;
    public static final int OBJ=20;
    public static final int TYPEVAL=49;
    public static final int MEMOIZE=41;
    public static final int U_ELLIPSIS=143;
    public static final int TYPEDEF_CLAUSE=39;
    public static final int INNERVALUE_PATTERN=47;
    public static final int YIELD=36;
    public static final int COMPARE=11;
    public static final int U_GREATER_EQ=123;
    public static final int U_EQUAL=115;
    public static final int PLUS=125;
    public static final int String=158;
    public static final int LAMBDA=7;
    public static final int L_true=98;
    public static final int Id=153;
    public static final int L_or=113;
    public static final int WITH=30;
    public static final int L_in=88;
    public static final int CONVERT=54;
    public static final int L_lazy=96;
    public static final int NotNewline=63;
    public static final int L_then=76;
    public static final int QUOTIENT=128;
    public static final int TYPEDEF=38;
    public static final int L_if=75;
    public static final int IMPORT_SET=59;
    public static final int CURLY_BRACKET_CLOSE=164;
    public static final int UMINUS=24;
    public static final int FOR_EXPR=21;
    public static final int Constr=152;
    public static final int WHILE_DO=22;
    public static final int L_elseif=78;
    public static final int MINUS=126;
    public static final int Digit=69;
    public static final int L_memoize=97;
    public static final int CONVERSION=53;
    public static final int A_GREATER_EQ=122;
    public static final int ROUND_LIST=9;
    public static final int COLON=166;
    public static final int PRAGMA_PROFILE=170;
    public static final int SC=124;
    public static final int L_downto=91;
    public static final int ANY=6;
    public static final int L_random=101;
    public static final int A_NOT_EQUAL=116;
    public static final int BLOCK=28;
    public static final int ASSIGN=33;
    public static final int U_DOUBLE_COLON=133;
    public static final int OBJELEM_ASSIGN=32;
    public static final int ARROW=34;
    public static final int IMPORT_PLUS=60;
    public static final int L_case=84;
    public static final int TIMES=127;
    public static final int A_LESS_EQ=119;
    public static final int PARENTS_MUL=27;

    // delegates
    // delegators


        public babel17Parser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public babel17Parser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return babel17Parser.tokenNames; }
    public String getGrammarFileName() { return "/Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g"; }

     

    public boolean errorDuringParsing = false;
    public ArrayList<RecognitionException> parsingErrors = new ArrayList<RecognitionException>();


    @Override
    public void reportError(RecognitionException e) {
      errorDuringParsing = true;
      parsingErrors.add(e);
    }



    public static class prog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prog"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:133:1: prog : block EOF -> ^( PROG block ) ;
    public final babel17Parser.prog_return prog() throws RecognitionException {
        babel17Parser.prog_return retval = new babel17Parser.prog_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF2=null;
        babel17Parser.block_return block1 = null;


        CommonTree EOF2_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:133:7: ( block EOF -> ^( PROG block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:133:9: block EOF
            {
            pushFollow(FOLLOW_block_in_prog260);
            block1=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block1.getTree());
            EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_prog262); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF2);



            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 133:19: -> ^( PROG block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:133:22: ^( PROG block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROG, "PROG"), root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prog"

    public static class token_EQUAL_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_EQUAL"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:253:1: token_EQUAL : ( A_EQUAL | U_EQUAL );
    public final babel17Parser.token_EQUAL_return token_EQUAL() throws RecognitionException {
        babel17Parser.token_EQUAL_return retval = new babel17Parser.token_EQUAL_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set3=null;

        CommonTree set3_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:254:2: ( A_EQUAL | U_EQUAL )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set3=(Token)input.LT(1);
            if ( (input.LA(1)>=A_EQUAL && input.LA(1)<=U_EQUAL) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set3));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_EQUAL"

    public static class token_NOT_EQUAL_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_NOT_EQUAL"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:261:1: token_NOT_EQUAL : ( A_NOT_EQUAL | U_NOT_EQUAL );
    public final babel17Parser.token_NOT_EQUAL_return token_NOT_EQUAL() throws RecognitionException {
        babel17Parser.token_NOT_EQUAL_return retval = new babel17Parser.token_NOT_EQUAL_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set4=null;

        CommonTree set4_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:262:2: ( A_NOT_EQUAL | U_NOT_EQUAL )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set4=(Token)input.LT(1);
            if ( (input.LA(1)>=A_NOT_EQUAL && input.LA(1)<=U_NOT_EQUAL) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set4));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_NOT_EQUAL"

    public static class token_LESS_EQ_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_LESS_EQ"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:270:1: token_LESS_EQ : ( A_LESS_EQ | U_LESS_EQ );
    public final babel17Parser.token_LESS_EQ_return token_LESS_EQ() throws RecognitionException {
        babel17Parser.token_LESS_EQ_return retval = new babel17Parser.token_LESS_EQ_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set5=null;

        CommonTree set5_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:271:2: ( A_LESS_EQ | U_LESS_EQ )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set5=(Token)input.LT(1);
            if ( (input.LA(1)>=A_LESS_EQ && input.LA(1)<=U_LESS_EQ) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set5));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_LESS_EQ"

    public static class token_GREATER_EQ_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_GREATER_EQ"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:280:1: token_GREATER_EQ : ( A_GREATER_EQ | U_GREATER_EQ );
    public final babel17Parser.token_GREATER_EQ_return token_GREATER_EQ() throws RecognitionException {
        babel17Parser.token_GREATER_EQ_return retval = new babel17Parser.token_GREATER_EQ_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set6=null;

        CommonTree set6_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:281:2: ( A_GREATER_EQ | U_GREATER_EQ )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set6=(Token)input.LT(1);
            if ( (input.LA(1)>=A_GREATER_EQ && input.LA(1)<=U_GREATER_EQ) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set6));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_GREATER_EQ"

    public static class token_OR_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_OR"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:296:1: token_OR : L_or ;
    public final babel17Parser.token_OR_return token_OR() throws RecognitionException {
        babel17Parser.token_OR_return retval = new babel17Parser.token_OR_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_or7=null;

        CommonTree L_or7_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:296:9: ( L_or )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:296:11: L_or
            {
            root_0 = (CommonTree)adaptor.nil();

            L_or7=(Token)match(input,L_or,FOLLOW_L_or_in_token_OR1071); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_or7_tree = (CommonTree)adaptor.create(L_or7);
            adaptor.addChild(root_0, L_or7_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_OR"

    public static class token_AND_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_AND"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:297:1: token_AND : L_and ;
    public final babel17Parser.token_AND_return token_AND() throws RecognitionException {
        babel17Parser.token_AND_return retval = new babel17Parser.token_AND_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_and8=null;

        CommonTree L_and8_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:298:2: ( L_and )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:298:4: L_and
            {
            root_0 = (CommonTree)adaptor.nil();

            L_and8=(Token)match(input,L_and,FOLLOW_L_and_in_token_AND1079); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_and8_tree = (CommonTree)adaptor.create(L_and8);
            adaptor.addChild(root_0, L_and8_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_AND"

    public static class token_NOT_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_NOT"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:299:1: token_NOT : L_not ;
    public final babel17Parser.token_NOT_return token_NOT() throws RecognitionException {
        babel17Parser.token_NOT_return retval = new babel17Parser.token_NOT_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_not9=null;

        CommonTree L_not9_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:300:2: ( L_not )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:300:4: L_not
            {
            root_0 = (CommonTree)adaptor.nil();

            L_not9=(Token)match(input,L_not,FOLLOW_L_not_in_token_NOT1087); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_not9_tree = (CommonTree)adaptor.create(L_not9);
            adaptor.addChild(root_0, L_not9_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_NOT"

    public static class token_DOUBLE_COLON_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_DOUBLE_COLON"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:306:1: token_DOUBLE_COLON : ( A_DOUBLE_COLON | U_DOUBLE_COLON );
    public final babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON() throws RecognitionException {
        babel17Parser.token_DOUBLE_COLON_return retval = new babel17Parser.token_DOUBLE_COLON_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set10=null;

        CommonTree set10_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:307:2: ( A_DOUBLE_COLON | U_DOUBLE_COLON )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set10=(Token)input.LT(1);
            if ( (input.LA(1)>=A_DOUBLE_COLON && input.LA(1)<=U_DOUBLE_COLON) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set10));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_DOUBLE_COLON"

    public static class token_DOUBLE_ARROW_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_DOUBLE_ARROW"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:323:1: token_DOUBLE_ARROW : ( A_DOUBLE_ARROW | U_DOUBLE_ARROW );
    public final babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW() throws RecognitionException {
        babel17Parser.token_DOUBLE_ARROW_return retval = new babel17Parser.token_DOUBLE_ARROW_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set11=null;

        CommonTree set11_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:324:2: ( A_DOUBLE_ARROW | U_DOUBLE_ARROW )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set11=(Token)input.LT(1);
            if ( (input.LA(1)>=A_DOUBLE_ARROW && input.LA(1)<=U_DOUBLE_ARROW) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set11));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_DOUBLE_ARROW"

    public static class token_ARROW_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_ARROW"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:328:1: token_ARROW : ( A_ARROW | U_ARROW );
    public final babel17Parser.token_ARROW_return token_ARROW() throws RecognitionException {
        babel17Parser.token_ARROW_return retval = new babel17Parser.token_ARROW_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set12=null;

        CommonTree set12_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:329:2: ( A_ARROW | U_ARROW )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set12=(Token)input.LT(1);
            if ( (input.LA(1)>=A_ARROW && input.LA(1)<=U_ARROW) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set12));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_ARROW"

    public static class token_ELLIPSIS_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_ELLIPSIS"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:334:1: token_ELLIPSIS : ( A_ELLIPSIS | U_ELLIPSIS );
    public final babel17Parser.token_ELLIPSIS_return token_ELLIPSIS() throws RecognitionException {
        babel17Parser.token_ELLIPSIS_return retval = new babel17Parser.token_ELLIPSIS_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set13=null;

        CommonTree set13_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:335:2: ( A_ELLIPSIS | U_ELLIPSIS )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set13=(Token)input.LT(1);
            if ( (input.LA(1)>=A_ELLIPSIS && input.LA(1)<=U_ELLIPSIS) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set13));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_ELLIPSIS"

    public static class typeid_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeid"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:414:1: typeid : Id ( ( NL )? PERIOD ( NL )? Id )* -> ^( TYPEID ( Id )* ) ;
    public final babel17Parser.typeid_return typeid() throws RecognitionException {
        babel17Parser.typeid_return retval = new babel17Parser.typeid_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id14=null;
        Token NL15=null;
        Token PERIOD16=null;
        Token NL17=null;
        Token Id18=null;

        CommonTree Id14_tree=null;
        CommonTree NL15_tree=null;
        CommonTree PERIOD16_tree=null;
        CommonTree NL17_tree=null;
        CommonTree Id18_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:414:9: ( Id ( ( NL )? PERIOD ( NL )? Id )* -> ^( TYPEID ( Id )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:414:11: Id ( ( NL )? PERIOD ( NL )? Id )*
            {
            Id14=(Token)match(input,Id,FOLLOW_Id_in_typeid1727); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id14);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:414:14: ( ( NL )? PERIOD ( NL )? Id )*
            loop3:
            do {
                int alt3=2;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==NL) ) {
                    int LA3_1 = input.LA(2);

                    if ( (LA3_1==PERIOD) ) {
                        alt3=1;
                    }


                }
                else if ( (LA3_0==PERIOD) ) {
                    alt3=1;
                }


                switch (alt3) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:414:15: ( NL )? PERIOD ( NL )? Id
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:414:15: ( NL )?
            	    int alt1=2;
            	    int LA1_0 = input.LA(1);

            	    if ( (LA1_0==NL) ) {
            	        alt1=1;
            	    }
            	    switch (alt1) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:414:15: NL
            	            {
            	            NL15=(Token)match(input,NL,FOLLOW_NL_in_typeid1730); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL15);


            	            }
            	            break;

            	    }

            	    PERIOD16=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_typeid1733); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD16);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:414:26: ( NL )?
            	    int alt2=2;
            	    int LA2_0 = input.LA(1);

            	    if ( (LA2_0==NL) ) {
            	        alt2=1;
            	    }
            	    switch (alt2) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:414:26: NL
            	            {
            	            NL17=(Token)match(input,NL,FOLLOW_NL_in_typeid1735); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL17);


            	            }
            	            break;

            	    }

            	    Id18=(Token)match(input,Id,FOLLOW_Id_in_typeid1738); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_Id.add(Id18);


            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);



            // AST REWRITE
            // elements: Id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 414:35: -> ^( TYPEID ( Id )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:414:38: ^( TYPEID ( Id )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEID, "TYPEID"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:414:47: ( Id )*
                while ( stream_Id.hasNext() ) {
                    adaptor.addChild(root_1, stream_Id.nextNode());

                }
                stream_Id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeid"

    public static class typeannotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeannotation"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:416:1: typeannotation : ( typeid | '(' protected_expr ')' -> ^( TYPEVAL protected_expr ) );
    public final babel17Parser.typeannotation_return typeannotation() throws RecognitionException {
        babel17Parser.typeannotation_return retval = new babel17Parser.typeannotation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal20=null;
        Token char_literal22=null;
        babel17Parser.typeid_return typeid19 = null;

        babel17Parser.protected_expr_return protected_expr21 = null;


        CommonTree char_literal20_tree=null;
        CommonTree char_literal22_tree=null;
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:417:2: ( typeid | '(' protected_expr ')' -> ^( TYPEVAL protected_expr ) )
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==Id) ) {
                alt4=1;
            }
            else if ( (LA4_0==ROUND_BRACKET_OPEN) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:417:4: typeid
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeid_in_typeannotation1758);
                    typeid19=typeid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeid19.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:418:4: '(' protected_expr ')'
                    {
                    char_literal20=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_typeannotation1763); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal20);

                    pushFollow(FOLLOW_protected_expr_in_typeannotation1765);
                    protected_expr21=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr21.getTree());
                    char_literal22=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_typeannotation1767); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal22);



                    // AST REWRITE
                    // elements: protected_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 418:27: -> ^( TYPEVAL protected_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:418:30: ^( TYPEVAL protected_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEVAL, "TYPEVAL"), root_1);

                        adaptor.addChild(root_1, stream_protected_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeannotation"

    public static class pattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:1: pattern : ( Constr ( ( NL )? pattern )? -> ^( Constr ( pattern )? ) | primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )* -> ^( LIST_CONS ( primitive_pattern )* ) | L_exception ( NL )? pattern -> ^( L_exception pattern ) | token_ELLIPSIS );
    public final babel17Parser.pattern_return pattern() throws RecognitionException {
        babel17Parser.pattern_return retval = new babel17Parser.pattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Constr23=null;
        Token NL24=null;
        Token NL27=null;
        Token NL29=null;
        Token L_exception31=null;
        Token NL32=null;
        babel17Parser.pattern_return pattern25 = null;

        babel17Parser.primitive_pattern_return primitive_pattern26 = null;

        babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON28 = null;

        babel17Parser.primitive_pattern_return primitive_pattern30 = null;

        babel17Parser.pattern_return pattern33 = null;

        babel17Parser.token_ELLIPSIS_return token_ELLIPSIS34 = null;


        CommonTree Constr23_tree=null;
        CommonTree NL24_tree=null;
        CommonTree NL27_tree=null;
        CommonTree NL29_tree=null;
        CommonTree L_exception31_tree=null;
        CommonTree NL32_tree=null;
        RewriteRuleTokenStream stream_L_exception=new RewriteRuleTokenStream(adaptor,"token L_exception");
        RewriteRuleTokenStream stream_Constr=new RewriteRuleTokenStream(adaptor,"token Constr");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_primitive_pattern=new RewriteRuleSubtreeStream(adaptor,"rule primitive_pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_COLON=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_COLON");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:9: ( Constr ( ( NL )? pattern )? -> ^( Constr ( pattern )? ) | primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )* -> ^( LIST_CONS ( primitive_pattern )* ) | L_exception ( NL )? pattern -> ^( L_exception pattern ) | token_ELLIPSIS )
            int alt11=4;
            switch ( input.LA(1) ) {
            case Constr:
                {
                alt11=1;
                }
                break;
            case L_true:
            case L_false:
            case L_nil:
            case MINUS:
            case Id:
            case Num:
            case String:
            case ROUND_BRACKET_OPEN:
            case SQUARE_BRACKET_OPEN:
            case CURLY_BRACKET_OPEN:
            case UNDERSCORE:
                {
                alt11=2;
                }
                break;
            case L_exception:
                {
                alt11=3;
                }
                break;
            case A_ELLIPSIS:
            case U_ELLIPSIS:
                {
                alt11=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }

            switch (alt11) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:11: Constr ( ( NL )? pattern )?
                    {
                    Constr23=(Token)match(input,Constr,FOLLOW_Constr_in_pattern1784); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Constr.add(Constr23);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:18: ( ( NL )? pattern )?
                    int alt6=2;
                    int LA6_0 = input.LA(1);

                    if ( (LA6_0==NL) ) {
                        int LA6_1 = input.LA(2);

                        if ( (LA6_1==L_exception||(LA6_1>=L_true && LA6_1<=L_false)||LA6_1==L_nil||LA6_1==MINUS||(LA6_1>=A_ELLIPSIS && LA6_1<=U_ELLIPSIS)||(LA6_1>=Constr && LA6_1<=Id)||LA6_1==Num||(LA6_1>=String && LA6_1<=ROUND_BRACKET_OPEN)||LA6_1==SQUARE_BRACKET_OPEN||LA6_1==CURLY_BRACKET_OPEN||LA6_1==UNDERSCORE) ) {
                            alt6=1;
                        }
                    }
                    else if ( (LA6_0==L_exception||(LA6_0>=L_true && LA6_0<=L_false)||LA6_0==L_nil||LA6_0==MINUS||(LA6_0>=A_ELLIPSIS && LA6_0<=U_ELLIPSIS)||(LA6_0>=Constr && LA6_0<=Id)||LA6_0==Num||(LA6_0>=String && LA6_0<=ROUND_BRACKET_OPEN)||LA6_0==SQUARE_BRACKET_OPEN||LA6_0==CURLY_BRACKET_OPEN||LA6_0==UNDERSCORE) ) {
                        alt6=1;
                    }
                    switch (alt6) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:19: ( NL )? pattern
                            {
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:19: ( NL )?
                            int alt5=2;
                            int LA5_0 = input.LA(1);

                            if ( (LA5_0==NL) ) {
                                alt5=1;
                            }
                            switch (alt5) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:19: NL
                                    {
                                    NL24=(Token)match(input,NL,FOLLOW_NL_in_pattern1787); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL24);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_pattern_in_pattern1790);
                            pattern25=pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pattern.add(pattern25.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: pattern, Constr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 421:33: -> ^( Constr ( pattern )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:36: ^( Constr ( pattern )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_Constr.nextNode(), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:45: ( pattern )?
                        if ( stream_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_pattern.nextTree());

                        }
                        stream_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:422:4: primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )*
                    {
                    pushFollow(FOLLOW_primitive_pattern_in_pattern1806);
                    primitive_pattern26=primitive_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitive_pattern.add(primitive_pattern26.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:422:22: ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )*
                    loop9:
                    do {
                        int alt9=2;
                        int LA9_0 = input.LA(1);

                        if ( (LA9_0==NL) ) {
                            int LA9_1 = input.LA(2);

                            if ( ((LA9_1>=A_DOUBLE_COLON && LA9_1<=U_DOUBLE_COLON)) ) {
                                alt9=1;
                            }


                        }
                        else if ( ((LA9_0>=A_DOUBLE_COLON && LA9_0<=U_DOUBLE_COLON)) ) {
                            alt9=1;
                        }


                        switch (alt9) {
                    	case 1 :
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:422:23: ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern
                    	    {
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:422:23: ( NL )?
                    	    int alt7=2;
                    	    int LA7_0 = input.LA(1);

                    	    if ( (LA7_0==NL) ) {
                    	        alt7=1;
                    	    }
                    	    switch (alt7) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:422:23: NL
                    	            {
                    	            NL27=(Token)match(input,NL,FOLLOW_NL_in_pattern1809); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL27);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_token_DOUBLE_COLON_in_pattern1812);
                    	    token_DOUBLE_COLON28=token_DOUBLE_COLON();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_token_DOUBLE_COLON.add(token_DOUBLE_COLON28.getTree());
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:422:46: ( NL )?
                    	    int alt8=2;
                    	    int LA8_0 = input.LA(1);

                    	    if ( (LA8_0==NL) ) {
                    	        alt8=1;
                    	    }
                    	    switch (alt8) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:422:46: NL
                    	            {
                    	            NL29=(Token)match(input,NL,FOLLOW_NL_in_pattern1814); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL29);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_primitive_pattern_in_pattern1817);
                    	    primitive_pattern30=primitive_pattern();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_primitive_pattern.add(primitive_pattern30.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop9;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: primitive_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 423:3: -> ^( LIST_CONS ( primitive_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:423:6: ^( LIST_CONS ( primitive_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST_CONS, "LIST_CONS"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:423:18: ( primitive_pattern )*
                        while ( stream_primitive_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_primitive_pattern.nextTree());

                        }
                        stream_primitive_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:424:4: L_exception ( NL )? pattern
                    {
                    L_exception31=(Token)match(input,L_exception,FOLLOW_L_exception_in_pattern1836); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_exception.add(L_exception31);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:424:16: ( NL )?
                    int alt10=2;
                    int LA10_0 = input.LA(1);

                    if ( (LA10_0==NL) ) {
                        alt10=1;
                    }
                    switch (alt10) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:424:16: NL
                            {
                            NL32=(Token)match(input,NL,FOLLOW_NL_in_pattern1838); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL32);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_pattern_in_pattern1841);
                    pattern33=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern33.getTree());


                    // AST REWRITE
                    // elements: pattern, L_exception
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 424:28: -> ^( L_exception pattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:424:31: ^( L_exception pattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_L_exception.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_pattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:425:4: token_ELLIPSIS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_ELLIPSIS_in_pattern1854);
                    token_ELLIPSIS34=token_ELLIPSIS();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_ELLIPSIS34.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pattern"

    public static class defpattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defpattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:427:1: defpattern : ( primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )* -> ^( LIST_CONS ( primitive_pattern )* ) | Constr ( defpattern )? -> ^( Constr ( defpattern )? ) );
    public final babel17Parser.defpattern_return defpattern() throws RecognitionException {
        babel17Parser.defpattern_return retval = new babel17Parser.defpattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL36=null;
        Token NL38=null;
        Token Constr40=null;
        babel17Parser.primitive_pattern_return primitive_pattern35 = null;

        babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON37 = null;

        babel17Parser.primitive_pattern_return primitive_pattern39 = null;

        babel17Parser.defpattern_return defpattern41 = null;


        CommonTree NL36_tree=null;
        CommonTree NL38_tree=null;
        CommonTree Constr40_tree=null;
        RewriteRuleTokenStream stream_Constr=new RewriteRuleTokenStream(adaptor,"token Constr");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_primitive_pattern=new RewriteRuleSubtreeStream(adaptor,"rule primitive_pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_COLON=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_COLON");
        RewriteRuleSubtreeStream stream_defpattern=new RewriteRuleSubtreeStream(adaptor,"rule defpattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:2: ( primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )* -> ^( LIST_CONS ( primitive_pattern )* ) | Constr ( defpattern )? -> ^( Constr ( defpattern )? ) )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( ((LA16_0>=L_true && LA16_0<=L_false)||LA16_0==L_nil||LA16_0==MINUS||LA16_0==Id||LA16_0==Num||(LA16_0>=String && LA16_0<=ROUND_BRACKET_OPEN)||LA16_0==SQUARE_BRACKET_OPEN||LA16_0==CURLY_BRACKET_OPEN||LA16_0==UNDERSCORE) ) {
                alt16=1;
            }
            else if ( (LA16_0==Constr) ) {
                alt16=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }
            switch (alt16) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:4: primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )*
                    {
                    pushFollow(FOLLOW_primitive_pattern_in_defpattern1864);
                    primitive_pattern35=primitive_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitive_pattern.add(primitive_pattern35.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:22: ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )*
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( (LA14_0==NL) ) {
                            int LA14_1 = input.LA(2);

                            if ( ((LA14_1>=A_DOUBLE_COLON && LA14_1<=U_DOUBLE_COLON)) ) {
                                alt14=1;
                            }


                        }
                        else if ( ((LA14_0>=A_DOUBLE_COLON && LA14_0<=U_DOUBLE_COLON)) ) {
                            alt14=1;
                        }


                        switch (alt14) {
                    	case 1 :
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:23: ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern
                    	    {
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:23: ( NL )?
                    	    int alt12=2;
                    	    int LA12_0 = input.LA(1);

                    	    if ( (LA12_0==NL) ) {
                    	        alt12=1;
                    	    }
                    	    switch (alt12) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:23: NL
                    	            {
                    	            NL36=(Token)match(input,NL,FOLLOW_NL_in_defpattern1867); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL36);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_token_DOUBLE_COLON_in_defpattern1870);
                    	    token_DOUBLE_COLON37=token_DOUBLE_COLON();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_token_DOUBLE_COLON.add(token_DOUBLE_COLON37.getTree());
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:46: ( NL )?
                    	    int alt13=2;
                    	    int LA13_0 = input.LA(1);

                    	    if ( (LA13_0==NL) ) {
                    	        alt13=1;
                    	    }
                    	    switch (alt13) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:46: NL
                    	            {
                    	            NL38=(Token)match(input,NL,FOLLOW_NL_in_defpattern1872); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL38);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_primitive_pattern_in_defpattern1875);
                    	    primitive_pattern39=primitive_pattern();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_primitive_pattern.add(primitive_pattern39.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: primitive_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 429:3: -> ^( LIST_CONS ( primitive_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:429:6: ^( LIST_CONS ( primitive_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST_CONS, "LIST_CONS"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:429:18: ( primitive_pattern )*
                        while ( stream_primitive_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_primitive_pattern.nextTree());

                        }
                        stream_primitive_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:430:4: Constr ( defpattern )?
                    {
                    Constr40=(Token)match(input,Constr,FOLLOW_Constr_in_defpattern1893); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Constr.add(Constr40);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:430:11: ( defpattern )?
                    int alt15=2;
                    int LA15_0 = input.LA(1);

                    if ( ((LA15_0>=L_true && LA15_0<=L_false)||LA15_0==L_nil||LA15_0==MINUS||(LA15_0>=Constr && LA15_0<=Id)||LA15_0==Num||(LA15_0>=String && LA15_0<=ROUND_BRACKET_OPEN)||LA15_0==SQUARE_BRACKET_OPEN||LA15_0==CURLY_BRACKET_OPEN||LA15_0==UNDERSCORE) ) {
                        alt15=1;
                    }
                    switch (alt15) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:430:11: defpattern
                            {
                            pushFollow(FOLLOW_defpattern_in_defpattern1895);
                            defpattern41=defpattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_defpattern.add(defpattern41.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: Constr, defpattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 430:23: -> ^( Constr ( defpattern )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:430:26: ^( Constr ( defpattern )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_Constr.nextNode(), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:430:35: ( defpattern )?
                        if ( stream_defpattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_defpattern.nextTree());

                        }
                        stream_defpattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "defpattern"

    public static class casepattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "casepattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:432:1: casepattern : ( ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation -> ^( TYPE_PATTERN typeannotation pattern ) | pattern );
    public final babel17Parser.casepattern_return casepattern() throws RecognitionException {
        babel17Parser.casepattern_return retval = new babel17Parser.casepattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL43=null;
        Token char_literal44=null;
        Token NL45=null;
        babel17Parser.pattern_return pattern42 = null;

        babel17Parser.typeannotation_return typeannotation46 = null;

        babel17Parser.pattern_return pattern47 = null;


        CommonTree NL43_tree=null;
        CommonTree char_literal44_tree=null;
        CommonTree NL45_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_typeannotation=new RewriteRuleSubtreeStream(adaptor,"rule typeannotation");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:433:2: ( ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation -> ^( TYPE_PATTERN typeannotation pattern ) | pattern )
            int alt19=2;
            alt19 = dfa19.predict(input);
            switch (alt19) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:433:5: ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation
                    {
                    pushFollow(FOLLOW_pattern_in_casepattern1926);
                    pattern42=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern42.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:433:34: ( NL )?
                    int alt17=2;
                    int LA17_0 = input.LA(1);

                    if ( (LA17_0==NL) ) {
                        alt17=1;
                    }
                    switch (alt17) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:433:34: NL
                            {
                            NL43=(Token)match(input,NL,FOLLOW_NL_in_casepattern1928); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL43);


                            }
                            break;

                    }

                    char_literal44=(Token)match(input,COLON,FOLLOW_COLON_in_casepattern1931); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(char_literal44);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:433:42: ( NL )?
                    int alt18=2;
                    int LA18_0 = input.LA(1);

                    if ( (LA18_0==NL) ) {
                        alt18=1;
                    }
                    switch (alt18) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:433:42: NL
                            {
                            NL45=(Token)match(input,NL,FOLLOW_NL_in_casepattern1933); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL45);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeannotation_in_casepattern1936);
                    typeannotation46=typeannotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeannotation.add(typeannotation46.getTree());


                    // AST REWRITE
                    // elements: pattern, typeannotation
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 433:61: -> ^( TYPE_PATTERN typeannotation pattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:433:64: ^( TYPE_PATTERN typeannotation pattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_PATTERN, "TYPE_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_typeannotation.nextTree());
                        adaptor.addChild(root_1, stream_pattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:434:4: pattern
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pattern_in_casepattern1951);
                    pattern47=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pattern47.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "casepattern"

    public static class bracket_pattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracket_pattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:437:1: bracket_pattern : ( ( Id ( NL )? L_as )=> Id ( NL )? L_as ( NL )? pattern -> ^( L_as Id pattern ) | ( protected_expr ( NL )? QUESTION_MARK )=> protected_expr ( NL )? QUESTION_MARK ( ( NL )? pattern )? -> ^( QUESTION_MARK protected_expr ( pattern )? ) | ( protected_expr ( NL )? EXCLAMATION_MARK )=> protected_expr ( NL )? EXCLAMATION_MARK ( ( NL )? pattern )? -> ^( EXCLAMATION_MARK protected_expr ( pattern )? ) | ( Id pattern )=> Id pattern -> ^( INNERVALUE_PATTERN Id pattern ) | L_val ( NL )? protected_expr_nc -> ^( L_val protected_expr_nc ) | L_for ( NL )? ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )? L_end -> ^( L_for ( bracket_pattern )* ) | ( pattern ( NL )? L_if )=> pattern ( NL )? L_if ( NL )? protected_expr_nc -> ^( IF_PATTERN pattern protected_expr_nc ) | ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation -> ^( TYPE_PATTERN typeannotation pattern ) | pattern );
    public final babel17Parser.bracket_pattern_return bracket_pattern() throws RecognitionException {
        babel17Parser.bracket_pattern_return retval = new babel17Parser.bracket_pattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id48=null;
        Token NL49=null;
        Token L_as50=null;
        Token NL51=null;
        Token NL54=null;
        Token QUESTION_MARK55=null;
        Token NL56=null;
        Token NL59=null;
        Token EXCLAMATION_MARK60=null;
        Token NL61=null;
        Token Id63=null;
        Token L_val65=null;
        Token NL66=null;
        Token L_for68=null;
        Token NL69=null;
        Token NL71=null;
        Token COMMA72=null;
        Token NL73=null;
        Token NL75=null;
        Token L_end76=null;
        Token NL78=null;
        Token L_if79=null;
        Token NL80=null;
        Token NL83=null;
        Token char_literal84=null;
        Token NL85=null;
        babel17Parser.pattern_return pattern52 = null;

        babel17Parser.protected_expr_return protected_expr53 = null;

        babel17Parser.pattern_return pattern57 = null;

        babel17Parser.protected_expr_return protected_expr58 = null;

        babel17Parser.pattern_return pattern62 = null;

        babel17Parser.pattern_return pattern64 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc67 = null;

        babel17Parser.bracket_pattern_return bracket_pattern70 = null;

        babel17Parser.bracket_pattern_return bracket_pattern74 = null;

        babel17Parser.pattern_return pattern77 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc81 = null;

        babel17Parser.pattern_return pattern82 = null;

        babel17Parser.typeannotation_return typeannotation86 = null;

        babel17Parser.pattern_return pattern87 = null;


        CommonTree Id48_tree=null;
        CommonTree NL49_tree=null;
        CommonTree L_as50_tree=null;
        CommonTree NL51_tree=null;
        CommonTree NL54_tree=null;
        CommonTree QUESTION_MARK55_tree=null;
        CommonTree NL56_tree=null;
        CommonTree NL59_tree=null;
        CommonTree EXCLAMATION_MARK60_tree=null;
        CommonTree NL61_tree=null;
        CommonTree Id63_tree=null;
        CommonTree L_val65_tree=null;
        CommonTree NL66_tree=null;
        CommonTree L_for68_tree=null;
        CommonTree NL69_tree=null;
        CommonTree NL71_tree=null;
        CommonTree COMMA72_tree=null;
        CommonTree NL73_tree=null;
        CommonTree NL75_tree=null;
        CommonTree L_end76_tree=null;
        CommonTree NL78_tree=null;
        CommonTree L_if79_tree=null;
        CommonTree NL80_tree=null;
        CommonTree NL83_tree=null;
        CommonTree char_literal84_tree=null;
        CommonTree NL85_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_EXCLAMATION_MARK=new RewriteRuleTokenStream(adaptor,"token EXCLAMATION_MARK");
        RewriteRuleTokenStream stream_L_for=new RewriteRuleTokenStream(adaptor,"token L_for");
        RewriteRuleTokenStream stream_L_as=new RewriteRuleTokenStream(adaptor,"token L_as");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_L_val=new RewriteRuleTokenStream(adaptor,"token L_val");
        RewriteRuleTokenStream stream_L_if=new RewriteRuleTokenStream(adaptor,"token L_if");
        RewriteRuleTokenStream stream_QUESTION_MARK=new RewriteRuleTokenStream(adaptor,"token QUESTION_MARK");
        RewriteRuleSubtreeStream stream_typeannotation=new RewriteRuleSubtreeStream(adaptor,"rule typeannotation");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_protected_expr_nc=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr_nc");
        RewriteRuleSubtreeStream stream_bracket_pattern=new RewriteRuleSubtreeStream(adaptor,"rule bracket_pattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:438:2: ( ( Id ( NL )? L_as )=> Id ( NL )? L_as ( NL )? pattern -> ^( L_as Id pattern ) | ( protected_expr ( NL )? QUESTION_MARK )=> protected_expr ( NL )? QUESTION_MARK ( ( NL )? pattern )? -> ^( QUESTION_MARK protected_expr ( pattern )? ) | ( protected_expr ( NL )? EXCLAMATION_MARK )=> protected_expr ( NL )? EXCLAMATION_MARK ( ( NL )? pattern )? -> ^( EXCLAMATION_MARK protected_expr ( pattern )? ) | ( Id pattern )=> Id pattern -> ^( INNERVALUE_PATTERN Id pattern ) | L_val ( NL )? protected_expr_nc -> ^( L_val protected_expr_nc ) | L_for ( NL )? ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )? L_end -> ^( L_for ( bracket_pattern )* ) | ( pattern ( NL )? L_if )=> pattern ( NL )? L_if ( NL )? protected_expr_nc -> ^( IF_PATTERN pattern protected_expr_nc ) | ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation -> ^( TYPE_PATTERN typeannotation pattern ) | pattern )
            int alt39=9;
            alt39 = dfa39.predict(input);
            switch (alt39) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:438:10: ( Id ( NL )? L_as )=> Id ( NL )? L_as ( NL )? pattern
                    {
                    Id48=(Token)match(input,Id,FOLLOW_Id_in_bracket_pattern1979); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id48);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:438:30: ( NL )?
                    int alt20=2;
                    int LA20_0 = input.LA(1);

                    if ( (LA20_0==NL) ) {
                        alt20=1;
                    }
                    switch (alt20) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:438:30: NL
                            {
                            NL49=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern1981); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL49);


                            }
                            break;

                    }

                    L_as50=(Token)match(input,L_as,FOLLOW_L_as_in_bracket_pattern1984); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_as.add(L_as50);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:438:39: ( NL )?
                    int alt21=2;
                    int LA21_0 = input.LA(1);

                    if ( (LA21_0==NL) ) {
                        alt21=1;
                    }
                    switch (alt21) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:438:39: NL
                            {
                            NL51=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern1986); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL51);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_pattern_in_bracket_pattern1989);
                    pattern52=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern52.getTree());


                    // AST REWRITE
                    // elements: pattern, Id, L_as
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 438:51: -> ^( L_as Id pattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:438:54: ^( L_as Id pattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_L_as.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());
                        adaptor.addChild(root_1, stream_pattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:439:4: ( protected_expr ( NL )? QUESTION_MARK )=> protected_expr ( NL )? QUESTION_MARK ( ( NL )? pattern )?
                    {
                    pushFollow(FOLLOW_protected_expr_in_bracket_pattern2018);
                    protected_expr53=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr53.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:18: ( NL )?
                    int alt22=2;
                    int LA22_0 = input.LA(1);

                    if ( (LA22_0==NL) ) {
                        alt22=1;
                    }
                    switch (alt22) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:18: NL
                            {
                            NL54=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2020); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL54);


                            }
                            break;

                    }

                    QUESTION_MARK55=(Token)match(input,QUESTION_MARK,FOLLOW_QUESTION_MARK_in_bracket_pattern2023); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION_MARK.add(QUESTION_MARK55);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:36: ( ( NL )? pattern )?
                    int alt24=2;
                    int LA24_0 = input.LA(1);

                    if ( (LA24_0==NL) ) {
                        int LA24_1 = input.LA(2);

                        if ( (LA24_1==L_exception||(LA24_1>=L_true && LA24_1<=L_false)||LA24_1==L_nil||LA24_1==MINUS||(LA24_1>=A_ELLIPSIS && LA24_1<=U_ELLIPSIS)||(LA24_1>=Constr && LA24_1<=Id)||LA24_1==Num||(LA24_1>=String && LA24_1<=ROUND_BRACKET_OPEN)||LA24_1==SQUARE_BRACKET_OPEN||LA24_1==CURLY_BRACKET_OPEN||LA24_1==UNDERSCORE) ) {
                            alt24=1;
                        }
                    }
                    else if ( (LA24_0==L_exception||(LA24_0>=L_true && LA24_0<=L_false)||LA24_0==L_nil||LA24_0==MINUS||(LA24_0>=A_ELLIPSIS && LA24_0<=U_ELLIPSIS)||(LA24_0>=Constr && LA24_0<=Id)||LA24_0==Num||(LA24_0>=String && LA24_0<=ROUND_BRACKET_OPEN)||LA24_0==SQUARE_BRACKET_OPEN||LA24_0==CURLY_BRACKET_OPEN||LA24_0==UNDERSCORE) ) {
                        alt24=1;
                    }
                    switch (alt24) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:37: ( NL )? pattern
                            {
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:37: ( NL )?
                            int alt23=2;
                            int LA23_0 = input.LA(1);

                            if ( (LA23_0==NL) ) {
                                alt23=1;
                            }
                            switch (alt23) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:37: NL
                                    {
                                    NL56=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2026); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL56);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_pattern_in_bracket_pattern2029);
                            pattern57=pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pattern.add(pattern57.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: pattern, protected_expr, QUESTION_MARK
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 440:51: -> ^( QUESTION_MARK protected_expr ( pattern )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:54: ^( QUESTION_MARK protected_expr ( pattern )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_QUESTION_MARK.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_protected_expr.nextTree());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:85: ( pattern )?
                        if ( stream_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_pattern.nextTree());

                        }
                        stream_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:441:4: ( protected_expr ( NL )? EXCLAMATION_MARK )=> protected_expr ( NL )? EXCLAMATION_MARK ( ( NL )? pattern )?
                    {
                    pushFollow(FOLLOW_protected_expr_in_bracket_pattern2061);
                    protected_expr58=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr58.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:442:18: ( NL )?
                    int alt25=2;
                    int LA25_0 = input.LA(1);

                    if ( (LA25_0==NL) ) {
                        alt25=1;
                    }
                    switch (alt25) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:442:18: NL
                            {
                            NL59=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2063); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL59);


                            }
                            break;

                    }

                    EXCLAMATION_MARK60=(Token)match(input,EXCLAMATION_MARK,FOLLOW_EXCLAMATION_MARK_in_bracket_pattern2066); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EXCLAMATION_MARK.add(EXCLAMATION_MARK60);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:442:39: ( ( NL )? pattern )?
                    int alt27=2;
                    int LA27_0 = input.LA(1);

                    if ( (LA27_0==NL) ) {
                        int LA27_1 = input.LA(2);

                        if ( (LA27_1==L_exception||(LA27_1>=L_true && LA27_1<=L_false)||LA27_1==L_nil||LA27_1==MINUS||(LA27_1>=A_ELLIPSIS && LA27_1<=U_ELLIPSIS)||(LA27_1>=Constr && LA27_1<=Id)||LA27_1==Num||(LA27_1>=String && LA27_1<=ROUND_BRACKET_OPEN)||LA27_1==SQUARE_BRACKET_OPEN||LA27_1==CURLY_BRACKET_OPEN||LA27_1==UNDERSCORE) ) {
                            alt27=1;
                        }
                    }
                    else if ( (LA27_0==L_exception||(LA27_0>=L_true && LA27_0<=L_false)||LA27_0==L_nil||LA27_0==MINUS||(LA27_0>=A_ELLIPSIS && LA27_0<=U_ELLIPSIS)||(LA27_0>=Constr && LA27_0<=Id)||LA27_0==Num||(LA27_0>=String && LA27_0<=ROUND_BRACKET_OPEN)||LA27_0==SQUARE_BRACKET_OPEN||LA27_0==CURLY_BRACKET_OPEN||LA27_0==UNDERSCORE) ) {
                        alt27=1;
                    }
                    switch (alt27) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:442:40: ( NL )? pattern
                            {
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:442:40: ( NL )?
                            int alt26=2;
                            int LA26_0 = input.LA(1);

                            if ( (LA26_0==NL) ) {
                                alt26=1;
                            }
                            switch (alt26) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:442:40: NL
                                    {
                                    NL61=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2069); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL61);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_pattern_in_bracket_pattern2072);
                            pattern62=pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pattern.add(pattern62.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: pattern, protected_expr, EXCLAMATION_MARK
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 442:54: -> ^( EXCLAMATION_MARK protected_expr ( pattern )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:442:57: ^( EXCLAMATION_MARK protected_expr ( pattern )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_EXCLAMATION_MARK.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_protected_expr.nextTree());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:442:91: ( pattern )?
                        if ( stream_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_pattern.nextTree());

                        }
                        stream_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:443:4: ( Id pattern )=> Id pattern
                    {
                    Id63=(Token)match(input,Id,FOLLOW_Id_in_bracket_pattern2098); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id63);

                    pushFollow(FOLLOW_pattern_in_bracket_pattern2100);
                    pattern64=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern64.getTree());


                    // AST REWRITE
                    // elements: pattern, Id
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 443:31: -> ^( INNERVALUE_PATTERN Id pattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:443:34: ^( INNERVALUE_PATTERN Id pattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERVALUE_PATTERN, "INNERVALUE_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());
                        adaptor.addChild(root_1, stream_pattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:444:4: L_val ( NL )? protected_expr_nc
                    {
                    L_val65=(Token)match(input,L_val,FOLLOW_L_val_in_bracket_pattern2115); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_val.add(L_val65);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:444:10: ( NL )?
                    int alt28=2;
                    int LA28_0 = input.LA(1);

                    if ( (LA28_0==NL) ) {
                        alt28=1;
                    }
                    switch (alt28) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:444:10: NL
                            {
                            NL66=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2117); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL66);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_bracket_pattern2120);
                    protected_expr_nc67=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc67.getTree());


                    // AST REWRITE
                    // elements: protected_expr_nc, L_val
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 444:32: -> ^( L_val protected_expr_nc )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:444:35: ^( L_val protected_expr_nc )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_L_val.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_protected_expr_nc.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:10: L_for ( NL )? ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )? L_end
                    {
                    L_for68=(Token)match(input,L_for,FOLLOW_L_for_in_bracket_pattern2139); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_for.add(L_for68);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:16: ( NL )?
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==NL) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:16: NL
                            {
                            NL69=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2141); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL69);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:20: ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )?
                    int alt34=2;
                    int LA34_0 = input.LA(1);

                    if ( (LA34_0==L_begin||(LA34_0>=L_obj && LA34_0<=L_if)||(LA34_0>=L_while && LA34_0<=L_for)||LA34_0==L_match||LA34_0==L_val||LA34_0==L_exception||LA34_0==L_try||(LA34_0>=L_concurrent && LA34_0<=L_lazy)||(LA34_0>=L_true && LA34_0<=L_nil)||LA34_0==L_typeof||LA34_0==L_not||LA34_0==MINUS||(LA34_0>=A_ELLIPSIS && LA34_0<=U_ELLIPSIS)||LA34_0==L_force||(LA34_0>=Constr && LA34_0<=Id)||(LA34_0>=Float && LA34_0<=Num)||(LA34_0>=String && LA34_0<=ROUND_BRACKET_OPEN)||LA34_0==SQUARE_BRACKET_OPEN||LA34_0==CURLY_BRACKET_OPEN||LA34_0==UNDERSCORE) ) {
                        alt34=1;
                    }
                    switch (alt34) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:21: bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )?
                            {
                            pushFollow(FOLLOW_bracket_pattern_in_bracket_pattern2145);
                            bracket_pattern70=bracket_pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern70.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:37: ( ( NL )? COMMA ( NL )? bracket_pattern )*
                            loop32:
                            do {
                                int alt32=2;
                                int LA32_0 = input.LA(1);

                                if ( (LA32_0==NL) ) {
                                    int LA32_1 = input.LA(2);

                                    if ( (LA32_1==COMMA) ) {
                                        alt32=1;
                                    }


                                }
                                else if ( (LA32_0==COMMA) ) {
                                    alt32=1;
                                }


                                switch (alt32) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:39: ( NL )? COMMA ( NL )? bracket_pattern
                            	    {
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:39: ( NL )?
                            	    int alt30=2;
                            	    int LA30_0 = input.LA(1);

                            	    if ( (LA30_0==NL) ) {
                            	        alt30=1;
                            	    }
                            	    switch (alt30) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:39: NL
                            	            {
                            	            NL71=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2149); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL71);


                            	            }
                            	            break;

                            	    }

                            	    COMMA72=(Token)match(input,COMMA,FOLLOW_COMMA_in_bracket_pattern2152); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA72);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:49: ( NL )?
                            	    int alt31=2;
                            	    int LA31_0 = input.LA(1);

                            	    if ( (LA31_0==NL) ) {
                            	        alt31=1;
                            	    }
                            	    switch (alt31) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:49: NL
                            	            {
                            	            NL73=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2154); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL73);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_bracket_pattern_in_bracket_pattern2157);
                            	    bracket_pattern74=bracket_pattern();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern74.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop32;
                                }
                            } while (true);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:72: ( NL )?
                            int alt33=2;
                            int LA33_0 = input.LA(1);

                            if ( (LA33_0==NL) ) {
                                alt33=1;
                            }
                            switch (alt33) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:72: NL
                                    {
                                    NL75=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2162); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL75);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    L_end76=(Token)match(input,L_end,FOLLOW_L_end_in_bracket_pattern2167); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_end.add(L_end76);



                    // AST REWRITE
                    // elements: L_for, bracket_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 445:84: -> ^( L_for ( bracket_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:87: ^( L_for ( bracket_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_L_for.nextNode(), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:95: ( bracket_pattern )*
                        while ( stream_bracket_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_bracket_pattern.nextTree());

                        }
                        stream_bracket_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:4: ( pattern ( NL )? L_if )=> pattern ( NL )? L_if ( NL )? protected_expr_nc
                    {
                    pushFollow(FOLLOW_pattern_in_bracket_pattern2192);
                    pattern77=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern77.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:34: ( NL )?
                    int alt35=2;
                    int LA35_0 = input.LA(1);

                    if ( (LA35_0==NL) ) {
                        alt35=1;
                    }
                    switch (alt35) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:34: NL
                            {
                            NL78=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2194); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL78);


                            }
                            break;

                    }

                    L_if79=(Token)match(input,L_if,FOLLOW_L_if_in_bracket_pattern2197); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_if.add(L_if79);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:43: ( NL )?
                    int alt36=2;
                    int LA36_0 = input.LA(1);

                    if ( (LA36_0==NL) ) {
                        alt36=1;
                    }
                    switch (alt36) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:43: NL
                            {
                            NL80=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2199); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL80);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_bracket_pattern2202);
                    protected_expr_nc81=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc81.getTree());


                    // AST REWRITE
                    // elements: protected_expr_nc, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 446:65: -> ^( IF_PATTERN pattern protected_expr_nc )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:68: ^( IF_PATTERN pattern protected_expr_nc )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IF_PATTERN, "IF_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_pattern.nextTree());
                        adaptor.addChild(root_1, stream_protected_expr_nc.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:4: ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation
                    {
                    pushFollow(FOLLOW_pattern_in_bracket_pattern2228);
                    pattern82=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern82.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:33: ( NL )?
                    int alt37=2;
                    int LA37_0 = input.LA(1);

                    if ( (LA37_0==NL) ) {
                        alt37=1;
                    }
                    switch (alt37) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:33: NL
                            {
                            NL83=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2230); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL83);


                            }
                            break;

                    }

                    char_literal84=(Token)match(input,COLON,FOLLOW_COLON_in_bracket_pattern2233); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(char_literal84);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:41: ( NL )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==NL) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:41: NL
                            {
                            NL85=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2235); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL85);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeannotation_in_bracket_pattern2238);
                    typeannotation86=typeannotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeannotation.add(typeannotation86.getTree());


                    // AST REWRITE
                    // elements: pattern, typeannotation
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 447:60: -> ^( TYPE_PATTERN typeannotation pattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:63: ^( TYPE_PATTERN typeannotation pattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_PATTERN, "TYPE_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_typeannotation.nextTree());
                        adaptor.addChild(root_1, stream_pattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:448:4: pattern
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pattern_in_bracket_pattern2253);
                    pattern87=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pattern87.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bracket_pattern"

    public static class arrow_or_assign_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrow_or_assign"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:1: arrow_or_assign : ( token_ARROW -> ^( ARROW ) | ASSIGN -> ^( ASSIGN ) );
    public final babel17Parser.arrow_or_assign_return arrow_or_assign() throws RecognitionException {
        babel17Parser.arrow_or_assign_return retval = new babel17Parser.arrow_or_assign_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ASSIGN89=null;
        babel17Parser.token_ARROW_return token_ARROW88 = null;


        CommonTree ASSIGN89_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_token_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_ARROW");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:451:2: ( token_ARROW -> ^( ARROW ) | ASSIGN -> ^( ASSIGN ) )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( ((LA40_0>=A_ARROW && LA40_0<=U_ARROW)) ) {
                alt40=1;
            }
            else if ( (LA40_0==ASSIGN) ) {
                alt40=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:451:4: token_ARROW
                    {
                    pushFollow(FOLLOW_token_ARROW_in_arrow_or_assign2263);
                    token_ARROW88=token_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_ARROW.add(token_ARROW88.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 451:16: -> ^( ARROW )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:451:19: ^( ARROW )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARROW, "ARROW"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:4: ASSIGN
                    {
                    ASSIGN89=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_arrow_or_assign2274); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN89);



                    // AST REWRITE
                    // elements: ASSIGN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 452:11: -> ^( ASSIGN )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:14: ^( ASSIGN )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_ASSIGN.nextNode(), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrow_or_assign"

    public static class mselem_pattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mselem_pattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:454:1: mselem_pattern : bracket_pattern ( ( NL )? arrow_or_assign ( NL )? bracket_pattern )? -> ^( NIL_TOKEN ^( NIL_TOKEN ( bracket_pattern )* ) ( arrow_or_assign )* ) ;
    public final babel17Parser.mselem_pattern_return mselem_pattern() throws RecognitionException {
        babel17Parser.mselem_pattern_return retval = new babel17Parser.mselem_pattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL91=null;
        Token NL93=null;
        babel17Parser.bracket_pattern_return bracket_pattern90 = null;

        babel17Parser.arrow_or_assign_return arrow_or_assign92 = null;

        babel17Parser.bracket_pattern_return bracket_pattern94 = null;


        CommonTree NL91_tree=null;
        CommonTree NL93_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_arrow_or_assign=new RewriteRuleSubtreeStream(adaptor,"rule arrow_or_assign");
        RewriteRuleSubtreeStream stream_bracket_pattern=new RewriteRuleSubtreeStream(adaptor,"rule bracket_pattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:455:2: ( bracket_pattern ( ( NL )? arrow_or_assign ( NL )? bracket_pattern )? -> ^( NIL_TOKEN ^( NIL_TOKEN ( bracket_pattern )* ) ( arrow_or_assign )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:455:4: bracket_pattern ( ( NL )? arrow_or_assign ( NL )? bracket_pattern )?
            {
            pushFollow(FOLLOW_bracket_pattern_in_mselem_pattern2289);
            bracket_pattern90=bracket_pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern90.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:455:20: ( ( NL )? arrow_or_assign ( NL )? bracket_pattern )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==NL) ) {
                int LA43_1 = input.LA(2);

                if ( (LA43_1==ASSIGN||(LA43_1>=A_ARROW && LA43_1<=U_ARROW)) ) {
                    alt43=1;
                }
            }
            else if ( (LA43_0==ASSIGN||(LA43_0>=A_ARROW && LA43_0<=U_ARROW)) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:455:21: ( NL )? arrow_or_assign ( NL )? bracket_pattern
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:455:21: ( NL )?
                    int alt41=2;
                    int LA41_0 = input.LA(1);

                    if ( (LA41_0==NL) ) {
                        alt41=1;
                    }
                    switch (alt41) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:455:21: NL
                            {
                            NL91=(Token)match(input,NL,FOLLOW_NL_in_mselem_pattern2292); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL91);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_arrow_or_assign_in_mselem_pattern2295);
                    arrow_or_assign92=arrow_or_assign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrow_or_assign.add(arrow_or_assign92.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:455:41: ( NL )?
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==NL) ) {
                        alt42=1;
                    }
                    switch (alt42) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:455:41: NL
                            {
                            NL93=(Token)match(input,NL,FOLLOW_NL_in_mselem_pattern2297); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL93);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_bracket_pattern_in_mselem_pattern2300);
                    bracket_pattern94=bracket_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern94.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: bracket_pattern, arrow_or_assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 456:3: -> ^( NIL_TOKEN ^( NIL_TOKEN ( bracket_pattern )* ) ( arrow_or_assign )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:456:6: ^( NIL_TOKEN ^( NIL_TOKEN ( bracket_pattern )* ) ( arrow_or_assign )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:456:18: ^( NIL_TOKEN ( bracket_pattern )* )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:456:30: ( bracket_pattern )*
                while ( stream_bracket_pattern.hasNext() ) {
                    adaptor.addChild(root_2, stream_bracket_pattern.nextTree());

                }
                stream_bracket_pattern.reset();

                adaptor.addChild(root_1, root_2);
                }
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:456:48: ( arrow_or_assign )*
                while ( stream_arrow_or_assign.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrow_or_assign.nextTree());

                }
                stream_arrow_or_assign.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mselem_pattern"

    public static class primitive_pattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitive_pattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:458:1: primitive_pattern : ( Id | '_' -> ANY | String | Num | L_true | L_false | L_nil | '-' ( NL )? Num -> ^( UMINUS Num ) | '[' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )? ']' -> ^( SQUARE_LIST ( bracket_pattern )* ) | '(' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) ) | '{' ( NL )? ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) );
    public final babel17Parser.primitive_pattern_return primitive_pattern() throws RecognitionException {
        babel17Parser.primitive_pattern_return retval = new babel17Parser.primitive_pattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id95=null;
        Token char_literal96=null;
        Token String97=null;
        Token Num98=null;
        Token L_true99=null;
        Token L_false100=null;
        Token L_nil101=null;
        Token char_literal102=null;
        Token NL103=null;
        Token Num104=null;
        Token char_literal105=null;
        Token NL106=null;
        Token NL108=null;
        Token COMMA109=null;
        Token NL110=null;
        Token NL112=null;
        Token char_literal113=null;
        Token char_literal114=null;
        Token NL115=null;
        Token NL117=null;
        Token COMMA118=null;
        Token NL119=null;
        Token NL121=null;
        Token COMMA122=null;
        Token NL123=null;
        Token char_literal124=null;
        Token char_literal125=null;
        Token NL126=null;
        Token NL128=null;
        Token COMMA129=null;
        Token NL130=null;
        Token NL132=null;
        Token char_literal133=null;
        Token char_literal134=null;
        Token NL135=null;
        Token NL137=null;
        Token char_literal138=null;
        babel17Parser.bracket_pattern_return bracket_pattern107 = null;

        babel17Parser.bracket_pattern_return bracket_pattern111 = null;

        babel17Parser.bracket_pattern_return bracket_pattern116 = null;

        babel17Parser.bracket_pattern_return bracket_pattern120 = null;

        babel17Parser.mselem_pattern_return mselem_pattern127 = null;

        babel17Parser.mselem_pattern_return mselem_pattern131 = null;

        babel17Parser.token_ARROW_return token_ARROW136 = null;


        CommonTree Id95_tree=null;
        CommonTree char_literal96_tree=null;
        CommonTree String97_tree=null;
        CommonTree Num98_tree=null;
        CommonTree L_true99_tree=null;
        CommonTree L_false100_tree=null;
        CommonTree L_nil101_tree=null;
        CommonTree char_literal102_tree=null;
        CommonTree NL103_tree=null;
        CommonTree Num104_tree=null;
        CommonTree char_literal105_tree=null;
        CommonTree NL106_tree=null;
        CommonTree NL108_tree=null;
        CommonTree COMMA109_tree=null;
        CommonTree NL110_tree=null;
        CommonTree NL112_tree=null;
        CommonTree char_literal113_tree=null;
        CommonTree char_literal114_tree=null;
        CommonTree NL115_tree=null;
        CommonTree NL117_tree=null;
        CommonTree COMMA118_tree=null;
        CommonTree NL119_tree=null;
        CommonTree NL121_tree=null;
        CommonTree COMMA122_tree=null;
        CommonTree NL123_tree=null;
        CommonTree char_literal124_tree=null;
        CommonTree char_literal125_tree=null;
        CommonTree NL126_tree=null;
        CommonTree NL128_tree=null;
        CommonTree COMMA129_tree=null;
        CommonTree NL130_tree=null;
        CommonTree NL132_tree=null;
        CommonTree char_literal133_tree=null;
        CommonTree char_literal134_tree=null;
        CommonTree NL135_tree=null;
        CommonTree NL137_tree=null;
        CommonTree char_literal138_tree=null;
        RewriteRuleTokenStream stream_CURLY_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_OPEN");
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_CURLY_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_UNDERSCORE=new RewriteRuleTokenStream(adaptor,"token UNDERSCORE");
        RewriteRuleTokenStream stream_Num=new RewriteRuleTokenStream(adaptor,"token Num");
        RewriteRuleTokenStream stream_SQUARE_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token SQUARE_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_SQUARE_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token SQUARE_BRACKET_OPEN");
        RewriteRuleSubtreeStream stream_mselem_pattern=new RewriteRuleSubtreeStream(adaptor,"rule mselem_pattern");
        RewriteRuleSubtreeStream stream_token_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_ARROW");
        RewriteRuleSubtreeStream stream_bracket_pattern=new RewriteRuleSubtreeStream(adaptor,"rule bracket_pattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:459:2: ( Id | '_' -> ANY | String | Num | L_true | L_false | L_nil | '-' ( NL )? Num -> ^( UMINUS Num ) | '[' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )? ']' -> ^( SQUARE_LIST ( bracket_pattern )* ) | '(' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) ) | '{' ( NL )? ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) )
            int alt67=12;
            alt67 = dfa67.predict(input);
            switch (alt67) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:459:4: Id
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Id95=(Token)match(input,Id,FOLLOW_Id_in_primitive_pattern2329); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Id95_tree = (CommonTree)adaptor.create(Id95);
                    adaptor.addChild(root_0, Id95_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:460:4: '_'
                    {
                    char_literal96=(Token)match(input,UNDERSCORE,FOLLOW_UNDERSCORE_in_primitive_pattern2334); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNDERSCORE.add(char_literal96);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 460:8: -> ANY
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(ANY, "ANY"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:461:4: String
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    String97=(Token)match(input,String,FOLLOW_String_in_primitive_pattern2343); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    String97_tree = (CommonTree)adaptor.create(String97);
                    adaptor.addChild(root_0, String97_tree);
                    }

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:462:4: Num
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Num98=(Token)match(input,Num,FOLLOW_Num_in_primitive_pattern2348); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Num98_tree = (CommonTree)adaptor.create(Num98);
                    adaptor.addChild(root_0, Num98_tree);
                    }

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:463:4: L_true
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_true99=(Token)match(input,L_true,FOLLOW_L_true_in_primitive_pattern2353); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_true99_tree = (CommonTree)adaptor.create(L_true99);
                    adaptor.addChild(root_0, L_true99_tree);
                    }

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:464:4: L_false
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_false100=(Token)match(input,L_false,FOLLOW_L_false_in_primitive_pattern2358); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_false100_tree = (CommonTree)adaptor.create(L_false100);
                    adaptor.addChild(root_0, L_false100_tree);
                    }

                    }
                    break;
                case 7 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:465:4: L_nil
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_nil101=(Token)match(input,L_nil,FOLLOW_L_nil_in_primitive_pattern2363); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_nil101_tree = (CommonTree)adaptor.create(L_nil101);
                    adaptor.addChild(root_0, L_nil101_tree);
                    }

                    }
                    break;
                case 8 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:468:4: '-' ( NL )? Num
                    {
                    char_literal102=(Token)match(input,MINUS,FOLLOW_MINUS_in_primitive_pattern2371); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(char_literal102);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:468:8: ( NL )?
                    int alt44=2;
                    int LA44_0 = input.LA(1);

                    if ( (LA44_0==NL) ) {
                        alt44=1;
                    }
                    switch (alt44) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:468:8: NL
                            {
                            NL103=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2373); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL103);


                            }
                            break;

                    }

                    Num104=(Token)match(input,Num,FOLLOW_Num_in_primitive_pattern2376); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Num.add(Num104);



                    // AST REWRITE
                    // elements: Num
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 468:16: -> ^( UMINUS Num )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:468:19: ^( UMINUS Num )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UMINUS, "UMINUS"), root_1);

                        adaptor.addChild(root_1, stream_Num.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:469:4: '[' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )? ']'
                    {
                    char_literal105=(Token)match(input,SQUARE_BRACKET_OPEN,FOLLOW_SQUARE_BRACKET_OPEN_in_primitive_pattern2389); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_OPEN.add(char_literal105);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:469:9: ( NL )?
                    int alt45=2;
                    int LA45_0 = input.LA(1);

                    if ( (LA45_0==NL) ) {
                        alt45=1;
                    }
                    switch (alt45) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:469:9: NL
                            {
                            NL106=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2392); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL106);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:469:13: ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )?
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==L_begin||(LA50_0>=L_obj && LA50_0<=L_if)||(LA50_0>=L_while && LA50_0<=L_for)||LA50_0==L_match||LA50_0==L_val||LA50_0==L_exception||LA50_0==L_try||(LA50_0>=L_concurrent && LA50_0<=L_lazy)||(LA50_0>=L_true && LA50_0<=L_nil)||LA50_0==L_typeof||LA50_0==L_not||LA50_0==MINUS||(LA50_0>=A_ELLIPSIS && LA50_0<=U_ELLIPSIS)||LA50_0==L_force||(LA50_0>=Constr && LA50_0<=Id)||(LA50_0>=Float && LA50_0<=Num)||(LA50_0>=String && LA50_0<=ROUND_BRACKET_OPEN)||LA50_0==SQUARE_BRACKET_OPEN||LA50_0==CURLY_BRACKET_OPEN||LA50_0==UNDERSCORE) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:469:14: bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )*
                            {
                            pushFollow(FOLLOW_bracket_pattern_in_primitive_pattern2396);
                            bracket_pattern107=bracket_pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern107.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:469:30: ( NL )?
                            int alt46=2;
                            int LA46_0 = input.LA(1);

                            if ( (LA46_0==NL) ) {
                                alt46=1;
                            }
                            switch (alt46) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:469:30: NL
                                    {
                                    NL108=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2398); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL108);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:469:34: ( COMMA ( NL )? bracket_pattern ( NL )? )*
                            loop49:
                            do {
                                int alt49=2;
                                int LA49_0 = input.LA(1);

                                if ( (LA49_0==COMMA) ) {
                                    alt49=1;
                                }


                                switch (alt49) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:469:36: COMMA ( NL )? bracket_pattern ( NL )?
                            	    {
                            	    COMMA109=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitive_pattern2403); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA109);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:469:42: ( NL )?
                            	    int alt47=2;
                            	    int LA47_0 = input.LA(1);

                            	    if ( (LA47_0==NL) ) {
                            	        alt47=1;
                            	    }
                            	    switch (alt47) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:469:42: NL
                            	            {
                            	            NL110=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2405); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL110);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_bracket_pattern_in_primitive_pattern2408);
                            	    bracket_pattern111=bracket_pattern();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern111.getTree());
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:469:62: ( NL )?
                            	    int alt48=2;
                            	    int LA48_0 = input.LA(1);

                            	    if ( (LA48_0==NL) ) {
                            	        alt48=1;
                            	    }
                            	    switch (alt48) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:469:62: NL
                            	            {
                            	            NL112=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2410); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL112);


                            	            }
                            	            break;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop49;
                                }
                            } while (true);


                            }
                            break;

                    }

                    char_literal113=(Token)match(input,SQUARE_BRACKET_CLOSE,FOLLOW_SQUARE_BRACKET_CLOSE_in_primitive_pattern2418); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_CLOSE.add(char_literal113);



                    // AST REWRITE
                    // elements: bracket_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 470:6: -> ^( SQUARE_LIST ( bracket_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:470:9: ^( SQUARE_LIST ( bracket_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SQUARE_LIST, "SQUARE_LIST"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:470:23: ( bracket_pattern )*
                        while ( stream_bracket_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_bracket_pattern.nextTree());

                        }
                        stream_bracket_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:471:4: '(' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )? ')'
                    {
                    char_literal114=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_primitive_pattern2438); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal114);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:471:9: ( NL )?
                    int alt51=2;
                    int LA51_0 = input.LA(1);

                    if ( (LA51_0==NL) ) {
                        alt51=1;
                    }
                    switch (alt51) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:471:9: NL
                            {
                            NL115=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2441); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL115);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:471:13: ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )?
                    int alt58=2;
                    int LA58_0 = input.LA(1);

                    if ( (LA58_0==L_begin||(LA58_0>=L_obj && LA58_0<=L_if)||(LA58_0>=L_while && LA58_0<=L_for)||LA58_0==L_match||LA58_0==L_val||LA58_0==L_exception||LA58_0==L_try||(LA58_0>=L_concurrent && LA58_0<=L_lazy)||(LA58_0>=L_true && LA58_0<=L_nil)||LA58_0==L_typeof||LA58_0==L_not||LA58_0==MINUS||(LA58_0>=A_ELLIPSIS && LA58_0<=U_ELLIPSIS)||LA58_0==L_force||(LA58_0>=Constr && LA58_0<=Id)||(LA58_0>=Float && LA58_0<=Num)||(LA58_0>=String && LA58_0<=ROUND_BRACKET_OPEN)||LA58_0==SQUARE_BRACKET_OPEN||LA58_0==CURLY_BRACKET_OPEN||LA58_0==UNDERSCORE) ) {
                        alt58=1;
                    }
                    switch (alt58) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:471:14: bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )?
                            {
                            pushFollow(FOLLOW_bracket_pattern_in_primitive_pattern2445);
                            bracket_pattern116=bracket_pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern116.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:471:30: ( NL )?
                            int alt52=2;
                            int LA52_0 = input.LA(1);

                            if ( (LA52_0==NL) ) {
                                alt52=1;
                            }
                            switch (alt52) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:471:30: NL
                                    {
                                    NL117=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2447); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL117);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:471:34: ( COMMA ( NL )? bracket_pattern ( NL )? )*
                            loop55:
                            do {
                                int alt55=2;
                                int LA55_0 = input.LA(1);

                                if ( (LA55_0==COMMA) ) {
                                    int LA55_1 = input.LA(2);

                                    if ( (LA55_1==NL) ) {
                                        int LA55_3 = input.LA(3);

                                        if ( (LA55_3==L_begin||(LA55_3>=L_obj && LA55_3<=L_if)||(LA55_3>=L_while && LA55_3<=L_for)||LA55_3==L_match||LA55_3==L_val||LA55_3==L_exception||LA55_3==L_try||(LA55_3>=L_concurrent && LA55_3<=L_lazy)||(LA55_3>=L_true && LA55_3<=L_nil)||LA55_3==L_typeof||LA55_3==L_not||LA55_3==MINUS||(LA55_3>=A_ELLIPSIS && LA55_3<=U_ELLIPSIS)||LA55_3==L_force||(LA55_3>=Constr && LA55_3<=Id)||(LA55_3>=Float && LA55_3<=Num)||(LA55_3>=String && LA55_3<=ROUND_BRACKET_OPEN)||LA55_3==SQUARE_BRACKET_OPEN||LA55_3==CURLY_BRACKET_OPEN||LA55_3==UNDERSCORE) ) {
                                            alt55=1;
                                        }


                                    }
                                    else if ( (LA55_1==L_begin||(LA55_1>=L_obj && LA55_1<=L_if)||(LA55_1>=L_while && LA55_1<=L_for)||LA55_1==L_match||LA55_1==L_val||LA55_1==L_exception||LA55_1==L_try||(LA55_1>=L_concurrent && LA55_1<=L_lazy)||(LA55_1>=L_true && LA55_1<=L_nil)||LA55_1==L_typeof||LA55_1==L_not||LA55_1==MINUS||(LA55_1>=A_ELLIPSIS && LA55_1<=U_ELLIPSIS)||LA55_1==L_force||(LA55_1>=Constr && LA55_1<=Id)||(LA55_1>=Float && LA55_1<=Num)||(LA55_1>=String && LA55_1<=ROUND_BRACKET_OPEN)||LA55_1==SQUARE_BRACKET_OPEN||LA55_1==CURLY_BRACKET_OPEN||LA55_1==UNDERSCORE) ) {
                                        alt55=1;
                                    }


                                }


                                switch (alt55) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:471:36: COMMA ( NL )? bracket_pattern ( NL )?
                            	    {
                            	    COMMA118=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitive_pattern2452); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA118);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:471:43: ( NL )?
                            	    int alt53=2;
                            	    int LA53_0 = input.LA(1);

                            	    if ( (LA53_0==NL) ) {
                            	        alt53=1;
                            	    }
                            	    switch (alt53) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:471:43: NL
                            	            {
                            	            NL119=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2455); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL119);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_bracket_pattern_in_primitive_pattern2458);
                            	    bracket_pattern120=bracket_pattern();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern120.getTree());
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:471:63: ( NL )?
                            	    int alt54=2;
                            	    int LA54_0 = input.LA(1);

                            	    if ( (LA54_0==NL) ) {
                            	        alt54=1;
                            	    }
                            	    switch (alt54) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:471:63: NL
                            	            {
                            	            NL121=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2460); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL121);


                            	            }
                            	            break;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop55;
                                }
                            } while (true);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:471:69: ( COMMA ( NL )? )?
                            int alt57=2;
                            int LA57_0 = input.LA(1);

                            if ( (LA57_0==COMMA) ) {
                                alt57=1;
                            }
                            switch (alt57) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:471:70: COMMA ( NL )?
                                    {
                                    COMMA122=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitive_pattern2466); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA122);

                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:471:76: ( NL )?
                                    int alt56=2;
                                    int LA56_0 = input.LA(1);

                                    if ( (LA56_0==NL) ) {
                                        alt56=1;
                                    }
                                    switch (alt56) {
                                        case 1 :
                                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:471:76: NL
                                            {
                                            NL123=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2468); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_NL.add(NL123);


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    char_literal124=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_primitive_pattern2475); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal124);



                    // AST REWRITE
                    // elements: COMMA, bracket_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 472:5: -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:472:8: ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROUND_LIST, "ROUND_LIST"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:472:21: ^( NIL_TOKEN ( COMMA )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:472:33: ( COMMA )*
                        while ( stream_COMMA.hasNext() ) {
                            adaptor.addChild(root_2, stream_COMMA.nextNode());

                        }
                        stream_COMMA.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:472:41: ^( NIL_TOKEN ( bracket_pattern )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:472:53: ( bracket_pattern )*
                        while ( stream_bracket_pattern.hasNext() ) {
                            adaptor.addChild(root_2, stream_bracket_pattern.nextTree());

                        }
                        stream_bracket_pattern.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:4: '{' ( NL )? ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )? '}'
                    {
                    char_literal125=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_primitive_pattern2507); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal125);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:9: ( NL )?
                    int alt59=2;
                    int LA59_0 = input.LA(1);

                    if ( (LA59_0==NL) ) {
                        alt59=1;
                    }
                    switch (alt59) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:9: NL
                            {
                            NL126=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2510); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL126);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:13: ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )?
                    int alt64=2;
                    int LA64_0 = input.LA(1);

                    if ( (LA64_0==L_begin||(LA64_0>=L_obj && LA64_0<=L_if)||(LA64_0>=L_while && LA64_0<=L_for)||LA64_0==L_match||LA64_0==L_val||LA64_0==L_exception||LA64_0==L_try||(LA64_0>=L_concurrent && LA64_0<=L_lazy)||(LA64_0>=L_true && LA64_0<=L_nil)||LA64_0==L_typeof||LA64_0==L_not||LA64_0==MINUS||(LA64_0>=A_ELLIPSIS && LA64_0<=U_ELLIPSIS)||LA64_0==L_force||(LA64_0>=Constr && LA64_0<=Id)||(LA64_0>=Float && LA64_0<=Num)||(LA64_0>=String && LA64_0<=ROUND_BRACKET_OPEN)||LA64_0==SQUARE_BRACKET_OPEN||LA64_0==CURLY_BRACKET_OPEN||LA64_0==UNDERSCORE) ) {
                        alt64=1;
                    }
                    switch (alt64) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:14: mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )*
                            {
                            pushFollow(FOLLOW_mselem_pattern_in_primitive_pattern2514);
                            mselem_pattern127=mselem_pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_mselem_pattern.add(mselem_pattern127.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:29: ( NL )?
                            int alt60=2;
                            int LA60_0 = input.LA(1);

                            if ( (LA60_0==NL) ) {
                                alt60=1;
                            }
                            switch (alt60) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:29: NL
                                    {
                                    NL128=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2516); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL128);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:33: ( COMMA ( NL )? mselem_pattern ( NL )? )*
                            loop63:
                            do {
                                int alt63=2;
                                int LA63_0 = input.LA(1);

                                if ( (LA63_0==COMMA) ) {
                                    alt63=1;
                                }


                                switch (alt63) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:35: COMMA ( NL )? mselem_pattern ( NL )?
                            	    {
                            	    COMMA129=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitive_pattern2521); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA129);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:42: ( NL )?
                            	    int alt61=2;
                            	    int LA61_0 = input.LA(1);

                            	    if ( (LA61_0==NL) ) {
                            	        alt61=1;
                            	    }
                            	    switch (alt61) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:42: NL
                            	            {
                            	            NL130=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2524); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL130);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_mselem_pattern_in_primitive_pattern2527);
                            	    mselem_pattern131=mselem_pattern();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_mselem_pattern.add(mselem_pattern131.getTree());
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:61: ( NL )?
                            	    int alt62=2;
                            	    int LA62_0 = input.LA(1);

                            	    if ( (LA62_0==NL) ) {
                            	        alt62=1;
                            	    }
                            	    switch (alt62) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:61: NL
                            	            {
                            	            NL132=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2529); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL132);


                            	            }
                            	            break;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop63;
                                }
                            } while (true);


                            }
                            break;

                    }

                    char_literal133=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_primitive_pattern2537); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal133);



                    // AST REWRITE
                    // elements: mselem_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 474:5: -> ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:474:8: ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MAP_OR_SET_OR_OBJ, "MAP_OR_SET_OR_OBJ"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:474:28: ( mselem_pattern )*
                        while ( stream_mselem_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_mselem_pattern.nextTree());

                        }
                        stream_mselem_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:4: '{' ( NL )? token_ARROW ( NL )? '}'
                    {
                    char_literal134=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_primitive_pattern2555); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal134);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:8: ( NL )?
                    int alt65=2;
                    int LA65_0 = input.LA(1);

                    if ( (LA65_0==NL) ) {
                        alt65=1;
                    }
                    switch (alt65) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:8: NL
                            {
                            NL135=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2557); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL135);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_token_ARROW_in_primitive_pattern2560);
                    token_ARROW136=token_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_ARROW.add(token_ARROW136.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:24: ( NL )?
                    int alt66=2;
                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==NL) ) {
                        alt66=1;
                    }
                    switch (alt66) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:24: NL
                            {
                            NL137=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2562); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL137);


                            }
                            break;

                    }

                    char_literal138=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_primitive_pattern2565); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal138);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 475:32: -> ^( EMPTY_MAP )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:35: ^( EMPTY_MAP )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EMPTY_MAP, "EMPTY_MAP"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "primitive_pattern"

    public static class sep_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sep"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:1: sep : ( NL | SC )+ ;
    public final babel17Parser.sep_return sep() throws RecognitionException {
        babel17Parser.sep_return retval = new babel17Parser.sep_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set139=null;

        CommonTree set139_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:5: ( ( NL | SC )+ )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:7: ( NL | SC )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:7: ( NL | SC )+
            int cnt68=0;
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==SC||LA68_0==NL) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            	    {
            	    set139=(Token)input.LT(1);
            	    if ( input.LA(1)==SC||input.LA(1)==NL ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set139));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt68 >= 1 ) break loop68;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(68, input);
                        throw eee;
                }
                cnt68++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sep"

    public static class block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:1: block : ( ( sep )? statement ( sep statement )* ( sep )? -> ^( BLOCK ( statement )* ) | ( sep )? -> ^( BLOCK ) );
    public final babel17Parser.block_return block() throws RecognitionException {
        babel17Parser.block_return retval = new babel17Parser.block_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.sep_return sep140 = null;

        babel17Parser.statement_return statement141 = null;

        babel17Parser.sep_return sep142 = null;

        babel17Parser.statement_return statement143 = null;

        babel17Parser.sep_return sep144 = null;

        babel17Parser.sep_return sep145 = null;


        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_sep=new RewriteRuleSubtreeStream(adaptor,"rule sep");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:8: ( ( sep )? statement ( sep statement )* ( sep )? -> ^( BLOCK ( statement )* ) | ( sep )? -> ^( BLOCK ) )
            int alt73=2;
            alt73 = dfa73.predict(input);
            switch (alt73) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:10: ( sep )? statement ( sep statement )* ( sep )?
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:10: ( sep )?
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==SC||LA69_0==NL) ) {
                        alt69=1;
                    }
                    switch (alt69) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:10: sep
                            {
                            pushFollow(FOLLOW_sep_in_block2597);
                            sep140=sep();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_sep.add(sep140.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_statement_in_block2600);
                    statement141=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement141.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:25: ( sep statement )*
                    loop70:
                    do {
                        int alt70=2;
                        alt70 = dfa70.predict(input);
                        switch (alt70) {
                    	case 1 :
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:26: sep statement
                    	    {
                    	    pushFollow(FOLLOW_sep_in_block2603);
                    	    sep142=sep();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_sep.add(sep142.getTree());
                    	    pushFollow(FOLLOW_statement_in_block2605);
                    	    statement143=statement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_statement.add(statement143.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop70;
                        }
                    } while (true);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:42: ( sep )?
                    int alt71=2;
                    int LA71_0 = input.LA(1);

                    if ( (LA71_0==SC||LA71_0==NL) ) {
                        alt71=1;
                    }
                    switch (alt71) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:42: sep
                            {
                            pushFollow(FOLLOW_sep_in_block2609);
                            sep144=sep();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_sep.add(sep144.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 480:47: -> ^( BLOCK ( statement )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:50: ^( BLOCK ( statement )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK, "BLOCK"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:58: ( statement )*
                        while ( stream_statement.hasNext() ) {
                            adaptor.addChild(root_1, stream_statement.nextTree());

                        }
                        stream_statement.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:481:4: ( sep )?
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:481:4: ( sep )?
                    int alt72=2;
                    int LA72_0 = input.LA(1);

                    if ( (LA72_0==SC||LA72_0==NL) ) {
                        alt72=1;
                    }
                    switch (alt72) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:481:4: sep
                            {
                            pushFollow(FOLLOW_sep_in_block2625);
                            sep145=sep();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_sep.add(sep145.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 481:9: -> ^( BLOCK )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:481:12: ^( BLOCK )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK, "BLOCK"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class pure_block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pure_block"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:483:1: pure_block : statement ( sep statement )* -> ^( BLOCK ( statement )* ) ;
    public final babel17Parser.pure_block_return pure_block() throws RecognitionException {
        babel17Parser.pure_block_return retval = new babel17Parser.pure_block_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.statement_return statement146 = null;

        babel17Parser.sep_return sep147 = null;

        babel17Parser.statement_return statement148 = null;


        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_sep=new RewriteRuleSubtreeStream(adaptor,"rule sep");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:484:2: ( statement ( sep statement )* -> ^( BLOCK ( statement )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:484:4: statement ( sep statement )*
            {
            pushFollow(FOLLOW_statement_in_pure_block2642);
            statement146=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_statement.add(statement146.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:484:14: ( sep statement )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==NL) ) {
                    int LA74_1 = input.LA(2);

                    if ( (LA74_1==L_begin||(LA74_1>=L_obj && LA74_1<=L_if)||(LA74_1>=L_while && LA74_1<=L_for)||(LA74_1>=L_yield && LA74_1<=L_match)||(LA74_1>=L_val && LA74_1<=L_def)||LA74_1==L_exception||LA74_1==L_try||(LA74_1>=L_concurrent && LA74_1<=L_nil)||(LA74_1>=L_module && LA74_1<=L_import)||LA74_1==L_not||LA74_1==SC||LA74_1==MINUS||(LA74_1>=A_ELLIPSIS && LA74_1<=U_ELLIPSIS)||LA74_1==L_force||(LA74_1>=NL && LA74_1<=Id)||(LA74_1>=Float && LA74_1<=Num)||(LA74_1>=String && LA74_1<=ROUND_BRACKET_OPEN)||LA74_1==SQUARE_BRACKET_OPEN||LA74_1==CURLY_BRACKET_OPEN||LA74_1==UNDERSCORE||(LA74_1>=PRAGMA_LOG && LA74_1<=PRAGMA_PROFILE)) ) {
                        alt74=1;
                    }


                }
                else if ( (LA74_0==SC) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:484:15: sep statement
            	    {
            	    pushFollow(FOLLOW_sep_in_pure_block2645);
            	    sep147=sep();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sep.add(sep147.getTree());
            	    pushFollow(FOLLOW_statement_in_pure_block2647);
            	    statement148=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_statement.add(statement148.getTree());

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);



            // AST REWRITE
            // elements: statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 484:31: -> ^( BLOCK ( statement )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:484:34: ^( BLOCK ( statement )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK, "BLOCK"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:484:42: ( statement )*
                while ( stream_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_statement.nextTree());

                }
                stream_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pure_block"

    public static class statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:486:1: statement : ( st_typedef | st_val | st_def | st_yield | st_memoize | st_private | st_module | st_import | expr_or_assign | PRAGMA_PRINT expr -> ^( PRAGMA_PRINT expr ) | PRAGMA_LOG expr -> ^( PRAGMA_LOG expr ) | PRAGMA_PROFILE expr -> ^( PRAGMA_PROFILE expr ) | PRAGMA_ASSERT expr -> ^( PRAGMA_ASSERT expr ) );
    public final babel17Parser.statement_return statement() throws RecognitionException {
        babel17Parser.statement_return retval = new babel17Parser.statement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PRAGMA_PRINT158=null;
        Token PRAGMA_LOG160=null;
        Token PRAGMA_PROFILE162=null;
        Token PRAGMA_ASSERT164=null;
        babel17Parser.st_typedef_return st_typedef149 = null;

        babel17Parser.st_val_return st_val150 = null;

        babel17Parser.st_def_return st_def151 = null;

        babel17Parser.st_yield_return st_yield152 = null;

        babel17Parser.st_memoize_return st_memoize153 = null;

        babel17Parser.st_private_return st_private154 = null;

        babel17Parser.st_module_return st_module155 = null;

        babel17Parser.st_import_return st_import156 = null;

        babel17Parser.expr_or_assign_return expr_or_assign157 = null;

        babel17Parser.expr_return expr159 = null;

        babel17Parser.expr_return expr161 = null;

        babel17Parser.expr_return expr163 = null;

        babel17Parser.expr_return expr165 = null;


        CommonTree PRAGMA_PRINT158_tree=null;
        CommonTree PRAGMA_LOG160_tree=null;
        CommonTree PRAGMA_PROFILE162_tree=null;
        CommonTree PRAGMA_ASSERT164_tree=null;
        RewriteRuleTokenStream stream_PRAGMA_PROFILE=new RewriteRuleTokenStream(adaptor,"token PRAGMA_PROFILE");
        RewriteRuleTokenStream stream_PRAGMA_ASSERT=new RewriteRuleTokenStream(adaptor,"token PRAGMA_ASSERT");
        RewriteRuleTokenStream stream_PRAGMA_LOG=new RewriteRuleTokenStream(adaptor,"token PRAGMA_LOG");
        RewriteRuleTokenStream stream_PRAGMA_PRINT=new RewriteRuleTokenStream(adaptor,"token PRAGMA_PRINT");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:487:2: ( st_typedef | st_val | st_def | st_yield | st_memoize | st_private | st_module | st_import | expr_or_assign | PRAGMA_PRINT expr -> ^( PRAGMA_PRINT expr ) | PRAGMA_LOG expr -> ^( PRAGMA_LOG expr ) | PRAGMA_PROFILE expr -> ^( PRAGMA_PROFILE expr ) | PRAGMA_ASSERT expr -> ^( PRAGMA_ASSERT expr ) )
            int alt75=13;
            alt75 = dfa75.predict(input);
            switch (alt75) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:487:4: st_typedef
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_typedef_in_statement2668);
                    st_typedef149=st_typedef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_typedef149.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:10: st_val
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_val_in_statement2679);
                    st_val150=st_val();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_val150.getTree());

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:489:4: st_def
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_def_in_statement2684);
                    st_def151=st_def();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_def151.getTree());

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:490:4: st_yield
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_yield_in_statement2689);
                    st_yield152=st_yield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_yield152.getTree());

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:491:4: st_memoize
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_memoize_in_statement2694);
                    st_memoize153=st_memoize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_memoize153.getTree());

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:492:4: st_private
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_private_in_statement2699);
                    st_private154=st_private();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_private154.getTree());

                    }
                    break;
                case 7 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:493:4: st_module
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_module_in_statement2704);
                    st_module155=st_module();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_module155.getTree());

                    }
                    break;
                case 8 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:494:4: st_import
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_import_in_statement2709);
                    st_import156=st_import();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_import156.getTree());

                    }
                    break;
                case 9 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:495:4: expr_or_assign
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expr_or_assign_in_statement2714);
                    expr_or_assign157=expr_or_assign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_or_assign157.getTree());

                    }
                    break;
                case 10 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:496:5: PRAGMA_PRINT expr
                    {
                    PRAGMA_PRINT158=(Token)match(input,PRAGMA_PRINT,FOLLOW_PRAGMA_PRINT_in_statement2720); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRAGMA_PRINT.add(PRAGMA_PRINT158);

                    pushFollow(FOLLOW_expr_in_statement2722);
                    expr159=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr159.getTree());


                    // AST REWRITE
                    // elements: PRAGMA_PRINT, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 496:23: -> ^( PRAGMA_PRINT expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:496:26: ^( PRAGMA_PRINT expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PRAGMA_PRINT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:497:5: PRAGMA_LOG expr
                    {
                    PRAGMA_LOG160=(Token)match(input,PRAGMA_LOG,FOLLOW_PRAGMA_LOG_in_statement2736); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRAGMA_LOG.add(PRAGMA_LOG160);

                    pushFollow(FOLLOW_expr_in_statement2738);
                    expr161=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr161.getTree());


                    // AST REWRITE
                    // elements: expr, PRAGMA_LOG
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 497:21: -> ^( PRAGMA_LOG expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:497:24: ^( PRAGMA_LOG expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PRAGMA_LOG.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:498:5: PRAGMA_PROFILE expr
                    {
                    PRAGMA_PROFILE162=(Token)match(input,PRAGMA_PROFILE,FOLLOW_PRAGMA_PROFILE_in_statement2752); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRAGMA_PROFILE.add(PRAGMA_PROFILE162);

                    pushFollow(FOLLOW_expr_in_statement2754);
                    expr163=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr163.getTree());


                    // AST REWRITE
                    // elements: expr, PRAGMA_PROFILE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 498:25: -> ^( PRAGMA_PROFILE expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:498:28: ^( PRAGMA_PROFILE expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PRAGMA_PROFILE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:499:5: PRAGMA_ASSERT expr
                    {
                    PRAGMA_ASSERT164=(Token)match(input,PRAGMA_ASSERT,FOLLOW_PRAGMA_ASSERT_in_statement2768); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRAGMA_ASSERT.add(PRAGMA_ASSERT164);

                    pushFollow(FOLLOW_expr_in_statement2770);
                    expr165=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr165.getTree());


                    // AST REWRITE
                    // elements: expr, PRAGMA_ASSERT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 499:24: -> ^( PRAGMA_ASSERT expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:499:27: ^( PRAGMA_ASSERT expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PRAGMA_ASSERT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class objelem_assign_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "objelem_assign"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:501:1: objelem_assign : Id PERIOD Id -> ^( OBJELEM_ASSIGN Id Id ) ;
    public final babel17Parser.objelem_assign_return objelem_assign() throws RecognitionException {
        babel17Parser.objelem_assign_return retval = new babel17Parser.objelem_assign_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id166=null;
        Token PERIOD167=null;
        Token Id168=null;

        CommonTree Id166_tree=null;
        CommonTree PERIOD167_tree=null;
        CommonTree Id168_tree=null;
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:502:2: ( Id PERIOD Id -> ^( OBJELEM_ASSIGN Id Id ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:502:4: Id PERIOD Id
            {
            Id166=(Token)match(input,Id,FOLLOW_Id_in_objelem_assign2788); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id166);

            PERIOD167=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_objelem_assign2790); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD167);

            Id168=(Token)match(input,Id,FOLLOW_Id_in_objelem_assign2792); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id168);



            // AST REWRITE
            // elements: Id, Id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 502:17: -> ^( OBJELEM_ASSIGN Id Id )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:502:20: ^( OBJELEM_ASSIGN Id Id )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJELEM_ASSIGN, "OBJELEM_ASSIGN"), root_1);

                adaptor.addChild(root_1, stream_Id.nextNode());
                adaptor.addChild(root_1, stream_Id.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "objelem_assign"

    public static class st_val_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_val"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:504:1: st_val : L_val ( NL )? ( pattern | objelem_assign ) ( NL )? '=' ( NL )? expr -> ^( VAL ( pattern )* ( objelem_assign )* expr ) ;
    public final babel17Parser.st_val_return st_val() throws RecognitionException {
        babel17Parser.st_val_return retval = new babel17Parser.st_val_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_val169=null;
        Token NL170=null;
        Token NL173=null;
        Token char_literal174=null;
        Token NL175=null;
        babel17Parser.pattern_return pattern171 = null;

        babel17Parser.objelem_assign_return objelem_assign172 = null;

        babel17Parser.expr_return expr176 = null;


        CommonTree L_val169_tree=null;
        CommonTree NL170_tree=null;
        CommonTree NL173_tree=null;
        CommonTree char_literal174_tree=null;
        CommonTree NL175_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_val=new RewriteRuleTokenStream(adaptor,"token L_val");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_objelem_assign=new RewriteRuleSubtreeStream(adaptor,"rule objelem_assign");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:504:8: ( L_val ( NL )? ( pattern | objelem_assign ) ( NL )? '=' ( NL )? expr -> ^( VAL ( pattern )* ( objelem_assign )* expr ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:504:10: L_val ( NL )? ( pattern | objelem_assign ) ( NL )? '=' ( NL )? expr
            {
            L_val169=(Token)match(input,L_val,FOLLOW_L_val_in_st_val2811); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_val.add(L_val169);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:504:16: ( NL )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==NL) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:504:16: NL
                    {
                    NL170=(Token)match(input,NL,FOLLOW_NL_in_st_val2813); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL170);


                    }
                    break;

            }

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:504:20: ( pattern | objelem_assign )
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==L_exception||(LA77_0>=L_true && LA77_0<=L_false)||LA77_0==L_nil||LA77_0==MINUS||(LA77_0>=A_ELLIPSIS && LA77_0<=U_ELLIPSIS)||LA77_0==Constr||LA77_0==Num||(LA77_0>=String && LA77_0<=ROUND_BRACKET_OPEN)||LA77_0==SQUARE_BRACKET_OPEN||LA77_0==CURLY_BRACKET_OPEN||LA77_0==UNDERSCORE) ) {
                alt77=1;
            }
            else if ( (LA77_0==Id) ) {
                int LA77_2 = input.LA(2);

                if ( (LA77_2==PERIOD) ) {
                    alt77=2;
                }
                else if ( (LA77_2==ASSIGN||(LA77_2>=A_DOUBLE_COLON && LA77_2<=U_DOUBLE_COLON)||LA77_2==NL) ) {
                    alt77=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 77, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;
            }
            switch (alt77) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:504:21: pattern
                    {
                    pushFollow(FOLLOW_pattern_in_st_val2817);
                    pattern171=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern171.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:504:31: objelem_assign
                    {
                    pushFollow(FOLLOW_objelem_assign_in_st_val2821);
                    objelem_assign172=objelem_assign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_objelem_assign.add(objelem_assign172.getTree());

                    }
                    break;

            }

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:504:47: ( NL )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==NL) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:504:47: NL
                    {
                    NL173=(Token)match(input,NL,FOLLOW_NL_in_st_val2824); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL173);


                    }
                    break;

            }

            char_literal174=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_st_val2827); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal174);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:504:55: ( NL )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==NL) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:504:55: NL
                    {
                    NL175=(Token)match(input,NL,FOLLOW_NL_in_st_val2829); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL175);


                    }
                    break;

            }

            pushFollow(FOLLOW_expr_in_st_val2832);
            expr176=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr176.getTree());


            // AST REWRITE
            // elements: pattern, expr, objelem_assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 504:64: -> ^( VAL ( pattern )* ( objelem_assign )* expr )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:504:67: ^( VAL ( pattern )* ( objelem_assign )* expr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAL, "VAL"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:504:73: ( pattern )*
                while ( stream_pattern.hasNext() ) {
                    adaptor.addChild(root_1, stream_pattern.nextTree());

                }
                stream_pattern.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:504:82: ( objelem_assign )*
                while ( stream_objelem_assign.hasNext() ) {
                    adaptor.addChild(root_1, stream_objelem_assign.nextTree());

                }
                stream_objelem_assign.reset();
                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_val"

    public static class st_def_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_def"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:1: st_def : ( L_def ( NL )? Id ( NL )? ( defpattern ( NL )? )? ( ':' ( NL )? typeid ( NL )? )? '=' ( NL )? expr -> ^( DEF Id ( typeid )? ( defpattern )? expr ) | L_def ( NL )? L_this ( NL )? ':' ( NL )? typeid ( NL )? '=' ( NL )? expr -> ^( CONVERSION typeid expr ) );
    public final babel17Parser.st_def_return st_def() throws RecognitionException {
        babel17Parser.st_def_return retval = new babel17Parser.st_def_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_def177=null;
        Token NL178=null;
        Token Id179=null;
        Token NL180=null;
        Token NL182=null;
        Token char_literal183=null;
        Token NL184=null;
        Token NL186=null;
        Token char_literal187=null;
        Token NL188=null;
        Token L_def190=null;
        Token NL191=null;
        Token L_this192=null;
        Token NL193=null;
        Token char_literal194=null;
        Token NL195=null;
        Token NL197=null;
        Token char_literal198=null;
        Token NL199=null;
        babel17Parser.defpattern_return defpattern181 = null;

        babel17Parser.typeid_return typeid185 = null;

        babel17Parser.expr_return expr189 = null;

        babel17Parser.typeid_return typeid196 = null;

        babel17Parser.expr_return expr200 = null;


        CommonTree L_def177_tree=null;
        CommonTree NL178_tree=null;
        CommonTree Id179_tree=null;
        CommonTree NL180_tree=null;
        CommonTree NL182_tree=null;
        CommonTree char_literal183_tree=null;
        CommonTree NL184_tree=null;
        CommonTree NL186_tree=null;
        CommonTree char_literal187_tree=null;
        CommonTree NL188_tree=null;
        CommonTree L_def190_tree=null;
        CommonTree NL191_tree=null;
        CommonTree L_this192_tree=null;
        CommonTree NL193_tree=null;
        CommonTree char_literal194_tree=null;
        CommonTree NL195_tree=null;
        CommonTree NL197_tree=null;
        CommonTree char_literal198_tree=null;
        CommonTree NL199_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_L_this=new RewriteRuleTokenStream(adaptor,"token L_this");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_L_def=new RewriteRuleTokenStream(adaptor,"token L_def");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_typeid=new RewriteRuleSubtreeStream(adaptor,"rule typeid");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_defpattern=new RewriteRuleSubtreeStream(adaptor,"rule defpattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:8: ( L_def ( NL )? Id ( NL )? ( defpattern ( NL )? )? ( ':' ( NL )? typeid ( NL )? )? '=' ( NL )? expr -> ^( DEF Id ( typeid )? ( defpattern )? expr ) | L_def ( NL )? L_this ( NL )? ':' ( NL )? typeid ( NL )? '=' ( NL )? expr -> ^( CONVERSION typeid expr ) )
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==L_def) ) {
                switch ( input.LA(2) ) {
                case NL:
                    {
                    int LA93_2 = input.LA(3);

                    if ( (LA93_2==Id) ) {
                        alt93=1;
                    }
                    else if ( (LA93_2==L_this) ) {
                        alt93=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 93, 2, input);

                        throw nvae;
                    }
                    }
                    break;
                case Id:
                    {
                    alt93=1;
                    }
                    break;
                case L_this:
                    {
                    alt93=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 1, input);

                    throw nvae;
                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;
            }
            switch (alt93) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:10: L_def ( NL )? Id ( NL )? ( defpattern ( NL )? )? ( ':' ( NL )? typeid ( NL )? )? '=' ( NL )? expr
                    {
                    L_def177=(Token)match(input,L_def,FOLLOW_L_def_in_st_def2856); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_def.add(L_def177);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:16: ( NL )?
                    int alt80=2;
                    int LA80_0 = input.LA(1);

                    if ( (LA80_0==NL) ) {
                        alt80=1;
                    }
                    switch (alt80) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:16: NL
                            {
                            NL178=(Token)match(input,NL,FOLLOW_NL_in_st_def2858); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL178);


                            }
                            break;

                    }

                    Id179=(Token)match(input,Id,FOLLOW_Id_in_st_def2861); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id179);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:23: ( NL )?
                    int alt81=2;
                    int LA81_0 = input.LA(1);

                    if ( (LA81_0==NL) ) {
                        alt81=1;
                    }
                    switch (alt81) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:23: NL
                            {
                            NL180=(Token)match(input,NL,FOLLOW_NL_in_st_def2863); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL180);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:27: ( defpattern ( NL )? )?
                    int alt83=2;
                    int LA83_0 = input.LA(1);

                    if ( ((LA83_0>=L_true && LA83_0<=L_false)||LA83_0==L_nil||LA83_0==MINUS||(LA83_0>=Constr && LA83_0<=Id)||LA83_0==Num||(LA83_0>=String && LA83_0<=ROUND_BRACKET_OPEN)||LA83_0==SQUARE_BRACKET_OPEN||LA83_0==CURLY_BRACKET_OPEN||LA83_0==UNDERSCORE) ) {
                        alt83=1;
                    }
                    switch (alt83) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:28: defpattern ( NL )?
                            {
                            pushFollow(FOLLOW_defpattern_in_st_def2867);
                            defpattern181=defpattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_defpattern.add(defpattern181.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:39: ( NL )?
                            int alt82=2;
                            int LA82_0 = input.LA(1);

                            if ( (LA82_0==NL) ) {
                                alt82=1;
                            }
                            switch (alt82) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:39: NL
                                    {
                                    NL182=(Token)match(input,NL,FOLLOW_NL_in_st_def2869); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL182);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:45: ( ':' ( NL )? typeid ( NL )? )?
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==COLON) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:46: ':' ( NL )? typeid ( NL )?
                            {
                            char_literal183=(Token)match(input,COLON,FOLLOW_COLON_in_st_def2875); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(char_literal183);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:50: ( NL )?
                            int alt84=2;
                            int LA84_0 = input.LA(1);

                            if ( (LA84_0==NL) ) {
                                alt84=1;
                            }
                            switch (alt84) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:50: NL
                                    {
                                    NL184=(Token)match(input,NL,FOLLOW_NL_in_st_def2877); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL184);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_typeid_in_st_def2880);
                            typeid185=typeid();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typeid.add(typeid185.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:61: ( NL )?
                            int alt85=2;
                            int LA85_0 = input.LA(1);

                            if ( (LA85_0==NL) ) {
                                alt85=1;
                            }
                            switch (alt85) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:61: NL
                                    {
                                    NL186=(Token)match(input,NL,FOLLOW_NL_in_st_def2882); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL186);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    char_literal187=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_st_def2887); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal187);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:71: ( NL )?
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==NL) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:71: NL
                            {
                            NL188=(Token)match(input,NL,FOLLOW_NL_in_st_def2889); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL188);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_st_def2892);
                    expr189=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr189.getTree());


                    // AST REWRITE
                    // elements: expr, typeid, defpattern, Id
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 507:5: -> ^( DEF Id ( typeid )? ( defpattern )? expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:507:8: ^( DEF Id ( typeid )? ( defpattern )? expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DEF, "DEF"), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:507:17: ( typeid )?
                        if ( stream_typeid.hasNext() ) {
                            adaptor.addChild(root_1, stream_typeid.nextTree());

                        }
                        stream_typeid.reset();
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:507:25: ( defpattern )?
                        if ( stream_defpattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_defpattern.nextTree());

                        }
                        stream_defpattern.reset();
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:4: L_def ( NL )? L_this ( NL )? ':' ( NL )? typeid ( NL )? '=' ( NL )? expr
                    {
                    L_def190=(Token)match(input,L_def,FOLLOW_L_def_in_st_def2918); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_def.add(L_def190);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:10: ( NL )?
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==NL) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:10: NL
                            {
                            NL191=(Token)match(input,NL,FOLLOW_NL_in_st_def2920); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL191);


                            }
                            break;

                    }

                    L_this192=(Token)match(input,L_this,FOLLOW_L_this_in_st_def2923); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_this.add(L_this192);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:21: ( NL )?
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==NL) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:21: NL
                            {
                            NL193=(Token)match(input,NL,FOLLOW_NL_in_st_def2925); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL193);


                            }
                            break;

                    }

                    char_literal194=(Token)match(input,COLON,FOLLOW_COLON_in_st_def2928); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(char_literal194);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:29: ( NL )?
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==NL) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:29: NL
                            {
                            NL195=(Token)match(input,NL,FOLLOW_NL_in_st_def2930); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL195);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeid_in_st_def2933);
                    typeid196=typeid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeid.add(typeid196.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:40: ( NL )?
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==NL) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:40: NL
                            {
                            NL197=(Token)match(input,NL,FOLLOW_NL_in_st_def2935); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL197);


                            }
                            break;

                    }

                    char_literal198=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_st_def2938); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal198);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:48: ( NL )?
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( (LA92_0==NL) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:48: NL
                            {
                            NL199=(Token)match(input,NL,FOLLOW_NL_in_st_def2940); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL199);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_st_def2943);
                    expr200=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr200.getTree());


                    // AST REWRITE
                    // elements: expr, typeid
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 508:57: -> ^( CONVERSION typeid expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:60: ^( CONVERSION typeid expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONVERSION, "CONVERSION"), root_1);

                        adaptor.addChild(root_1, stream_typeid.nextTree());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_def"

    public static class st_typedef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_typedef"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:1: st_typedef : L_typedef ( NL )? Id ( NL )? typedef_clause ( ( NL )? COMMA ( NL )? typedef_clause )* -> ^( TYPEDEF Id ^( NIL_TOKEN ( typedef_clause )* ) ) ;
    public final babel17Parser.st_typedef_return st_typedef() throws RecognitionException {
        babel17Parser.st_typedef_return retval = new babel17Parser.st_typedef_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_typedef201=null;
        Token NL202=null;
        Token Id203=null;
        Token NL204=null;
        Token NL206=null;
        Token COMMA207=null;
        Token NL208=null;
        babel17Parser.typedef_clause_return typedef_clause205 = null;

        babel17Parser.typedef_clause_return typedef_clause209 = null;


        CommonTree L_typedef201_tree=null;
        CommonTree NL202_tree=null;
        CommonTree Id203_tree=null;
        CommonTree NL204_tree=null;
        CommonTree NL206_tree=null;
        CommonTree COMMA207_tree=null;
        CommonTree NL208_tree=null;
        RewriteRuleTokenStream stream_L_typedef=new RewriteRuleTokenStream(adaptor,"token L_typedef");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleSubtreeStream stream_typedef_clause=new RewriteRuleSubtreeStream(adaptor,"rule typedef_clause");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:511:2: ( L_typedef ( NL )? Id ( NL )? typedef_clause ( ( NL )? COMMA ( NL )? typedef_clause )* -> ^( TYPEDEF Id ^( NIL_TOKEN ( typedef_clause )* ) ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:511:4: L_typedef ( NL )? Id ( NL )? typedef_clause ( ( NL )? COMMA ( NL )? typedef_clause )*
            {
            L_typedef201=(Token)match(input,L_typedef,FOLLOW_L_typedef_in_st_typedef2966); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_typedef.add(L_typedef201);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:511:14: ( NL )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==NL) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:511:14: NL
                    {
                    NL202=(Token)match(input,NL,FOLLOW_NL_in_st_typedef2968); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL202);


                    }
                    break;

            }

            Id203=(Token)match(input,Id,FOLLOW_Id_in_st_typedef2971); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id203);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:511:21: ( NL )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==NL) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:511:21: NL
                    {
                    NL204=(Token)match(input,NL,FOLLOW_NL_in_st_typedef2973); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL204);


                    }
                    break;

            }

            pushFollow(FOLLOW_typedef_clause_in_st_typedef2976);
            typedef_clause205=typedef_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_clause.add(typedef_clause205.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:511:40: ( ( NL )? COMMA ( NL )? typedef_clause )*
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( (LA98_0==NL) ) {
                    int LA98_1 = input.LA(2);

                    if ( (LA98_1==COMMA) ) {
                        alt98=1;
                    }


                }
                else if ( (LA98_0==COMMA) ) {
                    alt98=1;
                }


                switch (alt98) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:511:41: ( NL )? COMMA ( NL )? typedef_clause
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:511:41: ( NL )?
            	    int alt96=2;
            	    int LA96_0 = input.LA(1);

            	    if ( (LA96_0==NL) ) {
            	        alt96=1;
            	    }
            	    switch (alt96) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:511:41: NL
            	            {
            	            NL206=(Token)match(input,NL,FOLLOW_NL_in_st_typedef2979); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL206);


            	            }
            	            break;

            	    }

            	    COMMA207=(Token)match(input,COMMA,FOLLOW_COMMA_in_st_typedef2982); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA207);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:511:51: ( NL )?
            	    int alt97=2;
            	    int LA97_0 = input.LA(1);

            	    if ( (LA97_0==NL) ) {
            	        alt97=1;
            	    }
            	    switch (alt97) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:511:51: NL
            	            {
            	            NL208=(Token)match(input,NL,FOLLOW_NL_in_st_typedef2984); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL208);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_typedef_clause_in_st_typedef2987);
            	    typedef_clause209=typedef_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typedef_clause.add(typedef_clause209.getTree());

            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);



            // AST REWRITE
            // elements: Id, typedef_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 511:72: -> ^( TYPEDEF Id ^( NIL_TOKEN ( typedef_clause )* ) )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:511:75: ^( TYPEDEF Id ^( NIL_TOKEN ( typedef_clause )* ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEDEF, "TYPEDEF"), root_1);

                adaptor.addChild(root_1, stream_Id.nextNode());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:511:88: ^( NIL_TOKEN ( typedef_clause )* )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:511:100: ( typedef_clause )*
                while ( stream_typedef_clause.hasNext() ) {
                    adaptor.addChild(root_2, stream_typedef_clause.nextTree());

                }
                stream_typedef_clause.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_typedef"

    public static class typedef_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typedef_clause"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:513:1: typedef_clause : ( ( defpattern ( NL )? '=' )=> defpattern ( NL )? '=' ( NL )? expr -> ^( TYPEDEF_CLAUSE defpattern expr ) | defpattern -> ^( TYPEDEF_CLAUSE defpattern ) );
    public final babel17Parser.typedef_clause_return typedef_clause() throws RecognitionException {
        babel17Parser.typedef_clause_return retval = new babel17Parser.typedef_clause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL211=null;
        Token char_literal212=null;
        Token NL213=null;
        babel17Parser.defpattern_return defpattern210 = null;

        babel17Parser.expr_return expr214 = null;

        babel17Parser.defpattern_return defpattern215 = null;


        CommonTree NL211_tree=null;
        CommonTree char_literal212_tree=null;
        CommonTree NL213_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_defpattern=new RewriteRuleSubtreeStream(adaptor,"rule defpattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:2: ( ( defpattern ( NL )? '=' )=> defpattern ( NL )? '=' ( NL )? expr -> ^( TYPEDEF_CLAUSE defpattern expr ) | defpattern -> ^( TYPEDEF_CLAUSE defpattern ) )
            int alt101=2;
            alt101 = dfa101.predict(input);
            switch (alt101) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:4: ( defpattern ( NL )? '=' )=> defpattern ( NL )? '=' ( NL )? expr
                    {
                    pushFollow(FOLLOW_defpattern_in_typedef_clause3025);
                    defpattern210=defpattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_defpattern.add(defpattern210.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:39: ( NL )?
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( (LA99_0==NL) ) {
                        alt99=1;
                    }
                    switch (alt99) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:39: NL
                            {
                            NL211=(Token)match(input,NL,FOLLOW_NL_in_typedef_clause3027); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL211);


                            }
                            break;

                    }

                    char_literal212=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_typedef_clause3030); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal212);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:47: ( NL )?
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==NL) ) {
                        alt100=1;
                    }
                    switch (alt100) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:47: NL
                            {
                            NL213=(Token)match(input,NL,FOLLOW_NL_in_typedef_clause3032); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL213);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_typedef_clause3035);
                    expr214=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr214.getTree());


                    // AST REWRITE
                    // elements: expr, defpattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 514:56: -> ^( TYPEDEF_CLAUSE defpattern expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:59: ^( TYPEDEF_CLAUSE defpattern expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEDEF_CLAUSE, "TYPEDEF_CLAUSE"), root_1);

                        adaptor.addChild(root_1, stream_defpattern.nextTree());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:515:4: defpattern
                    {
                    pushFollow(FOLLOW_defpattern_in_typedef_clause3050);
                    defpattern215=defpattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_defpattern.add(defpattern215.getTree());


                    // AST REWRITE
                    // elements: defpattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 515:15: -> ^( TYPEDEF_CLAUSE defpattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:515:18: ^( TYPEDEF_CLAUSE defpattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEDEF_CLAUSE, "TYPEDEF_CLAUSE"), root_1);

                        adaptor.addChild(root_1, stream_defpattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typedef_clause"

    public static class st_yield_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_yield"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:1: st_yield : L_yield expr -> ^( YIELD expr ) ;
    public final babel17Parser.st_yield_return st_yield() throws RecognitionException {
        babel17Parser.st_yield_return retval = new babel17Parser.st_yield_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_yield216=null;
        babel17Parser.expr_return expr217 = null;


        CommonTree L_yield216_tree=null;
        RewriteRuleTokenStream stream_L_yield=new RewriteRuleTokenStream(adaptor,"token L_yield");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:9: ( L_yield expr -> ^( YIELD expr ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:11: L_yield expr
            {
            L_yield216=(Token)match(input,L_yield,FOLLOW_L_yield_in_st_yield3069); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_yield.add(L_yield216);

            pushFollow(FOLLOW_expr_in_st_yield3071);
            expr217=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr217.getTree());


            // AST REWRITE
            // elements: expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 517:24: -> ^( YIELD expr )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:27: ^( YIELD expr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YIELD, "YIELD"), root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_yield"

    public static class st_memoize_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_memoize"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:1: st_memoize : L_memoize memo_id ( ( NL )? COMMA ( NL )? memo_id )* -> ^( MEMOIZE ( memo_id )* ) ;
    public final babel17Parser.st_memoize_return st_memoize() throws RecognitionException {
        babel17Parser.st_memoize_return retval = new babel17Parser.st_memoize_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_memoize218=null;
        Token NL220=null;
        Token COMMA221=null;
        Token NL222=null;
        babel17Parser.memo_id_return memo_id219 = null;

        babel17Parser.memo_id_return memo_id223 = null;


        CommonTree L_memoize218_tree=null;
        CommonTree NL220_tree=null;
        CommonTree COMMA221_tree=null;
        CommonTree NL222_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_memoize=new RewriteRuleTokenStream(adaptor,"token L_memoize");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_memo_id=new RewriteRuleSubtreeStream(adaptor,"rule memo_id");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:2: ( L_memoize memo_id ( ( NL )? COMMA ( NL )? memo_id )* -> ^( MEMOIZE ( memo_id )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:4: L_memoize memo_id ( ( NL )? COMMA ( NL )? memo_id )*
            {
            L_memoize218=(Token)match(input,L_memoize,FOLLOW_L_memoize_in_st_memoize3092); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_memoize.add(L_memoize218);

            pushFollow(FOLLOW_memo_id_in_st_memoize3094);
            memo_id219=memo_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_memo_id.add(memo_id219.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:22: ( ( NL )? COMMA ( NL )? memo_id )*
            loop104:
            do {
                int alt104=2;
                int LA104_0 = input.LA(1);

                if ( (LA104_0==NL) ) {
                    int LA104_1 = input.LA(2);

                    if ( (LA104_1==COMMA) ) {
                        alt104=1;
                    }


                }
                else if ( (LA104_0==COMMA) ) {
                    alt104=1;
                }


                switch (alt104) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:23: ( NL )? COMMA ( NL )? memo_id
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:23: ( NL )?
            	    int alt102=2;
            	    int LA102_0 = input.LA(1);

            	    if ( (LA102_0==NL) ) {
            	        alt102=1;
            	    }
            	    switch (alt102) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:23: NL
            	            {
            	            NL220=(Token)match(input,NL,FOLLOW_NL_in_st_memoize3097); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL220);


            	            }
            	            break;

            	    }

            	    COMMA221=(Token)match(input,COMMA,FOLLOW_COMMA_in_st_memoize3100); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA221);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:33: ( NL )?
            	    int alt103=2;
            	    int LA103_0 = input.LA(1);

            	    if ( (LA103_0==NL) ) {
            	        alt103=1;
            	    }
            	    switch (alt103) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:33: NL
            	            {
            	            NL222=(Token)match(input,NL,FOLLOW_NL_in_st_memoize3102); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL222);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_memo_id_in_st_memoize3105);
            	    memo_id223=memo_id();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_memo_id.add(memo_id223.getTree());

            	    }
            	    break;

            	default :
            	    break loop104;
                }
            } while (true);



            // AST REWRITE
            // elements: memo_id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 521:5: -> ^( MEMOIZE ( memo_id )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:8: ^( MEMOIZE ( memo_id )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MEMOIZE, "MEMOIZE"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:18: ( memo_id )*
                while ( stream_memo_id.hasNext() ) {
                    adaptor.addChild(root_1, stream_memo_id.nextTree());

                }
                stream_memo_id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_memoize"

    public static class memo_id_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "memo_id"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:523:1: memo_id : ( Id -> ^( MEMOID_STRONG Id ) | '(' Id ')' -> ^( MEMOID_WEAK Id ) );
    public final babel17Parser.memo_id_return memo_id() throws RecognitionException {
        babel17Parser.memo_id_return retval = new babel17Parser.memo_id_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id224=null;
        Token char_literal225=null;
        Token Id226=null;
        Token char_literal227=null;

        CommonTree Id224_tree=null;
        CommonTree char_literal225_tree=null;
        CommonTree Id226_tree=null;
        CommonTree char_literal227_tree=null;
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:523:9: ( Id -> ^( MEMOID_STRONG Id ) | '(' Id ')' -> ^( MEMOID_WEAK Id ) )
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==Id) ) {
                alt105=1;
            }
            else if ( (LA105_0==ROUND_BRACKET_OPEN) ) {
                alt105=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 105, 0, input);

                throw nvae;
            }
            switch (alt105) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:523:11: Id
                    {
                    Id224=(Token)match(input,Id,FOLLOW_Id_in_memo_id3134); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id224);



                    // AST REWRITE
                    // elements: Id
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 523:14: -> ^( MEMOID_STRONG Id )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:523:17: ^( MEMOID_STRONG Id )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MEMOID_STRONG, "MEMOID_STRONG"), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:4: '(' Id ')'
                    {
                    char_literal225=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_memo_id3147); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal225);

                    Id226=(Token)match(input,Id,FOLLOW_Id_in_memo_id3149); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id226);

                    char_literal227=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_memo_id3151); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal227);



                    // AST REWRITE
                    // elements: Id
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 524:15: -> ^( MEMOID_WEAK Id )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:18: ^( MEMOID_WEAK Id )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MEMOID_WEAK, "MEMOID_WEAK"), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "memo_id"

    public static class st_private_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_private"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:526:1: st_private : L_private private_id ( ( NL )? COMMA ( NL )? private_id )* -> ^( PRIVATE ( private_id )* ) ;
    public final babel17Parser.st_private_return st_private() throws RecognitionException {
        babel17Parser.st_private_return retval = new babel17Parser.st_private_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_private228=null;
        Token NL230=null;
        Token COMMA231=null;
        Token NL232=null;
        babel17Parser.private_id_return private_id229 = null;

        babel17Parser.private_id_return private_id233 = null;


        CommonTree L_private228_tree=null;
        CommonTree NL230_tree=null;
        CommonTree COMMA231_tree=null;
        CommonTree NL232_tree=null;
        RewriteRuleTokenStream stream_L_private=new RewriteRuleTokenStream(adaptor,"token L_private");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_private_id=new RewriteRuleSubtreeStream(adaptor,"rule private_id");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:2: ( L_private private_id ( ( NL )? COMMA ( NL )? private_id )* -> ^( PRIVATE ( private_id )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:4: L_private private_id ( ( NL )? COMMA ( NL )? private_id )*
            {
            L_private228=(Token)match(input,L_private,FOLLOW_L_private_in_st_private3168); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_private.add(L_private228);

            pushFollow(FOLLOW_private_id_in_st_private3170);
            private_id229=private_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_private_id.add(private_id229.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:25: ( ( NL )? COMMA ( NL )? private_id )*
            loop108:
            do {
                int alt108=2;
                int LA108_0 = input.LA(1);

                if ( (LA108_0==NL) ) {
                    int LA108_1 = input.LA(2);

                    if ( (LA108_1==COMMA) ) {
                        alt108=1;
                    }


                }
                else if ( (LA108_0==COMMA) ) {
                    alt108=1;
                }


                switch (alt108) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:26: ( NL )? COMMA ( NL )? private_id
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:26: ( NL )?
            	    int alt106=2;
            	    int LA106_0 = input.LA(1);

            	    if ( (LA106_0==NL) ) {
            	        alt106=1;
            	    }
            	    switch (alt106) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:26: NL
            	            {
            	            NL230=(Token)match(input,NL,FOLLOW_NL_in_st_private3173); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL230);


            	            }
            	            break;

            	    }

            	    COMMA231=(Token)match(input,COMMA,FOLLOW_COMMA_in_st_private3176); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA231);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:36: ( NL )?
            	    int alt107=2;
            	    int LA107_0 = input.LA(1);

            	    if ( (LA107_0==NL) ) {
            	        alt107=1;
            	    }
            	    switch (alt107) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:36: NL
            	            {
            	            NL232=(Token)match(input,NL,FOLLOW_NL_in_st_private3178); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL232);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_private_id_in_st_private3181);
            	    private_id233=private_id();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_private_id.add(private_id233.getTree());

            	    }
            	    break;

            	default :
            	    break loop108;
                }
            } while (true);



            // AST REWRITE
            // elements: private_id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 528:5: -> ^( PRIVATE ( private_id )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:528:8: ^( PRIVATE ( private_id )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRIVATE, "PRIVATE"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:528:18: ( private_id )*
                while ( stream_private_id.hasNext() ) {
                    adaptor.addChild(root_1, stream_private_id.nextTree());

                }
                stream_private_id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_private"

    public static class private_id_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "private_id"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:530:1: private_id : Id -> ^( PRIVATEID Id ) ;
    public final babel17Parser.private_id_return private_id() throws RecognitionException {
        babel17Parser.private_id_return retval = new babel17Parser.private_id_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id234=null;

        CommonTree Id234_tree=null;
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:531:2: ( Id -> ^( PRIVATEID Id ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:531:4: Id
            {
            Id234=(Token)match(input,Id,FOLLOW_Id_in_private_id3207); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id234);



            // AST REWRITE
            // elements: Id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 531:7: -> ^( PRIVATEID Id )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:531:10: ^( PRIVATEID Id )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRIVATEID, "PRIVATEID"), root_1);

                adaptor.addChild(root_1, stream_Id.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "private_id"

    public static class testid_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "testid"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:533:1: testid : ( Id | L_unittest );
    public final babel17Parser.testid_return testid() throws RecognitionException {
        babel17Parser.testid_return retval = new babel17Parser.testid_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set235=null;

        CommonTree set235_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:533:8: ( Id | L_unittest )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set235=(Token)input.LT(1);
            if ( input.LA(1)==L_unittest||input.LA(1)==Id ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set235));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "testid"

    public static class moduleid_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moduleid"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:536:1: moduleid : testid ( ( NL )? PERIOD ( NL )? testid )* -> ^( MODULEID ( testid )* ) ;
    public final babel17Parser.moduleid_return moduleid() throws RecognitionException {
        babel17Parser.moduleid_return retval = new babel17Parser.moduleid_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL237=null;
        Token PERIOD238=null;
        Token NL239=null;
        babel17Parser.testid_return testid236 = null;

        babel17Parser.testid_return testid240 = null;


        CommonTree NL237_tree=null;
        CommonTree PERIOD238_tree=null;
        CommonTree NL239_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_testid=new RewriteRuleSubtreeStream(adaptor,"rule testid");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:537:2: ( testid ( ( NL )? PERIOD ( NL )? testid )* -> ^( MODULEID ( testid )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:537:4: testid ( ( NL )? PERIOD ( NL )? testid )*
            {
            pushFollow(FOLLOW_testid_in_moduleid3240);
            testid236=testid();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_testid.add(testid236.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:537:11: ( ( NL )? PERIOD ( NL )? testid )*
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( (LA111_0==NL) ) {
                    int LA111_1 = input.LA(2);

                    if ( (LA111_1==PERIOD) ) {
                        alt111=1;
                    }


                }
                else if ( (LA111_0==PERIOD) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:537:12: ( NL )? PERIOD ( NL )? testid
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:537:12: ( NL )?
            	    int alt109=2;
            	    int LA109_0 = input.LA(1);

            	    if ( (LA109_0==NL) ) {
            	        alt109=1;
            	    }
            	    switch (alt109) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:537:12: NL
            	            {
            	            NL237=(Token)match(input,NL,FOLLOW_NL_in_moduleid3243); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL237);


            	            }
            	            break;

            	    }

            	    PERIOD238=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_moduleid3246); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD238);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:537:23: ( NL )?
            	    int alt110=2;
            	    int LA110_0 = input.LA(1);

            	    if ( (LA110_0==NL) ) {
            	        alt110=1;
            	    }
            	    switch (alt110) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:537:23: NL
            	            {
            	            NL239=(Token)match(input,NL,FOLLOW_NL_in_moduleid3248); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL239);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_testid_in_moduleid3251);
            	    testid240=testid();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_testid.add(testid240.getTree());

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);



            // AST REWRITE
            // elements: testid
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 537:36: -> ^( MODULEID ( testid )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:537:39: ^( MODULEID ( testid )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MODULEID, "MODULEID"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:537:50: ( testid )*
                while ( stream_testid.hasNext() ) {
                    adaptor.addChild(root_1, stream_testid.nextTree());

                }
                stream_testid.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moduleid"

    public static class st_module_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_module"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:539:1: st_module : L_module ( NL )? moduleid block ( L_unittest block )? L_end -> ^( L_module moduleid block ( L_unittest )? ( block )? ) ;
    public final babel17Parser.st_module_return st_module() throws RecognitionException {
        babel17Parser.st_module_return retval = new babel17Parser.st_module_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_module241=null;
        Token NL242=null;
        Token L_unittest245=null;
        Token L_end247=null;
        babel17Parser.moduleid_return moduleid243 = null;

        babel17Parser.block_return block244 = null;

        babel17Parser.block_return block246 = null;


        CommonTree L_module241_tree=null;
        CommonTree NL242_tree=null;
        CommonTree L_unittest245_tree=null;
        CommonTree L_end247_tree=null;
        RewriteRuleTokenStream stream_L_module=new RewriteRuleTokenStream(adaptor,"token L_module");
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_unittest=new RewriteRuleTokenStream(adaptor,"token L_unittest");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_moduleid=new RewriteRuleSubtreeStream(adaptor,"rule moduleid");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:540:2: ( L_module ( NL )? moduleid block ( L_unittest block )? L_end -> ^( L_module moduleid block ( L_unittest )? ( block )? ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:540:4: L_module ( NL )? moduleid block ( L_unittest block )? L_end
            {
            L_module241=(Token)match(input,L_module,FOLLOW_L_module_in_st_module3271); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_module.add(L_module241);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:540:13: ( NL )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==NL) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:540:13: NL
                    {
                    NL242=(Token)match(input,NL,FOLLOW_NL_in_st_module3273); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL242);


                    }
                    break;

            }

            pushFollow(FOLLOW_moduleid_in_st_module3276);
            moduleid243=moduleid();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moduleid.add(moduleid243.getTree());
            pushFollow(FOLLOW_block_in_st_module3278);
            block244=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block244.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:540:32: ( L_unittest block )?
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==L_unittest) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:540:33: L_unittest block
                    {
                    L_unittest245=(Token)match(input,L_unittest,FOLLOW_L_unittest_in_st_module3281); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_unittest.add(L_unittest245);

                    pushFollow(FOLLOW_block_in_st_module3283);
                    block246=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block246.getTree());

                    }
                    break;

            }

            L_end247=(Token)match(input,L_end,FOLLOW_L_end_in_st_module3287); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end247);



            // AST REWRITE
            // elements: L_module, block, block, L_unittest, moduleid
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 540:58: -> ^( L_module moduleid block ( L_unittest )? ( block )? )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:540:61: ^( L_module moduleid block ( L_unittest )? ( block )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_L_module.nextNode(), root_1);

                adaptor.addChild(root_1, stream_moduleid.nextTree());
                adaptor.addChild(root_1, stream_block.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:540:87: ( L_unittest )?
                if ( stream_L_unittest.hasNext() ) {
                    adaptor.addChild(root_1, stream_L_unittest.nextNode());

                }
                stream_L_unittest.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:540:99: ( block )?
                if ( stream_block.hasNext() ) {
                    adaptor.addChild(root_1, stream_block.nextTree());

                }
                stream_block.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_module"

    public static class importprefix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importprefix"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:542:1: importprefix : testid ( ( NL )? PERIOD ( NL )? testid )* -> ^( IMPORT_PREFIX ( testid )* ) ;
    public final babel17Parser.importprefix_return importprefix() throws RecognitionException {
        babel17Parser.importprefix_return retval = new babel17Parser.importprefix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL249=null;
        Token PERIOD250=null;
        Token NL251=null;
        babel17Parser.testid_return testid248 = null;

        babel17Parser.testid_return testid252 = null;


        CommonTree NL249_tree=null;
        CommonTree PERIOD250_tree=null;
        CommonTree NL251_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_testid=new RewriteRuleSubtreeStream(adaptor,"rule testid");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:2: ( testid ( ( NL )? PERIOD ( NL )? testid )* -> ^( IMPORT_PREFIX ( testid )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:4: testid ( ( NL )? PERIOD ( NL )? testid )*
            {
            pushFollow(FOLLOW_testid_in_importprefix3313);
            testid248=testid();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_testid.add(testid248.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:11: ( ( NL )? PERIOD ( NL )? testid )*
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( (LA116_0==NL) ) {
                    int LA116_1 = input.LA(2);

                    if ( (LA116_1==PERIOD) ) {
                        int LA116_2 = input.LA(3);

                        if ( (LA116_2==NL) ) {
                            int LA116_4 = input.LA(4);

                            if ( (LA116_4==L_unittest||LA116_4==Id) ) {
                                alt116=1;
                            }


                        }
                        else if ( (LA116_2==L_unittest||LA116_2==Id) ) {
                            alt116=1;
                        }


                    }


                }
                else if ( (LA116_0==PERIOD) ) {
                    int LA116_2 = input.LA(2);

                    if ( (LA116_2==NL) ) {
                        int LA116_4 = input.LA(3);

                        if ( (LA116_4==L_unittest||LA116_4==Id) ) {
                            alt116=1;
                        }


                    }
                    else if ( (LA116_2==L_unittest||LA116_2==Id) ) {
                        alt116=1;
                    }


                }


                switch (alt116) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:12: ( NL )? PERIOD ( NL )? testid
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:12: ( NL )?
            	    int alt114=2;
            	    int LA114_0 = input.LA(1);

            	    if ( (LA114_0==NL) ) {
            	        alt114=1;
            	    }
            	    switch (alt114) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:12: NL
            	            {
            	            NL249=(Token)match(input,NL,FOLLOW_NL_in_importprefix3316); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL249);


            	            }
            	            break;

            	    }

            	    PERIOD250=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_importprefix3319); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD250);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:23: ( NL )?
            	    int alt115=2;
            	    int LA115_0 = input.LA(1);

            	    if ( (LA115_0==NL) ) {
            	        alt115=1;
            	    }
            	    switch (alt115) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:23: NL
            	            {
            	            NL251=(Token)match(input,NL,FOLLOW_NL_in_importprefix3321); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL251);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_testid_in_importprefix3324);
            	    testid252=testid();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_testid.add(testid252.getTree());

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);



            // AST REWRITE
            // elements: testid
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 543:36: -> ^( IMPORT_PREFIX ( testid )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:39: ^( IMPORT_PREFIX ( testid )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_PREFIX, "IMPORT_PREFIX"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:55: ( testid )*
                while ( stream_testid.hasNext() ) {
                    adaptor.addChild(root_1, stream_testid.nextTree());

                }
                stream_testid.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "importprefix"

    public static class importall_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importall"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:545:1: importall : UNDERSCORE -> ^( IMPORT_ALL ) ;
    public final babel17Parser.importall_return importall() throws RecognitionException {
        babel17Parser.importall_return retval = new babel17Parser.importall_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token UNDERSCORE253=null;

        CommonTree UNDERSCORE253_tree=null;
        RewriteRuleTokenStream stream_UNDERSCORE=new RewriteRuleTokenStream(adaptor,"token UNDERSCORE");

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:546:2: ( UNDERSCORE -> ^( IMPORT_ALL ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:546:4: UNDERSCORE
            {
            UNDERSCORE253=(Token)match(input,UNDERSCORE,FOLLOW_UNDERSCORE_in_importall3346); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UNDERSCORE.add(UNDERSCORE253);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 546:15: -> ^( IMPORT_ALL )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:546:18: ^( IMPORT_ALL )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_ALL, "IMPORT_ALL"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "importall"

    public static class importsetclause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importsetclause"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:548:1: importsetclause : ( testid ( ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )? )? -> ^( IMPORT_PLUS testid ( Id )? ) | '-' ( NL )? testid -> ^( IMPORT_MINUS testid ) | importall );
    public final babel17Parser.importsetclause_return importsetclause() throws RecognitionException {
        babel17Parser.importsetclause_return retval = new babel17Parser.importsetclause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL255=null;
        Token NL257=null;
        Token Id258=null;
        Token char_literal259=null;
        Token NL260=null;
        babel17Parser.testid_return testid254 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW256 = null;

        babel17Parser.testid_return testid261 = null;

        babel17Parser.importall_return importall262 = null;


        CommonTree NL255_tree=null;
        CommonTree NL257_tree=null;
        CommonTree Id258_tree=null;
        CommonTree char_literal259_tree=null;
        CommonTree NL260_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_testid=new RewriteRuleSubtreeStream(adaptor,"rule testid");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:2: ( testid ( ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )? )? -> ^( IMPORT_PLUS testid ( Id )? ) | '-' ( NL )? testid -> ^( IMPORT_MINUS testid ) | importall )
            int alt122=3;
            switch ( input.LA(1) ) {
            case L_unittest:
            case Id:
                {
                alt122=1;
                }
                break;
            case MINUS:
                {
                alt122=2;
                }
                break;
            case UNDERSCORE:
                {
                alt122=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;
            }

            switch (alt122) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:4: testid ( ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )? )?
                    {
                    pushFollow(FOLLOW_testid_in_importsetclause3362);
                    testid254=testid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_testid.add(testid254.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:11: ( ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )? )?
                    int alt120=2;
                    int LA120_0 = input.LA(1);

                    if ( (LA120_0==NL) ) {
                        int LA120_1 = input.LA(2);

                        if ( ((LA120_1>=A_DOUBLE_ARROW && LA120_1<=U_DOUBLE_ARROW)) ) {
                            alt120=1;
                        }
                    }
                    else if ( ((LA120_0>=A_DOUBLE_ARROW && LA120_0<=U_DOUBLE_ARROW)) ) {
                        alt120=1;
                    }
                    switch (alt120) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:12: ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )?
                            {
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:12: ( NL )?
                            int alt117=2;
                            int LA117_0 = input.LA(1);

                            if ( (LA117_0==NL) ) {
                                alt117=1;
                            }
                            switch (alt117) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:12: NL
                                    {
                                    NL255=(Token)match(input,NL,FOLLOW_NL_in_importsetclause3365); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL255);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_importsetclause3368);
                            token_DOUBLE_ARROW256=token_DOUBLE_ARROW();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW256.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:35: ( ( NL )? Id )?
                            int alt119=2;
                            int LA119_0 = input.LA(1);

                            if ( (LA119_0==NL) ) {
                                int LA119_1 = input.LA(2);

                                if ( (LA119_1==Id) ) {
                                    alt119=1;
                                }
                            }
                            else if ( (LA119_0==Id) ) {
                                alt119=1;
                            }
                            switch (alt119) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:36: ( NL )? Id
                                    {
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:36: ( NL )?
                                    int alt118=2;
                                    int LA118_0 = input.LA(1);

                                    if ( (LA118_0==NL) ) {
                                        alt118=1;
                                    }
                                    switch (alt118) {
                                        case 1 :
                                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:36: NL
                                            {
                                            NL257=(Token)match(input,NL,FOLLOW_NL_in_importsetclause3371); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_NL.add(NL257);


                                            }
                                            break;

                                    }

                                    Id258=(Token)match(input,Id,FOLLOW_Id_in_importsetclause3374); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_Id.add(Id258);


                                    }
                                    break;

                            }


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: Id, testid
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 549:47: -> ^( IMPORT_PLUS testid ( Id )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:50: ^( IMPORT_PLUS testid ( Id )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_PLUS, "IMPORT_PLUS"), root_1);

                        adaptor.addChild(root_1, stream_testid.nextTree());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:71: ( Id )?
                        if ( stream_Id.hasNext() ) {
                            adaptor.addChild(root_1, stream_Id.nextNode());

                        }
                        stream_Id.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:550:4: '-' ( NL )? testid
                    {
                    char_literal259=(Token)match(input,MINUS,FOLLOW_MINUS_in_importsetclause3394); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(char_literal259);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:550:8: ( NL )?
                    int alt121=2;
                    int LA121_0 = input.LA(1);

                    if ( (LA121_0==NL) ) {
                        alt121=1;
                    }
                    switch (alt121) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:550:8: NL
                            {
                            NL260=(Token)match(input,NL,FOLLOW_NL_in_importsetclause3396); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL260);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_testid_in_importsetclause3399);
                    testid261=testid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_testid.add(testid261.getTree());


                    // AST REWRITE
                    // elements: testid
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 550:19: -> ^( IMPORT_MINUS testid )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:550:22: ^( IMPORT_MINUS testid )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_MINUS, "IMPORT_MINUS"), root_1);

                        adaptor.addChild(root_1, stream_testid.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:551:4: importall
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_importall_in_importsetclause3412);
                    importall262=importall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, importall262.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "importsetclause"

    public static class importset_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importset"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:1: importset : '{' ( NL )? importsetclause ( ( NL )? ',' ( NL )? importsetclause )* ( NL )? '}' -> ^( IMPORT_SET ( importsetclause )* ) ;
    public final babel17Parser.importset_return importset() throws RecognitionException {
        babel17Parser.importset_return retval = new babel17Parser.importset_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal263=null;
        Token NL264=null;
        Token NL266=null;
        Token char_literal267=null;
        Token NL268=null;
        Token NL270=null;
        Token char_literal271=null;
        babel17Parser.importsetclause_return importsetclause265 = null;

        babel17Parser.importsetclause_return importsetclause269 = null;


        CommonTree char_literal263_tree=null;
        CommonTree NL264_tree=null;
        CommonTree NL266_tree=null;
        CommonTree char_literal267_tree=null;
        CommonTree NL268_tree=null;
        CommonTree NL270_tree=null;
        CommonTree char_literal271_tree=null;
        RewriteRuleTokenStream stream_CURLY_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_OPEN");
        RewriteRuleTokenStream stream_CURLY_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_importsetclause=new RewriteRuleSubtreeStream(adaptor,"rule importsetclause");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:554:2: ( '{' ( NL )? importsetclause ( ( NL )? ',' ( NL )? importsetclause )* ( NL )? '}' -> ^( IMPORT_SET ( importsetclause )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:554:4: '{' ( NL )? importsetclause ( ( NL )? ',' ( NL )? importsetclause )* ( NL )? '}'
            {
            char_literal263=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_importset3422); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal263);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:554:8: ( NL )?
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==NL) ) {
                alt123=1;
            }
            switch (alt123) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:554:8: NL
                    {
                    NL264=(Token)match(input,NL,FOLLOW_NL_in_importset3424); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL264);


                    }
                    break;

            }

            pushFollow(FOLLOW_importsetclause_in_importset3427);
            importsetclause265=importsetclause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importsetclause.add(importsetclause265.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:554:28: ( ( NL )? ',' ( NL )? importsetclause )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==NL) ) {
                    int LA126_1 = input.LA(2);

                    if ( (LA126_1==COMMA) ) {
                        alt126=1;
                    }


                }
                else if ( (LA126_0==COMMA) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:554:29: ( NL )? ',' ( NL )? importsetclause
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:554:29: ( NL )?
            	    int alt124=2;
            	    int LA124_0 = input.LA(1);

            	    if ( (LA124_0==NL) ) {
            	        alt124=1;
            	    }
            	    switch (alt124) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:554:29: NL
            	            {
            	            NL266=(Token)match(input,NL,FOLLOW_NL_in_importset3430); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL266);


            	            }
            	            break;

            	    }

            	    char_literal267=(Token)match(input,COMMA,FOLLOW_COMMA_in_importset3433); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal267);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:554:37: ( NL )?
            	    int alt125=2;
            	    int LA125_0 = input.LA(1);

            	    if ( (LA125_0==NL) ) {
            	        alt125=1;
            	    }
            	    switch (alt125) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:554:37: NL
            	            {
            	            NL268=(Token)match(input,NL,FOLLOW_NL_in_importset3435); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL268);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_importsetclause_in_importset3438);
            	    importsetclause269=importsetclause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_importsetclause.add(importsetclause269.getTree());

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:554:59: ( NL )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==NL) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:554:59: NL
                    {
                    NL270=(Token)match(input,NL,FOLLOW_NL_in_importset3442); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL270);


                    }
                    break;

            }

            char_literal271=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_importset3445); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal271);



            // AST REWRITE
            // elements: importsetclause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 554:67: -> ^( IMPORT_SET ( importsetclause )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:554:70: ^( IMPORT_SET ( importsetclause )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_SET, "IMPORT_SET"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:554:83: ( importsetclause )*
                while ( stream_importsetclause.hasNext() ) {
                    adaptor.addChild(root_1, stream_importsetclause.nextTree());

                }
                stream_importsetclause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "importset"

    public static class st_import_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_import"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:556:1: st_import : L_import ( NL )? importprefix ( ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id ) )? -> ^( L_import importprefix ( importall )? ( importset )? ( Id )? ) ;
    public final babel17Parser.st_import_return st_import() throws RecognitionException {
        babel17Parser.st_import_return retval = new babel17Parser.st_import_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_import272=null;
        Token NL273=null;
        Token NL275=null;
        Token PERIOD276=null;
        Token NL277=null;
        Token PERIOD279=null;
        Token NL280=null;
        Token NL283=null;
        Token Id284=null;
        babel17Parser.importprefix_return importprefix274 = null;

        babel17Parser.importall_return importall278 = null;

        babel17Parser.importset_return importset281 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW282 = null;


        CommonTree L_import272_tree=null;
        CommonTree NL273_tree=null;
        CommonTree NL275_tree=null;
        CommonTree PERIOD276_tree=null;
        CommonTree NL277_tree=null;
        CommonTree PERIOD279_tree=null;
        CommonTree NL280_tree=null;
        CommonTree NL283_tree=null;
        CommonTree Id284_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_L_import=new RewriteRuleTokenStream(adaptor,"token L_import");
        RewriteRuleSubtreeStream stream_importprefix=new RewriteRuleSubtreeStream(adaptor,"rule importprefix");
        RewriteRuleSubtreeStream stream_importset=new RewriteRuleSubtreeStream(adaptor,"rule importset");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_importall=new RewriteRuleSubtreeStream(adaptor,"rule importall");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:2: ( L_import ( NL )? importprefix ( ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id ) )? -> ^( L_import importprefix ( importall )? ( importset )? ( Id )? ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:4: L_import ( NL )? importprefix ( ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id ) )?
            {
            L_import272=(Token)match(input,L_import,FOLLOW_L_import_in_st_import3463); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_import.add(L_import272);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:13: ( NL )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==NL) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:13: NL
                    {
                    NL273=(Token)match(input,NL,FOLLOW_NL_in_st_import3465); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL273);


                    }
                    break;

            }

            pushFollow(FOLLOW_importprefix_in_st_import3468);
            importprefix274=importprefix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importprefix.add(importprefix274.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:30: ( ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id ) )?
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==NL) ) {
                int LA134_1 = input.LA(2);

                if ( ((LA134_1>=A_DOUBLE_ARROW && LA134_1<=U_DOUBLE_ARROW)||LA134_1==PERIOD) ) {
                    alt134=1;
                }
            }
            else if ( ((LA134_0>=A_DOUBLE_ARROW && LA134_0<=U_DOUBLE_ARROW)||LA134_0==PERIOD) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:31: ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id )
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:31: ( NL )?
                    int alt129=2;
                    int LA129_0 = input.LA(1);

                    if ( (LA129_0==NL) ) {
                        alt129=1;
                    }
                    switch (alt129) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:31: NL
                            {
                            NL275=(Token)match(input,NL,FOLLOW_NL_in_st_import3471); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL275);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:35: ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id )
                    int alt133=3;
                    int LA133_0 = input.LA(1);

                    if ( (LA133_0==PERIOD) ) {
                        switch ( input.LA(2) ) {
                        case NL:
                            {
                            int LA133_3 = input.LA(3);

                            if ( (LA133_3==CURLY_BRACKET_OPEN) ) {
                                alt133=2;
                            }
                            else if ( (LA133_3==UNDERSCORE) ) {
                                alt133=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 133, 3, input);

                                throw nvae;
                            }
                            }
                            break;
                        case UNDERSCORE:
                            {
                            alt133=1;
                            }
                            break;
                        case CURLY_BRACKET_OPEN:
                            {
                            alt133=2;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 133, 1, input);

                            throw nvae;
                        }

                    }
                    else if ( ((LA133_0>=A_DOUBLE_ARROW && LA133_0<=U_DOUBLE_ARROW)) ) {
                        alt133=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 133, 0, input);

                        throw nvae;
                    }
                    switch (alt133) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:36: PERIOD ( NL )? importall
                            {
                            PERIOD276=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_st_import3475); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD276);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:43: ( NL )?
                            int alt130=2;
                            int LA130_0 = input.LA(1);

                            if ( (LA130_0==NL) ) {
                                alt130=1;
                            }
                            switch (alt130) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:43: NL
                                    {
                                    NL277=(Token)match(input,NL,FOLLOW_NL_in_st_import3477); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL277);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_importall_in_st_import3480);
                            importall278=importall();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_importall.add(importall278.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:59: PERIOD ( NL )? importset
                            {
                            PERIOD279=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_st_import3484); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD279);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:66: ( NL )?
                            int alt131=2;
                            int LA131_0 = input.LA(1);

                            if ( (LA131_0==NL) ) {
                                alt131=1;
                            }
                            switch (alt131) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:66: NL
                                    {
                                    NL280=(Token)match(input,NL,FOLLOW_NL_in_st_import3486); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL280);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_importset_in_st_import3489);
                            importset281=importset();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_importset.add(importset281.getTree());

                            }
                            break;
                        case 3 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:82: token_DOUBLE_ARROW ( NL )? Id
                            {
                            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_st_import3493);
                            token_DOUBLE_ARROW282=token_DOUBLE_ARROW();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW282.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:101: ( NL )?
                            int alt132=2;
                            int LA132_0 = input.LA(1);

                            if ( (LA132_0==NL) ) {
                                alt132=1;
                            }
                            switch (alt132) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:101: NL
                                    {
                                    NL283=(Token)match(input,NL,FOLLOW_NL_in_st_import3495); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL283);


                                    }
                                    break;

                            }

                            Id284=(Token)match(input,Id,FOLLOW_Id_in_st_import3498); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Id.add(Id284);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: L_import, importset, importall, importprefix, Id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 557:111: -> ^( L_import importprefix ( importall )? ( importset )? ( Id )? )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:114: ^( L_import importprefix ( importall )? ( importset )? ( Id )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_L_import.nextNode(), root_1);

                adaptor.addChild(root_1, stream_importprefix.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:138: ( importall )?
                if ( stream_importall.hasNext() ) {
                    adaptor.addChild(root_1, stream_importall.nextTree());

                }
                stream_importall.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:149: ( importset )?
                if ( stream_importset.hasNext() ) {
                    adaptor.addChild(root_1, stream_importset.nextTree());

                }
                stream_importset.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:160: ( Id )?
                if ( stream_Id.hasNext() ) {
                    adaptor.addChild(root_1, stream_Id.nextNode());

                }
                stream_Id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_import"

    public static class expr_or_assign_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_or_assign"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:559:1: expr_or_assign : ( ( ( pattern | objelem_assign ) ( NL )? '=' )=> ( pattern | objelem_assign ) ( NL )? '=' ( NL )? expr -> ^( ASSIGN ( pattern )* ( objelem_assign )* expr ) | expr );
    public final babel17Parser.expr_or_assign_return expr_or_assign() throws RecognitionException {
        babel17Parser.expr_or_assign_return retval = new babel17Parser.expr_or_assign_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL287=null;
        Token char_literal288=null;
        Token NL289=null;
        babel17Parser.pattern_return pattern285 = null;

        babel17Parser.objelem_assign_return objelem_assign286 = null;

        babel17Parser.expr_return expr290 = null;

        babel17Parser.expr_return expr291 = null;


        CommonTree NL287_tree=null;
        CommonTree char_literal288_tree=null;
        CommonTree NL289_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_objelem_assign=new RewriteRuleSubtreeStream(adaptor,"rule objelem_assign");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:2: ( ( ( pattern | objelem_assign ) ( NL )? '=' )=> ( pattern | objelem_assign ) ( NL )? '=' ( NL )? expr -> ^( ASSIGN ( pattern )* ( objelem_assign )* expr ) | expr )
            int alt138=2;
            alt138 = dfa138.predict(input);
            switch (alt138) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:4: ( ( pattern | objelem_assign ) ( NL )? '=' )=> ( pattern | objelem_assign ) ( NL )? '=' ( NL )? expr
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:44: ( pattern | objelem_assign )
                    int alt135=2;
                    int LA135_0 = input.LA(1);

                    if ( (LA135_0==L_exception||(LA135_0>=L_true && LA135_0<=L_false)||LA135_0==L_nil||LA135_0==MINUS||(LA135_0>=A_ELLIPSIS && LA135_0<=U_ELLIPSIS)||LA135_0==Constr||LA135_0==Num||(LA135_0>=String && LA135_0<=ROUND_BRACKET_OPEN)||LA135_0==SQUARE_BRACKET_OPEN||LA135_0==CURLY_BRACKET_OPEN||LA135_0==UNDERSCORE) ) {
                        alt135=1;
                    }
                    else if ( (LA135_0==Id) ) {
                        int LA135_2 = input.LA(2);

                        if ( (LA135_2==PERIOD) ) {
                            alt135=2;
                        }
                        else if ( (LA135_2==ASSIGN||(LA135_2>=A_DOUBLE_COLON && LA135_2<=U_DOUBLE_COLON)||LA135_2==NL) ) {
                            alt135=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 135, 2, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 135, 0, input);

                        throw nvae;
                    }
                    switch (alt135) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:45: pattern
                            {
                            pushFollow(FOLLOW_pattern_in_expr_or_assign3546);
                            pattern285=pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pattern.add(pattern285.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:55: objelem_assign
                            {
                            pushFollow(FOLLOW_objelem_assign_in_expr_or_assign3550);
                            objelem_assign286=objelem_assign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_objelem_assign.add(objelem_assign286.getTree());

                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:71: ( NL )?
                    int alt136=2;
                    int LA136_0 = input.LA(1);

                    if ( (LA136_0==NL) ) {
                        alt136=1;
                    }
                    switch (alt136) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:71: NL
                            {
                            NL287=(Token)match(input,NL,FOLLOW_NL_in_expr_or_assign3553); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL287);


                            }
                            break;

                    }

                    char_literal288=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_expr_or_assign3556); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal288);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:79: ( NL )?
                    int alt137=2;
                    int LA137_0 = input.LA(1);

                    if ( (LA137_0==NL) ) {
                        alt137=1;
                    }
                    switch (alt137) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:79: NL
                            {
                            NL289=(Token)match(input,NL,FOLLOW_NL_in_expr_or_assign3558); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL289);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_expr_or_assign3561);
                    expr290=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr290.getTree());


                    // AST REWRITE
                    // elements: pattern, objelem_assign, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 560:88: -> ^( ASSIGN ( pattern )* ( objelem_assign )* expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:91: ^( ASSIGN ( pattern )* ( objelem_assign )* expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:100: ( pattern )*
                        while ( stream_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_pattern.nextTree());

                        }
                        stream_pattern.reset();
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:109: ( objelem_assign )*
                        while ( stream_objelem_assign.hasNext() ) {
                            adaptor.addChild(root_1, stream_objelem_assign.nextTree());

                        }
                        stream_objelem_assign.reset();
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:4: expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expr_in_expr_or_assign3580);
                    expr291=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr291.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expr_or_assign"

    public static class expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:563:1: expr : ( lop_expr | obj_expr );
    public final babel17Parser.expr_return expr() throws RecognitionException {
        babel17Parser.expr_return retval = new babel17Parser.expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.lop_expr_return lop_expr292 = null;

        babel17Parser.obj_expr_return obj_expr293 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:2: ( lop_expr | obj_expr )
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==L_begin||(LA139_0>=L_with && LA139_0<=L_if)||(LA139_0>=L_while && LA139_0<=L_for)||LA139_0==L_match||LA139_0==L_exception||LA139_0==L_try||(LA139_0>=L_concurrent && LA139_0<=L_lazy)||(LA139_0>=L_true && LA139_0<=L_nil)||LA139_0==L_typeof||LA139_0==L_not||LA139_0==MINUS||(LA139_0>=A_ELLIPSIS && LA139_0<=U_ELLIPSIS)||LA139_0==L_force||(LA139_0>=Constr && LA139_0<=Id)||(LA139_0>=Float && LA139_0<=Num)||(LA139_0>=String && LA139_0<=ROUND_BRACKET_OPEN)||LA139_0==SQUARE_BRACKET_OPEN||LA139_0==CURLY_BRACKET_OPEN||LA139_0==UNDERSCORE) ) {
                alt139=1;
            }
            else if ( (LA139_0==L_obj) ) {
                alt139=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);

                throw nvae;
            }
            switch (alt139) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:4: lop_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lop_expr_in_expr3591);
                    lop_expr292=lop_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lop_expr292.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:4: obj_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_obj_expr_in_expr3596);
                    obj_expr293=obj_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, obj_expr293.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expr"

    public static class control_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "control_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:567:1: control_expr : ( if_expr | while_do_expr | match_expr | for_expr | try_expr | begin_end );
    public final babel17Parser.control_expr_return control_expr() throws RecognitionException {
        babel17Parser.control_expr_return retval = new babel17Parser.control_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.if_expr_return if_expr294 = null;

        babel17Parser.while_do_expr_return while_do_expr295 = null;

        babel17Parser.match_expr_return match_expr296 = null;

        babel17Parser.for_expr_return for_expr297 = null;

        babel17Parser.try_expr_return try_expr298 = null;

        babel17Parser.begin_end_return begin_end299 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:568:2: ( if_expr | while_do_expr | match_expr | for_expr | try_expr | begin_end )
            int alt140=6;
            switch ( input.LA(1) ) {
            case L_if:
                {
                alt140=1;
                }
                break;
            case L_while:
                {
                alt140=2;
                }
                break;
            case L_match:
                {
                alt140=3;
                }
                break;
            case L_for:
                {
                alt140=4;
                }
                break;
            case L_try:
                {
                alt140=5;
                }
                break;
            case L_begin:
                {
                alt140=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                throw nvae;
            }

            switch (alt140) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:568:4: if_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_if_expr_in_control_expr3606);
                    if_expr294=if_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_expr294.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:569:4: while_do_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_while_do_expr_in_control_expr3611);
                    while_do_expr295=while_do_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_do_expr295.getTree());

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:570:4: match_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_match_expr_in_control_expr3616);
                    match_expr296=match_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, match_expr296.getTree());

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:571:4: for_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_for_expr_in_control_expr3621);
                    for_expr297=for_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_expr297.getTree());

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:572:5: try_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_try_expr_in_control_expr3627);
                    try_expr298=try_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, try_expr298.getTree());

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:4: begin_end
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_begin_end_in_control_expr3632);
                    begin_end299=begin_end();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, begin_end299.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "control_expr"

    public static class with_control_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "with_control_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:575:1: with_control_expr : ( control_expr | L_with ( NL )? protected_expr ( NL )? L_do block L_end -> ^( WITH protected_expr ^( BEGIN block ) ) );
    public final babel17Parser.with_control_expr_return with_control_expr() throws RecognitionException {
        babel17Parser.with_control_expr_return retval = new babel17Parser.with_control_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_with301=null;
        Token NL302=null;
        Token NL304=null;
        Token L_do305=null;
        Token L_end307=null;
        babel17Parser.control_expr_return control_expr300 = null;

        babel17Parser.protected_expr_return protected_expr303 = null;

        babel17Parser.block_return block306 = null;


        CommonTree L_with301_tree=null;
        CommonTree NL302_tree=null;
        CommonTree NL304_tree=null;
        CommonTree L_do305_tree=null;
        CommonTree L_end307_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_do=new RewriteRuleTokenStream(adaptor,"token L_do");
        RewriteRuleTokenStream stream_L_with=new RewriteRuleTokenStream(adaptor,"token L_with");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:576:2: ( control_expr | L_with ( NL )? protected_expr ( NL )? L_do block L_end -> ^( WITH protected_expr ^( BEGIN block ) ) )
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==L_begin||LA143_0==L_if||(LA143_0>=L_while && LA143_0<=L_for)||LA143_0==L_match||LA143_0==L_try) ) {
                alt143=1;
            }
            else if ( (LA143_0==L_with) ) {
                alt143=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;
            }
            switch (alt143) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:576:4: control_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_control_expr_in_with_control_expr3642);
                    control_expr300=control_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, control_expr300.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:4: L_with ( NL )? protected_expr ( NL )? L_do block L_end
                    {
                    L_with301=(Token)match(input,L_with,FOLLOW_L_with_in_with_control_expr3647); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_with.add(L_with301);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:11: ( NL )?
                    int alt141=2;
                    int LA141_0 = input.LA(1);

                    if ( (LA141_0==NL) ) {
                        alt141=1;
                    }
                    switch (alt141) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:11: NL
                            {
                            NL302=(Token)match(input,NL,FOLLOW_NL_in_with_control_expr3649); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL302);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_in_with_control_expr3652);
                    protected_expr303=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr303.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:30: ( NL )?
                    int alt142=2;
                    int LA142_0 = input.LA(1);

                    if ( (LA142_0==NL) ) {
                        alt142=1;
                    }
                    switch (alt142) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:30: NL
                            {
                            NL304=(Token)match(input,NL,FOLLOW_NL_in_with_control_expr3654); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL304);


                            }
                            break;

                    }

                    L_do305=(Token)match(input,L_do,FOLLOW_L_do_in_with_control_expr3657); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_do.add(L_do305);

                    pushFollow(FOLLOW_block_in_with_control_expr3659);
                    block306=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block306.getTree());
                    L_end307=(Token)match(input,L_end,FOLLOW_L_end_in_with_control_expr3661); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_end.add(L_end307);



                    // AST REWRITE
                    // elements: block, protected_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 577:51: -> ^( WITH protected_expr ^( BEGIN block ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:54: ^( WITH protected_expr ^( BEGIN block ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WITH, "WITH"), root_1);

                        adaptor.addChild(root_1, stream_protected_expr.nextTree());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:76: ^( BEGIN block )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BEGIN, "BEGIN"), root_2);

                        adaptor.addChild(root_2, stream_block.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "with_control_expr"

    public static class protected_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "protected_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:580:1: protected_expr : ( p_lop_expr | obj_expr );
    public final babel17Parser.protected_expr_return protected_expr() throws RecognitionException {
        babel17Parser.protected_expr_return retval = new babel17Parser.protected_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.p_lop_expr_return p_lop_expr308 = null;

        babel17Parser.obj_expr_return obj_expr309 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:581:2: ( p_lop_expr | obj_expr )
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==L_begin||(LA144_0>=L_with && LA144_0<=L_if)||(LA144_0>=L_while && LA144_0<=L_for)||LA144_0==L_match||LA144_0==L_exception||LA144_0==L_try||(LA144_0>=L_concurrent && LA144_0<=L_lazy)||(LA144_0>=L_true && LA144_0<=L_nil)||LA144_0==L_typeof||LA144_0==L_not||LA144_0==MINUS||(LA144_0>=A_ELLIPSIS && LA144_0<=U_ELLIPSIS)||LA144_0==L_force||(LA144_0>=Constr && LA144_0<=Id)||(LA144_0>=Float && LA144_0<=Num)||(LA144_0>=String && LA144_0<=ROUND_BRACKET_OPEN)||LA144_0==SQUARE_BRACKET_OPEN||LA144_0==CURLY_BRACKET_OPEN||LA144_0==UNDERSCORE) ) {
                alt144=1;
            }
            else if ( (LA144_0==L_obj) ) {
                alt144=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;
            }
            switch (alt144) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:581:4: p_lop_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_lop_expr_in_protected_expr3686);
                    p_lop_expr308=p_lop_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_lop_expr308.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:582:4: obj_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_obj_expr_in_protected_expr3691);
                    obj_expr309=obj_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, obj_expr309.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "protected_expr"

    public static class protected_expr_nc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "protected_expr_nc"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:584:1: protected_expr_nc : protected_expr ;
    public final babel17Parser.protected_expr_nc_return protected_expr_nc() throws RecognitionException {
        babel17Parser.protected_expr_nc_return retval = new babel17Parser.protected_expr_nc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.protected_expr_return protected_expr310 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:585:2: ( protected_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:585:4: protected_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_protected_expr_in_protected_expr_nc3702);
            protected_expr310=protected_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, protected_expr310.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "protected_expr_nc"

    public static class begin_end_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "begin_end"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:587:1: begin_end : L_begin block L_end -> ^( BEGIN block ) ;
    public final babel17Parser.begin_end_return begin_end() throws RecognitionException {
        babel17Parser.begin_end_return retval = new babel17Parser.begin_end_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_begin311=null;
        Token L_end313=null;
        babel17Parser.block_return block312 = null;


        CommonTree L_begin311_tree=null;
        CommonTree L_end313_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_begin=new RewriteRuleTokenStream(adaptor,"token L_begin");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:588:2: ( L_begin block L_end -> ^( BEGIN block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:588:4: L_begin block L_end
            {
            L_begin311=(Token)match(input,L_begin,FOLLOW_L_begin_in_begin_end3712); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_begin.add(L_begin311);

            pushFollow(FOLLOW_block_in_begin_end3714);
            block312=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block312.getTree());
            L_end313=(Token)match(input,L_end,FOLLOW_L_end_in_begin_end3716); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end313);



            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 588:24: -> ^( BEGIN block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:588:27: ^( BEGIN block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BEGIN, "BEGIN"), root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "begin_end"

    public static class parents_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parents"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:591:1: parents : ( '+' primitive_expr -> ^( PARENTS_PLUS primitive_expr ) | '*' primitive_expr -> ^( PARENTS_MUL primitive_expr ) );
    public final babel17Parser.parents_return parents() throws RecognitionException {
        babel17Parser.parents_return retval = new babel17Parser.parents_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal314=null;
        Token char_literal316=null;
        babel17Parser.primitive_expr_return primitive_expr315 = null;

        babel17Parser.primitive_expr_return primitive_expr317 = null;


        CommonTree char_literal314_tree=null;
        CommonTree char_literal316_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_TIMES=new RewriteRuleTokenStream(adaptor,"token TIMES");
        RewriteRuleSubtreeStream stream_primitive_expr=new RewriteRuleSubtreeStream(adaptor,"rule primitive_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:591:9: ( '+' primitive_expr -> ^( PARENTS_PLUS primitive_expr ) | '*' primitive_expr -> ^( PARENTS_MUL primitive_expr ) )
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==PLUS) ) {
                alt145=1;
            }
            else if ( (LA145_0==TIMES) ) {
                alt145=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);

                throw nvae;
            }
            switch (alt145) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:591:11: '+' primitive_expr
                    {
                    char_literal314=(Token)match(input,PLUS,FOLLOW_PLUS_in_parents3734); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(char_literal314);

                    pushFollow(FOLLOW_primitive_expr_in_parents3736);
                    primitive_expr315=primitive_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitive_expr.add(primitive_expr315.getTree());


                    // AST REWRITE
                    // elements: primitive_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 591:30: -> ^( PARENTS_PLUS primitive_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:591:33: ^( PARENTS_PLUS primitive_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARENTS_PLUS, "PARENTS_PLUS"), root_1);

                        adaptor.addChild(root_1, stream_primitive_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:592:4: '*' primitive_expr
                    {
                    char_literal316=(Token)match(input,TIMES,FOLLOW_TIMES_in_parents3749); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMES.add(char_literal316);

                    pushFollow(FOLLOW_primitive_expr_in_parents3751);
                    primitive_expr317=primitive_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitive_expr.add(primitive_expr317.getTree());


                    // AST REWRITE
                    // elements: primitive_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 592:23: -> ^( PARENTS_MUL primitive_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:592:26: ^( PARENTS_MUL primitive_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARENTS_MUL, "PARENTS_MUL"), root_1);

                        adaptor.addChild(root_1, stream_primitive_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parents"

    public static class obj_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "obj_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:595:1: obj_expr : ( ( L_obj ( NL )? parents )=> L_obj ( NL )? parents block L_end -> ^( OBJ block parents ) | L_obj block L_end -> ^( OBJ block ) );
    public final babel17Parser.obj_expr_return obj_expr() throws RecognitionException {
        babel17Parser.obj_expr_return retval = new babel17Parser.obj_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_obj318=null;
        Token NL319=null;
        Token L_end322=null;
        Token L_obj323=null;
        Token L_end325=null;
        babel17Parser.parents_return parents320 = null;

        babel17Parser.block_return block321 = null;

        babel17Parser.block_return block324 = null;


        CommonTree L_obj318_tree=null;
        CommonTree NL319_tree=null;
        CommonTree L_end322_tree=null;
        CommonTree L_obj323_tree=null;
        CommonTree L_end325_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_obj=new RewriteRuleTokenStream(adaptor,"token L_obj");
        RewriteRuleSubtreeStream stream_parents=new RewriteRuleSubtreeStream(adaptor,"rule parents");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:595:9: ( ( L_obj ( NL )? parents )=> L_obj ( NL )? parents block L_end -> ^( OBJ block parents ) | L_obj block L_end -> ^( OBJ block ) )
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==L_obj) ) {
                int LA147_1 = input.LA(2);

                if ( (LA147_1==NL) ) {
                    int LA147_2 = input.LA(3);

                    if ( (LA147_2==PLUS) && (synpred10_babel17())) {
                        alt147=1;
                    }
                    else if ( (LA147_2==TIMES) && (synpred10_babel17())) {
                        alt147=1;
                    }
                    else if ( ((LA147_2>=L_begin && LA147_2<=L_if)||(LA147_2>=L_while && LA147_2<=L_for)||(LA147_2>=L_yield && LA147_2<=L_match)||(LA147_2>=L_val && LA147_2<=L_def)||LA147_2==L_exception||LA147_2==L_try||(LA147_2>=L_concurrent && LA147_2<=L_nil)||(LA147_2>=L_module && LA147_2<=L_import)||LA147_2==L_not||LA147_2==SC||LA147_2==MINUS||(LA147_2>=A_ELLIPSIS && LA147_2<=U_ELLIPSIS)||LA147_2==L_force||(LA147_2>=NL && LA147_2<=Id)||(LA147_2>=Float && LA147_2<=Num)||(LA147_2>=String && LA147_2<=ROUND_BRACKET_OPEN)||LA147_2==SQUARE_BRACKET_OPEN||LA147_2==CURLY_BRACKET_OPEN||LA147_2==UNDERSCORE||(LA147_2>=PRAGMA_LOG && LA147_2<=PRAGMA_PROFILE)) ) {
                        alt147=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 147, 2, input);

                        throw nvae;
                    }
                }
                else if ( ((LA147_1>=L_begin && LA147_1<=L_if)||(LA147_1>=L_while && LA147_1<=L_for)||(LA147_1>=L_yield && LA147_1<=L_match)||(LA147_1>=L_val && LA147_1<=L_def)||LA147_1==L_exception||LA147_1==L_try||(LA147_1>=L_concurrent && LA147_1<=L_nil)||(LA147_1>=L_module && LA147_1<=L_import)||LA147_1==L_not||LA147_1==SC||LA147_1==MINUS||(LA147_1>=A_ELLIPSIS && LA147_1<=U_ELLIPSIS)||LA147_1==L_force||(LA147_1>=Constr && LA147_1<=Id)||(LA147_1>=Float && LA147_1<=Num)||(LA147_1>=String && LA147_1<=ROUND_BRACKET_OPEN)||LA147_1==SQUARE_BRACKET_OPEN||LA147_1==CURLY_BRACKET_OPEN||LA147_1==UNDERSCORE||(LA147_1>=PRAGMA_LOG && LA147_1<=PRAGMA_PROFILE)) ) {
                    alt147=2;
                }
                else if ( (LA147_1==PLUS) && (synpred10_babel17())) {
                    alt147=1;
                }
                else if ( (LA147_1==TIMES) && (synpred10_babel17())) {
                    alt147=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 147, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;
            }
            switch (alt147) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:595:11: ( L_obj ( NL )? parents )=> L_obj ( NL )? parents block L_end
                    {
                    L_obj318=(Token)match(input,L_obj,FOLLOW_L_obj_in_obj_expr3779); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_obj.add(L_obj318);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:595:40: ( NL )?
                    int alt146=2;
                    int LA146_0 = input.LA(1);

                    if ( (LA146_0==NL) ) {
                        alt146=1;
                    }
                    switch (alt146) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:595:40: NL
                            {
                            NL319=(Token)match(input,NL,FOLLOW_NL_in_obj_expr3781); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL319);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_parents_in_obj_expr3784);
                    parents320=parents();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parents.add(parents320.getTree());
                    pushFollow(FOLLOW_block_in_obj_expr3786);
                    block321=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block321.getTree());
                    L_end322=(Token)match(input,L_end,FOLLOW_L_end_in_obj_expr3788); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_end.add(L_end322);



                    // AST REWRITE
                    // elements: parents, block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 595:64: -> ^( OBJ block parents )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:595:67: ^( OBJ block parents )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJ, "OBJ"), root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());
                        adaptor.addChild(root_1, stream_parents.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:596:17: L_obj block L_end
                    {
                    L_obj323=(Token)match(input,L_obj,FOLLOW_L_obj_in_obj_expr3816); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_obj.add(L_obj323);

                    pushFollow(FOLLOW_block_in_obj_expr3818);
                    block324=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block324.getTree());
                    L_end325=(Token)match(input,L_end,FOLLOW_L_end_in_obj_expr3820); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_end.add(L_end325);



                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 596:35: -> ^( OBJ block )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:596:38: ^( OBJ block )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJ, "OBJ"), root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "obj_expr"

    public static class lop_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lop_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:598:1: lop_expr : ( ( lambda_expr )=> lambda_expr | ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | op_expr );
    public final babel17Parser.lop_expr_return lop_expr() throws RecognitionException {
        babel17Parser.lop_expr_return retval = new babel17Parser.lop_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.lambda_expr_return lambda_expr326 = null;

        babel17Parser.lambda_expr_nobrackets_return lambda_expr_nobrackets327 = null;

        babel17Parser.op_expr_return op_expr328 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:2: ( ( lambda_expr )=> lambda_expr | ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | op_expr )
            int alt148=3;
            alt148 = dfa148.predict(input);
            switch (alt148) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:4: ( lambda_expr )=> lambda_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lambda_expr_in_lop_expr3848);
                    lambda_expr326=lambda_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lambda_expr326.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:600:4: ( lambda_expr_nobrackets )=> lambda_expr_nobrackets
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lambda_expr_nobrackets_in_lop_expr3859);
                    lambda_expr_nobrackets327=lambda_expr_nobrackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lambda_expr_nobrackets327.getTree());

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:601:4: op_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_op_expr_in_lop_expr3864);
                    op_expr328=op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op_expr328.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lop_expr"

    public static class p_lop_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_lop_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:603:1: p_lop_expr : ( ( lambda_expr )=> lambda_expr | ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | p_op_expr );
    public final babel17Parser.p_lop_expr_return p_lop_expr() throws RecognitionException {
        babel17Parser.p_lop_expr_return retval = new babel17Parser.p_lop_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.lambda_expr_return lambda_expr329 = null;

        babel17Parser.lambda_expr_nobrackets_return lambda_expr_nobrackets330 = null;

        babel17Parser.p_op_expr_return p_op_expr331 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:604:2: ( ( lambda_expr )=> lambda_expr | ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | p_op_expr )
            int alt149=3;
            alt149 = dfa149.predict(input);
            switch (alt149) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:604:4: ( lambda_expr )=> lambda_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lambda_expr_in_p_lop_expr3880);
                    lambda_expr329=lambda_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lambda_expr329.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:605:4: ( lambda_expr_nobrackets )=> lambda_expr_nobrackets
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lambda_expr_nobrackets_in_p_lop_expr3891);
                    lambda_expr_nobrackets330=lambda_expr_nobrackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lambda_expr_nobrackets330.getTree());

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:606:4: p_op_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_op_expr_in_p_lop_expr3896);
                    p_op_expr331=p_op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_op_expr331.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_lop_expr"

    public static class if_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "if_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:608:1: if_expr : L_if ( NL )? protected_expr ( NL )? L_then block ( L_elseif ( NL )? protected_expr ( NL )? L_then block )* ( L_else block )? L_end -> ^( IF ( protected_expr )* ( block )* ) ;
    public final babel17Parser.if_expr_return if_expr() throws RecognitionException {
        babel17Parser.if_expr_return retval = new babel17Parser.if_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_if332=null;
        Token NL333=null;
        Token NL335=null;
        Token L_then336=null;
        Token L_elseif338=null;
        Token NL339=null;
        Token NL341=null;
        Token L_then342=null;
        Token L_else344=null;
        Token L_end346=null;
        babel17Parser.protected_expr_return protected_expr334 = null;

        babel17Parser.block_return block337 = null;

        babel17Parser.protected_expr_return protected_expr340 = null;

        babel17Parser.block_return block343 = null;

        babel17Parser.block_return block345 = null;


        CommonTree L_if332_tree=null;
        CommonTree NL333_tree=null;
        CommonTree NL335_tree=null;
        CommonTree L_then336_tree=null;
        CommonTree L_elseif338_tree=null;
        CommonTree NL339_tree=null;
        CommonTree NL341_tree=null;
        CommonTree L_then342_tree=null;
        CommonTree L_else344_tree=null;
        CommonTree L_end346_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_else=new RewriteRuleTokenStream(adaptor,"token L_else");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_elseif=new RewriteRuleTokenStream(adaptor,"token L_elseif");
        RewriteRuleTokenStream stream_L_then=new RewriteRuleTokenStream(adaptor,"token L_then");
        RewriteRuleTokenStream stream_L_if=new RewriteRuleTokenStream(adaptor,"token L_if");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:608:9: ( L_if ( NL )? protected_expr ( NL )? L_then block ( L_elseif ( NL )? protected_expr ( NL )? L_then block )* ( L_else block )? L_end -> ^( IF ( protected_expr )* ( block )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:608:11: L_if ( NL )? protected_expr ( NL )? L_then block ( L_elseif ( NL )? protected_expr ( NL )? L_then block )* ( L_else block )? L_end
            {
            L_if332=(Token)match(input,L_if,FOLLOW_L_if_in_if_expr3906); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_if.add(L_if332);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:608:16: ( NL )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==NL) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:608:16: NL
                    {
                    NL333=(Token)match(input,NL,FOLLOW_NL_in_if_expr3908); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL333);


                    }
                    break;

            }

            pushFollow(FOLLOW_protected_expr_in_if_expr3911);
            protected_expr334=protected_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr334.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:608:35: ( NL )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==NL) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:608:35: NL
                    {
                    NL335=(Token)match(input,NL,FOLLOW_NL_in_if_expr3913); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL335);


                    }
                    break;

            }

            L_then336=(Token)match(input,L_then,FOLLOW_L_then_in_if_expr3916); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_then.add(L_then336);

            pushFollow(FOLLOW_block_in_if_expr3918);
            block337=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block337.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:609:3: ( L_elseif ( NL )? protected_expr ( NL )? L_then block )*
            loop154:
            do {
                int alt154=2;
                int LA154_0 = input.LA(1);

                if ( (LA154_0==L_elseif) ) {
                    alt154=1;
                }


                switch (alt154) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:609:4: L_elseif ( NL )? protected_expr ( NL )? L_then block
            	    {
            	    L_elseif338=(Token)match(input,L_elseif,FOLLOW_L_elseif_in_if_expr3924); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_L_elseif.add(L_elseif338);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:609:13: ( NL )?
            	    int alt152=2;
            	    int LA152_0 = input.LA(1);

            	    if ( (LA152_0==NL) ) {
            	        alt152=1;
            	    }
            	    switch (alt152) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:609:13: NL
            	            {
            	            NL339=(Token)match(input,NL,FOLLOW_NL_in_if_expr3926); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL339);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_protected_expr_in_if_expr3929);
            	    protected_expr340=protected_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr340.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:609:32: ( NL )?
            	    int alt153=2;
            	    int LA153_0 = input.LA(1);

            	    if ( (LA153_0==NL) ) {
            	        alt153=1;
            	    }
            	    switch (alt153) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:609:32: NL
            	            {
            	            NL341=(Token)match(input,NL,FOLLOW_NL_in_if_expr3931); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL341);


            	            }
            	            break;

            	    }

            	    L_then342=(Token)match(input,L_then,FOLLOW_L_then_in_if_expr3934); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_L_then.add(L_then342);

            	    pushFollow(FOLLOW_block_in_if_expr3936);
            	    block343=block();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_block.add(block343.getTree());

            	    }
            	    break;

            	default :
            	    break loop154;
                }
            } while (true);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:610:3: ( L_else block )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==L_else) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:610:4: L_else block
                    {
                    L_else344=(Token)match(input,L_else,FOLLOW_L_else_in_if_expr3944); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_else.add(L_else344);

                    pushFollow(FOLLOW_block_in_if_expr3946);
                    block345=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block345.getTree());

                    }
                    break;

            }

            L_end346=(Token)match(input,L_end,FOLLOW_L_end_in_if_expr3950); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end346);



            // AST REWRITE
            // elements: block, protected_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 610:26: -> ^( IF ( protected_expr )* ( block )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:610:29: ^( IF ( protected_expr )* ( block )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IF, "IF"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:610:34: ( protected_expr )*
                while ( stream_protected_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_protected_expr.nextTree());

                }
                stream_protected_expr.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:610:50: ( block )*
                while ( stream_block.hasNext() ) {
                    adaptor.addChild(root_1, stream_block.nextTree());

                }
                stream_block.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "if_expr"

    public static class while_do_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "while_do_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:612:1: while_do_expr : L_while ( NL )? protected_expr ( NL )? L_do block L_end -> ^( WHILE_DO protected_expr block ) ;
    public final babel17Parser.while_do_expr_return while_do_expr() throws RecognitionException {
        babel17Parser.while_do_expr_return retval = new babel17Parser.while_do_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_while347=null;
        Token NL348=null;
        Token NL350=null;
        Token L_do351=null;
        Token L_end353=null;
        babel17Parser.protected_expr_return protected_expr349 = null;

        babel17Parser.block_return block352 = null;


        CommonTree L_while347_tree=null;
        CommonTree NL348_tree=null;
        CommonTree NL350_tree=null;
        CommonTree L_do351_tree=null;
        CommonTree L_end353_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_do=new RewriteRuleTokenStream(adaptor,"token L_do");
        RewriteRuleTokenStream stream_L_while=new RewriteRuleTokenStream(adaptor,"token L_while");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:2: ( L_while ( NL )? protected_expr ( NL )? L_do block L_end -> ^( WHILE_DO protected_expr block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:4: L_while ( NL )? protected_expr ( NL )? L_do block L_end
            {
            L_while347=(Token)match(input,L_while,FOLLOW_L_while_in_while_do_expr3974); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_while.add(L_while347);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:12: ( NL )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==NL) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:12: NL
                    {
                    NL348=(Token)match(input,NL,FOLLOW_NL_in_while_do_expr3976); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL348);


                    }
                    break;

            }

            pushFollow(FOLLOW_protected_expr_in_while_do_expr3979);
            protected_expr349=protected_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr349.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:31: ( NL )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==NL) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:31: NL
                    {
                    NL350=(Token)match(input,NL,FOLLOW_NL_in_while_do_expr3981); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL350);


                    }
                    break;

            }

            L_do351=(Token)match(input,L_do,FOLLOW_L_do_in_while_do_expr3984); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_do.add(L_do351);

            pushFollow(FOLLOW_block_in_while_do_expr3986);
            block352=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block352.getTree());
            L_end353=(Token)match(input,L_end,FOLLOW_L_end_in_while_do_expr3988); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end353);



            // AST REWRITE
            // elements: protected_expr, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 614:5: -> ^( WHILE_DO protected_expr block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:614:8: ^( WHILE_DO protected_expr block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHILE_DO, "WHILE_DO"), root_1);

                adaptor.addChild(root_1, stream_protected_expr.nextTree());
                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "while_do_expr"

    public static class cases_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cases"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:616:1: cases : ( full_cases | pattern ( NL )? token_DOUBLE_ARROW block -> ^( CASES ^( NIL_TOKEN pattern block ) ) );
    public final babel17Parser.cases_return cases() throws RecognitionException {
        babel17Parser.cases_return retval = new babel17Parser.cases_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL356=null;
        babel17Parser.full_cases_return full_cases354 = null;

        babel17Parser.pattern_return pattern355 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW357 = null;

        babel17Parser.block_return block358 = null;


        CommonTree NL356_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:617:2: ( full_cases | pattern ( NL )? token_DOUBLE_ARROW block -> ^( CASES ^( NIL_TOKEN pattern block ) ) )
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==L_case) ) {
                alt159=1;
            }
            else if ( (LA159_0==L_exception||(LA159_0>=L_true && LA159_0<=L_false)||LA159_0==L_nil||LA159_0==MINUS||(LA159_0>=A_ELLIPSIS && LA159_0<=U_ELLIPSIS)||(LA159_0>=Constr && LA159_0<=Id)||LA159_0==Num||(LA159_0>=String && LA159_0<=ROUND_BRACKET_OPEN)||LA159_0==SQUARE_BRACKET_OPEN||LA159_0==CURLY_BRACKET_OPEN||LA159_0==UNDERSCORE) ) {
                alt159=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;
            }
            switch (alt159) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:617:4: full_cases
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_full_cases_in_cases4018);
                    full_cases354=full_cases();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, full_cases354.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:618:4: pattern ( NL )? token_DOUBLE_ARROW block
                    {
                    pushFollow(FOLLOW_pattern_in_cases4023);
                    pattern355=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern355.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:618:12: ( NL )?
                    int alt158=2;
                    int LA158_0 = input.LA(1);

                    if ( (LA158_0==NL) ) {
                        alt158=1;
                    }
                    switch (alt158) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:618:12: NL
                            {
                            NL356=(Token)match(input,NL,FOLLOW_NL_in_cases4025); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL356);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_token_DOUBLE_ARROW_in_cases4028);
                    token_DOUBLE_ARROW357=token_DOUBLE_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW357.getTree());
                    pushFollow(FOLLOW_block_in_cases4030);
                    block358=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block358.getTree());


                    // AST REWRITE
                    // elements: pattern, block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 618:41: -> ^( CASES ^( NIL_TOKEN pattern block ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:618:44: ^( CASES ^( NIL_TOKEN pattern block ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:618:52: ^( NIL_TOKEN pattern block )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        adaptor.addChild(root_2, stream_pattern.nextTree());
                        adaptor.addChild(root_2, stream_block.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cases"

    public static class full_cases_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "full_cases"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:620:1: full_cases : ( case_expr )+ -> ^( CASES ( case_expr )+ ) ;
    public final babel17Parser.full_cases_return full_cases() throws RecognitionException {
        babel17Parser.full_cases_return retval = new babel17Parser.full_cases_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.case_expr_return case_expr359 = null;


        RewriteRuleSubtreeStream stream_case_expr=new RewriteRuleSubtreeStream(adaptor,"rule case_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:621:2: ( ( case_expr )+ -> ^( CASES ( case_expr )+ ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:621:4: ( case_expr )+
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:621:4: ( case_expr )+
            int cnt160=0;
            loop160:
            do {
                int alt160=2;
                int LA160_0 = input.LA(1);

                if ( (LA160_0==L_case) ) {
                    alt160=1;
                }


                switch (alt160) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:621:4: case_expr
            	    {
            	    pushFollow(FOLLOW_case_expr_in_full_cases4053);
            	    case_expr359=case_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_case_expr.add(case_expr359.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt160 >= 1 ) break loop160;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(160, input);
                        throw eee;
                }
                cnt160++;
            } while (true);



            // AST REWRITE
            // elements: case_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 621:15: -> ^( CASES ( case_expr )+ )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:621:18: ^( CASES ( case_expr )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                if ( !(stream_case_expr.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_case_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_case_expr.nextTree());

                }
                stream_case_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "full_cases"

    public static class case_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "case_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:623:1: case_expr : ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block ) -> ^( NIL_TOKEN casepattern block ) ;
    public final babel17Parser.case_expr_return case_expr() throws RecognitionException {
        babel17Parser.case_expr_return retval = new babel17Parser.case_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_case360=null;
        Token NL361=null;
        Token NL363=null;
        babel17Parser.casepattern_return casepattern362 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW364 = null;

        babel17Parser.block_return block365 = null;


        CommonTree L_case360_tree=null;
        CommonTree NL361_tree=null;
        CommonTree NL363_tree=null;
        RewriteRuleTokenStream stream_L_case=new RewriteRuleTokenStream(adaptor,"token L_case");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_casepattern=new RewriteRuleSubtreeStream(adaptor,"rule casepattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:624:2: ( ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block ) -> ^( NIL_TOKEN casepattern block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:624:4: ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block )
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:624:4: ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:624:5: L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block
            {
            L_case360=(Token)match(input,L_case,FOLLOW_L_case_in_case_expr4074); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_case.add(L_case360);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:624:12: ( NL )?
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==NL) ) {
                alt161=1;
            }
            switch (alt161) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:624:12: NL
                    {
                    NL361=(Token)match(input,NL,FOLLOW_NL_in_case_expr4076); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL361);


                    }
                    break;

            }

            pushFollow(FOLLOW_casepattern_in_case_expr4079);
            casepattern362=casepattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_casepattern.add(casepattern362.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:624:28: ( NL )?
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==NL) ) {
                alt162=1;
            }
            switch (alt162) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:624:28: NL
                    {
                    NL363=(Token)match(input,NL,FOLLOW_NL_in_case_expr4081); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL363);


                    }
                    break;

            }

            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_case_expr4084);
            token_DOUBLE_ARROW364=token_DOUBLE_ARROW();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW364.getTree());
            pushFollow(FOLLOW_block_in_case_expr4086);
            block365=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block365.getTree());

            }



            // AST REWRITE
            // elements: casepattern, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 624:58: -> ^( NIL_TOKEN casepattern block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:624:61: ^( NIL_TOKEN casepattern block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_1);

                adaptor.addChild(root_1, stream_casepattern.nextTree());
                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "case_expr"

    public static class match_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "match_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:626:1: match_expr : L_match ( NL )? p_op_expr ( NL )? full_cases L_end -> ^( MATCH p_op_expr full_cases ) ;
    public final babel17Parser.match_expr_return match_expr() throws RecognitionException {
        babel17Parser.match_expr_return retval = new babel17Parser.match_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_match366=null;
        Token NL367=null;
        Token NL369=null;
        Token L_end371=null;
        babel17Parser.p_op_expr_return p_op_expr368 = null;

        babel17Parser.full_cases_return full_cases370 = null;


        CommonTree L_match366_tree=null;
        CommonTree NL367_tree=null;
        CommonTree NL369_tree=null;
        CommonTree L_end371_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_match=new RewriteRuleTokenStream(adaptor,"token L_match");
        RewriteRuleSubtreeStream stream_full_cases=new RewriteRuleSubtreeStream(adaptor,"rule full_cases");
        RewriteRuleSubtreeStream stream_p_op_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_op_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:627:2: ( L_match ( NL )? p_op_expr ( NL )? full_cases L_end -> ^( MATCH p_op_expr full_cases ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:627:4: L_match ( NL )? p_op_expr ( NL )? full_cases L_end
            {
            L_match366=(Token)match(input,L_match,FOLLOW_L_match_in_match_expr4107); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_match.add(L_match366);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:627:12: ( NL )?
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==NL) ) {
                alt163=1;
            }
            switch (alt163) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:627:12: NL
                    {
                    NL367=(Token)match(input,NL,FOLLOW_NL_in_match_expr4109); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL367);


                    }
                    break;

            }

            pushFollow(FOLLOW_p_op_expr_in_match_expr4112);
            p_op_expr368=p_op_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_op_expr.add(p_op_expr368.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:627:26: ( NL )?
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==NL) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:627:26: NL
                    {
                    NL369=(Token)match(input,NL,FOLLOW_NL_in_match_expr4114); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL369);


                    }
                    break;

            }

            pushFollow(FOLLOW_full_cases_in_match_expr4117);
            full_cases370=full_cases();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_full_cases.add(full_cases370.getTree());
            L_end371=(Token)match(input,L_end,FOLLOW_L_end_in_match_expr4119); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end371);



            // AST REWRITE
            // elements: full_cases, p_op_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 628:5: -> ^( MATCH p_op_expr full_cases )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:628:8: ^( MATCH p_op_expr full_cases )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH, "MATCH"), root_1);

                adaptor.addChild(root_1, stream_p_op_expr.nextTree());
                adaptor.addChild(root_1, stream_full_cases.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "match_expr"

    public static class try_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "try_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:630:1: try_expr : L_try ( NL )? pure_block ( NL )? L_catch ( NL )? full_cases L_end -> ^( TRY pure_block full_cases ) ;
    public final babel17Parser.try_expr_return try_expr() throws RecognitionException {
        babel17Parser.try_expr_return retval = new babel17Parser.try_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_try372=null;
        Token NL373=null;
        Token NL375=null;
        Token L_catch376=null;
        Token NL377=null;
        Token L_end379=null;
        babel17Parser.pure_block_return pure_block374 = null;

        babel17Parser.full_cases_return full_cases378 = null;


        CommonTree L_try372_tree=null;
        CommonTree NL373_tree=null;
        CommonTree NL375_tree=null;
        CommonTree L_catch376_tree=null;
        CommonTree NL377_tree=null;
        CommonTree L_end379_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_try=new RewriteRuleTokenStream(adaptor,"token L_try");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_catch=new RewriteRuleTokenStream(adaptor,"token L_catch");
        RewriteRuleSubtreeStream stream_full_cases=new RewriteRuleSubtreeStream(adaptor,"rule full_cases");
        RewriteRuleSubtreeStream stream_pure_block=new RewriteRuleSubtreeStream(adaptor,"rule pure_block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:630:9: ( L_try ( NL )? pure_block ( NL )? L_catch ( NL )? full_cases L_end -> ^( TRY pure_block full_cases ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:630:11: L_try ( NL )? pure_block ( NL )? L_catch ( NL )? full_cases L_end
            {
            L_try372=(Token)match(input,L_try,FOLLOW_L_try_in_try_expr4145); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_try.add(L_try372);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:630:17: ( NL )?
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==NL) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:630:17: NL
                    {
                    NL373=(Token)match(input,NL,FOLLOW_NL_in_try_expr4147); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL373);


                    }
                    break;

            }

            pushFollow(FOLLOW_pure_block_in_try_expr4150);
            pure_block374=pure_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pure_block.add(pure_block374.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:630:32: ( NL )?
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==NL) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:630:32: NL
                    {
                    NL375=(Token)match(input,NL,FOLLOW_NL_in_try_expr4152); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL375);


                    }
                    break;

            }

            L_catch376=(Token)match(input,L_catch,FOLLOW_L_catch_in_try_expr4155); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_catch.add(L_catch376);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:630:44: ( NL )?
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==NL) ) {
                alt167=1;
            }
            switch (alt167) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:630:44: NL
                    {
                    NL377=(Token)match(input,NL,FOLLOW_NL_in_try_expr4157); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL377);


                    }
                    break;

            }

            pushFollow(FOLLOW_full_cases_in_try_expr4160);
            full_cases378=full_cases();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_full_cases.add(full_cases378.getTree());
            L_end379=(Token)match(input,L_end,FOLLOW_L_end_in_try_expr4162); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end379);



            // AST REWRITE
            // elements: full_cases, pure_block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 631:5: -> ^( TRY pure_block full_cases )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:631:8: ^( TRY pure_block full_cases )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TRY, "TRY"), root_1);

                adaptor.addChild(root_1, stream_pure_block.nextTree());
                adaptor.addChild(root_1, stream_full_cases.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "try_expr"

    public static class lambda_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:633:1: lambda_expr : '(' ( NL )? lambda_cases ( NL )? ')' -> ^( LAMBDA lambda_cases ) ;
    public final babel17Parser.lambda_expr_return lambda_expr() throws RecognitionException {
        babel17Parser.lambda_expr_return retval = new babel17Parser.lambda_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal380=null;
        Token NL381=null;
        Token NL383=null;
        Token char_literal384=null;
        babel17Parser.lambda_cases_return lambda_cases382 = null;


        CommonTree char_literal380_tree=null;
        CommonTree NL381_tree=null;
        CommonTree NL383_tree=null;
        CommonTree char_literal384_tree=null;
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleSubtreeStream stream_lambda_cases=new RewriteRuleSubtreeStream(adaptor,"rule lambda_cases");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:634:2: ( '(' ( NL )? lambda_cases ( NL )? ')' -> ^( LAMBDA lambda_cases ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:634:4: '(' ( NL )? lambda_cases ( NL )? ')'
            {
            char_literal380=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_lambda_expr4186); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal380);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:634:8: ( NL )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==NL) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:634:8: NL
                    {
                    NL381=(Token)match(input,NL,FOLLOW_NL_in_lambda_expr4188); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL381);


                    }
                    break;

            }

            pushFollow(FOLLOW_lambda_cases_in_lambda_expr4191);
            lambda_cases382=lambda_cases();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lambda_cases.add(lambda_cases382.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:634:25: ( NL )?
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==NL) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:634:25: NL
                    {
                    NL383=(Token)match(input,NL,FOLLOW_NL_in_lambda_expr4193); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL383);


                    }
                    break;

            }

            char_literal384=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_lambda_expr4196); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal384);



            // AST REWRITE
            // elements: lambda_cases
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 634:33: -> ^( LAMBDA lambda_cases )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:634:36: ^( LAMBDA lambda_cases )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAMBDA, "LAMBDA"), root_1);

                adaptor.addChild(root_1, stream_lambda_cases.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_expr"

    public static class lambda_expr_nobrackets_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_expr_nobrackets"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:636:1: lambda_expr_nobrackets : lambda_cases_nobrackets -> ^( LAMBDA lambda_cases_nobrackets ) ;
    public final babel17Parser.lambda_expr_nobrackets_return lambda_expr_nobrackets() throws RecognitionException {
        babel17Parser.lambda_expr_nobrackets_return retval = new babel17Parser.lambda_expr_nobrackets_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.lambda_cases_nobrackets_return lambda_cases_nobrackets385 = null;


        RewriteRuleSubtreeStream stream_lambda_cases_nobrackets=new RewriteRuleSubtreeStream(adaptor,"rule lambda_cases_nobrackets");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:637:2: ( lambda_cases_nobrackets -> ^( LAMBDA lambda_cases_nobrackets ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:637:4: lambda_cases_nobrackets
            {
            pushFollow(FOLLOW_lambda_cases_nobrackets_in_lambda_expr_nobrackets4215);
            lambda_cases_nobrackets385=lambda_cases_nobrackets();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lambda_cases_nobrackets.add(lambda_cases_nobrackets385.getTree());


            // AST REWRITE
            // elements: lambda_cases_nobrackets
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 637:28: -> ^( LAMBDA lambda_cases_nobrackets )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:637:31: ^( LAMBDA lambda_cases_nobrackets )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAMBDA, "LAMBDA"), root_1);

                adaptor.addChild(root_1, stream_lambda_cases_nobrackets.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_expr_nobrackets"

    public static class lambda_cases_nobrackets_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_cases_nobrackets"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:639:1: lambda_cases_nobrackets : pattern ( NL )? token_DOUBLE_ARROW ( NL )? lop_expr -> ^( CASES ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) ) ) ;
    public final babel17Parser.lambda_cases_nobrackets_return lambda_cases_nobrackets() throws RecognitionException {
        babel17Parser.lambda_cases_nobrackets_return retval = new babel17Parser.lambda_cases_nobrackets_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL387=null;
        Token NL389=null;
        babel17Parser.pattern_return pattern386 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW388 = null;

        babel17Parser.lop_expr_return lop_expr390 = null;


        CommonTree NL387_tree=null;
        CommonTree NL389_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_lop_expr=new RewriteRuleSubtreeStream(adaptor,"rule lop_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:640:2: ( pattern ( NL )? token_DOUBLE_ARROW ( NL )? lop_expr -> ^( CASES ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) ) ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:640:4: pattern ( NL )? token_DOUBLE_ARROW ( NL )? lop_expr
            {
            pushFollow(FOLLOW_pattern_in_lambda_cases_nobrackets4233);
            pattern386=pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pattern.add(pattern386.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:640:12: ( NL )?
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==NL) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:640:12: NL
                    {
                    NL387=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases_nobrackets4235); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL387);


                    }
                    break;

            }

            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_lambda_cases_nobrackets4238);
            token_DOUBLE_ARROW388=token_DOUBLE_ARROW();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW388.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:640:35: ( NL )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==NL) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:640:35: NL
                    {
                    NL389=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases_nobrackets4240); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL389);


                    }
                    break;

            }

            pushFollow(FOLLOW_lop_expr_in_lambda_cases_nobrackets4243);
            lop_expr390=lop_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lop_expr.add(lop_expr390.getTree());


            // AST REWRITE
            // elements: pattern, lop_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 640:48: -> ^( CASES ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) ) )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:640:51: ^( CASES ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:640:59: ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                adaptor.addChild(root_2, stream_pattern.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:640:79: ^( BLOCK lop_expr )
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK, "BLOCK"), root_3);

                adaptor.addChild(root_3, stream_lop_expr.nextTree());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_cases_nobrackets"

    public static class lambda_case_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_case_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:642:1: lambda_case_expr : ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block ) -> ^( NIL_TOKEN casepattern pure_block ) ;
    public final babel17Parser.lambda_case_expr_return lambda_case_expr() throws RecognitionException {
        babel17Parser.lambda_case_expr_return retval = new babel17Parser.lambda_case_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_case391=null;
        Token NL392=null;
        Token NL394=null;
        Token NL396=null;
        babel17Parser.casepattern_return casepattern393 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW395 = null;

        babel17Parser.pure_block_return pure_block397 = null;


        CommonTree L_case391_tree=null;
        CommonTree NL392_tree=null;
        CommonTree NL394_tree=null;
        CommonTree NL396_tree=null;
        RewriteRuleTokenStream stream_L_case=new RewriteRuleTokenStream(adaptor,"token L_case");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_casepattern=new RewriteRuleSubtreeStream(adaptor,"rule casepattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_pure_block=new RewriteRuleSubtreeStream(adaptor,"rule pure_block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:643:2: ( ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block ) -> ^( NIL_TOKEN casepattern pure_block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:643:4: ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block )
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:643:4: ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:643:5: L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block
            {
            L_case391=(Token)match(input,L_case,FOLLOW_L_case_in_lambda_case_expr4271); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_case.add(L_case391);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:643:12: ( NL )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==NL) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:643:12: NL
                    {
                    NL392=(Token)match(input,NL,FOLLOW_NL_in_lambda_case_expr4273); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL392);


                    }
                    break;

            }

            pushFollow(FOLLOW_casepattern_in_lambda_case_expr4276);
            casepattern393=casepattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_casepattern.add(casepattern393.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:643:28: ( NL )?
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==NL) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:643:28: NL
                    {
                    NL394=(Token)match(input,NL,FOLLOW_NL_in_lambda_case_expr4278); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL394);


                    }
                    break;

            }

            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_lambda_case_expr4281);
            token_DOUBLE_ARROW395=token_DOUBLE_ARROW();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW395.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:643:51: ( NL )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==NL) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:643:51: NL
                    {
                    NL396=(Token)match(input,NL,FOLLOW_NL_in_lambda_case_expr4283); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL396);


                    }
                    break;

            }

            pushFollow(FOLLOW_pure_block_in_lambda_case_expr4286);
            pure_block397=pure_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pure_block.add(pure_block397.getTree());

            }



            // AST REWRITE
            // elements: pure_block, casepattern
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 643:67: -> ^( NIL_TOKEN casepattern pure_block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:643:70: ^( NIL_TOKEN casepattern pure_block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_1);

                adaptor.addChild(root_1, stream_casepattern.nextTree());
                adaptor.addChild(root_1, stream_pure_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_case_expr"

    public static class lambda_cases_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_cases"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:645:1: lambda_cases : ( pattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block -> ^( CASES ^( NIL_TOKEN pattern pure_block ) ) | lambda_case_expr ( ( NL )? lambda_case_expr )* -> ^( CASES ( lambda_case_expr )+ ) );
    public final babel17Parser.lambda_cases_return lambda_cases() throws RecognitionException {
        babel17Parser.lambda_cases_return retval = new babel17Parser.lambda_cases_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL399=null;
        Token NL401=null;
        Token NL404=null;
        babel17Parser.pattern_return pattern398 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW400 = null;

        babel17Parser.pure_block_return pure_block402 = null;

        babel17Parser.lambda_case_expr_return lambda_case_expr403 = null;

        babel17Parser.lambda_case_expr_return lambda_case_expr405 = null;


        CommonTree NL399_tree=null;
        CommonTree NL401_tree=null;
        CommonTree NL404_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_lambda_case_expr=new RewriteRuleSubtreeStream(adaptor,"rule lambda_case_expr");
        RewriteRuleSubtreeStream stream_pure_block=new RewriteRuleSubtreeStream(adaptor,"rule pure_block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:646:2: ( pattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block -> ^( CASES ^( NIL_TOKEN pattern pure_block ) ) | lambda_case_expr ( ( NL )? lambda_case_expr )* -> ^( CASES ( lambda_case_expr )+ ) )
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==L_exception||(LA179_0>=L_true && LA179_0<=L_false)||LA179_0==L_nil||LA179_0==MINUS||(LA179_0>=A_ELLIPSIS && LA179_0<=U_ELLIPSIS)||(LA179_0>=Constr && LA179_0<=Id)||LA179_0==Num||(LA179_0>=String && LA179_0<=ROUND_BRACKET_OPEN)||LA179_0==SQUARE_BRACKET_OPEN||LA179_0==CURLY_BRACKET_OPEN||LA179_0==UNDERSCORE) ) {
                alt179=1;
            }
            else if ( (LA179_0==L_case) ) {
                alt179=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 179, 0, input);

                throw nvae;
            }
            switch (alt179) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:646:4: pattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block
                    {
                    pushFollow(FOLLOW_pattern_in_lambda_cases4307);
                    pattern398=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern398.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:646:12: ( NL )?
                    int alt175=2;
                    int LA175_0 = input.LA(1);

                    if ( (LA175_0==NL) ) {
                        alt175=1;
                    }
                    switch (alt175) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:646:12: NL
                            {
                            NL399=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases4309); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL399);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_token_DOUBLE_ARROW_in_lambda_cases4312);
                    token_DOUBLE_ARROW400=token_DOUBLE_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW400.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:646:35: ( NL )?
                    int alt176=2;
                    int LA176_0 = input.LA(1);

                    if ( (LA176_0==NL) ) {
                        alt176=1;
                    }
                    switch (alt176) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:646:35: NL
                            {
                            NL401=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases4314); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL401);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_pure_block_in_lambda_cases4317);
                    pure_block402=pure_block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pure_block.add(pure_block402.getTree());


                    // AST REWRITE
                    // elements: pure_block, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 646:50: -> ^( CASES ^( NIL_TOKEN pattern pure_block ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:646:53: ^( CASES ^( NIL_TOKEN pattern pure_block ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:646:61: ^( NIL_TOKEN pattern pure_block )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        adaptor.addChild(root_2, stream_pattern.nextTree());
                        adaptor.addChild(root_2, stream_pure_block.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:647:4: lambda_case_expr ( ( NL )? lambda_case_expr )*
                    {
                    pushFollow(FOLLOW_lambda_case_expr_in_lambda_cases4336);
                    lambda_case_expr403=lambda_case_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lambda_case_expr.add(lambda_case_expr403.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:647:21: ( ( NL )? lambda_case_expr )*
                    loop178:
                    do {
                        int alt178=2;
                        int LA178_0 = input.LA(1);

                        if ( (LA178_0==NL) ) {
                            int LA178_1 = input.LA(2);

                            if ( (LA178_1==L_case) ) {
                                alt178=1;
                            }


                        }
                        else if ( (LA178_0==L_case) ) {
                            alt178=1;
                        }


                        switch (alt178) {
                    	case 1 :
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:647:22: ( NL )? lambda_case_expr
                    	    {
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:647:22: ( NL )?
                    	    int alt177=2;
                    	    int LA177_0 = input.LA(1);

                    	    if ( (LA177_0==NL) ) {
                    	        alt177=1;
                    	    }
                    	    switch (alt177) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:647:22: NL
                    	            {
                    	            NL404=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases4339); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL404);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_lambda_case_expr_in_lambda_cases4342);
                    	    lambda_case_expr405=lambda_case_expr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_lambda_case_expr.add(lambda_case_expr405.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop178;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: lambda_case_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 647:45: -> ^( CASES ( lambda_case_expr )+ )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:647:48: ^( CASES ( lambda_case_expr )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                        if ( !(stream_lambda_case_expr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_lambda_case_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_lambda_case_expr.nextTree());

                        }
                        stream_lambda_case_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_cases"

    public static class for_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:649:1: for_expr : L_for ( NL )? pattern ( NL )? L_in ( NL )? protected_expr ( NL )? L_do block L_end -> ^( FOR_EXPR pattern protected_expr block ) ;
    public final babel17Parser.for_expr_return for_expr() throws RecognitionException {
        babel17Parser.for_expr_return retval = new babel17Parser.for_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_for406=null;
        Token NL407=null;
        Token NL409=null;
        Token L_in410=null;
        Token NL411=null;
        Token NL413=null;
        Token L_do414=null;
        Token L_end416=null;
        babel17Parser.pattern_return pattern408 = null;

        babel17Parser.protected_expr_return protected_expr412 = null;

        babel17Parser.block_return block415 = null;


        CommonTree L_for406_tree=null;
        CommonTree NL407_tree=null;
        CommonTree NL409_tree=null;
        CommonTree L_in410_tree=null;
        CommonTree NL411_tree=null;
        CommonTree NL413_tree=null;
        CommonTree L_do414_tree=null;
        CommonTree L_end416_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_for=new RewriteRuleTokenStream(adaptor,"token L_for");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_in=new RewriteRuleTokenStream(adaptor,"token L_in");
        RewriteRuleTokenStream stream_L_do=new RewriteRuleTokenStream(adaptor,"token L_do");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:649:9: ( L_for ( NL )? pattern ( NL )? L_in ( NL )? protected_expr ( NL )? L_do block L_end -> ^( FOR_EXPR pattern protected_expr block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:649:11: L_for ( NL )? pattern ( NL )? L_in ( NL )? protected_expr ( NL )? L_do block L_end
            {
            L_for406=(Token)match(input,L_for,FOLLOW_L_for_in_for_expr4360); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_for.add(L_for406);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:649:17: ( NL )?
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==NL) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:649:17: NL
                    {
                    NL407=(Token)match(input,NL,FOLLOW_NL_in_for_expr4362); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL407);


                    }
                    break;

            }

            pushFollow(FOLLOW_pattern_in_for_expr4365);
            pattern408=pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pattern.add(pattern408.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:649:29: ( NL )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==NL) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:649:29: NL
                    {
                    NL409=(Token)match(input,NL,FOLLOW_NL_in_for_expr4367); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL409);


                    }
                    break;

            }

            L_in410=(Token)match(input,L_in,FOLLOW_L_in_in_for_expr4370); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_in.add(L_in410);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:649:38: ( NL )?
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==NL) ) {
                alt182=1;
            }
            switch (alt182) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:649:38: NL
                    {
                    NL411=(Token)match(input,NL,FOLLOW_NL_in_for_expr4372); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL411);


                    }
                    break;

            }

            pushFollow(FOLLOW_protected_expr_in_for_expr4375);
            protected_expr412=protected_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr412.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:649:57: ( NL )?
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==NL) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:649:57: NL
                    {
                    NL413=(Token)match(input,NL,FOLLOW_NL_in_for_expr4377); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL413);


                    }
                    break;

            }

            L_do414=(Token)match(input,L_do,FOLLOW_L_do_in_for_expr4380); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_do.add(L_do414);

            pushFollow(FOLLOW_block_in_for_expr4382);
            block415=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block415.getTree());
            L_end416=(Token)match(input,L_end,FOLLOW_L_end_in_for_expr4384); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end416);



            // AST REWRITE
            // elements: pattern, block, protected_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 650:5: -> ^( FOR_EXPR pattern protected_expr block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:650:8: ^( FOR_EXPR pattern protected_expr block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_EXPR, "FOR_EXPR"), root_1);

                adaptor.addChild(root_1, stream_pattern.nextTree());
                adaptor.addChild(root_1, stream_protected_expr.nextTree());
                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "for_expr"

    public static class op_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "op_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:653:1: op_expr : ( builtin_primitive op_expr | bool_expr );
    public final babel17Parser.op_expr_return op_expr() throws RecognitionException {
        babel17Parser.op_expr_return retval = new babel17Parser.op_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.builtin_primitive_return builtin_primitive417 = null;

        babel17Parser.op_expr_return op_expr418 = null;

        babel17Parser.bool_expr_return bool_expr419 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:654:2: ( builtin_primitive op_expr | bool_expr )
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==L_exception||LA184_0==L_concurrent||LA184_0==L_lazy) ) {
                alt184=1;
            }
            else if ( (LA184_0==L_begin||(LA184_0>=L_with && LA184_0<=L_if)||(LA184_0>=L_while && LA184_0<=L_for)||LA184_0==L_match||LA184_0==L_try||LA184_0==L_choose||(LA184_0>=L_true && LA184_0<=L_nil)||LA184_0==L_typeof||LA184_0==L_not||LA184_0==MINUS||LA184_0==L_force||(LA184_0>=Constr && LA184_0<=Id)||(LA184_0>=Float && LA184_0<=Num)||(LA184_0>=String && LA184_0<=ROUND_BRACKET_OPEN)||LA184_0==SQUARE_BRACKET_OPEN||LA184_0==CURLY_BRACKET_OPEN) ) {
                alt184=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 184, 0, input);

                throw nvae;
            }
            switch (alt184) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:654:4: builtin_primitive op_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_builtin_primitive_in_op_expr4413);
                    builtin_primitive417=builtin_primitive();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(builtin_primitive417.getTree(), root_0);
                    pushFollow(FOLLOW_op_expr_in_op_expr4416);
                    op_expr418=op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op_expr418.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:655:4: bool_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_bool_expr_in_op_expr4421);
                    bool_expr419=bool_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_expr419.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "op_expr"

    public static class p_op_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_op_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:657:1: p_op_expr : ( builtin_primitive ( NL )? p_op_expr | p_bool_expr );
    public final babel17Parser.p_op_expr_return p_op_expr() throws RecognitionException {
        babel17Parser.p_op_expr_return retval = new babel17Parser.p_op_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL421=null;
        babel17Parser.builtin_primitive_return builtin_primitive420 = null;

        babel17Parser.p_op_expr_return p_op_expr422 = null;

        babel17Parser.p_bool_expr_return p_bool_expr423 = null;


        CommonTree NL421_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:658:2: ( builtin_primitive ( NL )? p_op_expr | p_bool_expr )
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==L_exception||LA186_0==L_concurrent||LA186_0==L_lazy) ) {
                alt186=1;
            }
            else if ( (LA186_0==L_begin||(LA186_0>=L_with && LA186_0<=L_if)||(LA186_0>=L_while && LA186_0<=L_for)||LA186_0==L_match||LA186_0==L_try||LA186_0==L_choose||(LA186_0>=L_true && LA186_0<=L_nil)||LA186_0==L_typeof||LA186_0==L_not||LA186_0==MINUS||LA186_0==L_force||(LA186_0>=Constr && LA186_0<=Id)||(LA186_0>=Float && LA186_0<=Num)||(LA186_0>=String && LA186_0<=ROUND_BRACKET_OPEN)||LA186_0==SQUARE_BRACKET_OPEN||LA186_0==CURLY_BRACKET_OPEN) ) {
                alt186=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 186, 0, input);

                throw nvae;
            }
            switch (alt186) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:658:4: builtin_primitive ( NL )? p_op_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_builtin_primitive_in_p_op_expr4431);
                    builtin_primitive420=builtin_primitive();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(builtin_primitive420.getTree(), root_0);
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:658:25: ( NL )?
                    int alt185=2;
                    int LA185_0 = input.LA(1);

                    if ( (LA185_0==NL) ) {
                        alt185=1;
                    }
                    switch (alt185) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:658:25: NL
                            {
                            NL421=(Token)match(input,NL,FOLLOW_NL_in_p_op_expr4434); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_op_expr_in_p_op_expr4438);
                    p_op_expr422=p_op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_op_expr422.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:659:4: p_bool_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_bool_expr_in_p_op_expr4443);
                    p_bool_expr423=p_bool_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_expr423.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_op_expr"

    public static class builtin_primitive_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtin_primitive"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:661:1: builtin_primitive : ( L_exception | L_lazy | L_concurrent );
    public final babel17Parser.builtin_primitive_return builtin_primitive() throws RecognitionException {
        babel17Parser.builtin_primitive_return retval = new babel17Parser.builtin_primitive_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set424=null;

        CommonTree set424_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:662:2: ( L_exception | L_lazy | L_concurrent )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set424=(Token)input.LT(1);
            if ( input.LA(1)==L_exception||input.LA(1)==L_concurrent||input.LA(1)==L_lazy ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set424));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtin_primitive"

    public static class bool_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bool_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:664:1: bool_expr : bool_or_expr ;
    public final babel17Parser.bool_expr_return bool_expr() throws RecognitionException {
        babel17Parser.bool_expr_return retval = new babel17Parser.bool_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.bool_or_expr_return bool_or_expr425 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:665:2: ( bool_or_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:665:4: bool_or_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_bool_or_expr_in_bool_expr4470);
            bool_or_expr425=bool_or_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_or_expr425.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bool_expr"

    public static class p_bool_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_bool_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:667:1: p_bool_expr : p_bool_or_expr ;
    public final babel17Parser.p_bool_expr_return p_bool_expr() throws RecognitionException {
        babel17Parser.p_bool_expr_return retval = new babel17Parser.p_bool_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.p_bool_or_expr_return p_bool_or_expr426 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:668:2: ( p_bool_or_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:668:4: p_bool_or_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_bool_or_expr_in_p_bool_expr4480);
            p_bool_or_expr426=p_bool_or_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_or_expr426.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_bool_expr"

    public static class bool_or_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bool_or_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:670:1: bool_or_expr : bool_and_expr ( ( NL )? token_OR ( NL )? bool_and_expr )* ;
    public final babel17Parser.bool_or_expr_return bool_or_expr() throws RecognitionException {
        babel17Parser.bool_or_expr_return retval = new babel17Parser.bool_or_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL428=null;
        Token NL430=null;
        babel17Parser.bool_and_expr_return bool_and_expr427 = null;

        babel17Parser.token_OR_return token_OR429 = null;

        babel17Parser.bool_and_expr_return bool_and_expr431 = null;


        CommonTree NL428_tree=null;
        CommonTree NL430_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:671:2: ( bool_and_expr ( ( NL )? token_OR ( NL )? bool_and_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:671:4: bool_and_expr ( ( NL )? token_OR ( NL )? bool_and_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_bool_and_expr_in_bool_or_expr4489);
            bool_and_expr427=bool_and_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_and_expr427.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:671:18: ( ( NL )? token_OR ( NL )? bool_and_expr )*
            loop189:
            do {
                int alt189=2;
                int LA189_0 = input.LA(1);

                if ( (LA189_0==NL) ) {
                    int LA189_1 = input.LA(2);

                    if ( (LA189_1==L_or) ) {
                        alt189=1;
                    }


                }
                else if ( (LA189_0==L_or) ) {
                    alt189=1;
                }


                switch (alt189) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:671:19: ( NL )? token_OR ( NL )? bool_and_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:671:21: ( NL )?
            	    int alt187=2;
            	    int LA187_0 = input.LA(1);

            	    if ( (LA187_0==NL) ) {
            	        alt187=1;
            	    }
            	    switch (alt187) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:671:21: NL
            	            {
            	            NL428=(Token)match(input,NL,FOLLOW_NL_in_bool_or_expr4492); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_OR_in_bool_or_expr4496);
            	    token_OR429=token_OR();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_OR429.getTree(), root_0);
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:671:36: ( NL )?
            	    int alt188=2;
            	    int LA188_0 = input.LA(1);

            	    if ( (LA188_0==NL) ) {
            	        alt188=1;
            	    }
            	    switch (alt188) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:671:36: NL
            	            {
            	            NL430=(Token)match(input,NL,FOLLOW_NL_in_bool_or_expr4499); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_bool_and_expr_in_bool_or_expr4503);
            	    bool_and_expr431=bool_and_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_and_expr431.getTree());

            	    }
            	    break;

            	default :
            	    break loop189;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bool_or_expr"

    public static class p_bool_or_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_bool_or_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:673:1: p_bool_or_expr : p_bool_and_expr ( ( NL )? token_OR ( NL )? p_bool_and_expr )* ;
    public final babel17Parser.p_bool_or_expr_return p_bool_or_expr() throws RecognitionException {
        babel17Parser.p_bool_or_expr_return retval = new babel17Parser.p_bool_or_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL433=null;
        Token NL435=null;
        babel17Parser.p_bool_and_expr_return p_bool_and_expr432 = null;

        babel17Parser.token_OR_return token_OR434 = null;

        babel17Parser.p_bool_and_expr_return p_bool_and_expr436 = null;


        CommonTree NL433_tree=null;
        CommonTree NL435_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:674:2: ( p_bool_and_expr ( ( NL )? token_OR ( NL )? p_bool_and_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:674:4: p_bool_and_expr ( ( NL )? token_OR ( NL )? p_bool_and_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_bool_and_expr_in_p_bool_or_expr4515);
            p_bool_and_expr432=p_bool_and_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_and_expr432.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:674:20: ( ( NL )? token_OR ( NL )? p_bool_and_expr )*
            loop192:
            do {
                int alt192=2;
                int LA192_0 = input.LA(1);

                if ( (LA192_0==NL) ) {
                    int LA192_2 = input.LA(2);

                    if ( (LA192_2==L_or) ) {
                        alt192=1;
                    }


                }
                else if ( (LA192_0==L_or) ) {
                    alt192=1;
                }


                switch (alt192) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:674:21: ( NL )? token_OR ( NL )? p_bool_and_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:674:23: ( NL )?
            	    int alt190=2;
            	    int LA190_0 = input.LA(1);

            	    if ( (LA190_0==NL) ) {
            	        alt190=1;
            	    }
            	    switch (alt190) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:674:23: NL
            	            {
            	            NL433=(Token)match(input,NL,FOLLOW_NL_in_p_bool_or_expr4518); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_OR_in_p_bool_or_expr4522);
            	    token_OR434=token_OR();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_OR434.getTree(), root_0);
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:674:38: ( NL )?
            	    int alt191=2;
            	    int LA191_0 = input.LA(1);

            	    if ( (LA191_0==NL) ) {
            	        alt191=1;
            	    }
            	    switch (alt191) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:674:38: NL
            	            {
            	            NL435=(Token)match(input,NL,FOLLOW_NL_in_p_bool_or_expr4525); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_bool_and_expr_in_p_bool_or_expr4529);
            	    p_bool_and_expr436=p_bool_and_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_and_expr436.getTree());

            	    }
            	    break;

            	default :
            	    break loop192;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_bool_or_expr"

    public static class bool_and_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bool_and_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:676:1: bool_and_expr : bool_not_expr ( ( NL )? token_AND ( NL )? bool_not_expr )* ;
    public final babel17Parser.bool_and_expr_return bool_and_expr() throws RecognitionException {
        babel17Parser.bool_and_expr_return retval = new babel17Parser.bool_and_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL438=null;
        Token NL440=null;
        babel17Parser.bool_not_expr_return bool_not_expr437 = null;

        babel17Parser.token_AND_return token_AND439 = null;

        babel17Parser.bool_not_expr_return bool_not_expr441 = null;


        CommonTree NL438_tree=null;
        CommonTree NL440_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:677:2: ( bool_not_expr ( ( NL )? token_AND ( NL )? bool_not_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:677:4: bool_not_expr ( ( NL )? token_AND ( NL )? bool_not_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_bool_not_expr_in_bool_and_expr4541);
            bool_not_expr437=bool_not_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_not_expr437.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:677:18: ( ( NL )? token_AND ( NL )? bool_not_expr )*
            loop195:
            do {
                int alt195=2;
                int LA195_0 = input.LA(1);

                if ( (LA195_0==NL) ) {
                    int LA195_1 = input.LA(2);

                    if ( (LA195_1==L_and) ) {
                        alt195=1;
                    }


                }
                else if ( (LA195_0==L_and) ) {
                    alt195=1;
                }


                switch (alt195) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:677:19: ( NL )? token_AND ( NL )? bool_not_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:677:21: ( NL )?
            	    int alt193=2;
            	    int LA193_0 = input.LA(1);

            	    if ( (LA193_0==NL) ) {
            	        alt193=1;
            	    }
            	    switch (alt193) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:677:21: NL
            	            {
            	            NL438=(Token)match(input,NL,FOLLOW_NL_in_bool_and_expr4544); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_AND_in_bool_and_expr4548);
            	    token_AND439=token_AND();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_AND439.getTree(), root_0);
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:677:37: ( NL )?
            	    int alt194=2;
            	    int LA194_0 = input.LA(1);

            	    if ( (LA194_0==NL) ) {
            	        alt194=1;
            	    }
            	    switch (alt194) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:677:37: NL
            	            {
            	            NL440=(Token)match(input,NL,FOLLOW_NL_in_bool_and_expr4551); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_bool_not_expr_in_bool_and_expr4555);
            	    bool_not_expr441=bool_not_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_not_expr441.getTree());

            	    }
            	    break;

            	default :
            	    break loop195;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bool_and_expr"

    public static class p_bool_and_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_bool_and_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:679:1: p_bool_and_expr : p_bool_not_expr ( ( NL )? token_AND ( NL )? p_bool_not_expr )* ;
    public final babel17Parser.p_bool_and_expr_return p_bool_and_expr() throws RecognitionException {
        babel17Parser.p_bool_and_expr_return retval = new babel17Parser.p_bool_and_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL443=null;
        Token NL445=null;
        babel17Parser.p_bool_not_expr_return p_bool_not_expr442 = null;

        babel17Parser.token_AND_return token_AND444 = null;

        babel17Parser.p_bool_not_expr_return p_bool_not_expr446 = null;


        CommonTree NL443_tree=null;
        CommonTree NL445_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:680:2: ( p_bool_not_expr ( ( NL )? token_AND ( NL )? p_bool_not_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:680:4: p_bool_not_expr ( ( NL )? token_AND ( NL )? p_bool_not_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_bool_not_expr_in_p_bool_and_expr4567);
            p_bool_not_expr442=p_bool_not_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_not_expr442.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:680:20: ( ( NL )? token_AND ( NL )? p_bool_not_expr )*
            loop198:
            do {
                int alt198=2;
                int LA198_0 = input.LA(1);

                if ( (LA198_0==NL) ) {
                    int LA198_1 = input.LA(2);

                    if ( (LA198_1==L_and) ) {
                        alt198=1;
                    }


                }
                else if ( (LA198_0==L_and) ) {
                    alt198=1;
                }


                switch (alt198) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:680:21: ( NL )? token_AND ( NL )? p_bool_not_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:680:23: ( NL )?
            	    int alt196=2;
            	    int LA196_0 = input.LA(1);

            	    if ( (LA196_0==NL) ) {
            	        alt196=1;
            	    }
            	    switch (alt196) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:680:23: NL
            	            {
            	            NL443=(Token)match(input,NL,FOLLOW_NL_in_p_bool_and_expr4570); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_AND_in_p_bool_and_expr4574);
            	    token_AND444=token_AND();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_AND444.getTree(), root_0);
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:680:39: ( NL )?
            	    int alt197=2;
            	    int LA197_0 = input.LA(1);

            	    if ( (LA197_0==NL) ) {
            	        alt197=1;
            	    }
            	    switch (alt197) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:680:39: NL
            	            {
            	            NL445=(Token)match(input,NL,FOLLOW_NL_in_p_bool_and_expr4577); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_bool_not_expr_in_p_bool_and_expr4581);
            	    p_bool_not_expr446=p_bool_not_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_not_expr446.getTree());

            	    }
            	    break;

            	default :
            	    break loop198;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_bool_and_expr"

    public static class bool_not_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bool_not_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:683:1: bool_not_expr : ( token_NOT ( NL )? bool_not_expr | rel_expr );
    public final babel17Parser.bool_not_expr_return bool_not_expr() throws RecognitionException {
        babel17Parser.bool_not_expr_return retval = new babel17Parser.bool_not_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL448=null;
        babel17Parser.token_NOT_return token_NOT447 = null;

        babel17Parser.bool_not_expr_return bool_not_expr449 = null;

        babel17Parser.rel_expr_return rel_expr450 = null;


        CommonTree NL448_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:684:2: ( token_NOT ( NL )? bool_not_expr | rel_expr )
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==L_not) ) {
                alt200=1;
            }
            else if ( (LA200_0==L_begin||(LA200_0>=L_with && LA200_0<=L_if)||(LA200_0>=L_while && LA200_0<=L_for)||LA200_0==L_match||LA200_0==L_try||LA200_0==L_choose||(LA200_0>=L_true && LA200_0<=L_nil)||LA200_0==L_typeof||LA200_0==MINUS||LA200_0==L_force||(LA200_0>=Constr && LA200_0<=Id)||(LA200_0>=Float && LA200_0<=Num)||(LA200_0>=String && LA200_0<=ROUND_BRACKET_OPEN)||LA200_0==SQUARE_BRACKET_OPEN||LA200_0==CURLY_BRACKET_OPEN) ) {
                alt200=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 200, 0, input);

                throw nvae;
            }
            switch (alt200) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:684:4: token_NOT ( NL )? bool_not_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_NOT_in_bool_not_expr4593);
                    token_NOT447=token_NOT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_NOT447.getTree(), root_0);
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:684:17: ( NL )?
                    int alt199=2;
                    int LA199_0 = input.LA(1);

                    if ( (LA199_0==NL) ) {
                        alt199=1;
                    }
                    switch (alt199) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:684:17: NL
                            {
                            NL448=(Token)match(input,NL,FOLLOW_NL_in_bool_not_expr4596); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_bool_not_expr_in_bool_not_expr4600);
                    bool_not_expr449=bool_not_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_not_expr449.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:685:4: rel_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rel_expr_in_bool_not_expr4605);
                    rel_expr450=rel_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_expr450.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bool_not_expr"

    public static class p_bool_not_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_bool_not_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:687:1: p_bool_not_expr : ( token_NOT ( NL )? p_bool_not_expr | p_rel_expr );
    public final babel17Parser.p_bool_not_expr_return p_bool_not_expr() throws RecognitionException {
        babel17Parser.p_bool_not_expr_return retval = new babel17Parser.p_bool_not_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL452=null;
        babel17Parser.token_NOT_return token_NOT451 = null;

        babel17Parser.p_bool_not_expr_return p_bool_not_expr453 = null;

        babel17Parser.p_rel_expr_return p_rel_expr454 = null;


        CommonTree NL452_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:688:2: ( token_NOT ( NL )? p_bool_not_expr | p_rel_expr )
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==L_not) ) {
                alt202=1;
            }
            else if ( (LA202_0==L_begin||(LA202_0>=L_with && LA202_0<=L_if)||(LA202_0>=L_while && LA202_0<=L_for)||LA202_0==L_match||LA202_0==L_try||LA202_0==L_choose||(LA202_0>=L_true && LA202_0<=L_nil)||LA202_0==L_typeof||LA202_0==MINUS||LA202_0==L_force||(LA202_0>=Constr && LA202_0<=Id)||(LA202_0>=Float && LA202_0<=Num)||(LA202_0>=String && LA202_0<=ROUND_BRACKET_OPEN)||LA202_0==SQUARE_BRACKET_OPEN||LA202_0==CURLY_BRACKET_OPEN) ) {
                alt202=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 202, 0, input);

                throw nvae;
            }
            switch (alt202) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:688:4: token_NOT ( NL )? p_bool_not_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_NOT_in_p_bool_not_expr4616);
                    token_NOT451=token_NOT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_NOT451.getTree(), root_0);
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:688:17: ( NL )?
                    int alt201=2;
                    int LA201_0 = input.LA(1);

                    if ( (LA201_0==NL) ) {
                        alt201=1;
                    }
                    switch (alt201) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:688:17: NL
                            {
                            NL452=(Token)match(input,NL,FOLLOW_NL_in_p_bool_not_expr4619); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_bool_not_expr_in_p_bool_not_expr4623);
                    p_bool_not_expr453=p_bool_not_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_not_expr453.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:689:4: p_rel_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_rel_expr_in_p_bool_not_expr4628);
                    p_rel_expr454=p_rel_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_rel_expr454.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_bool_not_expr"

    public static class rel_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rel_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:692:1: rel_expr : relate_expr ( ( NL )? rel_op ( NL )? relate_expr )* -> ^( COMPARE relate_expr ( rel_op relate_expr )* ) ;
    public final babel17Parser.rel_expr_return rel_expr() throws RecognitionException {
        babel17Parser.rel_expr_return retval = new babel17Parser.rel_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL456=null;
        Token NL458=null;
        babel17Parser.relate_expr_return relate_expr455 = null;

        babel17Parser.rel_op_return rel_op457 = null;

        babel17Parser.relate_expr_return relate_expr459 = null;


        CommonTree NL456_tree=null;
        CommonTree NL458_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_relate_expr=new RewriteRuleSubtreeStream(adaptor,"rule relate_expr");
        RewriteRuleSubtreeStream stream_rel_op=new RewriteRuleSubtreeStream(adaptor,"rule rel_op");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:693:2: ( relate_expr ( ( NL )? rel_op ( NL )? relate_expr )* -> ^( COMPARE relate_expr ( rel_op relate_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:693:4: relate_expr ( ( NL )? rel_op ( NL )? relate_expr )*
            {
            pushFollow(FOLLOW_relate_expr_in_rel_expr4638);
            relate_expr455=relate_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_relate_expr.add(relate_expr455.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:693:16: ( ( NL )? rel_op ( NL )? relate_expr )*
            loop205:
            do {
                int alt205=2;
                int LA205_0 = input.LA(1);

                if ( (LA205_0==NL) ) {
                    int LA205_1 = input.LA(2);

                    if ( ((LA205_1>=A_EQUAL && LA205_1<=U_GREATER_EQ)) ) {
                        alt205=1;
                    }


                }
                else if ( ((LA205_0>=A_EQUAL && LA205_0<=U_GREATER_EQ)) ) {
                    alt205=1;
                }


                switch (alt205) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:693:17: ( NL )? rel_op ( NL )? relate_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:693:17: ( NL )?
            	    int alt203=2;
            	    int LA203_0 = input.LA(1);

            	    if ( (LA203_0==NL) ) {
            	        alt203=1;
            	    }
            	    switch (alt203) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:693:17: NL
            	            {
            	            NL456=(Token)match(input,NL,FOLLOW_NL_in_rel_expr4641); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL456);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_rel_op_in_rel_expr4644);
            	    rel_op457=rel_op();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_rel_op.add(rel_op457.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:693:28: ( NL )?
            	    int alt204=2;
            	    int LA204_0 = input.LA(1);

            	    if ( (LA204_0==NL) ) {
            	        alt204=1;
            	    }
            	    switch (alt204) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:693:28: NL
            	            {
            	            NL458=(Token)match(input,NL,FOLLOW_NL_in_rel_expr4646); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL458);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_relate_expr_in_rel_expr4649);
            	    relate_expr459=relate_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_relate_expr.add(relate_expr459.getTree());

            	    }
            	    break;

            	default :
            	    break loop205;
                }
            } while (true);



            // AST REWRITE
            // elements: relate_expr, relate_expr, rel_op
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 693:46: -> ^( COMPARE relate_expr ( rel_op relate_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:693:49: ^( COMPARE relate_expr ( rel_op relate_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPARE, "COMPARE"), root_1);

                adaptor.addChild(root_1, stream_relate_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:693:71: ( rel_op relate_expr )*
                while ( stream_relate_expr.hasNext()||stream_rel_op.hasNext() ) {
                    adaptor.addChild(root_1, stream_rel_op.nextTree());
                    adaptor.addChild(root_1, stream_relate_expr.nextTree());

                }
                stream_relate_expr.reset();
                stream_rel_op.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rel_expr"

    public static class p_rel_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_rel_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:695:1: p_rel_expr : p_relate_expr ( ( NL )? rel_op ( NL )? p_relate_expr )* -> ^( COMPARE p_relate_expr ( rel_op p_relate_expr )* ) ;
    public final babel17Parser.p_rel_expr_return p_rel_expr() throws RecognitionException {
        babel17Parser.p_rel_expr_return retval = new babel17Parser.p_rel_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL461=null;
        Token NL463=null;
        babel17Parser.p_relate_expr_return p_relate_expr460 = null;

        babel17Parser.rel_op_return rel_op462 = null;

        babel17Parser.p_relate_expr_return p_relate_expr464 = null;


        CommonTree NL461_tree=null;
        CommonTree NL463_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_p_relate_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_relate_expr");
        RewriteRuleSubtreeStream stream_rel_op=new RewriteRuleSubtreeStream(adaptor,"rule rel_op");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:696:2: ( p_relate_expr ( ( NL )? rel_op ( NL )? p_relate_expr )* -> ^( COMPARE p_relate_expr ( rel_op p_relate_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:696:4: p_relate_expr ( ( NL )? rel_op ( NL )? p_relate_expr )*
            {
            pushFollow(FOLLOW_p_relate_expr_in_p_rel_expr4676);
            p_relate_expr460=p_relate_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_relate_expr.add(p_relate_expr460.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:696:18: ( ( NL )? rel_op ( NL )? p_relate_expr )*
            loop208:
            do {
                int alt208=2;
                int LA208_0 = input.LA(1);

                if ( (LA208_0==NL) ) {
                    int LA208_1 = input.LA(2);

                    if ( ((LA208_1>=A_EQUAL && LA208_1<=U_GREATER_EQ)) ) {
                        alt208=1;
                    }


                }
                else if ( ((LA208_0>=A_EQUAL && LA208_0<=U_GREATER_EQ)) ) {
                    alt208=1;
                }


                switch (alt208) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:696:19: ( NL )? rel_op ( NL )? p_relate_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:696:19: ( NL )?
            	    int alt206=2;
            	    int LA206_0 = input.LA(1);

            	    if ( (LA206_0==NL) ) {
            	        alt206=1;
            	    }
            	    switch (alt206) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:696:19: NL
            	            {
            	            NL461=(Token)match(input,NL,FOLLOW_NL_in_p_rel_expr4679); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL461);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_rel_op_in_p_rel_expr4682);
            	    rel_op462=rel_op();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_rel_op.add(rel_op462.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:696:30: ( NL )?
            	    int alt207=2;
            	    int LA207_0 = input.LA(1);

            	    if ( (LA207_0==NL) ) {
            	        alt207=1;
            	    }
            	    switch (alt207) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:696:30: NL
            	            {
            	            NL463=(Token)match(input,NL,FOLLOW_NL_in_p_rel_expr4684); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL463);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_relate_expr_in_p_rel_expr4687);
            	    p_relate_expr464=p_relate_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_relate_expr.add(p_relate_expr464.getTree());

            	    }
            	    break;

            	default :
            	    break loop208;
                }
            } while (true);



            // AST REWRITE
            // elements: p_relate_expr, rel_op, p_relate_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 696:50: -> ^( COMPARE p_relate_expr ( rel_op p_relate_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:696:53: ^( COMPARE p_relate_expr ( rel_op p_relate_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPARE, "COMPARE"), root_1);

                adaptor.addChild(root_1, stream_p_relate_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:696:77: ( rel_op p_relate_expr )*
                while ( stream_p_relate_expr.hasNext()||stream_rel_op.hasNext() ) {
                    adaptor.addChild(root_1, stream_rel_op.nextTree());
                    adaptor.addChild(root_1, stream_p_relate_expr.nextTree());

                }
                stream_p_relate_expr.reset();
                stream_rel_op.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_rel_expr"

    public static class rel_op_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rel_op"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:1: rel_op : ( token_EQUAL | token_NOT_EQUAL | GREATER | token_GREATER_EQ | LESS | token_LESS_EQ );
    public final babel17Parser.rel_op_return rel_op() throws RecognitionException {
        babel17Parser.rel_op_return retval = new babel17Parser.rel_op_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token GREATER467=null;
        Token LESS469=null;
        babel17Parser.token_EQUAL_return token_EQUAL465 = null;

        babel17Parser.token_NOT_EQUAL_return token_NOT_EQUAL466 = null;

        babel17Parser.token_GREATER_EQ_return token_GREATER_EQ468 = null;

        babel17Parser.token_LESS_EQ_return token_LESS_EQ470 = null;


        CommonTree GREATER467_tree=null;
        CommonTree LESS469_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:8: ( token_EQUAL | token_NOT_EQUAL | GREATER | token_GREATER_EQ | LESS | token_LESS_EQ )
            int alt209=6;
            switch ( input.LA(1) ) {
            case A_EQUAL:
            case U_EQUAL:
                {
                alt209=1;
                }
                break;
            case A_NOT_EQUAL:
            case U_NOT_EQUAL:
                {
                alt209=2;
                }
                break;
            case GREATER:
                {
                alt209=3;
                }
                break;
            case A_GREATER_EQ:
            case U_GREATER_EQ:
                {
                alt209=4;
                }
                break;
            case LESS:
                {
                alt209=5;
                }
                break;
            case A_LESS_EQ:
            case U_LESS_EQ:
                {
                alt209=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 209, 0, input);

                throw nvae;
            }

            switch (alt209) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:10: token_EQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_EQUAL_in_rel_op4713);
                    token_EQUAL465=token_EQUAL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_EQUAL465.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:24: token_NOT_EQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_NOT_EQUAL_in_rel_op4717);
                    token_NOT_EQUAL466=token_NOT_EQUAL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_NOT_EQUAL466.getTree());

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:42: GREATER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    GREATER467=(Token)match(input,GREATER,FOLLOW_GREATER_in_rel_op4721); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER467_tree = (CommonTree)adaptor.create(GREATER467);
                    adaptor.addChild(root_0, GREATER467_tree);
                    }

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:52: token_GREATER_EQ
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_GREATER_EQ_in_rel_op4725);
                    token_GREATER_EQ468=token_GREATER_EQ();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_GREATER_EQ468.getTree());

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:71: LESS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LESS469=(Token)match(input,LESS,FOLLOW_LESS_in_rel_op4729); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LESS469_tree = (CommonTree)adaptor.create(LESS469);
                    adaptor.addChild(root_0, LESS469_tree);
                    }

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:78: token_LESS_EQ
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_LESS_EQ_in_rel_op4733);
                    token_LESS_EQ470=token_LESS_EQ();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_LESS_EQ470.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rel_op"

    public static class relate_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relate_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:701:1: relate_expr : convert_expr ( ( NL )? TOK_RELATE ( NL )? convert_expr )? -> ^( RELATE ( convert_expr )* ) ;
    public final babel17Parser.relate_expr_return relate_expr() throws RecognitionException {
        babel17Parser.relate_expr_return retval = new babel17Parser.relate_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL472=null;
        Token TOK_RELATE473=null;
        Token NL474=null;
        babel17Parser.convert_expr_return convert_expr471 = null;

        babel17Parser.convert_expr_return convert_expr475 = null;


        CommonTree NL472_tree=null;
        CommonTree TOK_RELATE473_tree=null;
        CommonTree NL474_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_TOK_RELATE=new RewriteRuleTokenStream(adaptor,"token TOK_RELATE");
        RewriteRuleSubtreeStream stream_convert_expr=new RewriteRuleSubtreeStream(adaptor,"rule convert_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:701:12: ( convert_expr ( ( NL )? TOK_RELATE ( NL )? convert_expr )? -> ^( RELATE ( convert_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:701:14: convert_expr ( ( NL )? TOK_RELATE ( NL )? convert_expr )?
            {
            pushFollow(FOLLOW_convert_expr_in_relate_expr4742);
            convert_expr471=convert_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_convert_expr.add(convert_expr471.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:701:27: ( ( NL )? TOK_RELATE ( NL )? convert_expr )?
            int alt212=2;
            int LA212_0 = input.LA(1);

            if ( (LA212_0==NL) ) {
                int LA212_1 = input.LA(2);

                if ( (LA212_1==TOK_RELATE) ) {
                    alt212=1;
                }
            }
            else if ( (LA212_0==TOK_RELATE) ) {
                alt212=1;
            }
            switch (alt212) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:701:28: ( NL )? TOK_RELATE ( NL )? convert_expr
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:701:28: ( NL )?
                    int alt210=2;
                    int LA210_0 = input.LA(1);

                    if ( (LA210_0==NL) ) {
                        alt210=1;
                    }
                    switch (alt210) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:701:28: NL
                            {
                            NL472=(Token)match(input,NL,FOLLOW_NL_in_relate_expr4745); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL472);


                            }
                            break;

                    }

                    TOK_RELATE473=(Token)match(input,TOK_RELATE,FOLLOW_TOK_RELATE_in_relate_expr4748); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TOK_RELATE.add(TOK_RELATE473);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:701:43: ( NL )?
                    int alt211=2;
                    int LA211_0 = input.LA(1);

                    if ( (LA211_0==NL) ) {
                        alt211=1;
                    }
                    switch (alt211) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:701:43: NL
                            {
                            NL474=(Token)match(input,NL,FOLLOW_NL_in_relate_expr4750); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL474);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_convert_expr_in_relate_expr4753);
                    convert_expr475=convert_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_convert_expr.add(convert_expr475.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: convert_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 701:62: -> ^( RELATE ( convert_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:701:65: ^( RELATE ( convert_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RELATE, "RELATE"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:701:74: ( convert_expr )*
                while ( stream_convert_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_convert_expr.nextTree());

                }
                stream_convert_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "relate_expr"

    public static class p_relate_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_relate_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:703:1: p_relate_expr : p_convert_expr ( ( NL )? TOK_RELATE ( NL )? p_convert_expr )? -> ^( RELATE ( p_convert_expr )* ) ;
    public final babel17Parser.p_relate_expr_return p_relate_expr() throws RecognitionException {
        babel17Parser.p_relate_expr_return retval = new babel17Parser.p_relate_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL477=null;
        Token TOK_RELATE478=null;
        Token NL479=null;
        babel17Parser.p_convert_expr_return p_convert_expr476 = null;

        babel17Parser.p_convert_expr_return p_convert_expr480 = null;


        CommonTree NL477_tree=null;
        CommonTree TOK_RELATE478_tree=null;
        CommonTree NL479_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_TOK_RELATE=new RewriteRuleTokenStream(adaptor,"token TOK_RELATE");
        RewriteRuleSubtreeStream stream_p_convert_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_convert_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:703:14: ( p_convert_expr ( ( NL )? TOK_RELATE ( NL )? p_convert_expr )? -> ^( RELATE ( p_convert_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:703:16: p_convert_expr ( ( NL )? TOK_RELATE ( NL )? p_convert_expr )?
            {
            pushFollow(FOLLOW_p_convert_expr_in_p_relate_expr4772);
            p_convert_expr476=p_convert_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_convert_expr.add(p_convert_expr476.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:703:31: ( ( NL )? TOK_RELATE ( NL )? p_convert_expr )?
            int alt215=2;
            int LA215_0 = input.LA(1);

            if ( (LA215_0==NL) ) {
                int LA215_1 = input.LA(2);

                if ( (LA215_1==TOK_RELATE) ) {
                    alt215=1;
                }
            }
            else if ( (LA215_0==TOK_RELATE) ) {
                alt215=1;
            }
            switch (alt215) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:703:32: ( NL )? TOK_RELATE ( NL )? p_convert_expr
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:703:32: ( NL )?
                    int alt213=2;
                    int LA213_0 = input.LA(1);

                    if ( (LA213_0==NL) ) {
                        alt213=1;
                    }
                    switch (alt213) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:703:32: NL
                            {
                            NL477=(Token)match(input,NL,FOLLOW_NL_in_p_relate_expr4775); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL477);


                            }
                            break;

                    }

                    TOK_RELATE478=(Token)match(input,TOK_RELATE,FOLLOW_TOK_RELATE_in_p_relate_expr4778); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TOK_RELATE.add(TOK_RELATE478);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:703:47: ( NL )?
                    int alt214=2;
                    int LA214_0 = input.LA(1);

                    if ( (LA214_0==NL) ) {
                        alt214=1;
                    }
                    switch (alt214) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:703:47: NL
                            {
                            NL479=(Token)match(input,NL,FOLLOW_NL_in_p_relate_expr4780); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL479);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_convert_expr_in_p_relate_expr4783);
                    p_convert_expr480=p_convert_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_convert_expr.add(p_convert_expr480.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: p_convert_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 703:68: -> ^( RELATE ( p_convert_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:703:71: ^( RELATE ( p_convert_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RELATE, "RELATE"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:703:80: ( p_convert_expr )*
                while ( stream_p_convert_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_convert_expr.nextTree());

                }
                stream_p_convert_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_relate_expr"

    public static class convert_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "convert_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:1: convert_expr : term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )? -> ^( CONVERT term_expr ( typeannotation )? ) ;
    public final babel17Parser.convert_expr_return convert_expr() throws RecognitionException {
        babel17Parser.convert_expr_return retval = new babel17Parser.convert_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL482=null;
        Token TOK_CONVERT483=null;
        Token NL484=null;
        babel17Parser.term_expr_return term_expr481 = null;

        babel17Parser.typeannotation_return typeannotation485 = null;


        CommonTree NL482_tree=null;
        CommonTree TOK_CONVERT483_tree=null;
        CommonTree NL484_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_TOK_CONVERT=new RewriteRuleTokenStream(adaptor,"token TOK_CONVERT");
        RewriteRuleSubtreeStream stream_typeannotation=new RewriteRuleSubtreeStream(adaptor,"rule typeannotation");
        RewriteRuleSubtreeStream stream_term_expr=new RewriteRuleSubtreeStream(adaptor,"rule term_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:706:2: ( term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )? -> ^( CONVERT term_expr ( typeannotation )? ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:706:4: term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )?
            {
            pushFollow(FOLLOW_term_expr_in_convert_expr4804);
            term_expr481=term_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_term_expr.add(term_expr481.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:706:14: ( ( NL )? TOK_CONVERT ( NL )? typeannotation )?
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==NL) ) {
                int LA218_1 = input.LA(2);

                if ( (LA218_1==TOK_CONVERT) ) {
                    alt218=1;
                }
            }
            else if ( (LA218_0==TOK_CONVERT) ) {
                alt218=1;
            }
            switch (alt218) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:706:15: ( NL )? TOK_CONVERT ( NL )? typeannotation
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:706:15: ( NL )?
                    int alt216=2;
                    int LA216_0 = input.LA(1);

                    if ( (LA216_0==NL) ) {
                        alt216=1;
                    }
                    switch (alt216) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:706:15: NL
                            {
                            NL482=(Token)match(input,NL,FOLLOW_NL_in_convert_expr4807); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL482);


                            }
                            break;

                    }

                    TOK_CONVERT483=(Token)match(input,TOK_CONVERT,FOLLOW_TOK_CONVERT_in_convert_expr4810); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TOK_CONVERT.add(TOK_CONVERT483);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:706:31: ( NL )?
                    int alt217=2;
                    int LA217_0 = input.LA(1);

                    if ( (LA217_0==NL) ) {
                        alt217=1;
                    }
                    switch (alt217) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:706:31: NL
                            {
                            NL484=(Token)match(input,NL,FOLLOW_NL_in_convert_expr4812); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL484);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeannotation_in_convert_expr4815);
                    typeannotation485=typeannotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeannotation.add(typeannotation485.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: typeannotation, term_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 706:52: -> ^( CONVERT term_expr ( typeannotation )? )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:706:55: ^( CONVERT term_expr ( typeannotation )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONVERT, "CONVERT"), root_1);

                adaptor.addChild(root_1, stream_term_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:706:75: ( typeannotation )?
                if ( stream_typeannotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeannotation.nextTree());

                }
                stream_typeannotation.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "convert_expr"

    public static class p_convert_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_convert_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:708:1: p_convert_expr : p_term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )? -> ^( CONVERT p_term_expr ( typeannotation )? ) ;
    public final babel17Parser.p_convert_expr_return p_convert_expr() throws RecognitionException {
        babel17Parser.p_convert_expr_return retval = new babel17Parser.p_convert_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL487=null;
        Token TOK_CONVERT488=null;
        Token NL489=null;
        babel17Parser.p_term_expr_return p_term_expr486 = null;

        babel17Parser.typeannotation_return typeannotation490 = null;


        CommonTree NL487_tree=null;
        CommonTree TOK_CONVERT488_tree=null;
        CommonTree NL489_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_TOK_CONVERT=new RewriteRuleTokenStream(adaptor,"token TOK_CONVERT");
        RewriteRuleSubtreeStream stream_typeannotation=new RewriteRuleSubtreeStream(adaptor,"rule typeannotation");
        RewriteRuleSubtreeStream stream_p_term_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_term_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:2: ( p_term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )? -> ^( CONVERT p_term_expr ( typeannotation )? ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:4: p_term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )?
            {
            pushFollow(FOLLOW_p_term_expr_in_p_convert_expr4837);
            p_term_expr486=p_term_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_term_expr.add(p_term_expr486.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:16: ( ( NL )? TOK_CONVERT ( NL )? typeannotation )?
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==NL) ) {
                int LA221_1 = input.LA(2);

                if ( (LA221_1==TOK_CONVERT) ) {
                    alt221=1;
                }
            }
            else if ( (LA221_0==TOK_CONVERT) ) {
                alt221=1;
            }
            switch (alt221) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:17: ( NL )? TOK_CONVERT ( NL )? typeannotation
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:17: ( NL )?
                    int alt219=2;
                    int LA219_0 = input.LA(1);

                    if ( (LA219_0==NL) ) {
                        alt219=1;
                    }
                    switch (alt219) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:17: NL
                            {
                            NL487=(Token)match(input,NL,FOLLOW_NL_in_p_convert_expr4840); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL487);


                            }
                            break;

                    }

                    TOK_CONVERT488=(Token)match(input,TOK_CONVERT,FOLLOW_TOK_CONVERT_in_p_convert_expr4843); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TOK_CONVERT.add(TOK_CONVERT488);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:33: ( NL )?
                    int alt220=2;
                    int LA220_0 = input.LA(1);

                    if ( (LA220_0==NL) ) {
                        alt220=1;
                    }
                    switch (alt220) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:33: NL
                            {
                            NL489=(Token)match(input,NL,FOLLOW_NL_in_p_convert_expr4845); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL489);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeannotation_in_p_convert_expr4848);
                    typeannotation490=typeannotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeannotation.add(typeannotation490.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: p_term_expr, typeannotation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 709:54: -> ^( CONVERT p_term_expr ( typeannotation )? )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:57: ^( CONVERT p_term_expr ( typeannotation )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONVERT, "CONVERT"), root_1);

                adaptor.addChild(root_1, stream_p_term_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:79: ( typeannotation )?
                if ( stream_typeannotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeannotation.nextTree());

                }
                stream_typeannotation.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_convert_expr"

    public static class term_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "term_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:711:1: term_expr : ( builtin_fun term_expr | arith_expr );
    public final babel17Parser.term_expr_return term_expr() throws RecognitionException {
        babel17Parser.term_expr_return retval = new babel17Parser.term_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.builtin_fun_return builtin_fun491 = null;

        babel17Parser.term_expr_return term_expr492 = null;

        babel17Parser.arith_expr_return arith_expr493 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:712:2: ( builtin_fun term_expr | arith_expr )
            int alt222=2;
            int LA222_0 = input.LA(1);

            if ( (LA222_0==L_choose||LA222_0==L_random||LA222_0==L_typeof||LA222_0==L_force) ) {
                alt222=1;
            }
            else if ( (LA222_0==L_begin||(LA222_0>=L_with && LA222_0<=L_if)||(LA222_0>=L_while && LA222_0<=L_for)||LA222_0==L_match||LA222_0==L_try||(LA222_0>=L_true && LA222_0<=L_this)||LA222_0==L_nil||LA222_0==MINUS||(LA222_0>=Constr && LA222_0<=Id)||(LA222_0>=Float && LA222_0<=Num)||(LA222_0>=String && LA222_0<=ROUND_BRACKET_OPEN)||LA222_0==SQUARE_BRACKET_OPEN||LA222_0==CURLY_BRACKET_OPEN) ) {
                alt222=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 222, 0, input);

                throw nvae;
            }
            switch (alt222) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:712:4: builtin_fun term_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_builtin_fun_in_term_expr4871);
                    builtin_fun491=builtin_fun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(builtin_fun491.getTree(), root_0);
                    pushFollow(FOLLOW_term_expr_in_term_expr4874);
                    term_expr492=term_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, term_expr492.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:713:4: arith_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arith_expr_in_term_expr4879);
                    arith_expr493=arith_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_expr493.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "term_expr"

    public static class p_term_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_term_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:715:1: p_term_expr : ( builtin_fun ( NL )? p_term_expr | p_arith_expr );
    public final babel17Parser.p_term_expr_return p_term_expr() throws RecognitionException {
        babel17Parser.p_term_expr_return retval = new babel17Parser.p_term_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL495=null;
        babel17Parser.builtin_fun_return builtin_fun494 = null;

        babel17Parser.p_term_expr_return p_term_expr496 = null;

        babel17Parser.p_arith_expr_return p_arith_expr497 = null;


        CommonTree NL495_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:716:2: ( builtin_fun ( NL )? p_term_expr | p_arith_expr )
            int alt224=2;
            int LA224_0 = input.LA(1);

            if ( (LA224_0==L_choose||LA224_0==L_random||LA224_0==L_typeof||LA224_0==L_force) ) {
                alt224=1;
            }
            else if ( (LA224_0==L_begin||(LA224_0>=L_with && LA224_0<=L_if)||(LA224_0>=L_while && LA224_0<=L_for)||LA224_0==L_match||LA224_0==L_try||(LA224_0>=L_true && LA224_0<=L_this)||LA224_0==L_nil||LA224_0==MINUS||(LA224_0>=Constr && LA224_0<=Id)||(LA224_0>=Float && LA224_0<=Num)||(LA224_0>=String && LA224_0<=ROUND_BRACKET_OPEN)||LA224_0==SQUARE_BRACKET_OPEN||LA224_0==CURLY_BRACKET_OPEN) ) {
                alt224=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 224, 0, input);

                throw nvae;
            }
            switch (alt224) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:716:4: builtin_fun ( NL )? p_term_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_builtin_fun_in_p_term_expr4889);
                    builtin_fun494=builtin_fun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(builtin_fun494.getTree(), root_0);
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:716:19: ( NL )?
                    int alt223=2;
                    int LA223_0 = input.LA(1);

                    if ( (LA223_0==NL) ) {
                        alt223=1;
                    }
                    switch (alt223) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:716:19: NL
                            {
                            NL495=(Token)match(input,NL,FOLLOW_NL_in_p_term_expr4892); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_term_expr_in_p_term_expr4896);
                    p_term_expr496=p_term_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_term_expr496.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:717:4: p_arith_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_arith_expr_in_p_term_expr4901);
                    p_arith_expr497=p_arith_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_expr497.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_term_expr"

    public static class builtin_fun_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtin_fun"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:719:1: builtin_fun : ( L_random | L_choose | L_force | L_typeof );
    public final babel17Parser.builtin_fun_return builtin_fun() throws RecognitionException {
        babel17Parser.builtin_fun_return retval = new babel17Parser.builtin_fun_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set498=null;

        CommonTree set498_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:720:2: ( L_random | L_choose | L_force | L_typeof )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set498=(Token)input.LT(1);
            if ( input.LA(1)==L_choose||input.LA(1)==L_random||input.LA(1)==L_typeof||input.LA(1)==L_force ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set498));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtin_fun"

    public static class arith_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:722:1: arith_expr : plusplus_expr ;
    public final babel17Parser.arith_expr_return arith_expr() throws RecognitionException {
        babel17Parser.arith_expr_return retval = new babel17Parser.arith_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.plusplus_expr_return plusplus_expr499 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:723:2: ( plusplus_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:723:4: plusplus_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_plusplus_expr_in_arith_expr4931);
            plusplus_expr499=plusplus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, plusplus_expr499.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_expr"

    public static class p_arith_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:725:1: p_arith_expr : p_plusplus_expr ;
    public final babel17Parser.p_arith_expr_return p_arith_expr() throws RecognitionException {
        babel17Parser.p_arith_expr_return retval = new babel17Parser.p_arith_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.p_plusplus_expr_return p_plusplus_expr500 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:726:2: ( p_plusplus_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:726:4: p_plusplus_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_plusplus_expr_in_p_arith_expr4940);
            p_plusplus_expr500=p_plusplus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_plusplus_expr500.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_expr"

    public static class plusplus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "plusplus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:728:1: plusplus_expr : timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr )* ;
    public final babel17Parser.plusplus_expr_return plusplus_expr() throws RecognitionException {
        babel17Parser.plusplus_expr_return retval = new babel17Parser.plusplus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL502=null;
        Token PLUSPLUS503=null;
        Token MINUSMINUS504=null;
        Token NL505=null;
        babel17Parser.timestimes_expr_return timestimes_expr501 = null;

        babel17Parser.timestimes_expr_return timestimes_expr506 = null;


        CommonTree NL502_tree=null;
        CommonTree PLUSPLUS503_tree=null;
        CommonTree MINUSMINUS504_tree=null;
        CommonTree NL505_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:729:2: ( timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:729:4: timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_timestimes_expr_in_plusplus_expr4950);
            timestimes_expr501=timestimes_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, timestimes_expr501.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:729:20: ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr )*
            loop228:
            do {
                int alt228=2;
                int LA228_0 = input.LA(1);

                if ( (LA228_0==NL) ) {
                    int LA228_1 = input.LA(2);

                    if ( ((LA228_1>=PLUSPLUS && LA228_1<=MINUSMINUS)) ) {
                        alt228=1;
                    }


                }
                else if ( ((LA228_0>=PLUSPLUS && LA228_0<=MINUSMINUS)) ) {
                    alt228=1;
                }


                switch (alt228) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:729:21: ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:729:23: ( NL )?
            	    int alt225=2;
            	    int LA225_0 = input.LA(1);

            	    if ( (LA225_0==NL) ) {
            	        alt225=1;
            	    }
            	    switch (alt225) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:729:23: NL
            	            {
            	            NL502=(Token)match(input,NL,FOLLOW_NL_in_plusplus_expr4953); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:729:26: ( PLUSPLUS | MINUSMINUS )
            	    int alt226=2;
            	    int LA226_0 = input.LA(1);

            	    if ( (LA226_0==PLUSPLUS) ) {
            	        alt226=1;
            	    }
            	    else if ( (LA226_0==MINUSMINUS) ) {
            	        alt226=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 226, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt226) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:729:27: PLUSPLUS
            	            {
            	            PLUSPLUS503=(Token)match(input,PLUSPLUS,FOLLOW_PLUSPLUS_in_plusplus_expr4958); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUSPLUS503_tree = (CommonTree)adaptor.create(PLUSPLUS503);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUSPLUS503_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:729:37: MINUSMINUS
            	            {
            	            MINUSMINUS504=(Token)match(input,MINUSMINUS,FOLLOW_MINUSMINUS_in_plusplus_expr4961); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUSMINUS504_tree = (CommonTree)adaptor.create(MINUSMINUS504);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUSMINUS504_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:729:52: ( NL )?
            	    int alt227=2;
            	    int LA227_0 = input.LA(1);

            	    if ( (LA227_0==NL) ) {
            	        alt227=1;
            	    }
            	    switch (alt227) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:729:52: NL
            	            {
            	            NL505=(Token)match(input,NL,FOLLOW_NL_in_plusplus_expr4965); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_timestimes_expr_in_plusplus_expr4969);
            	    timestimes_expr506=timestimes_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, timestimes_expr506.getTree());

            	    }
            	    break;

            	default :
            	    break loop228;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "plusplus_expr"

    public static class p_plusplus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_plusplus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:731:1: p_plusplus_expr : p_timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr )* ;
    public final babel17Parser.p_plusplus_expr_return p_plusplus_expr() throws RecognitionException {
        babel17Parser.p_plusplus_expr_return retval = new babel17Parser.p_plusplus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL508=null;
        Token PLUSPLUS509=null;
        Token MINUSMINUS510=null;
        Token NL511=null;
        babel17Parser.p_timestimes_expr_return p_timestimes_expr507 = null;

        babel17Parser.p_timestimes_expr_return p_timestimes_expr512 = null;


        CommonTree NL508_tree=null;
        CommonTree PLUSPLUS509_tree=null;
        CommonTree MINUSMINUS510_tree=null;
        CommonTree NL511_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:732:2: ( p_timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:732:4: p_timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_timestimes_expr_in_p_plusplus_expr4981);
            p_timestimes_expr507=p_timestimes_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_timestimes_expr507.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:732:22: ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr )*
            loop232:
            do {
                int alt232=2;
                int LA232_0 = input.LA(1);

                if ( (LA232_0==NL) ) {
                    int LA232_1 = input.LA(2);

                    if ( ((LA232_1>=PLUSPLUS && LA232_1<=MINUSMINUS)) ) {
                        alt232=1;
                    }


                }
                else if ( ((LA232_0>=PLUSPLUS && LA232_0<=MINUSMINUS)) ) {
                    alt232=1;
                }


                switch (alt232) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:732:23: ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:732:25: ( NL )?
            	    int alt229=2;
            	    int LA229_0 = input.LA(1);

            	    if ( (LA229_0==NL) ) {
            	        alt229=1;
            	    }
            	    switch (alt229) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:732:25: NL
            	            {
            	            NL508=(Token)match(input,NL,FOLLOW_NL_in_p_plusplus_expr4984); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:732:28: ( PLUSPLUS | MINUSMINUS )
            	    int alt230=2;
            	    int LA230_0 = input.LA(1);

            	    if ( (LA230_0==PLUSPLUS) ) {
            	        alt230=1;
            	    }
            	    else if ( (LA230_0==MINUSMINUS) ) {
            	        alt230=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 230, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt230) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:732:29: PLUSPLUS
            	            {
            	            PLUSPLUS509=(Token)match(input,PLUSPLUS,FOLLOW_PLUSPLUS_in_p_plusplus_expr4989); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUSPLUS509_tree = (CommonTree)adaptor.create(PLUSPLUS509);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUSPLUS509_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:732:39: MINUSMINUS
            	            {
            	            MINUSMINUS510=(Token)match(input,MINUSMINUS,FOLLOW_MINUSMINUS_in_p_plusplus_expr4992); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUSMINUS510_tree = (CommonTree)adaptor.create(MINUSMINUS510);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUSMINUS510_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:732:54: ( NL )?
            	    int alt231=2;
            	    int LA231_0 = input.LA(1);

            	    if ( (LA231_0==NL) ) {
            	        alt231=1;
            	    }
            	    switch (alt231) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:732:54: NL
            	            {
            	            NL511=(Token)match(input,NL,FOLLOW_NL_in_p_plusplus_expr4996); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_timestimes_expr_in_p_plusplus_expr5000);
            	    p_timestimes_expr512=p_timestimes_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_timestimes_expr512.getTree());

            	    }
            	    break;

            	default :
            	    break loop232;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_plusplus_expr"

    public static class timestimes_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timestimes_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:735:1: timestimes_expr : simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr )* ;
    public final babel17Parser.timestimes_expr_return timestimes_expr() throws RecognitionException {
        babel17Parser.timestimes_expr_return retval = new babel17Parser.timestimes_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL514=null;
        Token TIMESTIMES515=null;
        Token QUOTIENTQUOTIENT516=null;
        Token NL517=null;
        babel17Parser.simple_expr_return simple_expr513 = null;

        babel17Parser.simple_expr_return simple_expr518 = null;


        CommonTree NL514_tree=null;
        CommonTree TIMESTIMES515_tree=null;
        CommonTree QUOTIENTQUOTIENT516_tree=null;
        CommonTree NL517_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:2: ( simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:4: simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_simple_expr_in_timestimes_expr5012);
            simple_expr513=simple_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expr513.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:16: ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr )*
            loop236:
            do {
                int alt236=2;
                int LA236_0 = input.LA(1);

                if ( (LA236_0==NL) ) {
                    int LA236_1 = input.LA(2);

                    if ( ((LA236_1>=TIMESTIMES && LA236_1<=QUOTIENTQUOTIENT)) ) {
                        alt236=1;
                    }


                }
                else if ( ((LA236_0>=TIMESTIMES && LA236_0<=QUOTIENTQUOTIENT)) ) {
                    alt236=1;
                }


                switch (alt236) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:17: ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:19: ( NL )?
            	    int alt233=2;
            	    int LA233_0 = input.LA(1);

            	    if ( (LA233_0==NL) ) {
            	        alt233=1;
            	    }
            	    switch (alt233) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:19: NL
            	            {
            	            NL514=(Token)match(input,NL,FOLLOW_NL_in_timestimes_expr5015); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:22: ( TIMESTIMES | QUOTIENTQUOTIENT )
            	    int alt234=2;
            	    int LA234_0 = input.LA(1);

            	    if ( (LA234_0==TIMESTIMES) ) {
            	        alt234=1;
            	    }
            	    else if ( (LA234_0==QUOTIENTQUOTIENT) ) {
            	        alt234=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 234, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt234) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:23: TIMESTIMES
            	            {
            	            TIMESTIMES515=(Token)match(input,TIMESTIMES,FOLLOW_TIMESTIMES_in_timestimes_expr5020); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            TIMESTIMES515_tree = (CommonTree)adaptor.create(TIMESTIMES515);
            	            root_0 = (CommonTree)adaptor.becomeRoot(TIMESTIMES515_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:35: QUOTIENTQUOTIENT
            	            {
            	            QUOTIENTQUOTIENT516=(Token)match(input,QUOTIENTQUOTIENT,FOLLOW_QUOTIENTQUOTIENT_in_timestimes_expr5023); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            QUOTIENTQUOTIENT516_tree = (CommonTree)adaptor.create(QUOTIENTQUOTIENT516);
            	            root_0 = (CommonTree)adaptor.becomeRoot(QUOTIENTQUOTIENT516_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:56: ( NL )?
            	    int alt235=2;
            	    int LA235_0 = input.LA(1);

            	    if ( (LA235_0==NL) ) {
            	        alt235=1;
            	    }
            	    switch (alt235) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:56: NL
            	            {
            	            NL517=(Token)match(input,NL,FOLLOW_NL_in_timestimes_expr5027); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_simple_expr_in_timestimes_expr5031);
            	    simple_expr518=simple_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expr518.getTree());

            	    }
            	    break;

            	default :
            	    break loop236;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timestimes_expr"

    public static class p_timestimes_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_timestimes_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:738:1: p_timestimes_expr : p_simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr )* ;
    public final babel17Parser.p_timestimes_expr_return p_timestimes_expr() throws RecognitionException {
        babel17Parser.p_timestimes_expr_return retval = new babel17Parser.p_timestimes_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL520=null;
        Token TIMESTIMES521=null;
        Token QUOTIENTQUOTIENT522=null;
        Token NL523=null;
        babel17Parser.p_simple_expr_return p_simple_expr519 = null;

        babel17Parser.p_simple_expr_return p_simple_expr524 = null;


        CommonTree NL520_tree=null;
        CommonTree TIMESTIMES521_tree=null;
        CommonTree QUOTIENTQUOTIENT522_tree=null;
        CommonTree NL523_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:739:2: ( p_simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:739:4: p_simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_simple_expr_in_p_timestimes_expr5044);
            p_simple_expr519=p_simple_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_simple_expr519.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:739:18: ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr )*
            loop240:
            do {
                int alt240=2;
                int LA240_0 = input.LA(1);

                if ( (LA240_0==NL) ) {
                    int LA240_1 = input.LA(2);

                    if ( ((LA240_1>=TIMESTIMES && LA240_1<=QUOTIENTQUOTIENT)) ) {
                        alt240=1;
                    }


                }
                else if ( ((LA240_0>=TIMESTIMES && LA240_0<=QUOTIENTQUOTIENT)) ) {
                    alt240=1;
                }


                switch (alt240) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:739:19: ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:739:21: ( NL )?
            	    int alt237=2;
            	    int LA237_0 = input.LA(1);

            	    if ( (LA237_0==NL) ) {
            	        alt237=1;
            	    }
            	    switch (alt237) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:739:21: NL
            	            {
            	            NL520=(Token)match(input,NL,FOLLOW_NL_in_p_timestimes_expr5047); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:739:24: ( TIMESTIMES | QUOTIENTQUOTIENT )
            	    int alt238=2;
            	    int LA238_0 = input.LA(1);

            	    if ( (LA238_0==TIMESTIMES) ) {
            	        alt238=1;
            	    }
            	    else if ( (LA238_0==QUOTIENTQUOTIENT) ) {
            	        alt238=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 238, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt238) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:739:25: TIMESTIMES
            	            {
            	            TIMESTIMES521=(Token)match(input,TIMESTIMES,FOLLOW_TIMESTIMES_in_p_timestimes_expr5052); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            TIMESTIMES521_tree = (CommonTree)adaptor.create(TIMESTIMES521);
            	            root_0 = (CommonTree)adaptor.becomeRoot(TIMESTIMES521_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:739:37: QUOTIENTQUOTIENT
            	            {
            	            QUOTIENTQUOTIENT522=(Token)match(input,QUOTIENTQUOTIENT,FOLLOW_QUOTIENTQUOTIENT_in_p_timestimes_expr5055); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            QUOTIENTQUOTIENT522_tree = (CommonTree)adaptor.create(QUOTIENTQUOTIENT522);
            	            root_0 = (CommonTree)adaptor.becomeRoot(QUOTIENTQUOTIENT522_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:739:58: ( NL )?
            	    int alt239=2;
            	    int LA239_0 = input.LA(1);

            	    if ( (LA239_0==NL) ) {
            	        alt239=1;
            	    }
            	    switch (alt239) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:739:58: NL
            	            {
            	            NL523=(Token)match(input,NL,FOLLOW_NL_in_p_timestimes_expr5059); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_simple_expr_in_p_timestimes_expr5063);
            	    p_simple_expr524=p_simple_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_simple_expr524.getTree());

            	    }
            	    break;

            	default :
            	    break loop240;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_timestimes_expr"

    public static class simple_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:741:1: simple_expr : cons_expr ;
    public final babel17Parser.simple_expr_return simple_expr() throws RecognitionException {
        babel17Parser.simple_expr_return retval = new babel17Parser.simple_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.cons_expr_return cons_expr525 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:742:2: ( cons_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:742:4: cons_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_cons_expr_in_simple_expr5074);
            cons_expr525=cons_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cons_expr525.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "simple_expr"

    public static class p_simple_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_simple_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:744:1: p_simple_expr : p_cons_expr ;
    public final babel17Parser.p_simple_expr_return p_simple_expr() throws RecognitionException {
        babel17Parser.p_simple_expr_return retval = new babel17Parser.p_simple_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.p_cons_expr_return p_cons_expr526 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:745:2: ( p_cons_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:745:4: p_cons_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_cons_expr_in_p_simple_expr5083);
            p_cons_expr526=p_cons_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_cons_expr526.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_simple_expr"

    public static class cons_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cons_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:747:1: cons_expr : to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? to_expr )* -> ^( LIST_CONS ( to_expr )* ) ;
    public final babel17Parser.cons_expr_return cons_expr() throws RecognitionException {
        babel17Parser.cons_expr_return retval = new babel17Parser.cons_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL528=null;
        Token NL530=null;
        babel17Parser.to_expr_return to_expr527 = null;

        babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON529 = null;

        babel17Parser.to_expr_return to_expr531 = null;


        CommonTree NL528_tree=null;
        CommonTree NL530_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_token_DOUBLE_COLON=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_COLON");
        RewriteRuleSubtreeStream stream_to_expr=new RewriteRuleSubtreeStream(adaptor,"rule to_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:748:2: ( to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? to_expr )* -> ^( LIST_CONS ( to_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:748:4: to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? to_expr )*
            {
            pushFollow(FOLLOW_to_expr_in_cons_expr5092);
            to_expr527=to_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_to_expr.add(to_expr527.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:748:12: ( ( NL )? token_DOUBLE_COLON ( NL )? to_expr )*
            loop243:
            do {
                int alt243=2;
                int LA243_0 = input.LA(1);

                if ( (LA243_0==NL) ) {
                    int LA243_1 = input.LA(2);

                    if ( ((LA243_1>=A_DOUBLE_COLON && LA243_1<=U_DOUBLE_COLON)) ) {
                        alt243=1;
                    }


                }
                else if ( ((LA243_0>=A_DOUBLE_COLON && LA243_0<=U_DOUBLE_COLON)) ) {
                    alt243=1;
                }


                switch (alt243) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:748:13: ( NL )? token_DOUBLE_COLON ( NL )? to_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:748:13: ( NL )?
            	    int alt241=2;
            	    int LA241_0 = input.LA(1);

            	    if ( (LA241_0==NL) ) {
            	        alt241=1;
            	    }
            	    switch (alt241) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:748:13: NL
            	            {
            	            NL528=(Token)match(input,NL,FOLLOW_NL_in_cons_expr5095); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL528);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_DOUBLE_COLON_in_cons_expr5098);
            	    token_DOUBLE_COLON529=token_DOUBLE_COLON();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_token_DOUBLE_COLON.add(token_DOUBLE_COLON529.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:748:36: ( NL )?
            	    int alt242=2;
            	    int LA242_0 = input.LA(1);

            	    if ( (LA242_0==NL) ) {
            	        alt242=1;
            	    }
            	    switch (alt242) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:748:36: NL
            	            {
            	            NL530=(Token)match(input,NL,FOLLOW_NL_in_cons_expr5100); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL530);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_to_expr_in_cons_expr5103);
            	    to_expr531=to_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_to_expr.add(to_expr531.getTree());

            	    }
            	    break;

            	default :
            	    break loop243;
                }
            } while (true);



            // AST REWRITE
            // elements: to_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 748:50: -> ^( LIST_CONS ( to_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:748:53: ^( LIST_CONS ( to_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST_CONS, "LIST_CONS"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:748:65: ( to_expr )*
                while ( stream_to_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_to_expr.nextTree());

                }
                stream_to_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cons_expr"

    public static class p_cons_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_cons_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:750:1: p_cons_expr : p_to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr )* -> ^( LIST_CONS ( p_to_expr )* ) ;
    public final babel17Parser.p_cons_expr_return p_cons_expr() throws RecognitionException {
        babel17Parser.p_cons_expr_return retval = new babel17Parser.p_cons_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL533=null;
        Token NL535=null;
        babel17Parser.p_to_expr_return p_to_expr532 = null;

        babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON534 = null;

        babel17Parser.p_to_expr_return p_to_expr536 = null;


        CommonTree NL533_tree=null;
        CommonTree NL535_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_p_to_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_to_expr");
        RewriteRuleSubtreeStream stream_token_DOUBLE_COLON=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_COLON");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:751:2: ( p_to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr )* -> ^( LIST_CONS ( p_to_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:751:4: p_to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr )*
            {
            pushFollow(FOLLOW_p_to_expr_in_p_cons_expr5123);
            p_to_expr532=p_to_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_to_expr.add(p_to_expr532.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:751:14: ( ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr )*
            loop246:
            do {
                int alt246=2;
                int LA246_0 = input.LA(1);

                if ( (LA246_0==NL) ) {
                    int LA246_1 = input.LA(2);

                    if ( ((LA246_1>=A_DOUBLE_COLON && LA246_1<=U_DOUBLE_COLON)) ) {
                        alt246=1;
                    }


                }
                else if ( ((LA246_0>=A_DOUBLE_COLON && LA246_0<=U_DOUBLE_COLON)) ) {
                    alt246=1;
                }


                switch (alt246) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:751:15: ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:751:15: ( NL )?
            	    int alt244=2;
            	    int LA244_0 = input.LA(1);

            	    if ( (LA244_0==NL) ) {
            	        alt244=1;
            	    }
            	    switch (alt244) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:751:15: NL
            	            {
            	            NL533=(Token)match(input,NL,FOLLOW_NL_in_p_cons_expr5126); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL533);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_DOUBLE_COLON_in_p_cons_expr5129);
            	    token_DOUBLE_COLON534=token_DOUBLE_COLON();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_token_DOUBLE_COLON.add(token_DOUBLE_COLON534.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:751:38: ( NL )?
            	    int alt245=2;
            	    int LA245_0 = input.LA(1);

            	    if ( (LA245_0==NL) ) {
            	        alt245=1;
            	    }
            	    switch (alt245) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:751:38: NL
            	            {
            	            NL535=(Token)match(input,NL,FOLLOW_NL_in_p_cons_expr5131); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL535);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_to_expr_in_p_cons_expr5134);
            	    p_to_expr536=p_to_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_to_expr.add(p_to_expr536.getTree());

            	    }
            	    break;

            	default :
            	    break loop246;
                }
            } while (true);



            // AST REWRITE
            // elements: p_to_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 751:54: -> ^( LIST_CONS ( p_to_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:751:57: ^( LIST_CONS ( p_to_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST_CONS, "LIST_CONS"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:751:69: ( p_to_expr )*
                while ( stream_p_to_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_to_expr.nextTree());

                }
                stream_p_to_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_cons_expr"

    public static class to_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:754:1: to_expr : arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr )? ;
    public final babel17Parser.to_expr_return to_expr() throws RecognitionException {
        babel17Parser.to_expr_return retval = new babel17Parser.to_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL538=null;
        Token L_to539=null;
        Token L_downto540=null;
        Token NL541=null;
        babel17Parser.arith_plus_expr_return arith_plus_expr537 = null;

        babel17Parser.arith_plus_expr_return arith_plus_expr542 = null;


        CommonTree NL538_tree=null;
        CommonTree L_to539_tree=null;
        CommonTree L_downto540_tree=null;
        CommonTree NL541_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:754:9: ( arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr )? )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:754:11: arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_arith_plus_expr_in_to_expr5154);
            arith_plus_expr537=arith_plus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_plus_expr537.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:754:27: ( ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr )?
            int alt250=2;
            int LA250_0 = input.LA(1);

            if ( (LA250_0==NL) ) {
                int LA250_1 = input.LA(2);

                if ( ((LA250_1>=L_to && LA250_1<=L_downto)) ) {
                    alt250=1;
                }
            }
            else if ( ((LA250_0>=L_to && LA250_0<=L_downto)) ) {
                alt250=1;
            }
            switch (alt250) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:754:28: ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:754:30: ( NL )?
                    int alt247=2;
                    int LA247_0 = input.LA(1);

                    if ( (LA247_0==NL) ) {
                        alt247=1;
                    }
                    switch (alt247) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:754:30: NL
                            {
                            NL538=(Token)match(input,NL,FOLLOW_NL_in_to_expr5157); if (state.failed) return retval;

                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:754:33: ( L_to | L_downto )
                    int alt248=2;
                    int LA248_0 = input.LA(1);

                    if ( (LA248_0==L_to) ) {
                        alt248=1;
                    }
                    else if ( (LA248_0==L_downto) ) {
                        alt248=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 248, 0, input);

                        throw nvae;
                    }
                    switch (alt248) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:754:34: L_to
                            {
                            L_to539=(Token)match(input,L_to,FOLLOW_L_to_in_to_expr5162); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            L_to539_tree = (CommonTree)adaptor.create(L_to539);
                            root_0 = (CommonTree)adaptor.becomeRoot(L_to539_tree, root_0);
                            }

                            }
                            break;
                        case 2 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:754:41: L_downto
                            {
                            L_downto540=(Token)match(input,L_downto,FOLLOW_L_downto_in_to_expr5166); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            L_downto540_tree = (CommonTree)adaptor.create(L_downto540);
                            root_0 = (CommonTree)adaptor.becomeRoot(L_downto540_tree, root_0);
                            }

                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:754:54: ( NL )?
                    int alt249=2;
                    int LA249_0 = input.LA(1);

                    if ( (LA249_0==NL) ) {
                        alt249=1;
                    }
                    switch (alt249) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:754:54: NL
                            {
                            NL541=(Token)match(input,NL,FOLLOW_NL_in_to_expr5170); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_arith_plus_expr_in_to_expr5174);
                    arith_plus_expr542=arith_plus_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_plus_expr542.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "to_expr"

    public static class p_to_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_to_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:756:1: p_to_expr : p_arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr )? ;
    public final babel17Parser.p_to_expr_return p_to_expr() throws RecognitionException {
        babel17Parser.p_to_expr_return retval = new babel17Parser.p_to_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL544=null;
        Token L_to545=null;
        Token L_downto546=null;
        Token NL547=null;
        babel17Parser.p_arith_plus_expr_return p_arith_plus_expr543 = null;

        babel17Parser.p_arith_plus_expr_return p_arith_plus_expr548 = null;


        CommonTree NL544_tree=null;
        CommonTree L_to545_tree=null;
        CommonTree L_downto546_tree=null;
        CommonTree NL547_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:2: ( p_arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr )? )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:4: p_arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_arith_plus_expr_in_p_to_expr5187);
            p_arith_plus_expr543=p_arith_plus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_plus_expr543.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:22: ( ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr )?
            int alt254=2;
            int LA254_0 = input.LA(1);

            if ( (LA254_0==NL) ) {
                int LA254_1 = input.LA(2);

                if ( ((LA254_1>=L_to && LA254_1<=L_downto)) ) {
                    alt254=1;
                }
            }
            else if ( ((LA254_0>=L_to && LA254_0<=L_downto)) ) {
                alt254=1;
            }
            switch (alt254) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:23: ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:25: ( NL )?
                    int alt251=2;
                    int LA251_0 = input.LA(1);

                    if ( (LA251_0==NL) ) {
                        alt251=1;
                    }
                    switch (alt251) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:25: NL
                            {
                            NL544=(Token)match(input,NL,FOLLOW_NL_in_p_to_expr5190); if (state.failed) return retval;

                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:28: ( L_to | L_downto )
                    int alt252=2;
                    int LA252_0 = input.LA(1);

                    if ( (LA252_0==L_to) ) {
                        alt252=1;
                    }
                    else if ( (LA252_0==L_downto) ) {
                        alt252=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 252, 0, input);

                        throw nvae;
                    }
                    switch (alt252) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:29: L_to
                            {
                            L_to545=(Token)match(input,L_to,FOLLOW_L_to_in_p_to_expr5195); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            L_to545_tree = (CommonTree)adaptor.create(L_to545);
                            root_0 = (CommonTree)adaptor.becomeRoot(L_to545_tree, root_0);
                            }

                            }
                            break;
                        case 2 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:36: L_downto
                            {
                            L_downto546=(Token)match(input,L_downto,FOLLOW_L_downto_in_p_to_expr5199); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            L_downto546_tree = (CommonTree)adaptor.create(L_downto546);
                            root_0 = (CommonTree)adaptor.becomeRoot(L_downto546_tree, root_0);
                            }

                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:49: ( NL )?
                    int alt253=2;
                    int LA253_0 = input.LA(1);

                    if ( (LA253_0==NL) ) {
                        alt253=1;
                    }
                    switch (alt253) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:49: NL
                            {
                            NL547=(Token)match(input,NL,FOLLOW_NL_in_p_to_expr5203); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_arith_plus_expr_in_p_to_expr5207);
                    p_arith_plus_expr548=p_arith_plus_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_plus_expr548.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_to_expr"

    public static class arith_plus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_plus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:759:1: arith_plus_expr : arith_uminus_expr ( ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr )* ;
    public final babel17Parser.arith_plus_expr_return arith_plus_expr() throws RecognitionException {
        babel17Parser.arith_plus_expr_return retval = new babel17Parser.arith_plus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL550=null;
        Token PLUS551=null;
        Token MINUS552=null;
        Token NL553=null;
        babel17Parser.arith_uminus_expr_return arith_uminus_expr549 = null;

        babel17Parser.arith_uminus_expr_return arith_uminus_expr554 = null;


        CommonTree NL550_tree=null;
        CommonTree PLUS551_tree=null;
        CommonTree MINUS552_tree=null;
        CommonTree NL553_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:2: ( arith_uminus_expr ( ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:4: arith_uminus_expr ( ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_arith_uminus_expr_in_arith_plus_expr5219);
            arith_uminus_expr549=arith_uminus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_uminus_expr549.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:22: ( ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr )*
            loop258:
            do {
                int alt258=2;
                int LA258_0 = input.LA(1);

                if ( (LA258_0==NL) ) {
                    int LA258_1 = input.LA(2);

                    if ( (LA258_1==PLUS) ) {
                        alt258=1;
                    }


                }
                else if ( ((LA258_0>=PLUS && LA258_0<=MINUS)) ) {
                    alt258=1;
                }


                switch (alt258) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:23: ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:23: ( ( NL )? PLUS | MINUS )
            	    int alt256=2;
            	    int LA256_0 = input.LA(1);

            	    if ( (LA256_0==PLUS||LA256_0==NL) ) {
            	        alt256=1;
            	    }
            	    else if ( (LA256_0==MINUS) ) {
            	        alt256=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 256, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt256) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:24: ( NL )? PLUS
            	            {
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:26: ( NL )?
            	            int alt255=2;
            	            int LA255_0 = input.LA(1);

            	            if ( (LA255_0==NL) ) {
            	                alt255=1;
            	            }
            	            switch (alt255) {
            	                case 1 :
            	                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:26: NL
            	                    {
            	                    NL550=(Token)match(input,NL,FOLLOW_NL_in_arith_plus_expr5223); if (state.failed) return retval;

            	                    }
            	                    break;

            	            }

            	            PLUS551=(Token)match(input,PLUS,FOLLOW_PLUS_in_arith_plus_expr5227); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS551_tree = (CommonTree)adaptor.create(PLUS551);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS551_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:37: MINUS
            	            {
            	            MINUS552=(Token)match(input,MINUS,FOLLOW_MINUS_in_arith_plus_expr5232); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS552_tree = (CommonTree)adaptor.create(MINUS552);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS552_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:47: ( NL )?
            	    int alt257=2;
            	    int LA257_0 = input.LA(1);

            	    if ( (LA257_0==NL) ) {
            	        alt257=1;
            	    }
            	    switch (alt257) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:47: NL
            	            {
            	            NL553=(Token)match(input,NL,FOLLOW_NL_in_arith_plus_expr5236); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_arith_uminus_expr_in_arith_plus_expr5240);
            	    arith_uminus_expr554=arith_uminus_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_uminus_expr554.getTree());

            	    }
            	    break;

            	default :
            	    break loop258;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_plus_expr"

    public static class p_arith_plus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_plus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:762:1: p_arith_plus_expr : p_arith_uminus_expr ( ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr )* ;
    public final babel17Parser.p_arith_plus_expr_return p_arith_plus_expr() throws RecognitionException {
        babel17Parser.p_arith_plus_expr_return retval = new babel17Parser.p_arith_plus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL556=null;
        Token set557=null;
        Token NL558=null;
        babel17Parser.p_arith_uminus_expr_return p_arith_uminus_expr555 = null;

        babel17Parser.p_arith_uminus_expr_return p_arith_uminus_expr559 = null;


        CommonTree NL556_tree=null;
        CommonTree set557_tree=null;
        CommonTree NL558_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:763:2: ( p_arith_uminus_expr ( ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:763:4: p_arith_uminus_expr ( ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_arith_uminus_expr_in_p_arith_plus_expr5251);
            p_arith_uminus_expr555=p_arith_uminus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_uminus_expr555.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:763:24: ( ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr )*
            loop261:
            do {
                int alt261=2;
                int LA261_0 = input.LA(1);

                if ( (LA261_0==NL) ) {
                    int LA261_1 = input.LA(2);

                    if ( ((LA261_1>=PLUS && LA261_1<=MINUS)) ) {
                        alt261=1;
                    }


                }
                else if ( ((LA261_0>=PLUS && LA261_0<=MINUS)) ) {
                    alt261=1;
                }


                switch (alt261) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:763:25: ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:763:27: ( NL )?
            	    int alt259=2;
            	    int LA259_0 = input.LA(1);

            	    if ( (LA259_0==NL) ) {
            	        alt259=1;
            	    }
            	    switch (alt259) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:763:27: NL
            	            {
            	            NL556=(Token)match(input,NL,FOLLOW_NL_in_p_arith_plus_expr5254); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    set557=(Token)input.LT(1);
            	    set557=(Token)input.LT(1);
            	    if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set557), root_0);
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:763:48: ( NL )?
            	    int alt260=2;
            	    int LA260_0 = input.LA(1);

            	    if ( (LA260_0==NL) ) {
            	        alt260=1;
            	    }
            	    switch (alt260) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:763:48: NL
            	            {
            	            NL558=(Token)match(input,NL,FOLLOW_NL_in_p_arith_plus_expr5267); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_arith_uminus_expr_in_p_arith_plus_expr5271);
            	    p_arith_uminus_expr559=p_arith_uminus_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_uminus_expr559.getTree());

            	    }
            	    break;

            	default :
            	    break loop261;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_plus_expr"

    public static class arith_uminus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_uminus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:765:1: arith_uminus_expr : ( MINUS ( NL )? arith_mult_expr -> ^( UMINUS arith_mult_expr ) | arith_mult_expr );
    public final babel17Parser.arith_uminus_expr_return arith_uminus_expr() throws RecognitionException {
        babel17Parser.arith_uminus_expr_return retval = new babel17Parser.arith_uminus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS560=null;
        Token NL561=null;
        babel17Parser.arith_mult_expr_return arith_mult_expr562 = null;

        babel17Parser.arith_mult_expr_return arith_mult_expr563 = null;


        CommonTree MINUS560_tree=null;
        CommonTree NL561_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_arith_mult_expr=new RewriteRuleSubtreeStream(adaptor,"rule arith_mult_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:766:2: ( MINUS ( NL )? arith_mult_expr -> ^( UMINUS arith_mult_expr ) | arith_mult_expr )
            int alt263=2;
            int LA263_0 = input.LA(1);

            if ( (LA263_0==MINUS) ) {
                alt263=1;
            }
            else if ( (LA263_0==L_begin||(LA263_0>=L_with && LA263_0<=L_if)||(LA263_0>=L_while && LA263_0<=L_for)||LA263_0==L_match||LA263_0==L_try||(LA263_0>=L_true && LA263_0<=L_this)||LA263_0==L_nil||(LA263_0>=Constr && LA263_0<=Id)||(LA263_0>=Float && LA263_0<=Num)||(LA263_0>=String && LA263_0<=ROUND_BRACKET_OPEN)||LA263_0==SQUARE_BRACKET_OPEN||LA263_0==CURLY_BRACKET_OPEN) ) {
                alt263=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 263, 0, input);

                throw nvae;
            }
            switch (alt263) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:766:4: MINUS ( NL )? arith_mult_expr
                    {
                    MINUS560=(Token)match(input,MINUS,FOLLOW_MINUS_in_arith_uminus_expr5284); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS560);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:766:10: ( NL )?
                    int alt262=2;
                    int LA262_0 = input.LA(1);

                    if ( (LA262_0==NL) ) {
                        alt262=1;
                    }
                    switch (alt262) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:766:10: NL
                            {
                            NL561=(Token)match(input,NL,FOLLOW_NL_in_arith_uminus_expr5286); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL561);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_arith_mult_expr_in_arith_uminus_expr5289);
                    arith_mult_expr562=arith_mult_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arith_mult_expr.add(arith_mult_expr562.getTree());


                    // AST REWRITE
                    // elements: arith_mult_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 766:30: -> ^( UMINUS arith_mult_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:766:33: ^( UMINUS arith_mult_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UMINUS, "UMINUS"), root_1);

                        adaptor.addChild(root_1, stream_arith_mult_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:767:4: arith_mult_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arith_mult_expr_in_arith_uminus_expr5302);
                    arith_mult_expr563=arith_mult_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_mult_expr563.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_uminus_expr"

    public static class p_arith_uminus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_uminus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:769:1: p_arith_uminus_expr : ( MINUS ( NL )? p_arith_mult_expr -> ^( UMINUS p_arith_mult_expr ) | p_arith_mult_expr );
    public final babel17Parser.p_arith_uminus_expr_return p_arith_uminus_expr() throws RecognitionException {
        babel17Parser.p_arith_uminus_expr_return retval = new babel17Parser.p_arith_uminus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS564=null;
        Token NL565=null;
        babel17Parser.p_arith_mult_expr_return p_arith_mult_expr566 = null;

        babel17Parser.p_arith_mult_expr_return p_arith_mult_expr567 = null;


        CommonTree MINUS564_tree=null;
        CommonTree NL565_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_p_arith_mult_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_arith_mult_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:770:2: ( MINUS ( NL )? p_arith_mult_expr -> ^( UMINUS p_arith_mult_expr ) | p_arith_mult_expr )
            int alt265=2;
            int LA265_0 = input.LA(1);

            if ( (LA265_0==MINUS) ) {
                alt265=1;
            }
            else if ( (LA265_0==L_begin||(LA265_0>=L_with && LA265_0<=L_if)||(LA265_0>=L_while && LA265_0<=L_for)||LA265_0==L_match||LA265_0==L_try||(LA265_0>=L_true && LA265_0<=L_this)||LA265_0==L_nil||(LA265_0>=Constr && LA265_0<=Id)||(LA265_0>=Float && LA265_0<=Num)||(LA265_0>=String && LA265_0<=ROUND_BRACKET_OPEN)||LA265_0==SQUARE_BRACKET_OPEN||LA265_0==CURLY_BRACKET_OPEN) ) {
                alt265=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 265, 0, input);

                throw nvae;
            }
            switch (alt265) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:770:4: MINUS ( NL )? p_arith_mult_expr
                    {
                    MINUS564=(Token)match(input,MINUS,FOLLOW_MINUS_in_p_arith_uminus_expr5313); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS564);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:770:10: ( NL )?
                    int alt264=2;
                    int LA264_0 = input.LA(1);

                    if ( (LA264_0==NL) ) {
                        alt264=1;
                    }
                    switch (alt264) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:770:10: NL
                            {
                            NL565=(Token)match(input,NL,FOLLOW_NL_in_p_arith_uminus_expr5315); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL565);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_arith_mult_expr_in_p_arith_uminus_expr5318);
                    p_arith_mult_expr566=p_arith_mult_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_arith_mult_expr.add(p_arith_mult_expr566.getTree());


                    // AST REWRITE
                    // elements: p_arith_mult_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 770:32: -> ^( UMINUS p_arith_mult_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:770:35: ^( UMINUS p_arith_mult_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UMINUS, "UMINUS"), root_1);

                        adaptor.addChild(root_1, stream_p_arith_mult_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:771:4: p_arith_mult_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_arith_mult_expr_in_p_arith_uminus_expr5331);
                    p_arith_mult_expr567=p_arith_mult_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_mult_expr567.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_uminus_expr"

    public static class arith_mult_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_mult_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:773:1: arith_mult_expr : arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr )* ;
    public final babel17Parser.arith_mult_expr_return arith_mult_expr() throws RecognitionException {
        babel17Parser.arith_mult_expr_return retval = new babel17Parser.arith_mult_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL569=null;
        Token set570=null;
        Token NL571=null;
        babel17Parser.arith_pow_expr_return arith_pow_expr568 = null;

        babel17Parser.arith_pow_expr_return arith_pow_expr572 = null;


        CommonTree NL569_tree=null;
        CommonTree set570_tree=null;
        CommonTree NL571_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:774:2: ( arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:774:4: arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_arith_pow_expr_in_arith_mult_expr5340);
            arith_pow_expr568=arith_pow_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_pow_expr568.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:774:19: ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr )*
            loop268:
            do {
                int alt268=2;
                int LA268_0 = input.LA(1);

                if ( (LA268_0==NL) ) {
                    int LA268_1 = input.LA(2);

                    if ( ((LA268_1>=L_div && LA268_1<=L_mod)||(LA268_1>=TIMES && LA268_1<=QUOTIENT)) ) {
                        alt268=1;
                    }


                }
                else if ( ((LA268_0>=L_div && LA268_0<=L_mod)||(LA268_0>=TIMES && LA268_0<=QUOTIENT)) ) {
                    alt268=1;
                }


                switch (alt268) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:774:20: ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:774:22: ( NL )?
            	    int alt266=2;
            	    int LA266_0 = input.LA(1);

            	    if ( (LA266_0==NL) ) {
            	        alt266=1;
            	    }
            	    switch (alt266) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:774:22: NL
            	            {
            	            NL569=(Token)match(input,NL,FOLLOW_NL_in_arith_mult_expr5343); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    set570=(Token)input.LT(1);
            	    set570=(Token)input.LT(1);
            	    if ( (input.LA(1)>=L_div && input.LA(1)<=L_mod)||(input.LA(1)>=TIMES && input.LA(1)<=QUOTIENT) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set570), root_0);
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:774:63: ( NL )?
            	    int alt267=2;
            	    int LA267_0 = input.LA(1);

            	    if ( (LA267_0==NL) ) {
            	        alt267=1;
            	    }
            	    switch (alt267) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:774:63: NL
            	            {
            	            NL571=(Token)match(input,NL,FOLLOW_NL_in_arith_mult_expr5364); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_arith_pow_expr_in_arith_mult_expr5368);
            	    arith_pow_expr572=arith_pow_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_pow_expr572.getTree());

            	    }
            	    break;

            	default :
            	    break loop268;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_mult_expr"

    public static class p_arith_mult_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_mult_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:776:1: p_arith_mult_expr : p_arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr )* ;
    public final babel17Parser.p_arith_mult_expr_return p_arith_mult_expr() throws RecognitionException {
        babel17Parser.p_arith_mult_expr_return retval = new babel17Parser.p_arith_mult_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL574=null;
        Token set575=null;
        Token NL576=null;
        babel17Parser.p_arith_pow_expr_return p_arith_pow_expr573 = null;

        babel17Parser.p_arith_pow_expr_return p_arith_pow_expr577 = null;


        CommonTree NL574_tree=null;
        CommonTree set575_tree=null;
        CommonTree NL576_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:777:2: ( p_arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:777:4: p_arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_arith_pow_expr_in_p_arith_mult_expr5380);
            p_arith_pow_expr573=p_arith_pow_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_pow_expr573.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:777:21: ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr )*
            loop271:
            do {
                int alt271=2;
                int LA271_0 = input.LA(1);

                if ( (LA271_0==NL) ) {
                    int LA271_1 = input.LA(2);

                    if ( ((LA271_1>=L_div && LA271_1<=L_mod)||(LA271_1>=TIMES && LA271_1<=QUOTIENT)) ) {
                        alt271=1;
                    }


                }
                else if ( ((LA271_0>=L_div && LA271_0<=L_mod)||(LA271_0>=TIMES && LA271_0<=QUOTIENT)) ) {
                    alt271=1;
                }


                switch (alt271) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:777:22: ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:777:24: ( NL )?
            	    int alt269=2;
            	    int LA269_0 = input.LA(1);

            	    if ( (LA269_0==NL) ) {
            	        alt269=1;
            	    }
            	    switch (alt269) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:777:24: NL
            	            {
            	            NL574=(Token)match(input,NL,FOLLOW_NL_in_p_arith_mult_expr5383); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    set575=(Token)input.LT(1);
            	    set575=(Token)input.LT(1);
            	    if ( (input.LA(1)>=L_div && input.LA(1)<=L_mod)||(input.LA(1)>=TIMES && input.LA(1)<=QUOTIENT) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set575), root_0);
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:777:65: ( NL )?
            	    int alt270=2;
            	    int LA270_0 = input.LA(1);

            	    if ( (LA270_0==NL) ) {
            	        alt270=1;
            	    }
            	    switch (alt270) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:777:65: NL
            	            {
            	            NL576=(Token)match(input,NL,FOLLOW_NL_in_p_arith_mult_expr5404); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_arith_pow_expr_in_p_arith_mult_expr5408);
            	    p_arith_pow_expr577=p_arith_pow_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_pow_expr577.getTree());

            	    }
            	    break;

            	default :
            	    break loop271;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_mult_expr"

    public static class arith_pow_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_pow_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:779:1: arith_pow_expr : apply_expr ( ( NL )? POW_tok ( NL )? apply_expr )* -> ^( POW ( apply_expr )* ) ;
    public final babel17Parser.arith_pow_expr_return arith_pow_expr() throws RecognitionException {
        babel17Parser.arith_pow_expr_return retval = new babel17Parser.arith_pow_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL579=null;
        Token POW_tok580=null;
        Token NL581=null;
        babel17Parser.apply_expr_return apply_expr578 = null;

        babel17Parser.apply_expr_return apply_expr582 = null;


        CommonTree NL579_tree=null;
        CommonTree POW_tok580_tree=null;
        CommonTree NL581_tree=null;
        RewriteRuleTokenStream stream_POW_tok=new RewriteRuleTokenStream(adaptor,"token POW_tok");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_apply_expr=new RewriteRuleSubtreeStream(adaptor,"rule apply_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:2: ( apply_expr ( ( NL )? POW_tok ( NL )? apply_expr )* -> ^( POW ( apply_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:4: apply_expr ( ( NL )? POW_tok ( NL )? apply_expr )*
            {
            pushFollow(FOLLOW_apply_expr_in_arith_pow_expr5419);
            apply_expr578=apply_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_apply_expr.add(apply_expr578.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:15: ( ( NL )? POW_tok ( NL )? apply_expr )*
            loop274:
            do {
                int alt274=2;
                int LA274_0 = input.LA(1);

                if ( (LA274_0==NL) ) {
                    int LA274_1 = input.LA(2);

                    if ( (LA274_1==POW_tok) ) {
                        alt274=1;
                    }


                }
                else if ( (LA274_0==POW_tok) ) {
                    alt274=1;
                }


                switch (alt274) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:16: ( NL )? POW_tok ( NL )? apply_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:16: ( NL )?
            	    int alt272=2;
            	    int LA272_0 = input.LA(1);

            	    if ( (LA272_0==NL) ) {
            	        alt272=1;
            	    }
            	    switch (alt272) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:16: NL
            	            {
            	            NL579=(Token)match(input,NL,FOLLOW_NL_in_arith_pow_expr5422); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL579);


            	            }
            	            break;

            	    }

            	    POW_tok580=(Token)match(input,POW_tok,FOLLOW_POW_tok_in_arith_pow_expr5425); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_POW_tok.add(POW_tok580);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:28: ( NL )?
            	    int alt273=2;
            	    int LA273_0 = input.LA(1);

            	    if ( (LA273_0==NL) ) {
            	        alt273=1;
            	    }
            	    switch (alt273) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:28: NL
            	            {
            	            NL581=(Token)match(input,NL,FOLLOW_NL_in_arith_pow_expr5427); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL581);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_apply_expr_in_arith_pow_expr5430);
            	    apply_expr582=apply_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_apply_expr.add(apply_expr582.getTree());

            	    }
            	    break;

            	default :
            	    break loop274;
                }
            } while (true);



            // AST REWRITE
            // elements: apply_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 780:45: -> ^( POW ( apply_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:48: ^( POW ( apply_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(POW, "POW"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:54: ( apply_expr )*
                while ( stream_apply_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_apply_expr.nextTree());

                }
                stream_apply_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_pow_expr"

    public static class p_arith_pow_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_pow_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:782:1: p_arith_pow_expr : p_apply_expr ( ( NL )? POW_tok ( NL )? p_apply_expr )* -> ^( POW ( p_apply_expr )* ) ;
    public final babel17Parser.p_arith_pow_expr_return p_arith_pow_expr() throws RecognitionException {
        babel17Parser.p_arith_pow_expr_return retval = new babel17Parser.p_arith_pow_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL584=null;
        Token POW_tok585=null;
        Token NL586=null;
        babel17Parser.p_apply_expr_return p_apply_expr583 = null;

        babel17Parser.p_apply_expr_return p_apply_expr587 = null;


        CommonTree NL584_tree=null;
        CommonTree POW_tok585_tree=null;
        CommonTree NL586_tree=null;
        RewriteRuleTokenStream stream_POW_tok=new RewriteRuleTokenStream(adaptor,"token POW_tok");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_p_apply_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_apply_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:783:2: ( p_apply_expr ( ( NL )? POW_tok ( NL )? p_apply_expr )* -> ^( POW ( p_apply_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:783:4: p_apply_expr ( ( NL )? POW_tok ( NL )? p_apply_expr )*
            {
            pushFollow(FOLLOW_p_apply_expr_in_p_arith_pow_expr5451);
            p_apply_expr583=p_apply_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_apply_expr.add(p_apply_expr583.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:783:17: ( ( NL )? POW_tok ( NL )? p_apply_expr )*
            loop277:
            do {
                int alt277=2;
                int LA277_0 = input.LA(1);

                if ( (LA277_0==NL) ) {
                    int LA277_1 = input.LA(2);

                    if ( (LA277_1==POW_tok) ) {
                        alt277=1;
                    }


                }
                else if ( (LA277_0==POW_tok) ) {
                    alt277=1;
                }


                switch (alt277) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:783:18: ( NL )? POW_tok ( NL )? p_apply_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:783:18: ( NL )?
            	    int alt275=2;
            	    int LA275_0 = input.LA(1);

            	    if ( (LA275_0==NL) ) {
            	        alt275=1;
            	    }
            	    switch (alt275) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:783:18: NL
            	            {
            	            NL584=(Token)match(input,NL,FOLLOW_NL_in_p_arith_pow_expr5454); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL584);


            	            }
            	            break;

            	    }

            	    POW_tok585=(Token)match(input,POW_tok,FOLLOW_POW_tok_in_p_arith_pow_expr5457); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_POW_tok.add(POW_tok585);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:783:30: ( NL )?
            	    int alt276=2;
            	    int LA276_0 = input.LA(1);

            	    if ( (LA276_0==NL) ) {
            	        alt276=1;
            	    }
            	    switch (alt276) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:783:30: NL
            	            {
            	            NL586=(Token)match(input,NL,FOLLOW_NL_in_p_arith_pow_expr5459); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL586);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_apply_expr_in_p_arith_pow_expr5462);
            	    p_apply_expr587=p_apply_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_apply_expr.add(p_apply_expr587.getTree());

            	    }
            	    break;

            	default :
            	    break loop277;
                }
            } while (true);



            // AST REWRITE
            // elements: p_apply_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 783:49: -> ^( POW ( p_apply_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:783:52: ^( POW ( p_apply_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(POW, "POW"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:783:58: ( p_apply_expr )*
                while ( stream_p_apply_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_apply_expr.nextTree());

                }
                stream_p_apply_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_pow_expr"

    public static class apply_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apply_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:1: apply_expr : ( basic_expr )+ -> ^( APPLY ( basic_expr )* ) ;
    public final babel17Parser.apply_expr_return apply_expr() throws RecognitionException {
        babel17Parser.apply_expr_return retval = new babel17Parser.apply_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.basic_expr_return basic_expr588 = null;


        RewriteRuleSubtreeStream stream_basic_expr=new RewriteRuleSubtreeStream(adaptor,"rule basic_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:786:2: ( ( basic_expr )+ -> ^( APPLY ( basic_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:786:4: ( basic_expr )+
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:786:4: ( basic_expr )+
            int cnt278=0;
            loop278:
            do {
                int alt278=2;
                int LA278_0 = input.LA(1);

                if ( (LA278_0==L_begin||(LA278_0>=L_with && LA278_0<=L_if)||(LA278_0>=L_while && LA278_0<=L_for)||LA278_0==L_match||LA278_0==L_try||(LA278_0>=L_true && LA278_0<=L_this)||LA278_0==L_nil||(LA278_0>=Constr && LA278_0<=Id)||(LA278_0>=Float && LA278_0<=Num)||(LA278_0>=String && LA278_0<=ROUND_BRACKET_OPEN)||LA278_0==SQUARE_BRACKET_OPEN||LA278_0==CURLY_BRACKET_OPEN) ) {
                    alt278=1;
                }


                switch (alt278) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:786:4: basic_expr
            	    {
            	    pushFollow(FOLLOW_basic_expr_in_apply_expr5483);
            	    basic_expr588=basic_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_basic_expr.add(basic_expr588.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt278 >= 1 ) break loop278;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(278, input);
                        throw eee;
                }
                cnt278++;
            } while (true);



            // AST REWRITE
            // elements: basic_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 786:16: -> ^( APPLY ( basic_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:786:19: ^( APPLY ( basic_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(APPLY, "APPLY"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:786:27: ( basic_expr )*
                while ( stream_basic_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_basic_expr.nextTree());

                }
                stream_basic_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "apply_expr"

    public static class p_apply_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_apply_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:787:1: p_apply_expr : p_basic_expr ( ( NL )? p_basic_expr )* -> ^( APPLY ( p_basic_expr )* ) ;
    public final babel17Parser.p_apply_expr_return p_apply_expr() throws RecognitionException {
        babel17Parser.p_apply_expr_return retval = new babel17Parser.p_apply_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL590=null;
        babel17Parser.p_basic_expr_return p_basic_expr589 = null;

        babel17Parser.p_basic_expr_return p_basic_expr591 = null;


        CommonTree NL590_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_p_basic_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_basic_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:2: ( p_basic_expr ( ( NL )? p_basic_expr )* -> ^( APPLY ( p_basic_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:4: p_basic_expr ( ( NL )? p_basic_expr )*
            {
            pushFollow(FOLLOW_p_basic_expr_in_p_apply_expr5501);
            p_basic_expr589=p_basic_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_basic_expr.add(p_basic_expr589.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:17: ( ( NL )? p_basic_expr )*
            loop280:
            do {
                int alt280=2;
                int LA280_0 = input.LA(1);

                if ( (LA280_0==NL) ) {
                    int LA280_1 = input.LA(2);

                    if ( (LA280_1==L_begin||(LA280_1>=L_with && LA280_1<=L_if)||(LA280_1>=L_while && LA280_1<=L_for)||LA280_1==L_match||LA280_1==L_try||(LA280_1>=L_true && LA280_1<=L_this)||LA280_1==L_nil||(LA280_1>=Constr && LA280_1<=Id)||(LA280_1>=Float && LA280_1<=Num)||(LA280_1>=String && LA280_1<=ROUND_BRACKET_OPEN)||LA280_1==SQUARE_BRACKET_OPEN||LA280_1==CURLY_BRACKET_OPEN) ) {
                        alt280=1;
                    }


                }
                else if ( (LA280_0==L_begin||(LA280_0>=L_with && LA280_0<=L_if)||(LA280_0>=L_while && LA280_0<=L_for)||LA280_0==L_match||LA280_0==L_try||(LA280_0>=L_true && LA280_0<=L_this)||LA280_0==L_nil||(LA280_0>=Constr && LA280_0<=Id)||(LA280_0>=Float && LA280_0<=Num)||(LA280_0>=String && LA280_0<=ROUND_BRACKET_OPEN)||LA280_0==SQUARE_BRACKET_OPEN||LA280_0==CURLY_BRACKET_OPEN) ) {
                    alt280=1;
                }


                switch (alt280) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:18: ( NL )? p_basic_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:18: ( NL )?
            	    int alt279=2;
            	    int LA279_0 = input.LA(1);

            	    if ( (LA279_0==NL) ) {
            	        alt279=1;
            	    }
            	    switch (alt279) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:18: NL
            	            {
            	            NL590=(Token)match(input,NL,FOLLOW_NL_in_p_apply_expr5504); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL590);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_basic_expr_in_p_apply_expr5507);
            	    p_basic_expr591=p_basic_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_basic_expr.add(p_basic_expr591.getTree());

            	    }
            	    break;

            	default :
            	    break loop280;
                }
            } while (true);



            // AST REWRITE
            // elements: p_basic_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 788:37: -> ^( APPLY ( p_basic_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:40: ^( APPLY ( p_basic_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(APPLY, "APPLY"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:48: ( p_basic_expr )*
                while ( stream_p_basic_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_basic_expr.nextTree());

                }
                stream_p_basic_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_apply_expr"

    public static class basic_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "basic_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:790:1: basic_expr : message_send_expr ;
    public final babel17Parser.basic_expr_return basic_expr() throws RecognitionException {
        babel17Parser.basic_expr_return retval = new babel17Parser.basic_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.message_send_expr_return message_send_expr592 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:791:2: ( message_send_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:791:4: message_send_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_message_send_expr_in_basic_expr5527);
            message_send_expr592=message_send_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, message_send_expr592.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "basic_expr"

    public static class p_basic_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_basic_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:793:1: p_basic_expr : message_send_expr ;
    public final babel17Parser.p_basic_expr_return p_basic_expr() throws RecognitionException {
        babel17Parser.p_basic_expr_return retval = new babel17Parser.p_basic_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.message_send_expr_return message_send_expr593 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:794:2: ( message_send_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:794:4: message_send_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_message_send_expr_in_p_basic_expr5536);
            message_send_expr593=message_send_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, message_send_expr593.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_basic_expr"

    public static class message_send_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "message_send_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:796:1: message_send_expr : primitive_expr ( ( NL )? PERIOD ( NL )? Id )* -> ^( MESSAGE_SEND primitive_expr ( Id )* ) ;
    public final babel17Parser.message_send_expr_return message_send_expr() throws RecognitionException {
        babel17Parser.message_send_expr_return retval = new babel17Parser.message_send_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL595=null;
        Token PERIOD596=null;
        Token NL597=null;
        Token Id598=null;
        babel17Parser.primitive_expr_return primitive_expr594 = null;


        CommonTree NL595_tree=null;
        CommonTree PERIOD596_tree=null;
        CommonTree NL597_tree=null;
        CommonTree Id598_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleSubtreeStream stream_primitive_expr=new RewriteRuleSubtreeStream(adaptor,"rule primitive_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:797:2: ( primitive_expr ( ( NL )? PERIOD ( NL )? Id )* -> ^( MESSAGE_SEND primitive_expr ( Id )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:797:4: primitive_expr ( ( NL )? PERIOD ( NL )? Id )*
            {
            pushFollow(FOLLOW_primitive_expr_in_message_send_expr5545);
            primitive_expr594=primitive_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_primitive_expr.add(primitive_expr594.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:797:19: ( ( NL )? PERIOD ( NL )? Id )*
            loop283:
            do {
                int alt283=2;
                int LA283_0 = input.LA(1);

                if ( (LA283_0==NL) ) {
                    int LA283_1 = input.LA(2);

                    if ( (LA283_1==PERIOD) ) {
                        alt283=1;
                    }


                }
                else if ( (LA283_0==PERIOD) ) {
                    alt283=1;
                }


                switch (alt283) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:797:20: ( NL )? PERIOD ( NL )? Id
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:797:20: ( NL )?
            	    int alt281=2;
            	    int LA281_0 = input.LA(1);

            	    if ( (LA281_0==NL) ) {
            	        alt281=1;
            	    }
            	    switch (alt281) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:797:20: NL
            	            {
            	            NL595=(Token)match(input,NL,FOLLOW_NL_in_message_send_expr5548); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL595);


            	            }
            	            break;

            	    }

            	    PERIOD596=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_message_send_expr5551); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD596);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:797:31: ( NL )?
            	    int alt282=2;
            	    int LA282_0 = input.LA(1);

            	    if ( (LA282_0==NL) ) {
            	        alt282=1;
            	    }
            	    switch (alt282) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:797:31: NL
            	            {
            	            NL597=(Token)match(input,NL,FOLLOW_NL_in_message_send_expr5553); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL597);


            	            }
            	            break;

            	    }

            	    Id598=(Token)match(input,Id,FOLLOW_Id_in_message_send_expr5556); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_Id.add(Id598);


            	    }
            	    break;

            	default :
            	    break loop283;
                }
            } while (true);



            // AST REWRITE
            // elements: primitive_expr, Id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 797:40: -> ^( MESSAGE_SEND primitive_expr ( Id )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:797:43: ^( MESSAGE_SEND primitive_expr ( Id )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MESSAGE_SEND, "MESSAGE_SEND"), root_1);

                adaptor.addChild(root_1, stream_primitive_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:797:73: ( Id )*
                while ( stream_Id.hasNext() ) {
                    adaptor.addChild(root_1, stream_Id.nextNode());

                }
                stream_Id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "message_send_expr"

    public static class list_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "list_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:799:1: list_expr : ( ( '[' ( NL )? protected_expr_nc ( NL )? ';' )=> '[' ( NL )? protected_expr_nc ( NL )? ';' ( NL )? protected_expr_nc ( NL )? ']' -> ^( INTERVAL ( protected_expr_nc )* ) | '[' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? )? ']' -> ^( SQUARE_LIST ( protected_expr_nc )* ) | '(' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( protected_expr_nc )* ) ) );
    public final babel17Parser.list_expr_return list_expr() throws RecognitionException {
        babel17Parser.list_expr_return retval = new babel17Parser.list_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal599=null;
        Token NL600=null;
        Token NL602=null;
        Token char_literal603=null;
        Token NL604=null;
        Token NL606=null;
        Token char_literal607=null;
        Token char_literal608=null;
        Token NL609=null;
        Token NL611=null;
        Token COMMA612=null;
        Token NL613=null;
        Token NL615=null;
        Token char_literal616=null;
        Token char_literal617=null;
        Token NL618=null;
        Token NL620=null;
        Token COMMA621=null;
        Token NL622=null;
        Token NL624=null;
        Token COMMA625=null;
        Token NL626=null;
        Token char_literal627=null;
        babel17Parser.protected_expr_nc_return protected_expr_nc601 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc605 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc610 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc614 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc619 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc623 = null;


        CommonTree char_literal599_tree=null;
        CommonTree NL600_tree=null;
        CommonTree NL602_tree=null;
        CommonTree char_literal603_tree=null;
        CommonTree NL604_tree=null;
        CommonTree NL606_tree=null;
        CommonTree char_literal607_tree=null;
        CommonTree char_literal608_tree=null;
        CommonTree NL609_tree=null;
        CommonTree NL611_tree=null;
        CommonTree COMMA612_tree=null;
        CommonTree NL613_tree=null;
        CommonTree NL615_tree=null;
        CommonTree char_literal616_tree=null;
        CommonTree char_literal617_tree=null;
        CommonTree NL618_tree=null;
        CommonTree NL620_tree=null;
        CommonTree COMMA621_tree=null;
        CommonTree NL622_tree=null;
        CommonTree NL624_tree=null;
        CommonTree COMMA625_tree=null;
        CommonTree NL626_tree=null;
        CommonTree char_literal627_tree=null;
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_SC=new RewriteRuleTokenStream(adaptor,"token SC");
        RewriteRuleTokenStream stream_SQUARE_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token SQUARE_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_SQUARE_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token SQUARE_BRACKET_OPEN");
        RewriteRuleSubtreeStream stream_protected_expr_nc=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr_nc");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:800:2: ( ( '[' ( NL )? protected_expr_nc ( NL )? ';' )=> '[' ( NL )? protected_expr_nc ( NL )? ';' ( NL )? protected_expr_nc ( NL )? ']' -> ^( INTERVAL ( protected_expr_nc )* ) | '[' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? )? ']' -> ^( SQUARE_LIST ( protected_expr_nc )* ) | '(' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( protected_expr_nc )* ) ) )
            int alt302=3;
            int LA302_0 = input.LA(1);

            if ( (LA302_0==SQUARE_BRACKET_OPEN) ) {
                int LA302_1 = input.LA(2);

                if ( (synpred15_babel17()) ) {
                    alt302=1;
                }
                else if ( (true) ) {
                    alt302=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 302, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA302_0==ROUND_BRACKET_OPEN) ) {
                alt302=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 302, 0, input);

                throw nvae;
            }
            switch (alt302) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:800:4: ( '[' ( NL )? protected_expr_nc ( NL )? ';' )=> '[' ( NL )? protected_expr_nc ( NL )? ';' ( NL )? protected_expr_nc ( NL )? ']'
                    {
                    char_literal599=(Token)match(input,SQUARE_BRACKET_OPEN,FOLLOW_SQUARE_BRACKET_OPEN_in_list_expr5596); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_OPEN.add(char_literal599);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:800:47: ( NL )?
                    int alt284=2;
                    int LA284_0 = input.LA(1);

                    if ( (LA284_0==NL) ) {
                        alt284=1;
                    }
                    switch (alt284) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:800:47: NL
                            {
                            NL600=(Token)match(input,NL,FOLLOW_NL_in_list_expr5598); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL600);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_list_expr5601);
                    protected_expr_nc601=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc601.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:800:69: ( NL )?
                    int alt285=2;
                    int LA285_0 = input.LA(1);

                    if ( (LA285_0==NL) ) {
                        alt285=1;
                    }
                    switch (alt285) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:800:69: NL
                            {
                            NL602=(Token)match(input,NL,FOLLOW_NL_in_list_expr5603); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL602);


                            }
                            break;

                    }

                    char_literal603=(Token)match(input,SC,FOLLOW_SC_in_list_expr5606); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SC.add(char_literal603);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:800:77: ( NL )?
                    int alt286=2;
                    int LA286_0 = input.LA(1);

                    if ( (LA286_0==NL) ) {
                        alt286=1;
                    }
                    switch (alt286) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:800:77: NL
                            {
                            NL604=(Token)match(input,NL,FOLLOW_NL_in_list_expr5608); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL604);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_list_expr5611);
                    protected_expr_nc605=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc605.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:800:99: ( NL )?
                    int alt287=2;
                    int LA287_0 = input.LA(1);

                    if ( (LA287_0==NL) ) {
                        alt287=1;
                    }
                    switch (alt287) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:800:99: NL
                            {
                            NL606=(Token)match(input,NL,FOLLOW_NL_in_list_expr5613); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL606);


                            }
                            break;

                    }

                    char_literal607=(Token)match(input,SQUARE_BRACKET_CLOSE,FOLLOW_SQUARE_BRACKET_CLOSE_in_list_expr5616); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_CLOSE.add(char_literal607);



                    // AST REWRITE
                    // elements: protected_expr_nc
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 800:107: -> ^( INTERVAL ( protected_expr_nc )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:800:110: ^( INTERVAL ( protected_expr_nc )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTERVAL, "INTERVAL"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:800:121: ( protected_expr_nc )*
                        while ( stream_protected_expr_nc.hasNext() ) {
                            adaptor.addChild(root_1, stream_protected_expr_nc.nextTree());

                        }
                        stream_protected_expr_nc.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:801:4: '[' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? )? ']'
                    {
                    char_literal608=(Token)match(input,SQUARE_BRACKET_OPEN,FOLLOW_SQUARE_BRACKET_OPEN_in_list_expr5630); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_OPEN.add(char_literal608);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:801:8: ( NL )?
                    int alt288=2;
                    int LA288_0 = input.LA(1);

                    if ( (LA288_0==NL) ) {
                        alt288=1;
                    }
                    switch (alt288) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:801:8: NL
                            {
                            NL609=(Token)match(input,NL,FOLLOW_NL_in_list_expr5632); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL609);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:801:12: ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? )?
                    int alt293=2;
                    int LA293_0 = input.LA(1);

                    if ( (LA293_0==L_begin||(LA293_0>=L_obj && LA293_0<=L_if)||(LA293_0>=L_while && LA293_0<=L_for)||LA293_0==L_match||LA293_0==L_exception||LA293_0==L_try||(LA293_0>=L_concurrent && LA293_0<=L_lazy)||(LA293_0>=L_true && LA293_0<=L_nil)||LA293_0==L_typeof||LA293_0==L_not||LA293_0==MINUS||(LA293_0>=A_ELLIPSIS && LA293_0<=U_ELLIPSIS)||LA293_0==L_force||(LA293_0>=Constr && LA293_0<=Id)||(LA293_0>=Float && LA293_0<=Num)||(LA293_0>=String && LA293_0<=ROUND_BRACKET_OPEN)||LA293_0==SQUARE_BRACKET_OPEN||LA293_0==CURLY_BRACKET_OPEN||LA293_0==UNDERSCORE) ) {
                        alt293=1;
                    }
                    switch (alt293) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:801:13: protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )?
                            {
                            pushFollow(FOLLOW_protected_expr_nc_in_list_expr5636);
                            protected_expr_nc610=protected_expr_nc();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc610.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:801:31: ( ( NL )? COMMA ( NL )? protected_expr_nc )*
                            loop291:
                            do {
                                int alt291=2;
                                int LA291_0 = input.LA(1);

                                if ( (LA291_0==NL) ) {
                                    int LA291_1 = input.LA(2);

                                    if ( (LA291_1==COMMA) ) {
                                        alt291=1;
                                    }


                                }
                                else if ( (LA291_0==COMMA) ) {
                                    alt291=1;
                                }


                                switch (alt291) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:801:32: ( NL )? COMMA ( NL )? protected_expr_nc
                            	    {
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:801:32: ( NL )?
                            	    int alt289=2;
                            	    int LA289_0 = input.LA(1);

                            	    if ( (LA289_0==NL) ) {
                            	        alt289=1;
                            	    }
                            	    switch (alt289) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:801:32: NL
                            	            {
                            	            NL611=(Token)match(input,NL,FOLLOW_NL_in_list_expr5639); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL611);


                            	            }
                            	            break;

                            	    }

                            	    COMMA612=(Token)match(input,COMMA,FOLLOW_COMMA_in_list_expr5642); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA612);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:801:42: ( NL )?
                            	    int alt290=2;
                            	    int LA290_0 = input.LA(1);

                            	    if ( (LA290_0==NL) ) {
                            	        alt290=1;
                            	    }
                            	    switch (alt290) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:801:42: NL
                            	            {
                            	            NL613=(Token)match(input,NL,FOLLOW_NL_in_list_expr5644); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL613);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_protected_expr_nc_in_list_expr5647);
                            	    protected_expr_nc614=protected_expr_nc();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc614.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop291;
                                }
                            } while (true);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:801:66: ( NL )?
                            int alt292=2;
                            int LA292_0 = input.LA(1);

                            if ( (LA292_0==NL) ) {
                                alt292=1;
                            }
                            switch (alt292) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:801:66: NL
                                    {
                                    NL615=(Token)match(input,NL,FOLLOW_NL_in_list_expr5651); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL615);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    char_literal616=(Token)match(input,SQUARE_BRACKET_CLOSE,FOLLOW_SQUARE_BRACKET_CLOSE_in_list_expr5656); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_CLOSE.add(char_literal616);



                    // AST REWRITE
                    // elements: protected_expr_nc
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 801:76: -> ^( SQUARE_LIST ( protected_expr_nc )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:801:79: ^( SQUARE_LIST ( protected_expr_nc )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SQUARE_LIST, "SQUARE_LIST"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:801:93: ( protected_expr_nc )*
                        while ( stream_protected_expr_nc.hasNext() ) {
                            adaptor.addChild(root_1, stream_protected_expr_nc.nextTree());

                        }
                        stream_protected_expr_nc.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:4: '(' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )? )? ')'
                    {
                    char_literal617=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_list_expr5670); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal617);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:8: ( NL )?
                    int alt294=2;
                    int LA294_0 = input.LA(1);

                    if ( (LA294_0==NL) ) {
                        alt294=1;
                    }
                    switch (alt294) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:8: NL
                            {
                            NL618=(Token)match(input,NL,FOLLOW_NL_in_list_expr5672); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL618);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:12: ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )? )?
                    int alt301=2;
                    int LA301_0 = input.LA(1);

                    if ( (LA301_0==L_begin||(LA301_0>=L_obj && LA301_0<=L_if)||(LA301_0>=L_while && LA301_0<=L_for)||LA301_0==L_match||LA301_0==L_exception||LA301_0==L_try||(LA301_0>=L_concurrent && LA301_0<=L_lazy)||(LA301_0>=L_true && LA301_0<=L_nil)||LA301_0==L_typeof||LA301_0==L_not||LA301_0==MINUS||(LA301_0>=A_ELLIPSIS && LA301_0<=U_ELLIPSIS)||LA301_0==L_force||(LA301_0>=Constr && LA301_0<=Id)||(LA301_0>=Float && LA301_0<=Num)||(LA301_0>=String && LA301_0<=ROUND_BRACKET_OPEN)||LA301_0==SQUARE_BRACKET_OPEN||LA301_0==CURLY_BRACKET_OPEN||LA301_0==UNDERSCORE) ) {
                        alt301=1;
                    }
                    switch (alt301) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:13: protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )?
                            {
                            pushFollow(FOLLOW_protected_expr_nc_in_list_expr5676);
                            protected_expr_nc619=protected_expr_nc();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc619.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:31: ( ( NL )? COMMA ( NL )? protected_expr_nc )*
                            loop297:
                            do {
                                int alt297=2;
                                int LA297_0 = input.LA(1);

                                if ( (LA297_0==NL) ) {
                                    int LA297_1 = input.LA(2);

                                    if ( (LA297_1==COMMA) ) {
                                        int LA297_2 = input.LA(3);

                                        if ( (LA297_2==NL) ) {
                                            int LA297_4 = input.LA(4);

                                            if ( (LA297_4==L_begin||(LA297_4>=L_obj && LA297_4<=L_if)||(LA297_4>=L_while && LA297_4<=L_for)||LA297_4==L_match||LA297_4==L_exception||LA297_4==L_try||(LA297_4>=L_concurrent && LA297_4<=L_lazy)||(LA297_4>=L_true && LA297_4<=L_nil)||LA297_4==L_typeof||LA297_4==L_not||LA297_4==MINUS||(LA297_4>=A_ELLIPSIS && LA297_4<=U_ELLIPSIS)||LA297_4==L_force||(LA297_4>=Constr && LA297_4<=Id)||(LA297_4>=Float && LA297_4<=Num)||(LA297_4>=String && LA297_4<=ROUND_BRACKET_OPEN)||LA297_4==SQUARE_BRACKET_OPEN||LA297_4==CURLY_BRACKET_OPEN||LA297_4==UNDERSCORE) ) {
                                                alt297=1;
                                            }


                                        }
                                        else if ( (LA297_2==L_begin||(LA297_2>=L_obj && LA297_2<=L_if)||(LA297_2>=L_while && LA297_2<=L_for)||LA297_2==L_match||LA297_2==L_exception||LA297_2==L_try||(LA297_2>=L_concurrent && LA297_2<=L_lazy)||(LA297_2>=L_true && LA297_2<=L_nil)||LA297_2==L_typeof||LA297_2==L_not||LA297_2==MINUS||(LA297_2>=A_ELLIPSIS && LA297_2<=U_ELLIPSIS)||LA297_2==L_force||(LA297_2>=Constr && LA297_2<=Id)||(LA297_2>=Float && LA297_2<=Num)||(LA297_2>=String && LA297_2<=ROUND_BRACKET_OPEN)||LA297_2==SQUARE_BRACKET_OPEN||LA297_2==CURLY_BRACKET_OPEN||LA297_2==UNDERSCORE) ) {
                                            alt297=1;
                                        }


                                    }


                                }
                                else if ( (LA297_0==COMMA) ) {
                                    int LA297_2 = input.LA(2);

                                    if ( (LA297_2==NL) ) {
                                        int LA297_4 = input.LA(3);

                                        if ( (LA297_4==L_begin||(LA297_4>=L_obj && LA297_4<=L_if)||(LA297_4>=L_while && LA297_4<=L_for)||LA297_4==L_match||LA297_4==L_exception||LA297_4==L_try||(LA297_4>=L_concurrent && LA297_4<=L_lazy)||(LA297_4>=L_true && LA297_4<=L_nil)||LA297_4==L_typeof||LA297_4==L_not||LA297_4==MINUS||(LA297_4>=A_ELLIPSIS && LA297_4<=U_ELLIPSIS)||LA297_4==L_force||(LA297_4>=Constr && LA297_4<=Id)||(LA297_4>=Float && LA297_4<=Num)||(LA297_4>=String && LA297_4<=ROUND_BRACKET_OPEN)||LA297_4==SQUARE_BRACKET_OPEN||LA297_4==CURLY_BRACKET_OPEN||LA297_4==UNDERSCORE) ) {
                                            alt297=1;
                                        }


                                    }
                                    else if ( (LA297_2==L_begin||(LA297_2>=L_obj && LA297_2<=L_if)||(LA297_2>=L_while && LA297_2<=L_for)||LA297_2==L_match||LA297_2==L_exception||LA297_2==L_try||(LA297_2>=L_concurrent && LA297_2<=L_lazy)||(LA297_2>=L_true && LA297_2<=L_nil)||LA297_2==L_typeof||LA297_2==L_not||LA297_2==MINUS||(LA297_2>=A_ELLIPSIS && LA297_2<=U_ELLIPSIS)||LA297_2==L_force||(LA297_2>=Constr && LA297_2<=Id)||(LA297_2>=Float && LA297_2<=Num)||(LA297_2>=String && LA297_2<=ROUND_BRACKET_OPEN)||LA297_2==SQUARE_BRACKET_OPEN||LA297_2==CURLY_BRACKET_OPEN||LA297_2==UNDERSCORE) ) {
                                        alt297=1;
                                    }


                                }


                                switch (alt297) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:32: ( NL )? COMMA ( NL )? protected_expr_nc
                            	    {
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:32: ( NL )?
                            	    int alt295=2;
                            	    int LA295_0 = input.LA(1);

                            	    if ( (LA295_0==NL) ) {
                            	        alt295=1;
                            	    }
                            	    switch (alt295) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:32: NL
                            	            {
                            	            NL620=(Token)match(input,NL,FOLLOW_NL_in_list_expr5679); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL620);


                            	            }
                            	            break;

                            	    }

                            	    COMMA621=(Token)match(input,COMMA,FOLLOW_COMMA_in_list_expr5682); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA621);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:42: ( NL )?
                            	    int alt296=2;
                            	    int LA296_0 = input.LA(1);

                            	    if ( (LA296_0==NL) ) {
                            	        alt296=1;
                            	    }
                            	    switch (alt296) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:42: NL
                            	            {
                            	            NL622=(Token)match(input,NL,FOLLOW_NL_in_list_expr5684); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL622);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_protected_expr_nc_in_list_expr5687);
                            	    protected_expr_nc623=protected_expr_nc();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc623.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop297;
                                }
                            } while (true);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:66: ( NL )?
                            int alt298=2;
                            int LA298_0 = input.LA(1);

                            if ( (LA298_0==NL) ) {
                                alt298=1;
                            }
                            switch (alt298) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:66: NL
                                    {
                                    NL624=(Token)match(input,NL,FOLLOW_NL_in_list_expr5691); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL624);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:70: ( COMMA ( NL )? )?
                            int alt300=2;
                            int LA300_0 = input.LA(1);

                            if ( (LA300_0==COMMA) ) {
                                alt300=1;
                            }
                            switch (alt300) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:71: COMMA ( NL )?
                                    {
                                    COMMA625=(Token)match(input,COMMA,FOLLOW_COMMA_in_list_expr5695); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA625);

                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:77: ( NL )?
                                    int alt299=2;
                                    int LA299_0 = input.LA(1);

                                    if ( (LA299_0==NL) ) {
                                        alt299=1;
                                    }
                                    switch (alt299) {
                                        case 1 :
                                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:77: NL
                                            {
                                            NL626=(Token)match(input,NL,FOLLOW_NL_in_list_expr5697); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_NL.add(NL626);


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    char_literal627=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_list_expr5704); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal627);



                    // AST REWRITE
                    // elements: protected_expr_nc, COMMA
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 802:89: -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( protected_expr_nc )* ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:92: ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( protected_expr_nc )* ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROUND_LIST, "ROUND_LIST"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:105: ^( NIL_TOKEN ( COMMA )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:117: ( COMMA )*
                        while ( stream_COMMA.hasNext() ) {
                            adaptor.addChild(root_2, stream_COMMA.nextNode());

                        }
                        stream_COMMA.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:125: ^( NIL_TOKEN ( protected_expr_nc )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:137: ( protected_expr_nc )*
                        while ( stream_protected_expr_nc.hasNext() ) {
                            adaptor.addChild(root_2, stream_protected_expr_nc.nextTree());

                        }
                        stream_protected_expr_nc.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "list_expr"

    public static class map_or_set_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "map_or_set_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:804:1: map_or_set_expr : ( '{' ( NL )? ( map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( map_or_set_elem_expr )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) );
    public final babel17Parser.map_or_set_expr_return map_or_set_expr() throws RecognitionException {
        babel17Parser.map_or_set_expr_return retval = new babel17Parser.map_or_set_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal628=null;
        Token NL629=null;
        Token NL631=null;
        Token COMMA632=null;
        Token NL633=null;
        Token NL635=null;
        Token char_literal636=null;
        Token char_literal637=null;
        Token NL638=null;
        Token NL640=null;
        Token char_literal641=null;
        babel17Parser.map_or_set_elem_expr_return map_or_set_elem_expr630 = null;

        babel17Parser.map_or_set_elem_expr_return map_or_set_elem_expr634 = null;

        babel17Parser.token_ARROW_return token_ARROW639 = null;


        CommonTree char_literal628_tree=null;
        CommonTree NL629_tree=null;
        CommonTree NL631_tree=null;
        CommonTree COMMA632_tree=null;
        CommonTree NL633_tree=null;
        CommonTree NL635_tree=null;
        CommonTree char_literal636_tree=null;
        CommonTree char_literal637_tree=null;
        CommonTree NL638_tree=null;
        CommonTree NL640_tree=null;
        CommonTree char_literal641_tree=null;
        RewriteRuleTokenStream stream_CURLY_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_OPEN");
        RewriteRuleTokenStream stream_CURLY_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_map_or_set_elem_expr=new RewriteRuleSubtreeStream(adaptor,"rule map_or_set_elem_expr");
        RewriteRuleSubtreeStream stream_token_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_ARROW");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:2: ( '{' ( NL )? ( map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( map_or_set_elem_expr )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) )
            int alt311=2;
            int LA311_0 = input.LA(1);

            if ( (LA311_0==CURLY_BRACKET_OPEN) ) {
                switch ( input.LA(2) ) {
                case NL:
                    {
                    int LA311_2 = input.LA(3);

                    if ( (LA311_2==L_begin||(LA311_2>=L_obj && LA311_2<=L_if)||(LA311_2>=L_while && LA311_2<=L_for)||LA311_2==L_match||LA311_2==L_exception||LA311_2==L_try||(LA311_2>=L_concurrent && LA311_2<=L_lazy)||(LA311_2>=L_true && LA311_2<=L_nil)||LA311_2==L_typeof||LA311_2==L_not||LA311_2==MINUS||(LA311_2>=A_ELLIPSIS && LA311_2<=U_ELLIPSIS)||LA311_2==L_force||(LA311_2>=Constr && LA311_2<=Id)||(LA311_2>=Float && LA311_2<=Num)||(LA311_2>=String && LA311_2<=ROUND_BRACKET_OPEN)||LA311_2==SQUARE_BRACKET_OPEN||(LA311_2>=CURLY_BRACKET_OPEN && LA311_2<=UNDERSCORE)) ) {
                        alt311=1;
                    }
                    else if ( ((LA311_2>=A_ARROW && LA311_2<=U_ARROW)) ) {
                        alt311=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 311, 2, input);

                        throw nvae;
                    }
                    }
                    break;
                case L_begin:
                case L_obj:
                case L_with:
                case L_if:
                case L_while:
                case L_for:
                case L_match:
                case L_exception:
                case L_try:
                case L_concurrent:
                case L_choose:
                case L_lazy:
                case L_true:
                case L_false:
                case L_this:
                case L_random:
                case L_nil:
                case L_typeof:
                case L_not:
                case MINUS:
                case A_ELLIPSIS:
                case U_ELLIPSIS:
                case L_force:
                case Constr:
                case Id:
                case Float:
                case Num:
                case String:
                case ROUND_BRACKET_OPEN:
                case SQUARE_BRACKET_OPEN:
                case CURLY_BRACKET_OPEN:
                case CURLY_BRACKET_CLOSE:
                case UNDERSCORE:
                    {
                    alt311=1;
                    }
                    break;
                case A_ARROW:
                case U_ARROW:
                    {
                    alt311=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 311, 1, input);

                    throw nvae;
                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 311, 0, input);

                throw nvae;
            }
            switch (alt311) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:4: '{' ( NL )? ( map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )* )? '}'
                    {
                    char_literal628=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_map_or_set_expr5733); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal628);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:8: ( NL )?
                    int alt303=2;
                    int LA303_0 = input.LA(1);

                    if ( (LA303_0==NL) ) {
                        alt303=1;
                    }
                    switch (alt303) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:8: NL
                            {
                            NL629=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr5735); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL629);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:12: ( map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )* )?
                    int alt308=2;
                    int LA308_0 = input.LA(1);

                    if ( (LA308_0==L_begin||(LA308_0>=L_obj && LA308_0<=L_if)||(LA308_0>=L_while && LA308_0<=L_for)||LA308_0==L_match||LA308_0==L_exception||LA308_0==L_try||(LA308_0>=L_concurrent && LA308_0<=L_lazy)||(LA308_0>=L_true && LA308_0<=L_nil)||LA308_0==L_typeof||LA308_0==L_not||LA308_0==MINUS||(LA308_0>=A_ELLIPSIS && LA308_0<=U_ELLIPSIS)||LA308_0==L_force||(LA308_0>=Constr && LA308_0<=Id)||(LA308_0>=Float && LA308_0<=Num)||(LA308_0>=String && LA308_0<=ROUND_BRACKET_OPEN)||LA308_0==SQUARE_BRACKET_OPEN||LA308_0==CURLY_BRACKET_OPEN||LA308_0==UNDERSCORE) ) {
                        alt308=1;
                    }
                    switch (alt308) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:13: map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )*
                            {
                            pushFollow(FOLLOW_map_or_set_elem_expr_in_map_or_set_expr5739);
                            map_or_set_elem_expr630=map_or_set_elem_expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_map_or_set_elem_expr.add(map_or_set_elem_expr630.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:34: ( NL )?
                            int alt304=2;
                            int LA304_0 = input.LA(1);

                            if ( (LA304_0==NL) ) {
                                alt304=1;
                            }
                            switch (alt304) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:34: NL
                                    {
                                    NL631=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr5741); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL631);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:38: ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )*
                            loop307:
                            do {
                                int alt307=2;
                                int LA307_0 = input.LA(1);

                                if ( (LA307_0==COMMA) ) {
                                    alt307=1;
                                }


                                switch (alt307) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:39: COMMA ( NL )? map_or_set_elem_expr ( NL )?
                            	    {
                            	    COMMA632=(Token)match(input,COMMA,FOLLOW_COMMA_in_map_or_set_expr5745); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA632);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:45: ( NL )?
                            	    int alt305=2;
                            	    int LA305_0 = input.LA(1);

                            	    if ( (LA305_0==NL) ) {
                            	        alt305=1;
                            	    }
                            	    switch (alt305) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:45: NL
                            	            {
                            	            NL633=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr5747); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL633);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_map_or_set_elem_expr_in_map_or_set_expr5750);
                            	    map_or_set_elem_expr634=map_or_set_elem_expr();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_map_or_set_elem_expr.add(map_or_set_elem_expr634.getTree());
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:70: ( NL )?
                            	    int alt306=2;
                            	    int LA306_0 = input.LA(1);

                            	    if ( (LA306_0==NL) ) {
                            	        alt306=1;
                            	    }
                            	    switch (alt306) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:70: NL
                            	            {
                            	            NL635=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr5752); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL635);


                            	            }
                            	            break;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop307;
                                }
                            } while (true);


                            }
                            break;

                    }

                    char_literal636=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_map_or_set_expr5759); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal636);



                    // AST REWRITE
                    // elements: map_or_set_elem_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 805:82: -> ^( MAP_OR_SET_OR_OBJ ( map_or_set_elem_expr )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:85: ^( MAP_OR_SET_OR_OBJ ( map_or_set_elem_expr )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MAP_OR_SET_OR_OBJ, "MAP_OR_SET_OR_OBJ"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:105: ( map_or_set_elem_expr )*
                        while ( stream_map_or_set_elem_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_map_or_set_elem_expr.nextTree());

                        }
                        stream_map_or_set_elem_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:10: '{' ( NL )? token_ARROW ( NL )? '}'
                    {
                    char_literal637=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_map_or_set_expr5779); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal637);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:14: ( NL )?
                    int alt309=2;
                    int LA309_0 = input.LA(1);

                    if ( (LA309_0==NL) ) {
                        alt309=1;
                    }
                    switch (alt309) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:14: NL
                            {
                            NL638=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr5781); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL638);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_token_ARROW_in_map_or_set_expr5784);
                    token_ARROW639=token_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_ARROW.add(token_ARROW639.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:30: ( NL )?
                    int alt310=2;
                    int LA310_0 = input.LA(1);

                    if ( (LA310_0==NL) ) {
                        alt310=1;
                    }
                    switch (alt310) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:30: NL
                            {
                            NL640=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr5786); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL640);


                            }
                            break;

                    }

                    char_literal641=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_map_or_set_expr5789); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal641);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 806:38: -> ^( EMPTY_MAP )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:41: ^( EMPTY_MAP )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EMPTY_MAP, "EMPTY_MAP"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "map_or_set_expr"

    public static class map_or_set_elem_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "map_or_set_elem_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:1: map_or_set_elem_expr : protected_expr_nc ( ( NL )? arrow_or_assign ( NL )? protected_expr_nc )? -> ^( NIL_TOKEN ^( NIL_TOKEN ( protected_expr_nc )* ) ( arrow_or_assign )* ) ;
    public final babel17Parser.map_or_set_elem_expr_return map_or_set_elem_expr() throws RecognitionException {
        babel17Parser.map_or_set_elem_expr_return retval = new babel17Parser.map_or_set_elem_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL643=null;
        Token NL645=null;
        babel17Parser.protected_expr_nc_return protected_expr_nc642 = null;

        babel17Parser.arrow_or_assign_return arrow_or_assign644 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc646 = null;


        CommonTree NL643_tree=null;
        CommonTree NL645_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_arrow_or_assign=new RewriteRuleSubtreeStream(adaptor,"rule arrow_or_assign");
        RewriteRuleSubtreeStream stream_protected_expr_nc=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr_nc");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:2: ( protected_expr_nc ( ( NL )? arrow_or_assign ( NL )? protected_expr_nc )? -> ^( NIL_TOKEN ^( NIL_TOKEN ( protected_expr_nc )* ) ( arrow_or_assign )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:4: protected_expr_nc ( ( NL )? arrow_or_assign ( NL )? protected_expr_nc )?
            {
            pushFollow(FOLLOW_protected_expr_nc_in_map_or_set_elem_expr5806);
            protected_expr_nc642=protected_expr_nc();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc642.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:22: ( ( NL )? arrow_or_assign ( NL )? protected_expr_nc )?
            int alt314=2;
            int LA314_0 = input.LA(1);

            if ( (LA314_0==NL) ) {
                int LA314_1 = input.LA(2);

                if ( (LA314_1==ASSIGN||(LA314_1>=A_ARROW && LA314_1<=U_ARROW)) ) {
                    alt314=1;
                }
            }
            else if ( (LA314_0==ASSIGN||(LA314_0>=A_ARROW && LA314_0<=U_ARROW)) ) {
                alt314=1;
            }
            switch (alt314) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:23: ( NL )? arrow_or_assign ( NL )? protected_expr_nc
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:23: ( NL )?
                    int alt312=2;
                    int LA312_0 = input.LA(1);

                    if ( (LA312_0==NL) ) {
                        alt312=1;
                    }
                    switch (alt312) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:23: NL
                            {
                            NL643=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_elem_expr5809); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL643);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_arrow_or_assign_in_map_or_set_elem_expr5812);
                    arrow_or_assign644=arrow_or_assign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrow_or_assign.add(arrow_or_assign644.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:43: ( NL )?
                    int alt313=2;
                    int LA313_0 = input.LA(1);

                    if ( (LA313_0==NL) ) {
                        alt313=1;
                    }
                    switch (alt313) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:43: NL
                            {
                            NL645=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_elem_expr5814); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL645);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_map_or_set_elem_expr5817);
                    protected_expr_nc646=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc646.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: arrow_or_assign, protected_expr_nc
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 809:67: -> ^( NIL_TOKEN ^( NIL_TOKEN ( protected_expr_nc )* ) ( arrow_or_assign )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:70: ^( NIL_TOKEN ^( NIL_TOKEN ( protected_expr_nc )* ) ( arrow_or_assign )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:82: ^( NIL_TOKEN ( protected_expr_nc )* )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:94: ( protected_expr_nc )*
                while ( stream_protected_expr_nc.hasNext() ) {
                    adaptor.addChild(root_2, stream_protected_expr_nc.nextTree());

                }
                stream_protected_expr_nc.reset();

                adaptor.addChild(root_1, root_2);
                }
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:114: ( arrow_or_assign )*
                while ( stream_arrow_or_assign.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrow_or_assign.nextTree());

                }
                stream_arrow_or_assign.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "map_or_set_elem_expr"

    public static class type_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:811:1: type_expr : '(' ( NL )? ':' ( NL )? typeid ( NL )? ')' -> ^( TYPE_EXPR typeid ) ;
    public final babel17Parser.type_expr_return type_expr() throws RecognitionException {
        babel17Parser.type_expr_return retval = new babel17Parser.type_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal647=null;
        Token NL648=null;
        Token char_literal649=null;
        Token NL650=null;
        Token NL652=null;
        Token char_literal653=null;
        babel17Parser.typeid_return typeid651 = null;


        CommonTree char_literal647_tree=null;
        CommonTree NL648_tree=null;
        CommonTree char_literal649_tree=null;
        CommonTree NL650_tree=null;
        CommonTree NL652_tree=null;
        CommonTree char_literal653_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleSubtreeStream stream_typeid=new RewriteRuleSubtreeStream(adaptor,"rule typeid");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:812:2: ( '(' ( NL )? ':' ( NL )? typeid ( NL )? ')' -> ^( TYPE_EXPR typeid ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:812:4: '(' ( NL )? ':' ( NL )? typeid ( NL )? ')'
            {
            char_literal647=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_type_expr5844); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal647);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:812:8: ( NL )?
            int alt315=2;
            int LA315_0 = input.LA(1);

            if ( (LA315_0==NL) ) {
                alt315=1;
            }
            switch (alt315) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:812:8: NL
                    {
                    NL648=(Token)match(input,NL,FOLLOW_NL_in_type_expr5846); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL648);


                    }
                    break;

            }

            char_literal649=(Token)match(input,COLON,FOLLOW_COLON_in_type_expr5849); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(char_literal649);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:812:16: ( NL )?
            int alt316=2;
            int LA316_0 = input.LA(1);

            if ( (LA316_0==NL) ) {
                alt316=1;
            }
            switch (alt316) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:812:16: NL
                    {
                    NL650=(Token)match(input,NL,FOLLOW_NL_in_type_expr5851); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL650);


                    }
                    break;

            }

            pushFollow(FOLLOW_typeid_in_type_expr5854);
            typeid651=typeid();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeid.add(typeid651.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:812:27: ( NL )?
            int alt317=2;
            int LA317_0 = input.LA(1);

            if ( (LA317_0==NL) ) {
                alt317=1;
            }
            switch (alt317) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:812:27: NL
                    {
                    NL652=(Token)match(input,NL,FOLLOW_NL_in_type_expr5856); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL652);


                    }
                    break;

            }

            char_literal653=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_type_expr5859); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal653);



            // AST REWRITE
            // elements: typeid
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 812:35: -> ^( TYPE_EXPR typeid )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:812:38: ^( TYPE_EXPR typeid )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_EXPR, "TYPE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_typeid.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_expr"

    public static class primitive_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitive_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:814:1: primitive_expr : ( Num | Float | String | Id | Constr | L_true | L_false | L_this | L_nil | type_expr | list_expr | with_control_expr | map_or_set_expr );
    public final babel17Parser.primitive_expr_return primitive_expr() throws RecognitionException {
        babel17Parser.primitive_expr_return retval = new babel17Parser.primitive_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Num654=null;
        Token Float655=null;
        Token String656=null;
        Token Id657=null;
        Token Constr658=null;
        Token L_true659=null;
        Token L_false660=null;
        Token L_this661=null;
        Token L_nil662=null;
        babel17Parser.type_expr_return type_expr663 = null;

        babel17Parser.list_expr_return list_expr664 = null;

        babel17Parser.with_control_expr_return with_control_expr665 = null;

        babel17Parser.map_or_set_expr_return map_or_set_expr666 = null;


        CommonTree Num654_tree=null;
        CommonTree Float655_tree=null;
        CommonTree String656_tree=null;
        CommonTree Id657_tree=null;
        CommonTree Constr658_tree=null;
        CommonTree L_true659_tree=null;
        CommonTree L_false660_tree=null;
        CommonTree L_this661_tree=null;
        CommonTree L_nil662_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:815:2: ( Num | Float | String | Id | Constr | L_true | L_false | L_this | L_nil | type_expr | list_expr | with_control_expr | map_or_set_expr )
            int alt318=13;
            alt318 = dfa318.predict(input);
            switch (alt318) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:815:4: Num
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Num654=(Token)match(input,Num,FOLLOW_Num_in_primitive_expr5876); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Num654_tree = (CommonTree)adaptor.create(Num654);
                    adaptor.addChild(root_0, Num654_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:4: Float
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Float655=(Token)match(input,Float,FOLLOW_Float_in_primitive_expr5881); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Float655_tree = (CommonTree)adaptor.create(Float655);
                    adaptor.addChild(root_0, Float655_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:817:4: String
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    String656=(Token)match(input,String,FOLLOW_String_in_primitive_expr5886); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    String656_tree = (CommonTree)adaptor.create(String656);
                    adaptor.addChild(root_0, String656_tree);
                    }

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:818:4: Id
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Id657=(Token)match(input,Id,FOLLOW_Id_in_primitive_expr5891); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Id657_tree = (CommonTree)adaptor.create(Id657);
                    adaptor.addChild(root_0, Id657_tree);
                    }

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:819:4: Constr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Constr658=(Token)match(input,Constr,FOLLOW_Constr_in_primitive_expr5896); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Constr658_tree = (CommonTree)adaptor.create(Constr658);
                    adaptor.addChild(root_0, Constr658_tree);
                    }

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:820:4: L_true
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_true659=(Token)match(input,L_true,FOLLOW_L_true_in_primitive_expr5901); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_true659_tree = (CommonTree)adaptor.create(L_true659);
                    adaptor.addChild(root_0, L_true659_tree);
                    }

                    }
                    break;
                case 7 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:821:4: L_false
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_false660=(Token)match(input,L_false,FOLLOW_L_false_in_primitive_expr5906); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_false660_tree = (CommonTree)adaptor.create(L_false660);
                    adaptor.addChild(root_0, L_false660_tree);
                    }

                    }
                    break;
                case 8 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:822:4: L_this
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_this661=(Token)match(input,L_this,FOLLOW_L_this_in_primitive_expr5911); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_this661_tree = (CommonTree)adaptor.create(L_this661);
                    adaptor.addChild(root_0, L_this661_tree);
                    }

                    }
                    break;
                case 9 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:823:4: L_nil
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_nil662=(Token)match(input,L_nil,FOLLOW_L_nil_in_primitive_expr5917); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_nil662_tree = (CommonTree)adaptor.create(L_nil662);
                    adaptor.addChild(root_0, L_nil662_tree);
                    }

                    }
                    break;
                case 10 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:824:4: type_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_type_expr_in_primitive_expr5922);
                    type_expr663=type_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_expr663.getTree());

                    }
                    break;
                case 11 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:825:5: list_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_list_expr_in_primitive_expr5928);
                    list_expr664=list_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, list_expr664.getTree());

                    }
                    break;
                case 12 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:826:4: with_control_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_with_control_expr_in_primitive_expr5933);
                    with_control_expr665=with_control_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, with_control_expr665.getTree());

                    }
                    break;
                case 13 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:827:4: map_or_set_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_map_or_set_expr_in_primitive_expr5938);
                    map_or_set_expr666=map_or_set_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, map_or_set_expr666.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "primitive_expr"

    // $ANTLR start synpred1_babel17
    public final void synpred1_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:433:5: ( pattern ( NL )? ':' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:433:6: pattern ( NL )? ':'
        {
        pushFollow(FOLLOW_pattern_in_synpred1_babel171916);
        pattern();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:433:14: ( NL )?
        int alt319=2;
        int LA319_0 = input.LA(1);

        if ( (LA319_0==NL) ) {
            alt319=1;
        }
        switch (alt319) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:433:14: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred1_babel171918); if (state.failed) return ;

                }
                break;

        }

        match(input,COLON,FOLLOW_COLON_in_synpred1_babel171921); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_babel17

    // $ANTLR start synpred2_babel17
    public final void synpred2_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:438:10: ( Id ( NL )? L_as )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:438:11: Id ( NL )? L_as
        {
        match(input,Id,FOLLOW_Id_in_synpred2_babel171969); if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:438:14: ( NL )?
        int alt320=2;
        int LA320_0 = input.LA(1);

        if ( (LA320_0==NL) ) {
            alt320=1;
        }
        switch (alt320) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:438:14: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred2_babel171971); if (state.failed) return ;

                }
                break;

        }

        match(input,L_as,FOLLOW_L_as_in_synpred2_babel171974); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_babel17

    // $ANTLR start synpred3_babel17
    public final void synpred3_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:439:4: ( protected_expr ( NL )? QUESTION_MARK )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:439:5: protected_expr ( NL )? QUESTION_MARK
        {
        pushFollow(FOLLOW_protected_expr_in_synpred3_babel172005);
        protected_expr();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:439:20: ( NL )?
        int alt321=2;
        int LA321_0 = input.LA(1);

        if ( (LA321_0==NL) ) {
            alt321=1;
        }
        switch (alt321) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:439:20: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred3_babel172007); if (state.failed) return ;

                }
                break;

        }

        match(input,QUESTION_MARK,FOLLOW_QUESTION_MARK_in_synpred3_babel172010); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_babel17

    // $ANTLR start synpred4_babel17
    public final void synpred4_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:441:4: ( protected_expr ( NL )? EXCLAMATION_MARK )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:441:5: protected_expr ( NL )? EXCLAMATION_MARK
        {
        pushFollow(FOLLOW_protected_expr_in_synpred4_babel172048);
        protected_expr();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:441:20: ( NL )?
        int alt322=2;
        int LA322_0 = input.LA(1);

        if ( (LA322_0==NL) ) {
            alt322=1;
        }
        switch (alt322) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:441:20: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred4_babel172050); if (state.failed) return ;

                }
                break;

        }

        match(input,EXCLAMATION_MARK,FOLLOW_EXCLAMATION_MARK_in_synpred4_babel172053); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_babel17

    // $ANTLR start synpred5_babel17
    public final void synpred5_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:443:4: ( Id pattern )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:443:5: Id pattern
        {
        match(input,Id,FOLLOW_Id_in_synpred5_babel172091); if (state.failed) return ;
        pushFollow(FOLLOW_pattern_in_synpred5_babel172093);
        pattern();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_babel17

    // $ANTLR start synpred6_babel17
    public final void synpred6_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:4: ( pattern ( NL )? L_if )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:5: pattern ( NL )? L_if
        {
        pushFollow(FOLLOW_pattern_in_synpred6_babel172182);
        pattern();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:13: ( NL )?
        int alt323=2;
        int LA323_0 = input.LA(1);

        if ( (LA323_0==NL) ) {
            alt323=1;
        }
        switch (alt323) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:13: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred6_babel172184); if (state.failed) return ;

                }
                break;

        }

        match(input,L_if,FOLLOW_L_if_in_synpred6_babel172187); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_babel17

    // $ANTLR start synpred7_babel17
    public final void synpred7_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:4: ( pattern ( NL )? ':' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:5: pattern ( NL )? ':'
        {
        pushFollow(FOLLOW_pattern_in_synpred7_babel172218);
        pattern();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:13: ( NL )?
        int alt324=2;
        int LA324_0 = input.LA(1);

        if ( (LA324_0==NL) ) {
            alt324=1;
        }
        switch (alt324) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:13: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred7_babel172220); if (state.failed) return ;

                }
                break;

        }

        match(input,COLON,FOLLOW_COLON_in_synpred7_babel172223); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_babel17

    // $ANTLR start synpred8_babel17
    public final void synpred8_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:4: ( defpattern ( NL )? '=' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:5: defpattern ( NL )? '='
        {
        pushFollow(FOLLOW_defpattern_in_synpred8_babel173015);
        defpattern();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:16: ( NL )?
        int alt325=2;
        int LA325_0 = input.LA(1);

        if ( (LA325_0==NL) ) {
            alt325=1;
        }
        switch (alt325) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:16: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred8_babel173017); if (state.failed) return ;

                }
                break;

        }

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred8_babel173020); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_babel17

    // $ANTLR start synpred9_babel17
    public final void synpred9_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:4: ( ( pattern | objelem_assign ) ( NL )? '=' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:5: ( pattern | objelem_assign ) ( NL )? '='
        {
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:5: ( pattern | objelem_assign )
        int alt326=2;
        int LA326_0 = input.LA(1);

        if ( (LA326_0==L_exception||(LA326_0>=L_true && LA326_0<=L_false)||LA326_0==L_nil||LA326_0==MINUS||(LA326_0>=A_ELLIPSIS && LA326_0<=U_ELLIPSIS)||LA326_0==Constr||LA326_0==Num||(LA326_0>=String && LA326_0<=ROUND_BRACKET_OPEN)||LA326_0==SQUARE_BRACKET_OPEN||LA326_0==CURLY_BRACKET_OPEN||LA326_0==UNDERSCORE) ) {
            alt326=1;
        }
        else if ( (LA326_0==Id) ) {
            int LA326_2 = input.LA(2);

            if ( (LA326_2==PERIOD) ) {
                alt326=2;
            }
            else if ( (LA326_2==ASSIGN||(LA326_2>=A_DOUBLE_COLON && LA326_2<=U_DOUBLE_COLON)||LA326_2==NL) ) {
                alt326=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 326, 2, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 326, 0, input);

            throw nvae;
        }
        switch (alt326) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:6: pattern
                {
                pushFollow(FOLLOW_pattern_in_synpred9_babel173530);
                pattern();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:16: objelem_assign
                {
                pushFollow(FOLLOW_objelem_assign_in_synpred9_babel173534);
                objelem_assign();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:32: ( NL )?
        int alt327=2;
        int LA327_0 = input.LA(1);

        if ( (LA327_0==NL) ) {
            alt327=1;
        }
        switch (alt327) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:32: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred9_babel173537); if (state.failed) return ;

                }
                break;

        }

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred9_babel173540); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_babel17

    // $ANTLR start synpred10_babel17
    public final void synpred10_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:595:11: ( L_obj ( NL )? parents )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:595:12: L_obj ( NL )? parents
        {
        match(input,L_obj,FOLLOW_L_obj_in_synpred10_babel173769); if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:595:18: ( NL )?
        int alt328=2;
        int LA328_0 = input.LA(1);

        if ( (LA328_0==NL) ) {
            alt328=1;
        }
        switch (alt328) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:595:18: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred10_babel173771); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_parents_in_synpred10_babel173774);
        parents();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_babel17

    // $ANTLR start synpred11_babel17
    public final void synpred11_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:4: ( lambda_expr )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:5: lambda_expr
        {
        pushFollow(FOLLOW_lambda_expr_in_synpred11_babel173843);
        lambda_expr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_babel17

    // $ANTLR start synpred12_babel17
    public final void synpred12_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:600:4: ( lambda_expr_nobrackets )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:600:5: lambda_expr_nobrackets
        {
        pushFollow(FOLLOW_lambda_expr_nobrackets_in_synpred12_babel173854);
        lambda_expr_nobrackets();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_babel17

    // $ANTLR start synpred13_babel17
    public final void synpred13_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:604:4: ( lambda_expr )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:604:5: lambda_expr
        {
        pushFollow(FOLLOW_lambda_expr_in_synpred13_babel173875);
        lambda_expr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_babel17

    // $ANTLR start synpred14_babel17
    public final void synpred14_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:605:4: ( lambda_expr_nobrackets )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:605:5: lambda_expr_nobrackets
        {
        pushFollow(FOLLOW_lambda_expr_nobrackets_in_synpred14_babel173886);
        lambda_expr_nobrackets();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_babel17

    // $ANTLR start synpred15_babel17
    public final void synpred15_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:800:4: ( '[' ( NL )? protected_expr_nc ( NL )? ';' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:800:5: '[' ( NL )? protected_expr_nc ( NL )? ';'
        {
        match(input,SQUARE_BRACKET_OPEN,FOLLOW_SQUARE_BRACKET_OPEN_in_synpred15_babel175581); if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:800:9: ( NL )?
        int alt329=2;
        int LA329_0 = input.LA(1);

        if ( (LA329_0==NL) ) {
            alt329=1;
        }
        switch (alt329) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:800:9: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred15_babel175583); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_protected_expr_nc_in_synpred15_babel175586);
        protected_expr_nc();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:800:31: ( NL )?
        int alt330=2;
        int LA330_0 = input.LA(1);

        if ( (LA330_0==NL) ) {
            alt330=1;
        }
        switch (alt330) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:800:31: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred15_babel175588); if (state.failed) return ;

                }
                break;

        }

        match(input,SC,FOLLOW_SC_in_synpred15_babel175591); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_babel17

    // Delegated rules

    public final boolean synpred4_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA19 dfa19 = new DFA19(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA67 dfa67 = new DFA67(this);
    protected DFA73 dfa73 = new DFA73(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA75 dfa75 = new DFA75(this);
    protected DFA101 dfa101 = new DFA101(this);
    protected DFA138 dfa138 = new DFA138(this);
    protected DFA148 dfa148 = new DFA148(this);
    protected DFA149 dfa149 = new DFA149(this);
    protected DFA318 dfa318 = new DFA318(this);
    static final String DFA19_eotS =
        "\21\uffff";
    static final String DFA19_eofS =
        "\21\uffff";
    static final String DFA19_minS =
        "\1\131\16\0\2\uffff";
    static final String DFA19_maxS =
        "\1\u00a5\16\0\2\uffff";
    static final String DFA19_acceptS =
        "\17\uffff\1\1\1\2";
    static final String DFA19_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\2\uffff}>";
    static final String[] DFA19_transitionS = {
            "\1\15\10\uffff\1\6\1\7\2\uffff\1\10\27\uffff\1\11\17\uffff\2"+
            "\16\10\uffff\1\1\1\2\2\uffff\1\5\1\uffff\1\4\1\13\1\uffff\1"+
            "\12\1\uffff\1\14\1\uffff\1\3",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA19_eot = DFA.unpackEncodedString(DFA19_eotS);
    static final short[] DFA19_eof = DFA.unpackEncodedString(DFA19_eofS);
    static final char[] DFA19_min = DFA.unpackEncodedStringToUnsignedChars(DFA19_minS);
    static final char[] DFA19_max = DFA.unpackEncodedStringToUnsignedChars(DFA19_maxS);
    static final short[] DFA19_accept = DFA.unpackEncodedString(DFA19_acceptS);
    static final short[] DFA19_special = DFA.unpackEncodedString(DFA19_specialS);
    static final short[][] DFA19_transition;

    static {
        int numStates = DFA19_transitionS.length;
        DFA19_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA19_transition[i] = DFA.unpackEncodedString(DFA19_transitionS[i]);
        }
    }

    class DFA19 extends DFA {

        public DFA19(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 19;
            this.eot = DFA19_eot;
            this.eof = DFA19_eof;
            this.min = DFA19_min;
            this.max = DFA19_max;
            this.accept = DFA19_accept;
            this.special = DFA19_special;
            this.transition = DFA19_transition;
        }
        public String getDescription() {
            return "432:1: casepattern : ( ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation -> ^( TYPE_PATTERN typeannotation pattern ) | pattern );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA19_1 = input.LA(1);

                         
                        int index19_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA19_2 = input.LA(1);

                         
                        int index19_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA19_3 = input.LA(1);

                         
                        int index19_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA19_4 = input.LA(1);

                         
                        int index19_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA19_5 = input.LA(1);

                         
                        int index19_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA19_6 = input.LA(1);

                         
                        int index19_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA19_7 = input.LA(1);

                         
                        int index19_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA19_8 = input.LA(1);

                         
                        int index19_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA19_9 = input.LA(1);

                         
                        int index19_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA19_10 = input.LA(1);

                         
                        int index19_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA19_11 = input.LA(1);

                         
                        int index19_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA19_12 = input.LA(1);

                         
                        int index19_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA19_13 = input.LA(1);

                         
                        int index19_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA19_14 = input.LA(1);

                         
                        int index19_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 19, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA39_eotS =
        "\45\uffff";
    static final String DFA39_eofS =
        "\45\uffff";
    static final String DFA39_minS =
        "\1\107\33\0\11\uffff";
    static final String DFA39_maxS =
        "\1\u00a5\33\0\11\uffff";
    static final String DFA39_acceptS =
        "\34\uffff\1\5\1\1\1\2\1\3\1\4\1\7\1\10\1\11\1\6";
    static final String DFA39_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\11\uffff}>";
    static final String[] DFA39_transitionS = {
            "\1\31\1\uffff\1\33\1\32\1\24\3\uffff\1\25\1\27\2\uffff\1\26"+
            "\2\uffff\1\34\2\uffff\1\15\2\uffff\1\30\1\uffff\1\17\1\21\1"+
            "\17\1\uffff\1\7\1\10\1\23\1\21\1\11\4\uffff\1\21\4\uffff\1\20"+
            "\15\uffff\1\12\17\uffff\2\16\4\uffff\1\21\3\uffff\1\3\1\1\1"+
            "\uffff\1\22\1\6\1\uffff\1\5\1\2\1\uffff\1\13\1\uffff\1\14\1"+
            "\uffff\1\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA39_eot = DFA.unpackEncodedString(DFA39_eotS);
    static final short[] DFA39_eof = DFA.unpackEncodedString(DFA39_eofS);
    static final char[] DFA39_min = DFA.unpackEncodedStringToUnsignedChars(DFA39_minS);
    static final char[] DFA39_max = DFA.unpackEncodedStringToUnsignedChars(DFA39_maxS);
    static final short[] DFA39_accept = DFA.unpackEncodedString(DFA39_acceptS);
    static final short[] DFA39_special = DFA.unpackEncodedString(DFA39_specialS);
    static final short[][] DFA39_transition;

    static {
        int numStates = DFA39_transitionS.length;
        DFA39_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA39_transition[i] = DFA.unpackEncodedString(DFA39_transitionS[i]);
        }
    }

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = DFA39_eot;
            this.eof = DFA39_eof;
            this.min = DFA39_min;
            this.max = DFA39_max;
            this.accept = DFA39_accept;
            this.special = DFA39_special;
            this.transition = DFA39_transition;
        }
        public String getDescription() {
            return "437:1: bracket_pattern : ( ( Id ( NL )? L_as )=> Id ( NL )? L_as ( NL )? pattern -> ^( L_as Id pattern ) | ( protected_expr ( NL )? QUESTION_MARK )=> protected_expr ( NL )? QUESTION_MARK ( ( NL )? pattern )? -> ^( QUESTION_MARK protected_expr ( pattern )? ) | ( protected_expr ( NL )? EXCLAMATION_MARK )=> protected_expr ( NL )? EXCLAMATION_MARK ( ( NL )? pattern )? -> ^( EXCLAMATION_MARK protected_expr ( pattern )? ) | ( Id pattern )=> Id pattern -> ^( INNERVALUE_PATTERN Id pattern ) | L_val ( NL )? protected_expr_nc -> ^( L_val protected_expr_nc ) | L_for ( NL )? ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )? L_end -> ^( L_for ( bracket_pattern )* ) | ( pattern ( NL )? L_if )=> pattern ( NL )? L_if ( NL )? protected_expr_nc -> ^( IF_PATTERN pattern protected_expr_nc ) | ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation -> ^( TYPE_PATTERN typeannotation pattern ) | pattern );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA39_1 = input.LA(1);

                         
                        int index39_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 29;}

                        else if ( (synpred3_babel17()) ) {s = 30;}

                        else if ( (synpred4_babel17()) ) {s = 31;}

                        else if ( (synpred5_babel17()) ) {s = 32;}

                        else if ( (synpred6_babel17()) ) {s = 33;}

                        else if ( (synpred7_babel17()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA39_2 = input.LA(1);

                         
                        int index39_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 30;}

                        else if ( (synpred4_babel17()) ) {s = 31;}

                        else if ( (synpred6_babel17()) ) {s = 33;}

                        else if ( (synpred7_babel17()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA39_3 = input.LA(1);

                         
                        int index39_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 30;}

                        else if ( (synpred4_babel17()) ) {s = 31;}

                        else if ( (synpred6_babel17()) ) {s = 33;}

                        else if ( (synpred7_babel17()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA39_4 = input.LA(1);

                         
                        int index39_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 30;}

                        else if ( (synpred4_babel17()) ) {s = 31;}

                        else if ( (synpred6_babel17()) ) {s = 33;}

                        else if ( (synpred7_babel17()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA39_5 = input.LA(1);

                         
                        int index39_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 30;}

                        else if ( (synpred4_babel17()) ) {s = 31;}

                        else if ( (synpred6_babel17()) ) {s = 33;}

                        else if ( (synpred7_babel17()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA39_6 = input.LA(1);

                         
                        int index39_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 30;}

                        else if ( (synpred4_babel17()) ) {s = 31;}

                        else if ( (synpred6_babel17()) ) {s = 33;}

                        else if ( (synpred7_babel17()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA39_7 = input.LA(1);

                         
                        int index39_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 30;}

                        else if ( (synpred4_babel17()) ) {s = 31;}

                        else if ( (synpred6_babel17()) ) {s = 33;}

                        else if ( (synpred7_babel17()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA39_8 = input.LA(1);

                         
                        int index39_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 30;}

                        else if ( (synpred4_babel17()) ) {s = 31;}

                        else if ( (synpred6_babel17()) ) {s = 33;}

                        else if ( (synpred7_babel17()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA39_9 = input.LA(1);

                         
                        int index39_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 30;}

                        else if ( (synpred4_babel17()) ) {s = 31;}

                        else if ( (synpred6_babel17()) ) {s = 33;}

                        else if ( (synpred7_babel17()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA39_10 = input.LA(1);

                         
                        int index39_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 30;}

                        else if ( (synpred4_babel17()) ) {s = 31;}

                        else if ( (synpred6_babel17()) ) {s = 33;}

                        else if ( (synpred7_babel17()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA39_11 = input.LA(1);

                         
                        int index39_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 30;}

                        else if ( (synpred4_babel17()) ) {s = 31;}

                        else if ( (synpred6_babel17()) ) {s = 33;}

                        else if ( (synpred7_babel17()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA39_12 = input.LA(1);

                         
                        int index39_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 30;}

                        else if ( (synpred4_babel17()) ) {s = 31;}

                        else if ( (synpred6_babel17()) ) {s = 33;}

                        else if ( (synpred7_babel17()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA39_13 = input.LA(1);

                         
                        int index39_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 30;}

                        else if ( (synpred4_babel17()) ) {s = 31;}

                        else if ( (synpred6_babel17()) ) {s = 33;}

                        else if ( (synpred7_babel17()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA39_14 = input.LA(1);

                         
                        int index39_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 30;}

                        else if ( (synpred4_babel17()) ) {s = 31;}

                        else if ( (synpred6_babel17()) ) {s = 33;}

                        else if ( (synpred7_babel17()) ) {s = 34;}

                        else if ( (true) ) {s = 35;}

                         
                        input.seek(index39_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA39_15 = input.LA(1);

                         
                        int index39_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 30;}

                        else if ( (synpred4_babel17()) ) {s = 31;}

                         
                        input.seek(index39_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA39_16 = input.LA(1);

                         
                        int index39_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 30;}

                        else if ( (synpred4_babel17()) ) {s = 31;}

                         
                        input.seek(index39_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA39_17 = input.LA(1);

                         
                        int index39_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 30;}

                        else if ( (synpred4_babel17()) ) {s = 31;}

                         
                        input.seek(index39_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA39_18 = input.LA(1);

                         
                        int index39_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 30;}

                        else if ( (synpred4_babel17()) ) {s = 31;}

                         
                        input.seek(index39_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA39_19 = input.LA(1);

                         
                        int index39_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 30;}

                        else if ( (synpred4_babel17()) ) {s = 31;}

                         
                        input.seek(index39_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA39_20 = input.LA(1);

                         
                        int index39_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 30;}

                        else if ( (synpred4_babel17()) ) {s = 31;}

                         
                        input.seek(index39_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA39_21 = input.LA(1);

                         
                        int index39_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 30;}

                        else if ( (synpred4_babel17()) ) {s = 31;}

                         
                        input.seek(index39_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA39_22 = input.LA(1);

                         
                        int index39_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 30;}

                        else if ( (synpred4_babel17()) ) {s = 31;}

                         
                        input.seek(index39_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA39_23 = input.LA(1);

                         
                        int index39_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 30;}

                        else if ( (synpred4_babel17()) ) {s = 31;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA39_24 = input.LA(1);

                         
                        int index39_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 30;}

                        else if ( (synpred4_babel17()) ) {s = 31;}

                         
                        input.seek(index39_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA39_25 = input.LA(1);

                         
                        int index39_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 30;}

                        else if ( (synpred4_babel17()) ) {s = 31;}

                         
                        input.seek(index39_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA39_26 = input.LA(1);

                         
                        int index39_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 30;}

                        else if ( (synpred4_babel17()) ) {s = 31;}

                         
                        input.seek(index39_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA39_27 = input.LA(1);

                         
                        int index39_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 30;}

                        else if ( (synpred4_babel17()) ) {s = 31;}

                         
                        input.seek(index39_27);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 39, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA67_eotS =
        "\17\uffff";
    static final String DFA67_eofS =
        "\17\uffff";
    static final String DFA67_minS =
        "\1\142\12\uffff\2\107\2\uffff";
    static final String DFA67_maxS =
        "\1\u00a5\12\uffff\2\u00a5\2\uffff";
    static final String DFA67_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\2\uffff\1\13"+
        "\1\14";
    static final String DFA67_specialS =
        "\17\uffff}>";
    static final String[] DFA67_transitionS = {
            "\1\5\1\6\2\uffff\1\7\27\uffff\1\10\32\uffff\1\1\2\uffff\1\4"+
            "\1\uffff\1\3\1\12\1\uffff\1\11\1\uffff\1\13\1\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\15\1\uffff\3\15\3\uffff\2\15\2\uffff\1\15\2\uffff\1\15\2"+
            "\uffff\1\15\2\uffff\1\15\1\uffff\3\15\1\uffff\5\15\4\uffff\1"+
            "\15\4\uffff\1\15\15\uffff\1\15\15\uffff\2\16\2\15\4\uffff\1"+
            "\15\2\uffff\1\14\2\15\1\uffff\2\15\1\uffff\2\15\1\uffff\1\15"+
            "\1\uffff\3\15",
            "\1\15\1\uffff\3\15\3\uffff\2\15\2\uffff\1\15\2\uffff\1\15\2"+
            "\uffff\1\15\2\uffff\1\15\1\uffff\3\15\1\uffff\5\15\4\uffff\1"+
            "\15\4\uffff\1\15\15\uffff\1\15\15\uffff\2\16\2\15\4\uffff\1"+
            "\15\3\uffff\2\15\1\uffff\2\15\1\uffff\2\15\1\uffff\1\15\1\uffff"+
            "\3\15",
            "",
            ""
    };

    static final short[] DFA67_eot = DFA.unpackEncodedString(DFA67_eotS);
    static final short[] DFA67_eof = DFA.unpackEncodedString(DFA67_eofS);
    static final char[] DFA67_min = DFA.unpackEncodedStringToUnsignedChars(DFA67_minS);
    static final char[] DFA67_max = DFA.unpackEncodedStringToUnsignedChars(DFA67_maxS);
    static final short[] DFA67_accept = DFA.unpackEncodedString(DFA67_acceptS);
    static final short[] DFA67_special = DFA.unpackEncodedString(DFA67_specialS);
    static final short[][] DFA67_transition;

    static {
        int numStates = DFA67_transitionS.length;
        DFA67_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA67_transition[i] = DFA.unpackEncodedString(DFA67_transitionS[i]);
        }
    }

    class DFA67 extends DFA {

        public DFA67(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 67;
            this.eot = DFA67_eot;
            this.eof = DFA67_eof;
            this.min = DFA67_min;
            this.max = DFA67_max;
            this.accept = DFA67_accept;
            this.special = DFA67_special;
            this.transition = DFA67_transition;
        }
        public String getDescription() {
            return "458:1: primitive_pattern : ( Id | '_' -> ANY | String | Num | L_true | L_false | L_nil | '-' ( NL )? Num -> ^( UMINUS Num ) | '[' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )? ']' -> ^( SQUARE_LIST ( bracket_pattern )* ) | '(' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) ) | '{' ( NL )? ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) );";
        }
    }
    static final String DFA73_eotS =
        "\4\uffff";
    static final String DFA73_eofS =
        "\2\3\2\uffff";
    static final String DFA73_minS =
        "\2\107\2\uffff";
    static final String DFA73_maxS =
        "\2\u00aa\2\uffff";
    static final String DFA73_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA73_specialS =
        "\4\uffff}>";
    static final String[] DFA73_transitionS = {
            "\1\2\1\3\3\2\1\uffff\2\3\2\2\1\uffff\2\2\1\3\1\uffff\2\2\1\uffff"+
            "\1\2\2\uffff\1\2\1\uffff\11\2\2\uffff\5\2\1\3\1\uffff\1\2\13"+
            "\uffff\1\1\1\uffff\1\2\17\uffff\2\2\4\uffff\1\2\2\uffff\1\1"+
            "\2\2\1\uffff\2\2\1\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\1\2\1\uffff\4\2",
            "\1\2\1\3\3\2\1\uffff\2\3\2\2\1\uffff\2\2\1\3\1\uffff\2\2\1"+
            "\uffff\1\2\2\uffff\1\2\1\uffff\11\2\2\uffff\5\2\1\3\1\uffff"+
            "\1\2\13\uffff\1\1\1\uffff\1\2\17\uffff\2\2\4\uffff\1\2\2\uffff"+
            "\1\1\2\2\1\uffff\2\2\1\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\1\2\1\uffff\4\2",
            "",
            ""
    };

    static final short[] DFA73_eot = DFA.unpackEncodedString(DFA73_eotS);
    static final short[] DFA73_eof = DFA.unpackEncodedString(DFA73_eofS);
    static final char[] DFA73_min = DFA.unpackEncodedStringToUnsignedChars(DFA73_minS);
    static final char[] DFA73_max = DFA.unpackEncodedStringToUnsignedChars(DFA73_maxS);
    static final short[] DFA73_accept = DFA.unpackEncodedString(DFA73_acceptS);
    static final short[] DFA73_special = DFA.unpackEncodedString(DFA73_specialS);
    static final short[][] DFA73_transition;

    static {
        int numStates = DFA73_transitionS.length;
        DFA73_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA73_transition[i] = DFA.unpackEncodedString(DFA73_transitionS[i]);
        }
    }

    class DFA73 extends DFA {

        public DFA73(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 73;
            this.eot = DFA73_eot;
            this.eof = DFA73_eof;
            this.min = DFA73_min;
            this.max = DFA73_max;
            this.accept = DFA73_accept;
            this.special = DFA73_special;
            this.transition = DFA73_transition;
        }
        public String getDescription() {
            return "480:1: block : ( ( sep )? statement ( sep statement )* ( sep )? -> ^( BLOCK ( statement )* ) | ( sep )? -> ^( BLOCK ) );";
        }
    }
    static final String DFA70_eotS =
        "\4\uffff";
    static final String DFA70_eofS =
        "\2\2\2\uffff";
    static final String DFA70_minS =
        "\1\110\1\107\2\uffff";
    static final String DFA70_maxS =
        "\1\u0097\1\u00aa\2\uffff";
    static final String DFA70_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA70_specialS =
        "\4\uffff}>";
    static final String[] DFA70_transitionS = {
            "\1\2\4\uffff\2\2\5\uffff\1\2\31\uffff\1\2\15\uffff\1\1\32\uffff"+
            "\1\1",
            "\1\3\1\2\3\3\1\uffff\2\2\2\3\1\uffff\2\3\1\2\1\uffff\2\3\1"+
            "\uffff\1\3\2\uffff\1\3\1\uffff\11\3\2\uffff\5\3\1\2\1\uffff"+
            "\1\3\13\uffff\1\1\1\uffff\1\3\17\uffff\2\3\4\uffff\1\3\2\uffff"+
            "\1\1\2\3\1\uffff\2\3\1\uffff\2\3\1\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\uffff\4\3",
            "",
            ""
    };

    static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_eotS);
    static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_eofS);
    static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_minS);
    static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_maxS);
    static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_acceptS);
    static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_specialS);
    static final short[][] DFA70_transition;

    static {
        int numStates = DFA70_transitionS.length;
        DFA70_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA70_transition[i] = DFA.unpackEncodedString(DFA70_transitionS[i]);
        }
    }

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = DFA70_eot;
            this.eof = DFA70_eof;
            this.min = DFA70_min;
            this.max = DFA70_max;
            this.accept = DFA70_accept;
            this.special = DFA70_special;
            this.transition = DFA70_transition;
        }
        public String getDescription() {
            return "()* loopback of 480:25: ( sep statement )*";
        }
    }
    static final String DFA75_eotS =
        "\16\uffff";
    static final String DFA75_eofS =
        "\16\uffff";
    static final String DFA75_minS =
        "\1\107\15\uffff";
    static final String DFA75_maxS =
        "\1\u00aa\15\uffff";
    static final String DFA75_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15";
    static final String DFA75_specialS =
        "\16\uffff}>";
    static final String[] DFA75_transitionS = {
            "\1\11\1\uffff\3\11\3\uffff\2\11\1\uffff\1\4\1\11\2\uffff\1\2"+
            "\1\3\1\uffff\1\11\2\uffff\1\11\1\uffff\3\11\1\5\5\11\2\uffff"+
            "\1\7\1\1\1\11\1\6\1\10\2\uffff\1\11\15\uffff\1\11\17\uffff\2"+
            "\11\4\uffff\1\11\3\uffff\2\11\1\uffff\2\11\1\uffff\2\11\1\uffff"+
            "\1\11\1\uffff\1\11\1\uffff\1\11\1\uffff\1\13\1\12\1\15\1\14",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA75_eot = DFA.unpackEncodedString(DFA75_eotS);
    static final short[] DFA75_eof = DFA.unpackEncodedString(DFA75_eofS);
    static final char[] DFA75_min = DFA.unpackEncodedStringToUnsignedChars(DFA75_minS);
    static final char[] DFA75_max = DFA.unpackEncodedStringToUnsignedChars(DFA75_maxS);
    static final short[] DFA75_accept = DFA.unpackEncodedString(DFA75_acceptS);
    static final short[] DFA75_special = DFA.unpackEncodedString(DFA75_specialS);
    static final short[][] DFA75_transition;

    static {
        int numStates = DFA75_transitionS.length;
        DFA75_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA75_transition[i] = DFA.unpackEncodedString(DFA75_transitionS[i]);
        }
    }

    class DFA75 extends DFA {

        public DFA75(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 75;
            this.eot = DFA75_eot;
            this.eof = DFA75_eof;
            this.min = DFA75_min;
            this.max = DFA75_max;
            this.accept = DFA75_accept;
            this.special = DFA75_special;
            this.transition = DFA75_transition;
        }
        public String getDescription() {
            return "486:1: statement : ( st_typedef | st_val | st_def | st_yield | st_memoize | st_private | st_module | st_import | expr_or_assign | PRAGMA_PRINT expr -> ^( PRAGMA_PRINT expr ) | PRAGMA_LOG expr -> ^( PRAGMA_LOG expr ) | PRAGMA_PROFILE expr -> ^( PRAGMA_PROFILE expr ) | PRAGMA_ASSERT expr -> ^( PRAGMA_ASSERT expr ) );";
        }
    }
    static final String DFA101_eotS =
        "\17\uffff";
    static final String DFA101_eofS =
        "\17\uffff";
    static final String DFA101_minS =
        "\1\142\14\0\2\uffff";
    static final String DFA101_maxS =
        "\1\u00a5\14\0\2\uffff";
    static final String DFA101_acceptS =
        "\15\uffff\1\1\1\2";
    static final String DFA101_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\2\uffff}>";
    static final String[] DFA101_transitionS = {
            "\1\5\1\6\2\uffff\1\7\27\uffff\1\10\31\uffff\1\14\1\1\2\uffff"+
            "\1\4\1\uffff\1\3\1\12\1\uffff\1\11\1\uffff\1\13\1\uffff\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA101_eot = DFA.unpackEncodedString(DFA101_eotS);
    static final short[] DFA101_eof = DFA.unpackEncodedString(DFA101_eofS);
    static final char[] DFA101_min = DFA.unpackEncodedStringToUnsignedChars(DFA101_minS);
    static final char[] DFA101_max = DFA.unpackEncodedStringToUnsignedChars(DFA101_maxS);
    static final short[] DFA101_accept = DFA.unpackEncodedString(DFA101_acceptS);
    static final short[] DFA101_special = DFA.unpackEncodedString(DFA101_specialS);
    static final short[][] DFA101_transition;

    static {
        int numStates = DFA101_transitionS.length;
        DFA101_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA101_transition[i] = DFA.unpackEncodedString(DFA101_transitionS[i]);
        }
    }

    class DFA101 extends DFA {

        public DFA101(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 101;
            this.eot = DFA101_eot;
            this.eof = DFA101_eof;
            this.min = DFA101_min;
            this.max = DFA101_max;
            this.accept = DFA101_accept;
            this.special = DFA101_special;
            this.transition = DFA101_transition;
        }
        public String getDescription() {
            return "513:1: typedef_clause : ( ( defpattern ( NL )? '=' )=> defpattern ( NL )? '=' ( NL )? expr -> ^( TYPEDEF_CLAUSE defpattern expr ) | defpattern -> ^( TYPEDEF_CLAUSE defpattern ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA101_1 = input.LA(1);

                         
                        int index101_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index101_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA101_2 = input.LA(1);

                         
                        int index101_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index101_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA101_3 = input.LA(1);

                         
                        int index101_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index101_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA101_4 = input.LA(1);

                         
                        int index101_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index101_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA101_5 = input.LA(1);

                         
                        int index101_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index101_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA101_6 = input.LA(1);

                         
                        int index101_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index101_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA101_7 = input.LA(1);

                         
                        int index101_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index101_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA101_8 = input.LA(1);

                         
                        int index101_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index101_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA101_9 = input.LA(1);

                         
                        int index101_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index101_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA101_10 = input.LA(1);

                         
                        int index101_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index101_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA101_11 = input.LA(1);

                         
                        int index101_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index101_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA101_12 = input.LA(1);

                         
                        int index101_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index101_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 101, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA138_eotS =
        "\35\uffff";
    static final String DFA138_eofS =
        "\35\uffff";
    static final String DFA138_minS =
        "\1\107\16\0\16\uffff";
    static final String DFA138_maxS =
        "\1\u00a5\16\0\16\uffff";
    static final String DFA138_acceptS =
        "\17\uffff\1\2\14\uffff\1\1";
    static final String DFA138_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\16\uffff}>";
    static final String[] DFA138_transitionS = {
            "\1\17\1\uffff\3\17\3\uffff\2\17\2\uffff\1\17\5\uffff\1\15\2"+
            "\uffff\1\17\1\uffff\3\17\1\uffff\1\6\1\7\2\17\1\10\4\uffff\1"+
            "\17\4\uffff\1\17\15\uffff\1\11\17\uffff\2\16\4\uffff\1\17\3"+
            "\uffff\1\1\1\2\1\uffff\1\17\1\5\1\uffff\1\4\1\13\1\uffff\1\12"+
            "\1\uffff\1\14\1\uffff\1\3",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA138_eot = DFA.unpackEncodedString(DFA138_eotS);
    static final short[] DFA138_eof = DFA.unpackEncodedString(DFA138_eofS);
    static final char[] DFA138_min = DFA.unpackEncodedStringToUnsignedChars(DFA138_minS);
    static final char[] DFA138_max = DFA.unpackEncodedStringToUnsignedChars(DFA138_maxS);
    static final short[] DFA138_accept = DFA.unpackEncodedString(DFA138_acceptS);
    static final short[] DFA138_special = DFA.unpackEncodedString(DFA138_specialS);
    static final short[][] DFA138_transition;

    static {
        int numStates = DFA138_transitionS.length;
        DFA138_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA138_transition[i] = DFA.unpackEncodedString(DFA138_transitionS[i]);
        }
    }

    class DFA138 extends DFA {

        public DFA138(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 138;
            this.eot = DFA138_eot;
            this.eof = DFA138_eof;
            this.min = DFA138_min;
            this.max = DFA138_max;
            this.accept = DFA138_accept;
            this.special = DFA138_special;
            this.transition = DFA138_transition;
        }
        public String getDescription() {
            return "559:1: expr_or_assign : ( ( ( pattern | objelem_assign ) ( NL )? '=' )=> ( pattern | objelem_assign ) ( NL )? '=' ( NL )? expr -> ^( ASSIGN ( pattern )* ( objelem_assign )* expr ) | expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA138_1 = input.LA(1);

                         
                        int index138_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 28;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index138_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA138_2 = input.LA(1);

                         
                        int index138_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 28;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index138_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA138_3 = input.LA(1);

                         
                        int index138_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 28;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index138_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA138_4 = input.LA(1);

                         
                        int index138_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 28;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index138_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA138_5 = input.LA(1);

                         
                        int index138_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 28;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index138_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA138_6 = input.LA(1);

                         
                        int index138_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 28;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index138_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA138_7 = input.LA(1);

                         
                        int index138_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 28;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index138_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA138_8 = input.LA(1);

                         
                        int index138_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 28;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index138_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA138_9 = input.LA(1);

                         
                        int index138_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 28;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index138_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA138_10 = input.LA(1);

                         
                        int index138_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 28;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index138_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA138_11 = input.LA(1);

                         
                        int index138_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 28;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index138_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA138_12 = input.LA(1);

                         
                        int index138_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 28;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index138_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA138_13 = input.LA(1);

                         
                        int index138_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 28;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index138_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA138_14 = input.LA(1);

                         
                        int index138_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 28;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index138_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 138, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA148_eotS =
        "\34\uffff";
    static final String DFA148_eofS =
        "\34\uffff";
    static final String DFA148_minS =
        "\1\107\3\0\1\uffff\11\0\16\uffff";
    static final String DFA148_maxS =
        "\1\u00a5\3\0\1\uffff\11\0\16\uffff";
    static final String DFA148_acceptS =
        "\4\uffff\1\2\11\uffff\1\2\1\3\13\uffff\1\1";
    static final String DFA148_specialS =
        "\1\0\1\1\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\16\uffff}>";
    static final String[] DFA148_transitionS = {
            "\1\17\2\uffff\2\17\3\uffff\2\17\2\uffff\1\17\5\uffff\1\15\2"+
            "\uffff\1\17\1\uffff\3\17\1\uffff\1\7\1\10\2\17\1\11\4\uffff"+
            "\1\17\4\uffff\1\17\15\uffff\1\12\17\uffff\2\16\4\uffff\1\17"+
            "\3\uffff\1\2\1\3\1\uffff\1\17\1\6\1\uffff\1\5\1\1\1\uffff\1"+
            "\13\1\uffff\1\14\1\uffff\1\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA148_eot = DFA.unpackEncodedString(DFA148_eotS);
    static final short[] DFA148_eof = DFA.unpackEncodedString(DFA148_eofS);
    static final char[] DFA148_min = DFA.unpackEncodedStringToUnsignedChars(DFA148_minS);
    static final char[] DFA148_max = DFA.unpackEncodedStringToUnsignedChars(DFA148_maxS);
    static final short[] DFA148_accept = DFA.unpackEncodedString(DFA148_acceptS);
    static final short[] DFA148_special = DFA.unpackEncodedString(DFA148_specialS);
    static final short[][] DFA148_transition;

    static {
        int numStates = DFA148_transitionS.length;
        DFA148_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA148_transition[i] = DFA.unpackEncodedString(DFA148_transitionS[i]);
        }
    }

    class DFA148 extends DFA {

        public DFA148(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 148;
            this.eot = DFA148_eot;
            this.eof = DFA148_eof;
            this.min = DFA148_min;
            this.max = DFA148_max;
            this.accept = DFA148_accept;
            this.special = DFA148_special;
            this.transition = DFA148_transition;
        }
        public String getDescription() {
            return "598:1: lop_expr : ( ( lambda_expr )=> lambda_expr | ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | op_expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA148_0 = input.LA(1);

                         
                        int index148_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA148_0==ROUND_BRACKET_OPEN) ) {s = 1;}

                        else if ( (LA148_0==Constr) ) {s = 2;}

                        else if ( (LA148_0==Id) ) {s = 3;}

                        else if ( (LA148_0==UNDERSCORE) && (synpred12_babel17())) {s = 4;}

                        else if ( (LA148_0==String) ) {s = 5;}

                        else if ( (LA148_0==Num) ) {s = 6;}

                        else if ( (LA148_0==L_true) ) {s = 7;}

                        else if ( (LA148_0==L_false) ) {s = 8;}

                        else if ( (LA148_0==L_nil) ) {s = 9;}

                        else if ( (LA148_0==MINUS) ) {s = 10;}

                        else if ( (LA148_0==SQUARE_BRACKET_OPEN) ) {s = 11;}

                        else if ( (LA148_0==CURLY_BRACKET_OPEN) ) {s = 12;}

                        else if ( (LA148_0==L_exception) ) {s = 13;}

                        else if ( ((LA148_0>=A_ELLIPSIS && LA148_0<=U_ELLIPSIS)) && (synpred12_babel17())) {s = 14;}

                        else if ( (LA148_0==L_begin||(LA148_0>=L_with && LA148_0<=L_if)||(LA148_0>=L_while && LA148_0<=L_for)||LA148_0==L_match||LA148_0==L_try||(LA148_0>=L_concurrent && LA148_0<=L_lazy)||(LA148_0>=L_this && LA148_0<=L_random)||LA148_0==L_typeof||LA148_0==L_not||LA148_0==L_force||LA148_0==Float) ) {s = 15;}

                         
                        input.seek(index148_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA148_1 = input.LA(1);

                         
                        int index148_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 27;}

                        else if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index148_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA148_2 = input.LA(1);

                         
                        int index148_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index148_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA148_3 = input.LA(1);

                         
                        int index148_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index148_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA148_5 = input.LA(1);

                         
                        int index148_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index148_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA148_6 = input.LA(1);

                         
                        int index148_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index148_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA148_7 = input.LA(1);

                         
                        int index148_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index148_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA148_8 = input.LA(1);

                         
                        int index148_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index148_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA148_9 = input.LA(1);

                         
                        int index148_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index148_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA148_10 = input.LA(1);

                         
                        int index148_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index148_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA148_11 = input.LA(1);

                         
                        int index148_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index148_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA148_12 = input.LA(1);

                         
                        int index148_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index148_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA148_13 = input.LA(1);

                         
                        int index148_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index148_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 148, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA149_eotS =
        "\34\uffff";
    static final String DFA149_eofS =
        "\34\uffff";
    static final String DFA149_minS =
        "\1\107\3\0\1\uffff\11\0\16\uffff";
    static final String DFA149_maxS =
        "\1\u00a5\3\0\1\uffff\11\0\16\uffff";
    static final String DFA149_acceptS =
        "\4\uffff\1\2\11\uffff\1\2\1\3\13\uffff\1\1";
    static final String DFA149_specialS =
        "\1\0\1\1\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\16\uffff}>";
    static final String[] DFA149_transitionS = {
            "\1\17\2\uffff\2\17\3\uffff\2\17\2\uffff\1\17\5\uffff\1\15\2"+
            "\uffff\1\17\1\uffff\3\17\1\uffff\1\7\1\10\2\17\1\11\4\uffff"+
            "\1\17\4\uffff\1\17\15\uffff\1\12\17\uffff\2\16\4\uffff\1\17"+
            "\3\uffff\1\2\1\3\1\uffff\1\17\1\6\1\uffff\1\5\1\1\1\uffff\1"+
            "\13\1\uffff\1\14\1\uffff\1\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA149_eot = DFA.unpackEncodedString(DFA149_eotS);
    static final short[] DFA149_eof = DFA.unpackEncodedString(DFA149_eofS);
    static final char[] DFA149_min = DFA.unpackEncodedStringToUnsignedChars(DFA149_minS);
    static final char[] DFA149_max = DFA.unpackEncodedStringToUnsignedChars(DFA149_maxS);
    static final short[] DFA149_accept = DFA.unpackEncodedString(DFA149_acceptS);
    static final short[] DFA149_special = DFA.unpackEncodedString(DFA149_specialS);
    static final short[][] DFA149_transition;

    static {
        int numStates = DFA149_transitionS.length;
        DFA149_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA149_transition[i] = DFA.unpackEncodedString(DFA149_transitionS[i]);
        }
    }

    class DFA149 extends DFA {

        public DFA149(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = DFA149_eot;
            this.eof = DFA149_eof;
            this.min = DFA149_min;
            this.max = DFA149_max;
            this.accept = DFA149_accept;
            this.special = DFA149_special;
            this.transition = DFA149_transition;
        }
        public String getDescription() {
            return "603:1: p_lop_expr : ( ( lambda_expr )=> lambda_expr | ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | p_op_expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA149_0 = input.LA(1);

                         
                        int index149_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA149_0==ROUND_BRACKET_OPEN) ) {s = 1;}

                        else if ( (LA149_0==Constr) ) {s = 2;}

                        else if ( (LA149_0==Id) ) {s = 3;}

                        else if ( (LA149_0==UNDERSCORE) && (synpred14_babel17())) {s = 4;}

                        else if ( (LA149_0==String) ) {s = 5;}

                        else if ( (LA149_0==Num) ) {s = 6;}

                        else if ( (LA149_0==L_true) ) {s = 7;}

                        else if ( (LA149_0==L_false) ) {s = 8;}

                        else if ( (LA149_0==L_nil) ) {s = 9;}

                        else if ( (LA149_0==MINUS) ) {s = 10;}

                        else if ( (LA149_0==SQUARE_BRACKET_OPEN) ) {s = 11;}

                        else if ( (LA149_0==CURLY_BRACKET_OPEN) ) {s = 12;}

                        else if ( (LA149_0==L_exception) ) {s = 13;}

                        else if ( ((LA149_0>=A_ELLIPSIS && LA149_0<=U_ELLIPSIS)) && (synpred14_babel17())) {s = 14;}

                        else if ( (LA149_0==L_begin||(LA149_0>=L_with && LA149_0<=L_if)||(LA149_0>=L_while && LA149_0<=L_for)||LA149_0==L_match||LA149_0==L_try||(LA149_0>=L_concurrent && LA149_0<=L_lazy)||(LA149_0>=L_this && LA149_0<=L_random)||LA149_0==L_typeof||LA149_0==L_not||LA149_0==L_force||LA149_0==Float) ) {s = 15;}

                         
                        input.seek(index149_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA149_1 = input.LA(1);

                         
                        int index149_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_babel17()) ) {s = 27;}

                        else if ( (synpred14_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index149_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA149_2 = input.LA(1);

                         
                        int index149_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index149_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA149_3 = input.LA(1);

                         
                        int index149_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index149_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA149_5 = input.LA(1);

                         
                        int index149_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index149_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA149_6 = input.LA(1);

                         
                        int index149_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index149_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA149_7 = input.LA(1);

                         
                        int index149_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index149_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA149_8 = input.LA(1);

                         
                        int index149_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index149_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA149_9 = input.LA(1);

                         
                        int index149_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index149_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA149_10 = input.LA(1);

                         
                        int index149_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index149_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA149_11 = input.LA(1);

                         
                        int index149_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index149_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA149_12 = input.LA(1);

                         
                        int index149_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index149_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA149_13 = input.LA(1);

                         
                        int index149_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index149_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 149, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA318_eotS =
        "\20\uffff";
    static final String DFA318_eofS =
        "\20\uffff";
    static final String DFA318_minS =
        "\1\107\11\uffff\1\107\3\uffff\1\107\1\uffff";
    static final String DFA318_maxS =
        "\1\u00a3\11\uffff\1\u00a6\3\uffff\1\u00a6\1\uffff";
    static final String DFA318_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\13\1\14"+
        "\1\15\1\uffff\1\12";
    static final String DFA318_specialS =
        "\20\uffff}>";
    static final String[] DFA318_transitionS = {
            "\1\14\2\uffff\2\14\3\uffff\2\14\2\uffff\1\14\10\uffff\1\14\5"+
            "\uffff\1\6\1\7\1\10\1\uffff\1\11\61\uffff\1\5\1\4\1\uffff\1"+
            "\2\1\1\1\uffff\1\3\1\12\1\uffff\1\13\1\uffff\1\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\1\uffff\3\13\3\uffff\2\13\2\uffff\1\13\5\uffff\1\13\2"+
            "\uffff\1\13\1\uffff\3\13\1\uffff\5\13\4\uffff\1\13\4\uffff\1"+
            "\13\15\uffff\1\13\17\uffff\2\13\4\uffff\1\13\2\uffff\1\16\2"+
            "\13\1\uffff\2\13\1\uffff\4\13\1\uffff\1\13\1\uffff\1\13\1\17",
            "",
            "",
            "",
            "\1\13\1\uffff\3\13\3\uffff\2\13\2\uffff\1\13\5\uffff\1\13\2"+
            "\uffff\1\13\1\uffff\3\13\1\uffff\5\13\4\uffff\1\13\4\uffff\1"+
            "\13\15\uffff\1\13\17\uffff\2\13\4\uffff\1\13\3\uffff\2\13\1"+
            "\uffff\2\13\1\uffff\4\13\1\uffff\1\13\1\uffff\1\13\1\17",
            ""
    };

    static final short[] DFA318_eot = DFA.unpackEncodedString(DFA318_eotS);
    static final short[] DFA318_eof = DFA.unpackEncodedString(DFA318_eofS);
    static final char[] DFA318_min = DFA.unpackEncodedStringToUnsignedChars(DFA318_minS);
    static final char[] DFA318_max = DFA.unpackEncodedStringToUnsignedChars(DFA318_maxS);
    static final short[] DFA318_accept = DFA.unpackEncodedString(DFA318_acceptS);
    static final short[] DFA318_special = DFA.unpackEncodedString(DFA318_specialS);
    static final short[][] DFA318_transition;

    static {
        int numStates = DFA318_transitionS.length;
        DFA318_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA318_transition[i] = DFA.unpackEncodedString(DFA318_transitionS[i]);
        }
    }

    class DFA318 extends DFA {

        public DFA318(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 318;
            this.eot = DFA318_eot;
            this.eof = DFA318_eof;
            this.min = DFA318_min;
            this.max = DFA318_max;
            this.accept = DFA318_accept;
            this.special = DFA318_special;
            this.transition = DFA318_transition;
        }
        public String getDescription() {
            return "814:1: primitive_expr : ( Num | Float | String | Id | Constr | L_true | L_false | L_this | L_nil | type_expr | list_expr | with_control_expr | map_or_set_expr );";
        }
    }
 

    public static final BitSet FOLLOW_block_in_prog260 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_prog262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_EQUAL0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_NOT_EQUAL0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_LESS_EQ0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_GREATER_EQ0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_or_in_token_OR1071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_and_in_token_AND1079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_not_in_token_NOT1087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_DOUBLE_COLON0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_DOUBLE_ARROW0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_ARROW0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_ELLIPSIS0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_typeid1727 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000820000L});
    public static final BitSet FOLLOW_NL_in_typeid1730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_PERIOD_in_typeid1733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_NL_in_typeid1735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_Id_in_typeid1738 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000820000L});
    public static final BitSet FOLLOW_typeid_in_typeannotation1758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_typeannotation1763 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_protected_expr_in_typeannotation1765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_typeannotation1767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Constr_in_pattern1784 = new BitSet(new long[]{0x0000000000000002L,0x4000004C02000000L,0x0000002AD380C000L});
    public static final BitSet FOLLOW_NL_in_pattern1787 = new BitSet(new long[]{0x0000000000000000L,0x4000004C02000000L,0x0000002AD300C000L});
    public static final BitSet FOLLOW_pattern_in_pattern1790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitive_pattern_in_pattern1806 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800030L});
    public static final BitSet FOLLOW_NL_in_pattern1809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800030L});
    public static final BitSet FOLLOW_token_DOUBLE_COLON_in_pattern1812 = new BitSet(new long[]{0x0000000000000000L,0x4000004C00000000L,0x0000002AD2800000L});
    public static final BitSet FOLLOW_NL_in_pattern1814 = new BitSet(new long[]{0x0000000000000000L,0x4000004C00000000L,0x0000002AD2000000L});
    public static final BitSet FOLLOW_primitive_pattern_in_pattern1817 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800030L});
    public static final BitSet FOLLOW_L_exception_in_pattern1836 = new BitSet(new long[]{0x0000000000000000L,0x4000004C02000000L,0x0000002AD380C000L});
    public static final BitSet FOLLOW_NL_in_pattern1838 = new BitSet(new long[]{0x0000000000000000L,0x4000004C02000000L,0x0000002AD300C000L});
    public static final BitSet FOLLOW_pattern_in_pattern1841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_ELLIPSIS_in_pattern1854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitive_pattern_in_defpattern1864 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800030L});
    public static final BitSet FOLLOW_NL_in_defpattern1867 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800030L});
    public static final BitSet FOLLOW_token_DOUBLE_COLON_in_defpattern1870 = new BitSet(new long[]{0x0000000000000000L,0x4000004C00000000L,0x0000002AD2800000L});
    public static final BitSet FOLLOW_NL_in_defpattern1872 = new BitSet(new long[]{0x0000000000000000L,0x4000004C00000000L,0x0000002AD2000000L});
    public static final BitSet FOLLOW_primitive_pattern_in_defpattern1875 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800030L});
    public static final BitSet FOLLOW_Constr_in_defpattern1893 = new BitSet(new long[]{0x0000000000000002L,0x4000004C00000000L,0x0000002AD3000000L});
    public static final BitSet FOLLOW_defpattern_in_defpattern1895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_casepattern1926 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000800000L});
    public static final BitSet FOLLOW_NL_in_casepattern1928 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_COLON_in_casepattern1931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000082800000L});
    public static final BitSet FOLLOW_NL_in_casepattern1933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000082800000L});
    public static final BitSet FOLLOW_typeannotation_in_casepattern1936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_casepattern1951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_bracket_pattern1979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern1981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_L_as_in_bracket_pattern1984 = new BitSet(new long[]{0x0000000000000000L,0x4000004C02000000L,0x0000002AD380C000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern1986 = new BitSet(new long[]{0x0000000000000000L,0x4000004C02000000L,0x0000002AD300C000L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern1989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_bracket_pattern2018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000840000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_QUESTION_MARK_in_bracket_pattern2023 = new BitSet(new long[]{0x0000000000000002L,0x4000004C02000000L,0x0000002AD380C000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2026 = new BitSet(new long[]{0x0000000000000000L,0x4000004C02000000L,0x0000002AD300C000L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_bracket_pattern2061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000880000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_EXCLAMATION_MARK_in_bracket_pattern2066 = new BitSet(new long[]{0x0000000000000002L,0x4000004C02000000L,0x0000002AD380C000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2069 = new BitSet(new long[]{0x0000000000000000L,0x4000004C02000000L,0x0000002AD300C000L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_bracket_pattern2098 = new BitSet(new long[]{0x0000000000000000L,0x4000004C02000000L,0x0000002AD300C000L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_val_in_bracket_pattern2115 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2117 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_protected_expr_nc_in_bracket_pattern2120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_for_in_bracket_pattern2139 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2498F80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2141 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2498F80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_bracket_pattern_in_bracket_pattern2145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000000810000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_bracket_pattern2152 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2498E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2154 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2498E80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_bracket_pattern_in_bracket_pattern2157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000000810000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_bracket_pattern2167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_L_if_in_bracket_pattern2197 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2199 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_protected_expr_nc_in_bracket_pattern2202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000800000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_COLON_in_bracket_pattern2233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000082800000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000082800000L});
    public static final BitSet FOLLOW_typeannotation_in_bracket_pattern2238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_ARROW_in_arrow_or_assign2263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGN_in_arrow_or_assign2274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bracket_pattern_in_mselem_pattern2289 = new BitSet(new long[]{0x0000000200000002L,0x0000000000000000L,0x0000000000803000L});
    public static final BitSet FOLLOW_NL_in_mselem_pattern2292 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000000803000L});
    public static final BitSet FOLLOW_arrow_or_assign_in_mselem_pattern2295 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2498E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_mselem_pattern2297 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2498E80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_bracket_pattern_in_mselem_pattern2300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_primitive_pattern2329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNDERSCORE_in_primitive_pattern2334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_String_in_primitive_pattern2343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Num_in_primitive_pattern2348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_true_in_primitive_pattern2353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_false_in_primitive_pattern2358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_nil_in_primitive_pattern2363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_primitive_pattern2371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010800000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_Num_in_primitive_pattern2376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_OPEN_in_primitive_pattern2389 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2498E80L,0x0000002EDB90C000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2392 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2498E80L,0x0000002EDB10C000L});
    public static final BitSet FOLLOW_bracket_pattern_in_primitive_pattern2396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400810000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400010000L});
    public static final BitSet FOLLOW_COMMA_in_primitive_pattern2403 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2498E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2405 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2498E80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_bracket_pattern_in_primitive_pattern2408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400810000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400010000L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_CLOSE_in_primitive_pattern2418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_primitive_pattern2438 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2498E80L,0x0000002BDB90C000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2441 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2498E80L,0x0000002BDB10C000L});
    public static final BitSet FOLLOW_bracket_pattern_in_primitive_pattern2445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100810000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100010000L});
    public static final BitSet FOLLOW_COMMA_in_primitive_pattern2452 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2498E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2455 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2498E80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_bracket_pattern_in_primitive_pattern2458 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100810000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100010000L});
    public static final BitSet FOLLOW_COMMA_in_primitive_pattern2466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100800000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_primitive_pattern2475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_primitive_pattern2507 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2498E80L,0x0000003ADB90C000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2510 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2498E80L,0x0000003ADB10C000L});
    public static final BitSet FOLLOW_mselem_pattern_in_primitive_pattern2514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000810000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000010000L});
    public static final BitSet FOLLOW_COMMA_in_primitive_pattern2521 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2498E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2524 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2498E80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_mselem_pattern_in_primitive_pattern2527 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000810000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000010000L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_primitive_pattern2537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_primitive_pattern2555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000803000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000003000L});
    public static final BitSet FOLLOW_token_ARROW_in_primitive_pattern2560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000800000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_primitive_pattern2565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_sep2581 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_sep_in_block2597 = new BitSet(new long[]{0x0000000000000000L,0x40013E7FD2CD8E80L,0x000007AADB10C000L});
    public static final BitSet FOLLOW_statement_in_block2600 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_sep_in_block2603 = new BitSet(new long[]{0x0000000000000000L,0x40013E7FD2CD8E80L,0x000007AADB10C000L});
    public static final BitSet FOLLOW_statement_in_block2605 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_sep_in_block2609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sep_in_block2625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_pure_block2642 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_sep_in_pure_block2645 = new BitSet(new long[]{0x0000000000000000L,0x40013E7FD2CD8E80L,0x000007AADB10C000L});
    public static final BitSet FOLLOW_statement_in_pure_block2647 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_st_typedef_in_statement2668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_val_in_statement2679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_def_in_statement2684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_yield_in_statement2689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_memoize_in_statement2694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_private_in_statement2699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_module_in_statement2704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_import_in_statement2709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_assign_in_statement2714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_PRINT_in_statement2720 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_expr_in_statement2722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_LOG_in_statement2736 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_expr_in_statement2738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_PROFILE_in_statement2752 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_expr_in_statement2754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_ASSERT_in_statement2768 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_expr_in_statement2770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_objelem_assign2788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_PERIOD_in_objelem_assign2790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_Id_in_objelem_assign2792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_val_in_st_val2811 = new BitSet(new long[]{0x0000000000000000L,0x4000004C02000000L,0x0000002AD380C000L});
    public static final BitSet FOLLOW_NL_in_st_val2813 = new BitSet(new long[]{0x0000000000000000L,0x4000004C02000000L,0x0000002AD300C000L});
    public static final BitSet FOLLOW_pattern_in_st_val2817 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_objelem_assign_in_st_val2821 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_st_val2824 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_st_val2827 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_st_val2829 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_expr_in_st_val2832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_def_in_st_def2856 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_NL_in_st_def2858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_Id_in_st_def2861 = new BitSet(new long[]{0x0000000200000000L,0x4000004C00000000L,0x0000006AD3800000L});
    public static final BitSet FOLLOW_NL_in_st_def2863 = new BitSet(new long[]{0x0000000200000000L,0x4000004C00000000L,0x0000006AD3000000L});
    public static final BitSet FOLLOW_defpattern_in_st_def2867 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000004000800000L});
    public static final BitSet FOLLOW_NL_in_st_def2869 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_COLON_in_st_def2875 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_NL_in_st_def2877 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_typeid_in_st_def2880 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_st_def2882 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_st_def2887 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_st_def2889 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_expr_in_st_def2892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_def_in_st_def2918 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_st_def2920 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_L_this_in_st_def2923 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000800000L});
    public static final BitSet FOLLOW_NL_in_st_def2925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_COLON_in_st_def2928 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_NL_in_st_def2930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_typeid_in_st_def2933 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_st_def2935 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_st_def2938 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_st_def2940 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_expr_in_st_def2943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_typedef_in_st_typedef2966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_NL_in_st_typedef2968 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_Id_in_st_typedef2971 = new BitSet(new long[]{0x0000000000000000L,0x4000004C00000000L,0x0000002AD3800000L});
    public static final BitSet FOLLOW_NL_in_st_typedef2973 = new BitSet(new long[]{0x0000000000000000L,0x4000004C00000000L,0x0000002AD3800000L});
    public static final BitSet FOLLOW_typedef_clause_in_st_typedef2976 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000810000L});
    public static final BitSet FOLLOW_NL_in_st_typedef2979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_st_typedef2982 = new BitSet(new long[]{0x0000000000000000L,0x4000004C00000000L,0x0000002AD3800000L});
    public static final BitSet FOLLOW_NL_in_st_typedef2984 = new BitSet(new long[]{0x0000000000000000L,0x4000004C00000000L,0x0000002AD3800000L});
    public static final BitSet FOLLOW_typedef_clause_in_st_typedef2987 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000810000L});
    public static final BitSet FOLLOW_defpattern_in_typedef_clause3025 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_typedef_clause3027 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_typedef_clause3030 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_typedef_clause3032 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_expr_in_typedef_clause3035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defpattern_in_typedef_clause3050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_yield_in_st_yield3069 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_expr_in_st_yield3071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_memoize_in_st_memoize3092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000082000000L});
    public static final BitSet FOLLOW_memo_id_in_st_memoize3094 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000810000L});
    public static final BitSet FOLLOW_NL_in_st_memoize3097 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_st_memoize3100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000082800000L});
    public static final BitSet FOLLOW_NL_in_st_memoize3102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000082000000L});
    public static final BitSet FOLLOW_memo_id_in_st_memoize3105 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000810000L});
    public static final BitSet FOLLOW_Id_in_memo_id3134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_memo_id3147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_Id_in_memo_id3149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_memo_id3151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_private_in_st_private3168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_private_id_in_st_private3170 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000810000L});
    public static final BitSet FOLLOW_NL_in_st_private3173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_st_private3176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_NL_in_st_private3178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_private_id_in_st_private3181 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000810000L});
    public static final BitSet FOLLOW_Id_in_private_id3207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_testid0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_testid_in_moduleid3240 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000820000L});
    public static final BitSet FOLLOW_NL_in_moduleid3243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_PERIOD_in_moduleid3246 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_NL_in_moduleid3248 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_testid_in_moduleid3251 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000820000L});
    public static final BitSet FOLLOW_L_module_in_st_module3271 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_NL_in_st_module3273 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_moduleid_in_st_module3276 = new BitSet(new long[]{0x0000000000000000L,0x50017E7FD2CD8F80L,0x000007AADB90C000L});
    public static final BitSet FOLLOW_block_in_st_module3278 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000100L});
    public static final BitSet FOLLOW_L_unittest_in_st_module3281 = new BitSet(new long[]{0x0000000000000000L,0x50013E7FD2CD8F80L,0x000007AADB90C000L});
    public static final BitSet FOLLOW_block_in_st_module3283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_st_module3287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_testid_in_importprefix3313 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000820000L});
    public static final BitSet FOLLOW_NL_in_importprefix3316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_PERIOD_in_importprefix3319 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_NL_in_importprefix3321 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_testid_in_importprefix3324 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000820000L});
    public static final BitSet FOLLOW_UNDERSCORE_in_importall3346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_testid_in_importsetclause3362 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800C00L});
    public static final BitSet FOLLOW_NL_in_importsetclause3365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800C00L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_importsetclause3368 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_NL_in_importsetclause3371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_Id_in_importsetclause3374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_importsetclause3394 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_NL_in_importsetclause3396 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_testid_in_importsetclause3399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importall_in_importsetclause3412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_importset3422 = new BitSet(new long[]{0x0000000000000000L,0x4000400000000000L,0x0000002002800000L});
    public static final BitSet FOLLOW_NL_in_importset3424 = new BitSet(new long[]{0x0000000000000000L,0x4000400000000000L,0x0000002002800000L});
    public static final BitSet FOLLOW_importsetclause_in_importset3427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000810000L});
    public static final BitSet FOLLOW_NL_in_importset3430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_importset3433 = new BitSet(new long[]{0x0000000000000000L,0x4000400000000000L,0x0000002002800000L});
    public static final BitSet FOLLOW_NL_in_importset3435 = new BitSet(new long[]{0x0000000000000000L,0x4000400000000000L,0x0000002002800000L});
    public static final BitSet FOLLOW_importsetclause_in_importset3438 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000810000L});
    public static final BitSet FOLLOW_NL_in_importset3442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_importset3445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_import_in_st_import3463 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_NL_in_st_import3465 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_importprefix_in_st_import3468 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000820C00L});
    public static final BitSet FOLLOW_NL_in_st_import3471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000820C00L});
    public static final BitSet FOLLOW_PERIOD_in_st_import3475 = new BitSet(new long[]{0x0000000000000000L,0x4000400000000000L,0x0000002002800000L});
    public static final BitSet FOLLOW_NL_in_st_import3477 = new BitSet(new long[]{0x0000000000000000L,0x4000400000000000L,0x0000002002800000L});
    public static final BitSet FOLLOW_importall_in_st_import3480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERIOD_in_st_import3484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800800000L});
    public static final BitSet FOLLOW_NL_in_st_import3486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800800000L});
    public static final BitSet FOLLOW_importset_in_st_import3489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_st_import3493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_NL_in_st_import3495 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_Id_in_st_import3498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_expr_or_assign3546 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_objelem_assign_in_expr_or_assign3550 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_expr_or_assign3553 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_expr_or_assign3556 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_expr_or_assign3558 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_expr_in_expr_or_assign3561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_expr_or_assign3580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lop_expr_in_expr3591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_obj_expr_in_expr3596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_expr_in_control_expr3606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_do_expr_in_control_expr3611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_match_expr_in_control_expr3616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_expr_in_control_expr3621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_expr_in_control_expr3627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_begin_end_in_control_expr3632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_control_expr_in_with_control_expr3642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_with_in_with_control_expr3647 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_with_control_expr3649 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_protected_expr_in_with_control_expr3652 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_with_control_expr3654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_L_do_in_with_control_expr3657 = new BitSet(new long[]{0x0000000000000000L,0x50013E7FD2CD8F80L,0x000007AADB90C000L});
    public static final BitSet FOLLOW_block_in_with_control_expr3659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_with_control_expr3661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_lop_expr_in_protected_expr3686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_obj_expr_in_protected_expr3691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_protected_expr_nc3702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_begin_in_begin_end3712 = new BitSet(new long[]{0x0000000000000000L,0x50013E7FD2CD8F80L,0x000007AADB90C000L});
    public static final BitSet FOLLOW_block_in_begin_end3714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_begin_end3716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_parents3734 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_primitive_expr_in_parents3736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMES_in_parents3749 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_primitive_expr_in_parents3751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_obj_in_obj_expr3779 = new BitSet(new long[]{0x0000000000000000L,0xA000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_obj_expr3781 = new BitSet(new long[]{0x0000000000000000L,0xA000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_parents_in_obj_expr3784 = new BitSet(new long[]{0x0000000000000000L,0x50013E7FD2CD8F80L,0x000007AADB90C000L});
    public static final BitSet FOLLOW_block_in_obj_expr3786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_obj_expr3788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_obj_in_obj_expr3816 = new BitSet(new long[]{0x0000000000000000L,0x50013E7FD2CD8F80L,0x000007AADB90C000L});
    public static final BitSet FOLLOW_block_in_obj_expr3818 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_obj_expr3820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_in_lop_expr3848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_nobrackets_in_lop_expr3859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_expr_in_lop_expr3864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_in_p_lop_expr3880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_nobrackets_in_p_lop_expr3891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_op_expr_in_p_lop_expr3896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_if_in_if_expr3906 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_if_expr3908 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_protected_expr_in_if_expr3911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_if_expr3913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_L_then_in_if_expr3916 = new BitSet(new long[]{0x0000000000000000L,0x50013E7FD2CDEF80L,0x000007AADB90C000L});
    public static final BitSet FOLLOW_block_in_if_expr3918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000006100L});
    public static final BitSet FOLLOW_L_elseif_in_if_expr3924 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_if_expr3926 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_protected_expr_in_if_expr3929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_if_expr3931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_L_then_in_if_expr3934 = new BitSet(new long[]{0x0000000000000000L,0x50013E7FD2CDEF80L,0x000007AADB90C000L});
    public static final BitSet FOLLOW_block_in_if_expr3936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000006100L});
    public static final BitSet FOLLOW_L_else_in_if_expr3944 = new BitSet(new long[]{0x0000000000000000L,0x50013E7FD2CD8F80L,0x000007AADB90C000L});
    public static final BitSet FOLLOW_block_in_if_expr3946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_if_expr3950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_while_in_while_do_expr3974 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_while_do_expr3976 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_protected_expr_in_while_do_expr3979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_while_do_expr3981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_L_do_in_while_do_expr3984 = new BitSet(new long[]{0x0000000000000000L,0x50013E7FD2CD8F80L,0x000007AADB90C000L});
    public static final BitSet FOLLOW_block_in_while_do_expr3986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_while_do_expr3988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_cases_in_cases4018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_cases4023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800C00L});
    public static final BitSet FOLLOW_NL_in_cases4025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800C00L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_cases4028 = new BitSet(new long[]{0x0000000000000000L,0x50013E7FD2CD8E80L,0x000007AADB90C000L});
    public static final BitSet FOLLOW_block_in_cases4030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_expr_in_full_cases4053 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_L_case_in_case_expr4074 = new BitSet(new long[]{0x0000000000000000L,0x4000004C02000000L,0x0000002AD380C000L});
    public static final BitSet FOLLOW_NL_in_case_expr4076 = new BitSet(new long[]{0x0000000000000000L,0x4000004C02000000L,0x0000002AD380C000L});
    public static final BitSet FOLLOW_casepattern_in_case_expr4079 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800C00L});
    public static final BitSet FOLLOW_NL_in_case_expr4081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800C00L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_case_expr4084 = new BitSet(new long[]{0x0000000000000000L,0x50013E7FD2CD8E80L,0x000007AADB90C000L});
    public static final BitSet FOLLOW_block_in_case_expr4086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_match_in_match_expr4107 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_match_expr4109 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_p_op_expr_in_match_expr4112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_match_expr4114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000800000L});
    public static final BitSet FOLLOW_full_cases_in_match_expr4117 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_match_expr4119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_try_in_try_expr4145 = new BitSet(new long[]{0x0000000000000000L,0x40013E7FD2CD8E80L,0x000007AADB90C000L});
    public static final BitSet FOLLOW_NL_in_try_expr4147 = new BitSet(new long[]{0x0000000000000000L,0x40013E7FD2CD8E80L,0x000007AADB90C000L});
    public static final BitSet FOLLOW_pure_block_in_try_expr4150 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_try_expr4152 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_L_catch_in_try_expr4155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_try_expr4157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000800000L});
    public static final BitSet FOLLOW_full_cases_in_try_expr4160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_try_expr4162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_lambda_expr4186 = new BitSet(new long[]{0x0000000000000000L,0x4000004C02100000L,0x0000002AD380C000L});
    public static final BitSet FOLLOW_NL_in_lambda_expr4188 = new BitSet(new long[]{0x0000000000000000L,0x4000004C02100000L,0x0000002AD380C000L});
    public static final BitSet FOLLOW_lambda_cases_in_lambda_expr4191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100800000L});
    public static final BitSet FOLLOW_NL_in_lambda_expr4193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_lambda_expr4196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_cases_nobrackets_in_lambda_expr_nobrackets4215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_lambda_cases_nobrackets4233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800C00L});
    public static final BitSet FOLLOW_NL_in_lambda_cases_nobrackets4235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800C00L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_lambda_cases_nobrackets4238 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_lambda_cases_nobrackets4240 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_lop_expr_in_lambda_cases_nobrackets4243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_case_in_lambda_case_expr4271 = new BitSet(new long[]{0x0000000000000000L,0x4000004C02000000L,0x0000002AD380C000L});
    public static final BitSet FOLLOW_NL_in_lambda_case_expr4273 = new BitSet(new long[]{0x0000000000000000L,0x4000004C02000000L,0x0000002AD380C000L});
    public static final BitSet FOLLOW_casepattern_in_lambda_case_expr4276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800C00L});
    public static final BitSet FOLLOW_NL_in_lambda_case_expr4278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800C00L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_lambda_case_expr4281 = new BitSet(new long[]{0x0000000000000000L,0x40013E7FD2CD8E80L,0x000007AADB90C000L});
    public static final BitSet FOLLOW_NL_in_lambda_case_expr4283 = new BitSet(new long[]{0x0000000000000000L,0x40013E7FD2CD8E80L,0x000007AADB90C000L});
    public static final BitSet FOLLOW_pure_block_in_lambda_case_expr4286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_lambda_cases4307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800C00L});
    public static final BitSet FOLLOW_NL_in_lambda_cases4309 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800C00L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_lambda_cases4312 = new BitSet(new long[]{0x0000000000000000L,0x40013E7FD2CD8E80L,0x000007AADB90C000L});
    public static final BitSet FOLLOW_NL_in_lambda_cases4314 = new BitSet(new long[]{0x0000000000000000L,0x40013E7FD2CD8E80L,0x000007AADB90C000L});
    public static final BitSet FOLLOW_pure_block_in_lambda_cases4317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_case_expr_in_lambda_cases4336 = new BitSet(new long[]{0x0000000000000002L,0x4000004C02100000L,0x0000002AD380C000L});
    public static final BitSet FOLLOW_NL_in_lambda_cases4339 = new BitSet(new long[]{0x0000000000000000L,0x4000004C02100000L,0x0000002AD380C000L});
    public static final BitSet FOLLOW_lambda_case_expr_in_lambda_cases4342 = new BitSet(new long[]{0x0000000000000002L,0x4000004C02100000L,0x0000002AD380C000L});
    public static final BitSet FOLLOW_L_for_in_for_expr4360 = new BitSet(new long[]{0x0000000000000000L,0x4000004C02000000L,0x0000002AD380C000L});
    public static final BitSet FOLLOW_NL_in_for_expr4362 = new BitSet(new long[]{0x0000000000000000L,0x4000004C02000000L,0x0000002AD300C000L});
    public static final BitSet FOLLOW_pattern_in_for_expr4365 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_for_expr4367 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_L_in_in_for_expr4370 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_for_expr4372 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_protected_expr_in_for_expr4375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_for_expr4377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_L_do_in_for_expr4380 = new BitSet(new long[]{0x0000000000000000L,0x50013E7FD2CD8F80L,0x000007AADB90C000L});
    public static final BitSet FOLLOW_block_in_for_expr4382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_for_expr4384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtin_primitive_in_op_expr4413 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_op_expr_in_op_expr4416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bool_expr_in_op_expr4421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtin_primitive_in_p_op_expr4431 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_p_op_expr4434 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_p_op_expr_in_p_op_expr4438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_bool_expr_in_p_op_expr4443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_builtin_primitive0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bool_or_expr_in_bool_expr4470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_bool_or_expr_in_p_bool_expr4480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bool_and_expr_in_bool_or_expr4489 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_bool_or_expr4492 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_token_OR_in_bool_or_expr4496 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_bool_or_expr4499 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_bool_and_expr_in_bool_or_expr4503 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_p_bool_and_expr_in_p_bool_or_expr4515 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_p_bool_or_expr4518 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_token_OR_in_p_bool_or_expr4522 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_p_bool_or_expr4525 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_p_bool_and_expr_in_p_bool_or_expr4529 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_bool_not_expr_in_bool_and_expr4541 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_bool_and_expr4544 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_token_AND_in_bool_and_expr4548 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_bool_and_expr4551 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_bool_not_expr_in_bool_and_expr4555 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_p_bool_not_expr_in_p_bool_and_expr4567 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_p_bool_and_expr4570 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_token_AND_in_p_bool_and_expr4574 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_p_bool_and_expr4577 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_p_bool_not_expr_in_p_bool_and_expr4581 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_token_NOT_in_bool_not_expr4593 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_bool_not_expr4596 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_bool_not_expr_in_bool_not_expr4600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_expr_in_bool_not_expr4605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_NOT_in_p_bool_not_expr4616 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_p_bool_not_expr4619 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_p_bool_not_expr_in_p_bool_not_expr4623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_rel_expr_in_p_bool_not_expr4628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relate_expr_in_rel_expr4638 = new BitSet(new long[]{0x0000000000000002L,0x0FFC000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_rel_expr4641 = new BitSet(new long[]{0x0000000000000000L,0x0FFC000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_rel_op_in_rel_expr4644 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_rel_expr4646 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_relate_expr_in_rel_expr4649 = new BitSet(new long[]{0x0000000000000002L,0x0FFC000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_p_relate_expr_in_p_rel_expr4676 = new BitSet(new long[]{0x0000000000000002L,0x0FFC000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_p_rel_expr4679 = new BitSet(new long[]{0x0000000000000000L,0x0FFC000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_rel_op_in_p_rel_expr4682 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_p_rel_expr4684 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_p_relate_expr_in_p_rel_expr4687 = new BitSet(new long[]{0x0000000000000002L,0x0FFC000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_token_EQUAL_in_rel_op4713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_NOT_EQUAL_in_rel_op4717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_in_rel_op4721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_GREATER_EQ_in_rel_op4725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_in_rel_op4729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_LESS_EQ_in_rel_op4733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_convert_expr_in_relate_expr4742 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800004L});
    public static final BitSet FOLLOW_NL_in_relate_expr4745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_TOK_RELATE_in_relate_expr4748 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_relate_expr4750 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_convert_expr_in_relate_expr4753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_convert_expr_in_p_relate_expr4772 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800004L});
    public static final BitSet FOLLOW_NL_in_p_relate_expr4775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_TOK_RELATE_in_p_relate_expr4778 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_p_relate_expr4780 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_p_convert_expr_in_p_relate_expr4783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_expr_in_convert_expr4804 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800008L});
    public static final BitSet FOLLOW_NL_in_convert_expr4807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_TOK_CONVERT_in_convert_expr4810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000082800000L});
    public static final BitSet FOLLOW_NL_in_convert_expr4812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000082800000L});
    public static final BitSet FOLLOW_typeannotation_in_convert_expr4815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_term_expr_in_p_convert_expr4837 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800008L});
    public static final BitSet FOLLOW_NL_in_p_convert_expr4840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_TOK_CONVERT_in_p_convert_expr4843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000082800000L});
    public static final BitSet FOLLOW_NL_in_p_convert_expr4845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000082800000L});
    public static final BitSet FOLLOW_typeannotation_in_p_convert_expr4848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtin_fun_in_term_expr4871 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_term_expr_in_term_expr4874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arith_expr_in_term_expr4879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtin_fun_in_p_term_expr4889 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_p_term_expr4892 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_p_term_expr_in_p_term_expr4896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_arith_expr_in_p_term_expr4901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_builtin_fun0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plusplus_expr_in_arith_expr4931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_plusplus_expr_in_p_arith_expr4940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timestimes_expr_in_plusplus_expr4950 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800300L});
    public static final BitSet FOLLOW_NL_in_plusplus_expr4953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000300L});
    public static final BitSet FOLLOW_PLUSPLUS_in_plusplus_expr4958 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_MINUSMINUS_in_plusplus_expr4961 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_plusplus_expr4965 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_timestimes_expr_in_plusplus_expr4969 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800300L});
    public static final BitSet FOLLOW_p_timestimes_expr_in_p_plusplus_expr4981 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800300L});
    public static final BitSet FOLLOW_NL_in_p_plusplus_expr4984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000300L});
    public static final BitSet FOLLOW_PLUSPLUS_in_p_plusplus_expr4989 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_MINUSMINUS_in_p_plusplus_expr4992 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_p_plusplus_expr4996 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_p_timestimes_expr_in_p_plusplus_expr5000 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800300L});
    public static final BitSet FOLLOW_simple_expr_in_timestimes_expr5012 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000008000C0L});
    public static final BitSet FOLLOW_NL_in_timestimes_expr5015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000000000C0L});
    public static final BitSet FOLLOW_TIMESTIMES_in_timestimes_expr5020 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_QUOTIENTQUOTIENT_in_timestimes_expr5023 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_timestimes_expr5027 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_simple_expr_in_timestimes_expr5031 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000008000C0L});
    public static final BitSet FOLLOW_p_simple_expr_in_p_timestimes_expr5044 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000008000C0L});
    public static final BitSet FOLLOW_NL_in_p_timestimes_expr5047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000000000C0L});
    public static final BitSet FOLLOW_TIMESTIMES_in_p_timestimes_expr5052 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_QUOTIENTQUOTIENT_in_p_timestimes_expr5055 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_p_timestimes_expr5059 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_p_simple_expr_in_p_timestimes_expr5063 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000008000C0L});
    public static final BitSet FOLLOW_cons_expr_in_simple_expr5074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_cons_expr_in_p_simple_expr5083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_expr_in_cons_expr5092 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800030L});
    public static final BitSet FOLLOW_NL_in_cons_expr5095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800030L});
    public static final BitSet FOLLOW_token_DOUBLE_COLON_in_cons_expr5098 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_cons_expr5100 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_to_expr_in_cons_expr5103 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800030L});
    public static final BitSet FOLLOW_p_to_expr_in_p_cons_expr5123 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800030L});
    public static final BitSet FOLLOW_NL_in_p_cons_expr5126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800030L});
    public static final BitSet FOLLOW_token_DOUBLE_COLON_in_p_cons_expr5129 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_p_cons_expr5131 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_p_to_expr_in_p_cons_expr5134 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800030L});
    public static final BitSet FOLLOW_arith_plus_expr_in_to_expr5154 = new BitSet(new long[]{0x0000000000000002L,0x000000000C000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_to_expr5157 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_L_to_in_to_expr5162 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_L_downto_in_to_expr5166 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_to_expr5170 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_arith_plus_expr_in_to_expr5174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_arith_plus_expr_in_p_to_expr5187 = new BitSet(new long[]{0x0000000000000002L,0x000000000C000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_p_to_expr5190 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_L_to_in_p_to_expr5195 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_L_downto_in_p_to_expr5199 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_p_to_expr5203 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_p_arith_plus_expr_in_p_to_expr5207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arith_uminus_expr_in_arith_plus_expr5219 = new BitSet(new long[]{0x0000000000000002L,0x6000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_arith_plus_expr5223 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_PLUS_in_arith_plus_expr5227 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_MINUS_in_arith_plus_expr5232 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_arith_plus_expr5236 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_arith_uminus_expr_in_arith_plus_expr5240 = new BitSet(new long[]{0x0000000000000002L,0x6000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_p_arith_uminus_expr_in_p_arith_plus_expr5251 = new BitSet(new long[]{0x0000000000000002L,0x6000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_p_arith_plus_expr5254 = new BitSet(new long[]{0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_set_in_p_arith_plus_expr5258 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_p_arith_plus_expr5267 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_p_arith_uminus_expr_in_p_arith_plus_expr5271 = new BitSet(new long[]{0x0000000000000002L,0x6000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_MINUS_in_arith_uminus_expr5284 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_arith_uminus_expr5286 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_arith_mult_expr_in_arith_uminus_expr5289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arith_mult_expr_in_arith_uminus_expr5302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_p_arith_uminus_expr5313 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_p_arith_uminus_expr5315 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_p_arith_mult_expr_in_p_arith_uminus_expr5318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_arith_mult_expr_in_p_arith_uminus_expr5331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arith_pow_expr_in_arith_mult_expr5340 = new BitSet(new long[]{0x0000000000000002L,0x8000018000000000L,0x0000000000800001L});
    public static final BitSet FOLLOW_NL_in_arith_mult_expr5343 = new BitSet(new long[]{0x0000000000000000L,0x8000018000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_set_in_arith_mult_expr5347 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_arith_mult_expr5364 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_arith_pow_expr_in_arith_mult_expr5368 = new BitSet(new long[]{0x0000000000000002L,0x8000018000000000L,0x0000000000800001L});
    public static final BitSet FOLLOW_p_arith_pow_expr_in_p_arith_mult_expr5380 = new BitSet(new long[]{0x0000000000000002L,0x8000018000000000L,0x0000000000800001L});
    public static final BitSet FOLLOW_NL_in_p_arith_mult_expr5383 = new BitSet(new long[]{0x0000000000000000L,0x8000018000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_set_in_p_arith_mult_expr5387 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_p_arith_mult_expr5404 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_p_arith_pow_expr_in_p_arith_mult_expr5408 = new BitSet(new long[]{0x0000000000000002L,0x8000018000000000L,0x0000000000800001L});
    public static final BitSet FOLLOW_apply_expr_in_arith_pow_expr5419 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800002L});
    public static final BitSet FOLLOW_NL_in_arith_pow_expr5422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_POW_tok_in_arith_pow_expr5425 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_arith_pow_expr5427 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_apply_expr_in_arith_pow_expr5430 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800002L});
    public static final BitSet FOLLOW_p_apply_expr_in_p_arith_pow_expr5451 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800002L});
    public static final BitSet FOLLOW_NL_in_p_arith_pow_expr5454 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_POW_tok_in_p_arith_pow_expr5457 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_p_arith_pow_expr5459 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_p_apply_expr_in_p_arith_pow_expr5462 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800002L});
    public static final BitSet FOLLOW_basic_expr_in_apply_expr5483 = new BitSet(new long[]{0x0000000000000002L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_p_basic_expr_in_p_apply_expr5501 = new BitSet(new long[]{0x0000000000000002L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_p_apply_expr5504 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098C80L,0x0000002ADB10C000L});
    public static final BitSet FOLLOW_p_basic_expr_in_p_apply_expr5507 = new BitSet(new long[]{0x0000000000000002L,0x4001087DD2098C80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_message_send_expr_in_basic_expr5527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_message_send_expr_in_p_basic_expr5536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitive_expr_in_message_send_expr5545 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000820000L});
    public static final BitSet FOLLOW_NL_in_message_send_expr5548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_PERIOD_in_message_send_expr5551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_NL_in_message_send_expr5553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_Id_in_message_send_expr5556 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000820000L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_OPEN_in_list_expr5596 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_list_expr5598 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5601 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_list_expr5603 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_SC_in_list_expr5606 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_list_expr5608 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400800000L});
    public static final BitSet FOLLOW_NL_in_list_expr5613 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_CLOSE_in_list_expr5616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_OPEN_in_list_expr5630 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002EDB90C000L});
    public static final BitSet FOLLOW_NL_in_list_expr5632 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002EDB90C000L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400810000L});
    public static final BitSet FOLLOW_NL_in_list_expr5639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_list_expr5642 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_list_expr5644 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5647 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400810000L});
    public static final BitSet FOLLOW_NL_in_list_expr5651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_CLOSE_in_list_expr5656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_list_expr5670 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002BDB90C000L});
    public static final BitSet FOLLOW_NL_in_list_expr5672 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002BDB90C000L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100810000L});
    public static final BitSet FOLLOW_NL_in_list_expr5679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_list_expr5682 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_list_expr5684 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100810000L});
    public static final BitSet FOLLOW_NL_in_list_expr5691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100010000L});
    public static final BitSet FOLLOW_COMMA_in_list_expr5695 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100800000L});
    public static final BitSet FOLLOW_NL_in_list_expr5697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_list_expr5704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_map_or_set_expr5733 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000003ADB90C000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr5735 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000003ADB90C000L});
    public static final BitSet FOLLOW_map_or_set_elem_expr_in_map_or_set_expr5739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000810000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr5741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000010000L});
    public static final BitSet FOLLOW_COMMA_in_map_or_set_expr5745 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr5747 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_map_or_set_elem_expr_in_map_or_set_expr5750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000810000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr5752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000010000L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_map_or_set_expr5759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_map_or_set_expr5779 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000803000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr5781 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000003000L});
    public static final BitSet FOLLOW_token_ARROW_in_map_or_set_expr5784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000800000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr5786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_map_or_set_expr5789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_nc_in_map_or_set_elem_expr5806 = new BitSet(new long[]{0x0000000200000002L,0x0000000000000000L,0x0000000000803000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_elem_expr5809 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000000803000L});
    public static final BitSet FOLLOW_arrow_or_assign_in_map_or_set_elem_expr5812 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_elem_expr5814 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_protected_expr_nc_in_map_or_set_elem_expr5817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_type_expr5844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000800000L});
    public static final BitSet FOLLOW_NL_in_type_expr5846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_COLON_in_type_expr5849 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_NL_in_type_expr5851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_typeid_in_type_expr5854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100800000L});
    public static final BitSet FOLLOW_NL_in_type_expr5856 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_type_expr5859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Num_in_primitive_expr5876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Float_in_primitive_expr5881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_String_in_primitive_expr5886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_primitive_expr5891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Constr_in_primitive_expr5896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_true_in_primitive_expr5901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_false_in_primitive_expr5906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_this_in_primitive_expr5911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_nil_in_primitive_expr5917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_expr_in_primitive_expr5922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_list_expr_in_primitive_expr5928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_control_expr_in_primitive_expr5933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_or_set_expr_in_primitive_expr5938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_synpred1_babel171916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000800000L});
    public static final BitSet FOLLOW_NL_in_synpred1_babel171918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_COLON_in_synpred1_babel171921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_synpred2_babel171969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_synpred2_babel171971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_L_as_in_synpred2_babel171974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_synpred3_babel172005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000840000L});
    public static final BitSet FOLLOW_NL_in_synpred3_babel172007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_QUESTION_MARK_in_synpred3_babel172010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_synpred4_babel172048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000880000L});
    public static final BitSet FOLLOW_NL_in_synpred4_babel172050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_EXCLAMATION_MARK_in_synpred4_babel172053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_synpred5_babel172091 = new BitSet(new long[]{0x0000000000000000L,0x4000004C02000000L,0x0000002AD300C000L});
    public static final BitSet FOLLOW_pattern_in_synpred5_babel172093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_synpred6_babel172182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_synpred6_babel172184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_L_if_in_synpred6_babel172187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_synpred7_babel172218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000800000L});
    public static final BitSet FOLLOW_NL_in_synpred7_babel172220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_COLON_in_synpred7_babel172223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defpattern_in_synpred8_babel173015 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_synpred8_babel173017 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred8_babel173020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_synpred9_babel173530 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_objelem_assign_in_synpred9_babel173534 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_synpred9_babel173537 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred9_babel173540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_obj_in_synpred10_babel173769 = new BitSet(new long[]{0x0000000000000000L,0xA000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_synpred10_babel173771 = new BitSet(new long[]{0x0000000000000000L,0xA000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_parents_in_synpred10_babel173774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_in_synpred11_babel173843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_nobrackets_in_synpred12_babel173854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_in_synpred13_babel173875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_nobrackets_in_synpred14_babel173886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_OPEN_in_synpred15_babel175581 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_NL_in_synpred15_babel175583 = new BitSet(new long[]{0x0000000000000000L,0x4001087DD2098E80L,0x0000002ADB90C000L});
    public static final BitSet FOLLOW_protected_expr_nc_in_synpred15_babel175586 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NL_in_synpred15_babel175588 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_SC_in_synpred15_babel175591 = new BitSet(new long[]{0x0000000000000002L});

}