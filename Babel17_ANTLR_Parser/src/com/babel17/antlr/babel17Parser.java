// $ANTLR 3.2 Sep 23, 2009 12:02:23 /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g 2011-06-28 21:32:52

package com.babel17.antlr;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class babel17Parser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "PROG", "NIL_TOKEN", "ANY", "LAMBDA", "SQUARE_LIST", "ROUND_LIST", "LIST_CONS", "COMPARE", "APPLY", "IF", "MAP_OR_SET_OR_OBJ", "EMPTY_MAP", "EXCEPTION", "MATCH", "TRY", "CASES", "OBJ", "FOR_EXPR", "WHILE_DO", "MESSAGE_SEND", "UMINUS", "POW", "PARENTS_PLUS", "PARENTS_MUL", "BLOCK", "BEGIN", "WITH", "VAL", "OBJELEM_ASSIGN", "ASSIGN", "ARROW", "DEF", "YIELD", "PRIVATE", "TYPEDEF", "TYPEDEF_CLAUSE", "GETTYPE", "MEMOIZE", "MEMOID_STRONG", "MEMOID_WEAK", "PRIVATEID", "IF_PATTERN", "TYPE_PATTERN", "INNERVALUE_PATTERN", "TYPEID", "TYPEVAL", "MODULEID", "TYPE_EXPR", "TYPEOF", "CONVERSION", "CONVERT", "RELATE", "INTERVAL", "IMPORT_PREFIX", "IMPORT_ALL", "IMPORT_SET", "IMPORT_PLUS", "IMPORT_MINUS", "Newline", "NotNewline", "COMMENT", "LINECOMMENT", "SmallLetter", "BigLetter", "Letter", "Digit", "Hex", "L_begin", "L_end", "L_obj", "L_with", "L_if", "L_then", "L_else", "L_elseif", "L_while", "L_for", "L_do", "L_yield", "L_match", "L_case", "L_as", "L_val", "L_def", "L_in", "L_exception", "L_to", "L_downto", "L_try", "L_catch", "L_concurrent", "L_choose", "L_lazy", "L_memoize", "L_true", "L_false", "L_this", "L_random", "L_nil", "L_div", "L_mod", "L_module", "L_typedef", "L_typeof", "L_private", "L_import", "L_unittest", "L_and", "L_not", "L_or", "L_root", "L_native", "A_EQUAL", "U_EQUAL", "A_NOT_EQUAL", "U_NOT_EQUAL", "LESS", "A_LESS_EQ", "U_LESS_EQ", "GREATER", "A_GREATER_EQ", "U_GREATER_EQ", "SC", "PLUS", "MINUS", "TIMES", "QUOTIENT", "POW_tok", "TOK_RELATE", "TOK_CONVERT", "A_DOUBLE_COLON", "U_DOUBLE_COLON", "TIMESTIMES", "QUOTIENTQUOTIENT", "PLUSPLUS", "MINUSMINUS", "A_DOUBLE_ARROW", "U_DOUBLE_ARROW", "A_ARROW", "U_ARROW", "A_ELLIPSIS", "U_ELLIPSIS", "COMMA", "PERIOD", "QUESTION_MARK", "EXCLAMATION_MARK", "L_force", "WsChar", "WS", "NL", "Constr", "Id", "Exponent", "Float", "Num", "Charcode", "String", "ROUND_BRACKET_OPEN", "ROUND_BRACKET_CLOSE", "SQUARE_BRACKET_OPEN", "SQUARE_BRACKET_CLOSE", "CURLY_BRACKET_OPEN", "CURLY_BRACKET_CLOSE", "UNDERSCORE", "COLON", "PRAGMA_LOG", "PRAGMA_PRINT", "PRAGMA_ASSERT", "PRAGMA_PROFILE", "PRAGMA_CATCH"
    };
    public static final int PRAGMA_CATCH=173;
    public static final int L_end=72;
    public static final int U_NOT_EQUAL=119;
    public static final int TIMESTIMES=136;
    public static final int L_try=92;
    public static final int BigLetter=67;
    public static final int TOK_RELATE=132;
    public static final int ROUND_BRACKET_CLOSE=162;
    public static final int L_native=115;
    public static final int L_mod=104;
    public static final int MINUSMINUS=139;
    public static final int IMPORT_PREFIX=57;
    public static final int Newline=62;
    public static final int SQUARE_BRACKET_CLOSE=164;
    public static final int LINECOMMENT=65;
    public static final int MAP_OR_SET_OR_OBJ=14;
    public static final int EOF=-1;
    public static final int U_DOUBLE_ARROW=141;
    public static final int TYPEID=48;
    public static final int L_exception=89;
    public static final int Num=158;
    public static final int GREATER=123;
    public static final int EMPTY_MAP=15;
    public static final int POW=25;
    public static final int L_concurrent=94;
    public static final int L_catch=93;
    public static final int L_false=99;
    public static final int QUOTIENTQUOTIENT=137;
    public static final int L_nil=102;
    public static final int BEGIN=29;
    public static final int LIST_CONS=10;
    public static final int L_with=74;
    public static final int QUESTION_MARK=148;
    public static final int LESS=120;
    public static final int ROUND_BRACKET_OPEN=161;
    public static final int SQUARE_LIST=8;
    public static final int MODULEID=50;
    public static final int VAL=31;
    public static final int L_as=85;
    public static final int NL=153;
    public static final int MESSAGE_SEND=23;
    public static final int A_ARROW=142;
    public static final int A_DOUBLE_COLON=134;
    public static final int COMMENT=64;
    public static final int L_def=87;
    public static final int L_and=111;
    public static final int EXCEPTION=16;
    public static final int TYPE_EXPR=51;
    public static final int L_root=114;
    public static final int L_this=100;
    public static final int IMPORT_ALL=58;
    public static final int L_force=150;
    public static final int L_choose=95;
    public static final int PERIOD=147;
    public static final int PRIVATE=37;
    public static final int L_import=109;
    public static final int SmallLetter=66;
    public static final int NIL_TOKEN=5;
    public static final int PRAGMA_PRINT=170;
    public static final int CURLY_BRACKET_OPEN=165;
    public static final int L_typedef=106;
    public static final int UNDERSCORE=167;
    public static final int MATCH=17;
    public static final int U_LESS_EQ=122;
    public static final int TRY=18;
    public static final int L_to=90;
    public static final int Float=157;
    public static final int L_unittest=110;
    public static final int WS=152;
    public static final int IMPORT_MINUS=61;
    public static final int Charcode=159;
    public static final int TYPEOF=52;
    public static final int L_do=81;
    public static final int L_val=86;
    public static final int TOK_CONVERT=133;
    public static final int L_match=83;
    public static final int L_obj=73;
    public static final int WsChar=151;
    public static final int L_module=105;
    public static final int GETTYPE=40;
    public static final int Hex=70;
    public static final int L_private=108;
    public static final int TYPE_PATTERN=46;
    public static final int L_for=80;
    public static final int MEMOID_WEAK=43;
    public static final int RELATE=55;
    public static final int Letter=68;
    public static final int EXCLAMATION_MARK=149;
    public static final int PRAGMA_ASSERT=171;
    public static final int APPLY=12;
    public static final int U_ARROW=143;
    public static final int PRAGMA_LOG=169;
    public static final int A_EQUAL=116;
    public static final int PRIVATEID=44;
    public static final int L_else=77;
    public static final int DEF=35;
    public static final int L_typeof=107;
    public static final int L_begin=71;
    public static final int L_div=103;
    public static final int L_yield=82;
    public static final int PLUSPLUS=138;
    public static final int MEMOID_STRONG=42;
    public static final int L_while=79;
    public static final int CASES=19;
    public static final int POW_tok=131;
    public static final int Exponent=156;
    public static final int IF_PATTERN=45;
    public static final int A_ELLIPSIS=144;
    public static final int PARENTS_PLUS=26;
    public static final int A_DOUBLE_ARROW=140;
    public static final int INTERVAL=56;
    public static final int SQUARE_BRACKET_OPEN=163;
    public static final int IF=13;
    public static final int L_not=112;
    public static final int PROG=4;
    public static final int COMMA=146;
    public static final int OBJ=20;
    public static final int TYPEVAL=49;
    public static final int MEMOIZE=41;
    public static final int U_ELLIPSIS=145;
    public static final int TYPEDEF_CLAUSE=39;
    public static final int INNERVALUE_PATTERN=47;
    public static final int YIELD=36;
    public static final int COMPARE=11;
    public static final int U_GREATER_EQ=125;
    public static final int U_EQUAL=117;
    public static final int PLUS=127;
    public static final int String=160;
    public static final int LAMBDA=7;
    public static final int L_true=98;
    public static final int Id=155;
    public static final int L_or=113;
    public static final int WITH=30;
    public static final int L_in=88;
    public static final int CONVERT=54;
    public static final int L_lazy=96;
    public static final int NotNewline=63;
    public static final int L_then=76;
    public static final int QUOTIENT=130;
    public static final int TYPEDEF=38;
    public static final int L_if=75;
    public static final int IMPORT_SET=59;
    public static final int CURLY_BRACKET_CLOSE=166;
    public static final int UMINUS=24;
    public static final int FOR_EXPR=21;
    public static final int Constr=154;
    public static final int WHILE_DO=22;
    public static final int L_elseif=78;
    public static final int MINUS=128;
    public static final int Digit=69;
    public static final int L_memoize=97;
    public static final int CONVERSION=53;
    public static final int A_GREATER_EQ=124;
    public static final int ROUND_LIST=9;
    public static final int COLON=168;
    public static final int PRAGMA_PROFILE=172;
    public static final int SC=126;
    public static final int L_downto=91;
    public static final int ANY=6;
    public static final int L_random=101;
    public static final int A_NOT_EQUAL=118;
    public static final int BLOCK=28;
    public static final int ASSIGN=33;
    public static final int U_DOUBLE_COLON=135;
    public static final int OBJELEM_ASSIGN=32;
    public static final int ARROW=34;
    public static final int IMPORT_PLUS=60;
    public static final int L_case=84;
    public static final int TIMES=129;
    public static final int A_LESS_EQ=121;
    public static final int PARENTS_MUL=27;

    // delegates
    // delegators


        public babel17Parser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public babel17Parser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return babel17Parser.tokenNames; }
    public String getGrammarFileName() { return "/Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g"; }

     

    public boolean errorDuringParsing = false;
    public ArrayList<RecognitionException> parsingErrors = new ArrayList<RecognitionException>();


    @Override
    public void reportError(RecognitionException e) {
      errorDuringParsing = true;
      parsingErrors.add(e);
    }



    public static class prog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prog"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:133:1: prog : block EOF -> ^( PROG block ) ;
    public final babel17Parser.prog_return prog() throws RecognitionException {
        babel17Parser.prog_return retval = new babel17Parser.prog_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF2=null;
        babel17Parser.block_return block1 = null;


        CommonTree EOF2_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:133:7: ( block EOF -> ^( PROG block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:133:9: block EOF
            {
            pushFollow(FOLLOW_block_in_prog260);
            block1=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block1.getTree());
            EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_prog262); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF2);



            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 133:19: -> ^( PROG block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:133:22: ^( PROG block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROG, "PROG"), root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prog"

    public static class token_EQUAL_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_EQUAL"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:257:1: token_EQUAL : ( A_EQUAL | U_EQUAL );
    public final babel17Parser.token_EQUAL_return token_EQUAL() throws RecognitionException {
        babel17Parser.token_EQUAL_return retval = new babel17Parser.token_EQUAL_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set3=null;

        CommonTree set3_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:258:2: ( A_EQUAL | U_EQUAL )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set3=(Token)input.LT(1);
            if ( (input.LA(1)>=A_EQUAL && input.LA(1)<=U_EQUAL) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set3));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_EQUAL"

    public static class token_NOT_EQUAL_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_NOT_EQUAL"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:265:1: token_NOT_EQUAL : ( A_NOT_EQUAL | U_NOT_EQUAL );
    public final babel17Parser.token_NOT_EQUAL_return token_NOT_EQUAL() throws RecognitionException {
        babel17Parser.token_NOT_EQUAL_return retval = new babel17Parser.token_NOT_EQUAL_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set4=null;

        CommonTree set4_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:266:2: ( A_NOT_EQUAL | U_NOT_EQUAL )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set4=(Token)input.LT(1);
            if ( (input.LA(1)>=A_NOT_EQUAL && input.LA(1)<=U_NOT_EQUAL) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set4));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_NOT_EQUAL"

    public static class token_LESS_EQ_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_LESS_EQ"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:274:1: token_LESS_EQ : ( A_LESS_EQ | U_LESS_EQ );
    public final babel17Parser.token_LESS_EQ_return token_LESS_EQ() throws RecognitionException {
        babel17Parser.token_LESS_EQ_return retval = new babel17Parser.token_LESS_EQ_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set5=null;

        CommonTree set5_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:275:2: ( A_LESS_EQ | U_LESS_EQ )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set5=(Token)input.LT(1);
            if ( (input.LA(1)>=A_LESS_EQ && input.LA(1)<=U_LESS_EQ) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set5));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_LESS_EQ"

    public static class token_GREATER_EQ_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_GREATER_EQ"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:284:1: token_GREATER_EQ : ( A_GREATER_EQ | U_GREATER_EQ );
    public final babel17Parser.token_GREATER_EQ_return token_GREATER_EQ() throws RecognitionException {
        babel17Parser.token_GREATER_EQ_return retval = new babel17Parser.token_GREATER_EQ_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set6=null;

        CommonTree set6_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:285:2: ( A_GREATER_EQ | U_GREATER_EQ )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set6=(Token)input.LT(1);
            if ( (input.LA(1)>=A_GREATER_EQ && input.LA(1)<=U_GREATER_EQ) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set6));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_GREATER_EQ"

    public static class token_OR_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_OR"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:300:1: token_OR : L_or ;
    public final babel17Parser.token_OR_return token_OR() throws RecognitionException {
        babel17Parser.token_OR_return retval = new babel17Parser.token_OR_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_or7=null;

        CommonTree L_or7_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:300:9: ( L_or )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:300:11: L_or
            {
            root_0 = (CommonTree)adaptor.nil();

            L_or7=(Token)match(input,L_or,FOLLOW_L_or_in_token_OR1086); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_or7_tree = (CommonTree)adaptor.create(L_or7);
            adaptor.addChild(root_0, L_or7_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_OR"

    public static class token_AND_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_AND"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:301:1: token_AND : L_and ;
    public final babel17Parser.token_AND_return token_AND() throws RecognitionException {
        babel17Parser.token_AND_return retval = new babel17Parser.token_AND_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_and8=null;

        CommonTree L_and8_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:302:2: ( L_and )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:302:4: L_and
            {
            root_0 = (CommonTree)adaptor.nil();

            L_and8=(Token)match(input,L_and,FOLLOW_L_and_in_token_AND1094); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_and8_tree = (CommonTree)adaptor.create(L_and8);
            adaptor.addChild(root_0, L_and8_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_AND"

    public static class token_NOT_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_NOT"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:303:1: token_NOT : L_not ;
    public final babel17Parser.token_NOT_return token_NOT() throws RecognitionException {
        babel17Parser.token_NOT_return retval = new babel17Parser.token_NOT_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_not9=null;

        CommonTree L_not9_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:304:2: ( L_not )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:304:4: L_not
            {
            root_0 = (CommonTree)adaptor.nil();

            L_not9=(Token)match(input,L_not,FOLLOW_L_not_in_token_NOT1102); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_not9_tree = (CommonTree)adaptor.create(L_not9);
            adaptor.addChild(root_0, L_not9_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_NOT"

    public static class token_DOUBLE_COLON_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_DOUBLE_COLON"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:310:1: token_DOUBLE_COLON : ( A_DOUBLE_COLON | U_DOUBLE_COLON );
    public final babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON() throws RecognitionException {
        babel17Parser.token_DOUBLE_COLON_return retval = new babel17Parser.token_DOUBLE_COLON_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set10=null;

        CommonTree set10_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:311:2: ( A_DOUBLE_COLON | U_DOUBLE_COLON )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set10=(Token)input.LT(1);
            if ( (input.LA(1)>=A_DOUBLE_COLON && input.LA(1)<=U_DOUBLE_COLON) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set10));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_DOUBLE_COLON"

    public static class token_DOUBLE_ARROW_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_DOUBLE_ARROW"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:327:1: token_DOUBLE_ARROW : ( A_DOUBLE_ARROW | U_DOUBLE_ARROW );
    public final babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW() throws RecognitionException {
        babel17Parser.token_DOUBLE_ARROW_return retval = new babel17Parser.token_DOUBLE_ARROW_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set11=null;

        CommonTree set11_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:328:2: ( A_DOUBLE_ARROW | U_DOUBLE_ARROW )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set11=(Token)input.LT(1);
            if ( (input.LA(1)>=A_DOUBLE_ARROW && input.LA(1)<=U_DOUBLE_ARROW) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set11));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_DOUBLE_ARROW"

    public static class token_ARROW_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_ARROW"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:332:1: token_ARROW : ( A_ARROW | U_ARROW );
    public final babel17Parser.token_ARROW_return token_ARROW() throws RecognitionException {
        babel17Parser.token_ARROW_return retval = new babel17Parser.token_ARROW_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set12=null;

        CommonTree set12_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:333:2: ( A_ARROW | U_ARROW )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set12=(Token)input.LT(1);
            if ( (input.LA(1)>=A_ARROW && input.LA(1)<=U_ARROW) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set12));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_ARROW"

    public static class token_ELLIPSIS_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_ELLIPSIS"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:338:1: token_ELLIPSIS : ( A_ELLIPSIS | U_ELLIPSIS );
    public final babel17Parser.token_ELLIPSIS_return token_ELLIPSIS() throws RecognitionException {
        babel17Parser.token_ELLIPSIS_return retval = new babel17Parser.token_ELLIPSIS_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set13=null;

        CommonTree set13_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:339:2: ( A_ELLIPSIS | U_ELLIPSIS )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set13=(Token)input.LT(1);
            if ( (input.LA(1)>=A_ELLIPSIS && input.LA(1)<=U_ELLIPSIS) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set13));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_ELLIPSIS"

    public static class typeid_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeid"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:1: typeid : Id ( ( NL )? PERIOD ( NL )? Id )* -> ^( TYPEID ( Id )* ) ;
    public final babel17Parser.typeid_return typeid() throws RecognitionException {
        babel17Parser.typeid_return retval = new babel17Parser.typeid_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id14=null;
        Token NL15=null;
        Token PERIOD16=null;
        Token NL17=null;
        Token Id18=null;

        CommonTree Id14_tree=null;
        CommonTree NL15_tree=null;
        CommonTree PERIOD16_tree=null;
        CommonTree NL17_tree=null;
        CommonTree Id18_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:9: ( Id ( ( NL )? PERIOD ( NL )? Id )* -> ^( TYPEID ( Id )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:11: Id ( ( NL )? PERIOD ( NL )? Id )*
            {
            Id14=(Token)match(input,Id,FOLLOW_Id_in_typeid1752); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id14);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:14: ( ( NL )? PERIOD ( NL )? Id )*
            loop3:
            do {
                int alt3=2;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==NL) ) {
                    int LA3_1 = input.LA(2);

                    if ( (LA3_1==PERIOD) ) {
                        alt3=1;
                    }


                }
                else if ( (LA3_0==PERIOD) ) {
                    alt3=1;
                }


                switch (alt3) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:15: ( NL )? PERIOD ( NL )? Id
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:15: ( NL )?
            	    int alt1=2;
            	    int LA1_0 = input.LA(1);

            	    if ( (LA1_0==NL) ) {
            	        alt1=1;
            	    }
            	    switch (alt1) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:15: NL
            	            {
            	            NL15=(Token)match(input,NL,FOLLOW_NL_in_typeid1755); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL15);


            	            }
            	            break;

            	    }

            	    PERIOD16=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_typeid1758); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD16);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:26: ( NL )?
            	    int alt2=2;
            	    int LA2_0 = input.LA(1);

            	    if ( (LA2_0==NL) ) {
            	        alt2=1;
            	    }
            	    switch (alt2) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:26: NL
            	            {
            	            NL17=(Token)match(input,NL,FOLLOW_NL_in_typeid1760); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL17);


            	            }
            	            break;

            	    }

            	    Id18=(Token)match(input,Id,FOLLOW_Id_in_typeid1763); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_Id.add(Id18);


            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);



            // AST REWRITE
            // elements: Id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 421:35: -> ^( TYPEID ( Id )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:38: ^( TYPEID ( Id )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEID, "TYPEID"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:47: ( Id )*
                while ( stream_Id.hasNext() ) {
                    adaptor.addChild(root_1, stream_Id.nextNode());

                }
                stream_Id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeid"

    public static class typeannotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeannotation"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:423:1: typeannotation : ( typeid | '(' protected_expr ')' -> ^( TYPEVAL protected_expr ) );
    public final babel17Parser.typeannotation_return typeannotation() throws RecognitionException {
        babel17Parser.typeannotation_return retval = new babel17Parser.typeannotation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal20=null;
        Token char_literal22=null;
        babel17Parser.typeid_return typeid19 = null;

        babel17Parser.protected_expr_return protected_expr21 = null;


        CommonTree char_literal20_tree=null;
        CommonTree char_literal22_tree=null;
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:424:2: ( typeid | '(' protected_expr ')' -> ^( TYPEVAL protected_expr ) )
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==Id) ) {
                alt4=1;
            }
            else if ( (LA4_0==ROUND_BRACKET_OPEN) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:424:4: typeid
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeid_in_typeannotation1783);
                    typeid19=typeid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeid19.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:425:4: '(' protected_expr ')'
                    {
                    char_literal20=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_typeannotation1788); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal20);

                    pushFollow(FOLLOW_protected_expr_in_typeannotation1790);
                    protected_expr21=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr21.getTree());
                    char_literal22=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_typeannotation1792); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal22);



                    // AST REWRITE
                    // elements: protected_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 425:27: -> ^( TYPEVAL protected_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:425:30: ^( TYPEVAL protected_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEVAL, "TYPEVAL"), root_1);

                        adaptor.addChild(root_1, stream_protected_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeannotation"

    public static class pattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:1: pattern : ( Constr ( ( NL )? pattern )? -> ^( Constr ( pattern )? ) | primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )* -> ^( LIST_CONS ( primitive_pattern )* ) | L_exception ( NL )? pattern -> ^( L_exception pattern ) | token_ELLIPSIS );
    public final babel17Parser.pattern_return pattern() throws RecognitionException {
        babel17Parser.pattern_return retval = new babel17Parser.pattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Constr23=null;
        Token NL24=null;
        Token NL27=null;
        Token NL29=null;
        Token L_exception31=null;
        Token NL32=null;
        babel17Parser.pattern_return pattern25 = null;

        babel17Parser.primitive_pattern_return primitive_pattern26 = null;

        babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON28 = null;

        babel17Parser.primitive_pattern_return primitive_pattern30 = null;

        babel17Parser.pattern_return pattern33 = null;

        babel17Parser.token_ELLIPSIS_return token_ELLIPSIS34 = null;


        CommonTree Constr23_tree=null;
        CommonTree NL24_tree=null;
        CommonTree NL27_tree=null;
        CommonTree NL29_tree=null;
        CommonTree L_exception31_tree=null;
        CommonTree NL32_tree=null;
        RewriteRuleTokenStream stream_L_exception=new RewriteRuleTokenStream(adaptor,"token L_exception");
        RewriteRuleTokenStream stream_Constr=new RewriteRuleTokenStream(adaptor,"token Constr");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_primitive_pattern=new RewriteRuleSubtreeStream(adaptor,"rule primitive_pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_COLON=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_COLON");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:9: ( Constr ( ( NL )? pattern )? -> ^( Constr ( pattern )? ) | primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )* -> ^( LIST_CONS ( primitive_pattern )* ) | L_exception ( NL )? pattern -> ^( L_exception pattern ) | token_ELLIPSIS )
            int alt11=4;
            switch ( input.LA(1) ) {
            case Constr:
                {
                alt11=1;
                }
                break;
            case L_true:
            case L_false:
            case L_nil:
            case MINUS:
            case Id:
            case Num:
            case String:
            case ROUND_BRACKET_OPEN:
            case SQUARE_BRACKET_OPEN:
            case CURLY_BRACKET_OPEN:
            case UNDERSCORE:
                {
                alt11=2;
                }
                break;
            case L_exception:
                {
                alt11=3;
                }
                break;
            case A_ELLIPSIS:
            case U_ELLIPSIS:
                {
                alt11=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }

            switch (alt11) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:11: Constr ( ( NL )? pattern )?
                    {
                    Constr23=(Token)match(input,Constr,FOLLOW_Constr_in_pattern1809); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Constr.add(Constr23);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:18: ( ( NL )? pattern )?
                    int alt6=2;
                    int LA6_0 = input.LA(1);

                    if ( (LA6_0==NL) ) {
                        int LA6_1 = input.LA(2);

                        if ( (LA6_1==L_exception||(LA6_1>=L_true && LA6_1<=L_false)||LA6_1==L_nil||LA6_1==MINUS||(LA6_1>=A_ELLIPSIS && LA6_1<=U_ELLIPSIS)||(LA6_1>=Constr && LA6_1<=Id)||LA6_1==Num||(LA6_1>=String && LA6_1<=ROUND_BRACKET_OPEN)||LA6_1==SQUARE_BRACKET_OPEN||LA6_1==CURLY_BRACKET_OPEN||LA6_1==UNDERSCORE) ) {
                            alt6=1;
                        }
                    }
                    else if ( (LA6_0==L_exception||(LA6_0>=L_true && LA6_0<=L_false)||LA6_0==L_nil||LA6_0==MINUS||(LA6_0>=A_ELLIPSIS && LA6_0<=U_ELLIPSIS)||(LA6_0>=Constr && LA6_0<=Id)||LA6_0==Num||(LA6_0>=String && LA6_0<=ROUND_BRACKET_OPEN)||LA6_0==SQUARE_BRACKET_OPEN||LA6_0==CURLY_BRACKET_OPEN||LA6_0==UNDERSCORE) ) {
                        alt6=1;
                    }
                    switch (alt6) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:19: ( NL )? pattern
                            {
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:19: ( NL )?
                            int alt5=2;
                            int LA5_0 = input.LA(1);

                            if ( (LA5_0==NL) ) {
                                alt5=1;
                            }
                            switch (alt5) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:19: NL
                                    {
                                    NL24=(Token)match(input,NL,FOLLOW_NL_in_pattern1812); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL24);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_pattern_in_pattern1815);
                            pattern25=pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pattern.add(pattern25.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: Constr, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 428:33: -> ^( Constr ( pattern )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:36: ^( Constr ( pattern )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_Constr.nextNode(), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:45: ( pattern )?
                        if ( stream_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_pattern.nextTree());

                        }
                        stream_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:429:4: primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )*
                    {
                    pushFollow(FOLLOW_primitive_pattern_in_pattern1831);
                    primitive_pattern26=primitive_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitive_pattern.add(primitive_pattern26.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:429:22: ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )*
                    loop9:
                    do {
                        int alt9=2;
                        int LA9_0 = input.LA(1);

                        if ( (LA9_0==NL) ) {
                            int LA9_1 = input.LA(2);

                            if ( ((LA9_1>=A_DOUBLE_COLON && LA9_1<=U_DOUBLE_COLON)) ) {
                                alt9=1;
                            }


                        }
                        else if ( ((LA9_0>=A_DOUBLE_COLON && LA9_0<=U_DOUBLE_COLON)) ) {
                            alt9=1;
                        }


                        switch (alt9) {
                    	case 1 :
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:429:23: ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern
                    	    {
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:429:23: ( NL )?
                    	    int alt7=2;
                    	    int LA7_0 = input.LA(1);

                    	    if ( (LA7_0==NL) ) {
                    	        alt7=1;
                    	    }
                    	    switch (alt7) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:429:23: NL
                    	            {
                    	            NL27=(Token)match(input,NL,FOLLOW_NL_in_pattern1834); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL27);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_token_DOUBLE_COLON_in_pattern1837);
                    	    token_DOUBLE_COLON28=token_DOUBLE_COLON();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_token_DOUBLE_COLON.add(token_DOUBLE_COLON28.getTree());
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:429:46: ( NL )?
                    	    int alt8=2;
                    	    int LA8_0 = input.LA(1);

                    	    if ( (LA8_0==NL) ) {
                    	        alt8=1;
                    	    }
                    	    switch (alt8) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:429:46: NL
                    	            {
                    	            NL29=(Token)match(input,NL,FOLLOW_NL_in_pattern1839); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL29);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_primitive_pattern_in_pattern1842);
                    	    primitive_pattern30=primitive_pattern();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_primitive_pattern.add(primitive_pattern30.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop9;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: primitive_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 430:3: -> ^( LIST_CONS ( primitive_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:430:6: ^( LIST_CONS ( primitive_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST_CONS, "LIST_CONS"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:430:18: ( primitive_pattern )*
                        while ( stream_primitive_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_primitive_pattern.nextTree());

                        }
                        stream_primitive_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:431:4: L_exception ( NL )? pattern
                    {
                    L_exception31=(Token)match(input,L_exception,FOLLOW_L_exception_in_pattern1861); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_exception.add(L_exception31);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:431:16: ( NL )?
                    int alt10=2;
                    int LA10_0 = input.LA(1);

                    if ( (LA10_0==NL) ) {
                        alt10=1;
                    }
                    switch (alt10) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:431:16: NL
                            {
                            NL32=(Token)match(input,NL,FOLLOW_NL_in_pattern1863); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL32);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_pattern_in_pattern1866);
                    pattern33=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern33.getTree());


                    // AST REWRITE
                    // elements: pattern, L_exception
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 431:28: -> ^( L_exception pattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:431:31: ^( L_exception pattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_L_exception.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_pattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:432:4: token_ELLIPSIS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_ELLIPSIS_in_pattern1879);
                    token_ELLIPSIS34=token_ELLIPSIS();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_ELLIPSIS34.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pattern"

    public static class defpattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defpattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:434:1: defpattern : ( primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )* -> ^( LIST_CONS ( primitive_pattern )* ) | Constr ( defpattern )? -> ^( Constr ( defpattern )? ) );
    public final babel17Parser.defpattern_return defpattern() throws RecognitionException {
        babel17Parser.defpattern_return retval = new babel17Parser.defpattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL36=null;
        Token NL38=null;
        Token Constr40=null;
        babel17Parser.primitive_pattern_return primitive_pattern35 = null;

        babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON37 = null;

        babel17Parser.primitive_pattern_return primitive_pattern39 = null;

        babel17Parser.defpattern_return defpattern41 = null;


        CommonTree NL36_tree=null;
        CommonTree NL38_tree=null;
        CommonTree Constr40_tree=null;
        RewriteRuleTokenStream stream_Constr=new RewriteRuleTokenStream(adaptor,"token Constr");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_primitive_pattern=new RewriteRuleSubtreeStream(adaptor,"rule primitive_pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_COLON=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_COLON");
        RewriteRuleSubtreeStream stream_defpattern=new RewriteRuleSubtreeStream(adaptor,"rule defpattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:435:2: ( primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )* -> ^( LIST_CONS ( primitive_pattern )* ) | Constr ( defpattern )? -> ^( Constr ( defpattern )? ) )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( ((LA16_0>=L_true && LA16_0<=L_false)||LA16_0==L_nil||LA16_0==MINUS||LA16_0==Id||LA16_0==Num||(LA16_0>=String && LA16_0<=ROUND_BRACKET_OPEN)||LA16_0==SQUARE_BRACKET_OPEN||LA16_0==CURLY_BRACKET_OPEN||LA16_0==UNDERSCORE) ) {
                alt16=1;
            }
            else if ( (LA16_0==Constr) ) {
                alt16=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }
            switch (alt16) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:435:4: primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )*
                    {
                    pushFollow(FOLLOW_primitive_pattern_in_defpattern1889);
                    primitive_pattern35=primitive_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitive_pattern.add(primitive_pattern35.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:435:22: ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )*
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( (LA14_0==NL) ) {
                            int LA14_1 = input.LA(2);

                            if ( ((LA14_1>=A_DOUBLE_COLON && LA14_1<=U_DOUBLE_COLON)) ) {
                                alt14=1;
                            }


                        }
                        else if ( ((LA14_0>=A_DOUBLE_COLON && LA14_0<=U_DOUBLE_COLON)) ) {
                            alt14=1;
                        }


                        switch (alt14) {
                    	case 1 :
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:435:23: ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern
                    	    {
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:435:23: ( NL )?
                    	    int alt12=2;
                    	    int LA12_0 = input.LA(1);

                    	    if ( (LA12_0==NL) ) {
                    	        alt12=1;
                    	    }
                    	    switch (alt12) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:435:23: NL
                    	            {
                    	            NL36=(Token)match(input,NL,FOLLOW_NL_in_defpattern1892); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL36);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_token_DOUBLE_COLON_in_defpattern1895);
                    	    token_DOUBLE_COLON37=token_DOUBLE_COLON();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_token_DOUBLE_COLON.add(token_DOUBLE_COLON37.getTree());
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:435:46: ( NL )?
                    	    int alt13=2;
                    	    int LA13_0 = input.LA(1);

                    	    if ( (LA13_0==NL) ) {
                    	        alt13=1;
                    	    }
                    	    switch (alt13) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:435:46: NL
                    	            {
                    	            NL38=(Token)match(input,NL,FOLLOW_NL_in_defpattern1897); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL38);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_primitive_pattern_in_defpattern1900);
                    	    primitive_pattern39=primitive_pattern();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_primitive_pattern.add(primitive_pattern39.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: primitive_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 436:3: -> ^( LIST_CONS ( primitive_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:436:6: ^( LIST_CONS ( primitive_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST_CONS, "LIST_CONS"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:436:18: ( primitive_pattern )*
                        while ( stream_primitive_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_primitive_pattern.nextTree());

                        }
                        stream_primitive_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:437:4: Constr ( defpattern )?
                    {
                    Constr40=(Token)match(input,Constr,FOLLOW_Constr_in_defpattern1918); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Constr.add(Constr40);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:437:11: ( defpattern )?
                    int alt15=2;
                    int LA15_0 = input.LA(1);

                    if ( ((LA15_0>=L_true && LA15_0<=L_false)||LA15_0==L_nil||LA15_0==MINUS||(LA15_0>=Constr && LA15_0<=Id)||LA15_0==Num||(LA15_0>=String && LA15_0<=ROUND_BRACKET_OPEN)||LA15_0==SQUARE_BRACKET_OPEN||LA15_0==CURLY_BRACKET_OPEN||LA15_0==UNDERSCORE) ) {
                        alt15=1;
                    }
                    switch (alt15) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:437:11: defpattern
                            {
                            pushFollow(FOLLOW_defpattern_in_defpattern1920);
                            defpattern41=defpattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_defpattern.add(defpattern41.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: defpattern, Constr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 437:23: -> ^( Constr ( defpattern )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:437:26: ^( Constr ( defpattern )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_Constr.nextNode(), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:437:35: ( defpattern )?
                        if ( stream_defpattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_defpattern.nextTree());

                        }
                        stream_defpattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "defpattern"

    public static class casepattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "casepattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:439:1: casepattern : bracket_pattern ;
    public final babel17Parser.casepattern_return casepattern() throws RecognitionException {
        babel17Parser.casepattern_return retval = new babel17Parser.casepattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.bracket_pattern_return bracket_pattern42 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:2: ( bracket_pattern )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:440:4: bracket_pattern
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_bracket_pattern_in_casepattern1939);
            bracket_pattern42=bracket_pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bracket_pattern42.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "casepattern"

    public static class bracket_pattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracket_pattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:442:1: bracket_pattern : ( ( Id ( NL )? L_as )=> Id ( NL )? L_as ( NL )? pattern -> ^( L_as Id pattern ) | ( protected_expr ( NL )? QUESTION_MARK )=> protected_expr ( NL )? QUESTION_MARK ( ( NL )? pattern )? -> ^( QUESTION_MARK protected_expr ( pattern )? ) | ( protected_expr ( NL )? EXCLAMATION_MARK )=> protected_expr ( NL )? EXCLAMATION_MARK ( ( NL )? pattern )? -> ^( EXCLAMATION_MARK protected_expr ( pattern )? ) | ( Id pattern )=> Id pattern -> ^( INNERVALUE_PATTERN Id pattern ) | L_val ( NL )? protected_expr_nc -> ^( L_val protected_expr_nc ) | L_for ( NL )? ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )? L_end -> ^( L_for ( bracket_pattern )* ) | ( pattern ( NL )? L_if )=> pattern ( NL )? L_if ( NL )? protected_expr_nc -> ^( IF_PATTERN pattern protected_expr_nc ) | ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation -> ^( TYPE_PATTERN typeannotation pattern ) | pattern );
    public final babel17Parser.bracket_pattern_return bracket_pattern() throws RecognitionException {
        babel17Parser.bracket_pattern_return retval = new babel17Parser.bracket_pattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id43=null;
        Token NL44=null;
        Token L_as45=null;
        Token NL46=null;
        Token NL49=null;
        Token QUESTION_MARK50=null;
        Token NL51=null;
        Token NL54=null;
        Token EXCLAMATION_MARK55=null;
        Token NL56=null;
        Token Id58=null;
        Token L_val60=null;
        Token NL61=null;
        Token L_for63=null;
        Token NL64=null;
        Token NL66=null;
        Token COMMA67=null;
        Token NL68=null;
        Token NL70=null;
        Token L_end71=null;
        Token NL73=null;
        Token L_if74=null;
        Token NL75=null;
        Token NL78=null;
        Token char_literal79=null;
        Token NL80=null;
        babel17Parser.pattern_return pattern47 = null;

        babel17Parser.protected_expr_return protected_expr48 = null;

        babel17Parser.pattern_return pattern52 = null;

        babel17Parser.protected_expr_return protected_expr53 = null;

        babel17Parser.pattern_return pattern57 = null;

        babel17Parser.pattern_return pattern59 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc62 = null;

        babel17Parser.bracket_pattern_return bracket_pattern65 = null;

        babel17Parser.bracket_pattern_return bracket_pattern69 = null;

        babel17Parser.pattern_return pattern72 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc76 = null;

        babel17Parser.pattern_return pattern77 = null;

        babel17Parser.typeannotation_return typeannotation81 = null;

        babel17Parser.pattern_return pattern82 = null;


        CommonTree Id43_tree=null;
        CommonTree NL44_tree=null;
        CommonTree L_as45_tree=null;
        CommonTree NL46_tree=null;
        CommonTree NL49_tree=null;
        CommonTree QUESTION_MARK50_tree=null;
        CommonTree NL51_tree=null;
        CommonTree NL54_tree=null;
        CommonTree EXCLAMATION_MARK55_tree=null;
        CommonTree NL56_tree=null;
        CommonTree Id58_tree=null;
        CommonTree L_val60_tree=null;
        CommonTree NL61_tree=null;
        CommonTree L_for63_tree=null;
        CommonTree NL64_tree=null;
        CommonTree NL66_tree=null;
        CommonTree COMMA67_tree=null;
        CommonTree NL68_tree=null;
        CommonTree NL70_tree=null;
        CommonTree L_end71_tree=null;
        CommonTree NL73_tree=null;
        CommonTree L_if74_tree=null;
        CommonTree NL75_tree=null;
        CommonTree NL78_tree=null;
        CommonTree char_literal79_tree=null;
        CommonTree NL80_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_EXCLAMATION_MARK=new RewriteRuleTokenStream(adaptor,"token EXCLAMATION_MARK");
        RewriteRuleTokenStream stream_L_for=new RewriteRuleTokenStream(adaptor,"token L_for");
        RewriteRuleTokenStream stream_L_as=new RewriteRuleTokenStream(adaptor,"token L_as");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_L_val=new RewriteRuleTokenStream(adaptor,"token L_val");
        RewriteRuleTokenStream stream_L_if=new RewriteRuleTokenStream(adaptor,"token L_if");
        RewriteRuleTokenStream stream_QUESTION_MARK=new RewriteRuleTokenStream(adaptor,"token QUESTION_MARK");
        RewriteRuleSubtreeStream stream_typeannotation=new RewriteRuleSubtreeStream(adaptor,"rule typeannotation");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_protected_expr_nc=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr_nc");
        RewriteRuleSubtreeStream stream_bracket_pattern=new RewriteRuleSubtreeStream(adaptor,"rule bracket_pattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:443:2: ( ( Id ( NL )? L_as )=> Id ( NL )? L_as ( NL )? pattern -> ^( L_as Id pattern ) | ( protected_expr ( NL )? QUESTION_MARK )=> protected_expr ( NL )? QUESTION_MARK ( ( NL )? pattern )? -> ^( QUESTION_MARK protected_expr ( pattern )? ) | ( protected_expr ( NL )? EXCLAMATION_MARK )=> protected_expr ( NL )? EXCLAMATION_MARK ( ( NL )? pattern )? -> ^( EXCLAMATION_MARK protected_expr ( pattern )? ) | ( Id pattern )=> Id pattern -> ^( INNERVALUE_PATTERN Id pattern ) | L_val ( NL )? protected_expr_nc -> ^( L_val protected_expr_nc ) | L_for ( NL )? ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )? L_end -> ^( L_for ( bracket_pattern )* ) | ( pattern ( NL )? L_if )=> pattern ( NL )? L_if ( NL )? protected_expr_nc -> ^( IF_PATTERN pattern protected_expr_nc ) | ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation -> ^( TYPE_PATTERN typeannotation pattern ) | pattern )
            int alt36=9;
            alt36 = dfa36.predict(input);
            switch (alt36) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:443:10: ( Id ( NL )? L_as )=> Id ( NL )? L_as ( NL )? pattern
                    {
                    Id43=(Token)match(input,Id,FOLLOW_Id_in_bracket_pattern1966); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id43);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:443:30: ( NL )?
                    int alt17=2;
                    int LA17_0 = input.LA(1);

                    if ( (LA17_0==NL) ) {
                        alt17=1;
                    }
                    switch (alt17) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:443:30: NL
                            {
                            NL44=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern1968); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL44);


                            }
                            break;

                    }

                    L_as45=(Token)match(input,L_as,FOLLOW_L_as_in_bracket_pattern1971); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_as.add(L_as45);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:443:39: ( NL )?
                    int alt18=2;
                    int LA18_0 = input.LA(1);

                    if ( (LA18_0==NL) ) {
                        alt18=1;
                    }
                    switch (alt18) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:443:39: NL
                            {
                            NL46=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern1973); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL46);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_pattern_in_bracket_pattern1976);
                    pattern47=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern47.getTree());


                    // AST REWRITE
                    // elements: Id, pattern, L_as
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 443:51: -> ^( L_as Id pattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:443:54: ^( L_as Id pattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_L_as.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());
                        adaptor.addChild(root_1, stream_pattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:444:4: ( protected_expr ( NL )? QUESTION_MARK )=> protected_expr ( NL )? QUESTION_MARK ( ( NL )? pattern )?
                    {
                    pushFollow(FOLLOW_protected_expr_in_bracket_pattern2005);
                    protected_expr48=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr48.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:18: ( NL )?
                    int alt19=2;
                    int LA19_0 = input.LA(1);

                    if ( (LA19_0==NL) ) {
                        alt19=1;
                    }
                    switch (alt19) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:18: NL
                            {
                            NL49=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2007); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL49);


                            }
                            break;

                    }

                    QUESTION_MARK50=(Token)match(input,QUESTION_MARK,FOLLOW_QUESTION_MARK_in_bracket_pattern2010); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION_MARK.add(QUESTION_MARK50);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:36: ( ( NL )? pattern )?
                    int alt21=2;
                    int LA21_0 = input.LA(1);

                    if ( (LA21_0==NL) ) {
                        int LA21_1 = input.LA(2);

                        if ( (LA21_1==L_exception||(LA21_1>=L_true && LA21_1<=L_false)||LA21_1==L_nil||LA21_1==MINUS||(LA21_1>=A_ELLIPSIS && LA21_1<=U_ELLIPSIS)||(LA21_1>=Constr && LA21_1<=Id)||LA21_1==Num||(LA21_1>=String && LA21_1<=ROUND_BRACKET_OPEN)||LA21_1==SQUARE_BRACKET_OPEN||LA21_1==CURLY_BRACKET_OPEN||LA21_1==UNDERSCORE) ) {
                            alt21=1;
                        }
                    }
                    else if ( (LA21_0==L_exception||(LA21_0>=L_true && LA21_0<=L_false)||LA21_0==L_nil||LA21_0==MINUS||(LA21_0>=A_ELLIPSIS && LA21_0<=U_ELLIPSIS)||(LA21_0>=Constr && LA21_0<=Id)||LA21_0==Num||(LA21_0>=String && LA21_0<=ROUND_BRACKET_OPEN)||LA21_0==SQUARE_BRACKET_OPEN||LA21_0==CURLY_BRACKET_OPEN||LA21_0==UNDERSCORE) ) {
                        alt21=1;
                    }
                    switch (alt21) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:37: ( NL )? pattern
                            {
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:37: ( NL )?
                            int alt20=2;
                            int LA20_0 = input.LA(1);

                            if ( (LA20_0==NL) ) {
                                alt20=1;
                            }
                            switch (alt20) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:37: NL
                                    {
                                    NL51=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2013); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL51);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_pattern_in_bracket_pattern2016);
                            pattern52=pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pattern.add(pattern52.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: QUESTION_MARK, protected_expr, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 445:51: -> ^( QUESTION_MARK protected_expr ( pattern )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:54: ^( QUESTION_MARK protected_expr ( pattern )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_QUESTION_MARK.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_protected_expr.nextTree());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:85: ( pattern )?
                        if ( stream_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_pattern.nextTree());

                        }
                        stream_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:4: ( protected_expr ( NL )? EXCLAMATION_MARK )=> protected_expr ( NL )? EXCLAMATION_MARK ( ( NL )? pattern )?
                    {
                    pushFollow(FOLLOW_protected_expr_in_bracket_pattern2048);
                    protected_expr53=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr53.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:18: ( NL )?
                    int alt22=2;
                    int LA22_0 = input.LA(1);

                    if ( (LA22_0==NL) ) {
                        alt22=1;
                    }
                    switch (alt22) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:18: NL
                            {
                            NL54=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2050); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL54);


                            }
                            break;

                    }

                    EXCLAMATION_MARK55=(Token)match(input,EXCLAMATION_MARK,FOLLOW_EXCLAMATION_MARK_in_bracket_pattern2053); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EXCLAMATION_MARK.add(EXCLAMATION_MARK55);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:39: ( ( NL )? pattern )?
                    int alt24=2;
                    int LA24_0 = input.LA(1);

                    if ( (LA24_0==NL) ) {
                        int LA24_1 = input.LA(2);

                        if ( (LA24_1==L_exception||(LA24_1>=L_true && LA24_1<=L_false)||LA24_1==L_nil||LA24_1==MINUS||(LA24_1>=A_ELLIPSIS && LA24_1<=U_ELLIPSIS)||(LA24_1>=Constr && LA24_1<=Id)||LA24_1==Num||(LA24_1>=String && LA24_1<=ROUND_BRACKET_OPEN)||LA24_1==SQUARE_BRACKET_OPEN||LA24_1==CURLY_BRACKET_OPEN||LA24_1==UNDERSCORE) ) {
                            alt24=1;
                        }
                    }
                    else if ( (LA24_0==L_exception||(LA24_0>=L_true && LA24_0<=L_false)||LA24_0==L_nil||LA24_0==MINUS||(LA24_0>=A_ELLIPSIS && LA24_0<=U_ELLIPSIS)||(LA24_0>=Constr && LA24_0<=Id)||LA24_0==Num||(LA24_0>=String && LA24_0<=ROUND_BRACKET_OPEN)||LA24_0==SQUARE_BRACKET_OPEN||LA24_0==CURLY_BRACKET_OPEN||LA24_0==UNDERSCORE) ) {
                        alt24=1;
                    }
                    switch (alt24) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:40: ( NL )? pattern
                            {
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:40: ( NL )?
                            int alt23=2;
                            int LA23_0 = input.LA(1);

                            if ( (LA23_0==NL) ) {
                                alt23=1;
                            }
                            switch (alt23) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:40: NL
                                    {
                                    NL56=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2056); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL56);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_pattern_in_bracket_pattern2059);
                            pattern57=pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pattern.add(pattern57.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: protected_expr, EXCLAMATION_MARK, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 447:54: -> ^( EXCLAMATION_MARK protected_expr ( pattern )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:57: ^( EXCLAMATION_MARK protected_expr ( pattern )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_EXCLAMATION_MARK.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_protected_expr.nextTree());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:91: ( pattern )?
                        if ( stream_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_pattern.nextTree());

                        }
                        stream_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:448:4: ( Id pattern )=> Id pattern
                    {
                    Id58=(Token)match(input,Id,FOLLOW_Id_in_bracket_pattern2085); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id58);

                    pushFollow(FOLLOW_pattern_in_bracket_pattern2087);
                    pattern59=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern59.getTree());


                    // AST REWRITE
                    // elements: pattern, Id
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 448:31: -> ^( INNERVALUE_PATTERN Id pattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:448:34: ^( INNERVALUE_PATTERN Id pattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERVALUE_PATTERN, "INNERVALUE_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());
                        adaptor.addChild(root_1, stream_pattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:4: L_val ( NL )? protected_expr_nc
                    {
                    L_val60=(Token)match(input,L_val,FOLLOW_L_val_in_bracket_pattern2102); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_val.add(L_val60);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:10: ( NL )?
                    int alt25=2;
                    int LA25_0 = input.LA(1);

                    if ( (LA25_0==NL) ) {
                        alt25=1;
                    }
                    switch (alt25) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:10: NL
                            {
                            NL61=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2104); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL61);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_bracket_pattern2107);
                    protected_expr_nc62=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc62.getTree());


                    // AST REWRITE
                    // elements: L_val, protected_expr_nc
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 449:32: -> ^( L_val protected_expr_nc )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:35: ^( L_val protected_expr_nc )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_L_val.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_protected_expr_nc.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:10: L_for ( NL )? ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )? L_end
                    {
                    L_for63=(Token)match(input,L_for,FOLLOW_L_for_in_bracket_pattern2126); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_for.add(L_for63);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:16: ( NL )?
                    int alt26=2;
                    int LA26_0 = input.LA(1);

                    if ( (LA26_0==NL) ) {
                        alt26=1;
                    }
                    switch (alt26) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:16: NL
                            {
                            NL64=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2128); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL64);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:20: ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )?
                    int alt31=2;
                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==L_begin||(LA31_0>=L_obj && LA31_0<=L_if)||(LA31_0>=L_while && LA31_0<=L_for)||LA31_0==L_match||LA31_0==L_val||LA31_0==L_exception||LA31_0==L_try||(LA31_0>=L_concurrent && LA31_0<=L_lazy)||(LA31_0>=L_true && LA31_0<=L_nil)||LA31_0==L_typeof||LA31_0==L_not||(LA31_0>=L_root && LA31_0<=L_native)||LA31_0==MINUS||(LA31_0>=A_ELLIPSIS && LA31_0<=U_ELLIPSIS)||LA31_0==L_force||(LA31_0>=Constr && LA31_0<=Id)||(LA31_0>=Float && LA31_0<=Num)||(LA31_0>=String && LA31_0<=ROUND_BRACKET_OPEN)||LA31_0==SQUARE_BRACKET_OPEN||LA31_0==CURLY_BRACKET_OPEN||LA31_0==UNDERSCORE) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:21: bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )?
                            {
                            pushFollow(FOLLOW_bracket_pattern_in_bracket_pattern2132);
                            bracket_pattern65=bracket_pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern65.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:37: ( ( NL )? COMMA ( NL )? bracket_pattern )*
                            loop29:
                            do {
                                int alt29=2;
                                int LA29_0 = input.LA(1);

                                if ( (LA29_0==NL) ) {
                                    int LA29_1 = input.LA(2);

                                    if ( (LA29_1==COMMA) ) {
                                        alt29=1;
                                    }


                                }
                                else if ( (LA29_0==COMMA) ) {
                                    alt29=1;
                                }


                                switch (alt29) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:39: ( NL )? COMMA ( NL )? bracket_pattern
                            	    {
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:39: ( NL )?
                            	    int alt27=2;
                            	    int LA27_0 = input.LA(1);

                            	    if ( (LA27_0==NL) ) {
                            	        alt27=1;
                            	    }
                            	    switch (alt27) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:39: NL
                            	            {
                            	            NL66=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2136); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL66);


                            	            }
                            	            break;

                            	    }

                            	    COMMA67=(Token)match(input,COMMA,FOLLOW_COMMA_in_bracket_pattern2139); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA67);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:49: ( NL )?
                            	    int alt28=2;
                            	    int LA28_0 = input.LA(1);

                            	    if ( (LA28_0==NL) ) {
                            	        alt28=1;
                            	    }
                            	    switch (alt28) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:49: NL
                            	            {
                            	            NL68=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2141); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL68);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_bracket_pattern_in_bracket_pattern2144);
                            	    bracket_pattern69=bracket_pattern();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern69.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop29;
                                }
                            } while (true);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:72: ( NL )?
                            int alt30=2;
                            int LA30_0 = input.LA(1);

                            if ( (LA30_0==NL) ) {
                                alt30=1;
                            }
                            switch (alt30) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:72: NL
                                    {
                                    NL70=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2149); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL70);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    L_end71=(Token)match(input,L_end,FOLLOW_L_end_in_bracket_pattern2154); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_end.add(L_end71);



                    // AST REWRITE
                    // elements: bracket_pattern, L_for
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 450:84: -> ^( L_for ( bracket_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:87: ^( L_for ( bracket_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_L_for.nextNode(), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:95: ( bracket_pattern )*
                        while ( stream_bracket_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_bracket_pattern.nextTree());

                        }
                        stream_bracket_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:451:4: ( pattern ( NL )? L_if )=> pattern ( NL )? L_if ( NL )? protected_expr_nc
                    {
                    pushFollow(FOLLOW_pattern_in_bracket_pattern2179);
                    pattern72=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern72.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:451:34: ( NL )?
                    int alt32=2;
                    int LA32_0 = input.LA(1);

                    if ( (LA32_0==NL) ) {
                        alt32=1;
                    }
                    switch (alt32) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:451:34: NL
                            {
                            NL73=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2181); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL73);


                            }
                            break;

                    }

                    L_if74=(Token)match(input,L_if,FOLLOW_L_if_in_bracket_pattern2184); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_if.add(L_if74);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:451:43: ( NL )?
                    int alt33=2;
                    int LA33_0 = input.LA(1);

                    if ( (LA33_0==NL) ) {
                        alt33=1;
                    }
                    switch (alt33) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:451:43: NL
                            {
                            NL75=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2186); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL75);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_bracket_pattern2189);
                    protected_expr_nc76=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc76.getTree());


                    // AST REWRITE
                    // elements: pattern, protected_expr_nc
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 451:65: -> ^( IF_PATTERN pattern protected_expr_nc )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:451:68: ^( IF_PATTERN pattern protected_expr_nc )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IF_PATTERN, "IF_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_pattern.nextTree());
                        adaptor.addChild(root_1, stream_protected_expr_nc.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:4: ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation
                    {
                    pushFollow(FOLLOW_pattern_in_bracket_pattern2215);
                    pattern77=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern77.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:33: ( NL )?
                    int alt34=2;
                    int LA34_0 = input.LA(1);

                    if ( (LA34_0==NL) ) {
                        alt34=1;
                    }
                    switch (alt34) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:33: NL
                            {
                            NL78=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2217); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL78);


                            }
                            break;

                    }

                    char_literal79=(Token)match(input,COLON,FOLLOW_COLON_in_bracket_pattern2220); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(char_literal79);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:41: ( NL )?
                    int alt35=2;
                    int LA35_0 = input.LA(1);

                    if ( (LA35_0==NL) ) {
                        alt35=1;
                    }
                    switch (alt35) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:41: NL
                            {
                            NL80=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2222); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL80);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeannotation_in_bracket_pattern2225);
                    typeannotation81=typeannotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeannotation.add(typeannotation81.getTree());


                    // AST REWRITE
                    // elements: pattern, typeannotation
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 452:60: -> ^( TYPE_PATTERN typeannotation pattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:63: ^( TYPE_PATTERN typeannotation pattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_PATTERN, "TYPE_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_typeannotation.nextTree());
                        adaptor.addChild(root_1, stream_pattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:453:4: pattern
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pattern_in_bracket_pattern2240);
                    pattern82=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pattern82.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bracket_pattern"

    public static class arrow_or_assign_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrow_or_assign"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:455:1: arrow_or_assign : ( token_ARROW -> ^( ARROW ) | ASSIGN -> ^( ASSIGN ) );
    public final babel17Parser.arrow_or_assign_return arrow_or_assign() throws RecognitionException {
        babel17Parser.arrow_or_assign_return retval = new babel17Parser.arrow_or_assign_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ASSIGN84=null;
        babel17Parser.token_ARROW_return token_ARROW83 = null;


        CommonTree ASSIGN84_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_token_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_ARROW");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:456:2: ( token_ARROW -> ^( ARROW ) | ASSIGN -> ^( ASSIGN ) )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( ((LA37_0>=A_ARROW && LA37_0<=U_ARROW)) ) {
                alt37=1;
            }
            else if ( (LA37_0==ASSIGN) ) {
                alt37=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;
            }
            switch (alt37) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:456:4: token_ARROW
                    {
                    pushFollow(FOLLOW_token_ARROW_in_arrow_or_assign2250);
                    token_ARROW83=token_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_ARROW.add(token_ARROW83.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 456:16: -> ^( ARROW )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:456:19: ^( ARROW )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARROW, "ARROW"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:457:4: ASSIGN
                    {
                    ASSIGN84=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_arrow_or_assign2261); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN84);



                    // AST REWRITE
                    // elements: ASSIGN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 457:11: -> ^( ASSIGN )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:457:14: ^( ASSIGN )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_ASSIGN.nextNode(), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrow_or_assign"

    public static class mselem_pattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mselem_pattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:459:1: mselem_pattern : bracket_pattern ( ( NL )? arrow_or_assign ( NL )? bracket_pattern )? -> ^( NIL_TOKEN ^( NIL_TOKEN ( bracket_pattern )* ) ( arrow_or_assign )* ) ;
    public final babel17Parser.mselem_pattern_return mselem_pattern() throws RecognitionException {
        babel17Parser.mselem_pattern_return retval = new babel17Parser.mselem_pattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL86=null;
        Token NL88=null;
        babel17Parser.bracket_pattern_return bracket_pattern85 = null;

        babel17Parser.arrow_or_assign_return arrow_or_assign87 = null;

        babel17Parser.bracket_pattern_return bracket_pattern89 = null;


        CommonTree NL86_tree=null;
        CommonTree NL88_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_arrow_or_assign=new RewriteRuleSubtreeStream(adaptor,"rule arrow_or_assign");
        RewriteRuleSubtreeStream stream_bracket_pattern=new RewriteRuleSubtreeStream(adaptor,"rule bracket_pattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:460:2: ( bracket_pattern ( ( NL )? arrow_or_assign ( NL )? bracket_pattern )? -> ^( NIL_TOKEN ^( NIL_TOKEN ( bracket_pattern )* ) ( arrow_or_assign )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:460:4: bracket_pattern ( ( NL )? arrow_or_assign ( NL )? bracket_pattern )?
            {
            pushFollow(FOLLOW_bracket_pattern_in_mselem_pattern2276);
            bracket_pattern85=bracket_pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern85.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:460:20: ( ( NL )? arrow_or_assign ( NL )? bracket_pattern )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==NL) ) {
                int LA40_1 = input.LA(2);

                if ( (LA40_1==ASSIGN||(LA40_1>=A_ARROW && LA40_1<=U_ARROW)) ) {
                    alt40=1;
                }
            }
            else if ( (LA40_0==ASSIGN||(LA40_0>=A_ARROW && LA40_0<=U_ARROW)) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:460:21: ( NL )? arrow_or_assign ( NL )? bracket_pattern
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:460:21: ( NL )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==NL) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:460:21: NL
                            {
                            NL86=(Token)match(input,NL,FOLLOW_NL_in_mselem_pattern2279); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL86);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_arrow_or_assign_in_mselem_pattern2282);
                    arrow_or_assign87=arrow_or_assign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrow_or_assign.add(arrow_or_assign87.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:460:41: ( NL )?
                    int alt39=2;
                    int LA39_0 = input.LA(1);

                    if ( (LA39_0==NL) ) {
                        alt39=1;
                    }
                    switch (alt39) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:460:41: NL
                            {
                            NL88=(Token)match(input,NL,FOLLOW_NL_in_mselem_pattern2284); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL88);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_bracket_pattern_in_mselem_pattern2287);
                    bracket_pattern89=bracket_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern89.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: bracket_pattern, arrow_or_assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 461:3: -> ^( NIL_TOKEN ^( NIL_TOKEN ( bracket_pattern )* ) ( arrow_or_assign )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:461:6: ^( NIL_TOKEN ^( NIL_TOKEN ( bracket_pattern )* ) ( arrow_or_assign )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:461:18: ^( NIL_TOKEN ( bracket_pattern )* )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:461:30: ( bracket_pattern )*
                while ( stream_bracket_pattern.hasNext() ) {
                    adaptor.addChild(root_2, stream_bracket_pattern.nextTree());

                }
                stream_bracket_pattern.reset();

                adaptor.addChild(root_1, root_2);
                }
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:461:48: ( arrow_or_assign )*
                while ( stream_arrow_or_assign.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrow_or_assign.nextTree());

                }
                stream_arrow_or_assign.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mselem_pattern"

    public static class primitive_pattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitive_pattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:463:1: primitive_pattern : ( Id | '_' -> ANY | String | Num | L_true | L_false | L_nil | '-' ( NL )? Num -> ^( UMINUS Num ) | '[' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )? ']' -> ^( SQUARE_LIST ( bracket_pattern )* ) | '(' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) ) | '{' ( NL )? ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) );
    public final babel17Parser.primitive_pattern_return primitive_pattern() throws RecognitionException {
        babel17Parser.primitive_pattern_return retval = new babel17Parser.primitive_pattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id90=null;
        Token char_literal91=null;
        Token String92=null;
        Token Num93=null;
        Token L_true94=null;
        Token L_false95=null;
        Token L_nil96=null;
        Token char_literal97=null;
        Token NL98=null;
        Token Num99=null;
        Token char_literal100=null;
        Token NL101=null;
        Token NL103=null;
        Token COMMA104=null;
        Token NL105=null;
        Token NL107=null;
        Token char_literal108=null;
        Token char_literal109=null;
        Token NL110=null;
        Token NL112=null;
        Token COMMA113=null;
        Token NL114=null;
        Token NL116=null;
        Token COMMA117=null;
        Token NL118=null;
        Token char_literal119=null;
        Token char_literal120=null;
        Token NL121=null;
        Token NL123=null;
        Token COMMA124=null;
        Token NL125=null;
        Token NL127=null;
        Token char_literal128=null;
        Token char_literal129=null;
        Token NL130=null;
        Token NL132=null;
        Token char_literal133=null;
        babel17Parser.bracket_pattern_return bracket_pattern102 = null;

        babel17Parser.bracket_pattern_return bracket_pattern106 = null;

        babel17Parser.bracket_pattern_return bracket_pattern111 = null;

        babel17Parser.bracket_pattern_return bracket_pattern115 = null;

        babel17Parser.mselem_pattern_return mselem_pattern122 = null;

        babel17Parser.mselem_pattern_return mselem_pattern126 = null;

        babel17Parser.token_ARROW_return token_ARROW131 = null;


        CommonTree Id90_tree=null;
        CommonTree char_literal91_tree=null;
        CommonTree String92_tree=null;
        CommonTree Num93_tree=null;
        CommonTree L_true94_tree=null;
        CommonTree L_false95_tree=null;
        CommonTree L_nil96_tree=null;
        CommonTree char_literal97_tree=null;
        CommonTree NL98_tree=null;
        CommonTree Num99_tree=null;
        CommonTree char_literal100_tree=null;
        CommonTree NL101_tree=null;
        CommonTree NL103_tree=null;
        CommonTree COMMA104_tree=null;
        CommonTree NL105_tree=null;
        CommonTree NL107_tree=null;
        CommonTree char_literal108_tree=null;
        CommonTree char_literal109_tree=null;
        CommonTree NL110_tree=null;
        CommonTree NL112_tree=null;
        CommonTree COMMA113_tree=null;
        CommonTree NL114_tree=null;
        CommonTree NL116_tree=null;
        CommonTree COMMA117_tree=null;
        CommonTree NL118_tree=null;
        CommonTree char_literal119_tree=null;
        CommonTree char_literal120_tree=null;
        CommonTree NL121_tree=null;
        CommonTree NL123_tree=null;
        CommonTree COMMA124_tree=null;
        CommonTree NL125_tree=null;
        CommonTree NL127_tree=null;
        CommonTree char_literal128_tree=null;
        CommonTree char_literal129_tree=null;
        CommonTree NL130_tree=null;
        CommonTree NL132_tree=null;
        CommonTree char_literal133_tree=null;
        RewriteRuleTokenStream stream_CURLY_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_OPEN");
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_CURLY_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_UNDERSCORE=new RewriteRuleTokenStream(adaptor,"token UNDERSCORE");
        RewriteRuleTokenStream stream_Num=new RewriteRuleTokenStream(adaptor,"token Num");
        RewriteRuleTokenStream stream_SQUARE_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token SQUARE_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_SQUARE_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token SQUARE_BRACKET_OPEN");
        RewriteRuleSubtreeStream stream_mselem_pattern=new RewriteRuleSubtreeStream(adaptor,"rule mselem_pattern");
        RewriteRuleSubtreeStream stream_token_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_ARROW");
        RewriteRuleSubtreeStream stream_bracket_pattern=new RewriteRuleSubtreeStream(adaptor,"rule bracket_pattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:464:2: ( Id | '_' -> ANY | String | Num | L_true | L_false | L_nil | '-' ( NL )? Num -> ^( UMINUS Num ) | '[' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )? ']' -> ^( SQUARE_LIST ( bracket_pattern )* ) | '(' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) ) | '{' ( NL )? ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) )
            int alt64=12;
            alt64 = dfa64.predict(input);
            switch (alt64) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:464:4: Id
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Id90=(Token)match(input,Id,FOLLOW_Id_in_primitive_pattern2316); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Id90_tree = (CommonTree)adaptor.create(Id90);
                    adaptor.addChild(root_0, Id90_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:465:4: '_'
                    {
                    char_literal91=(Token)match(input,UNDERSCORE,FOLLOW_UNDERSCORE_in_primitive_pattern2321); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNDERSCORE.add(char_literal91);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 465:8: -> ANY
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(ANY, "ANY"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:466:4: String
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    String92=(Token)match(input,String,FOLLOW_String_in_primitive_pattern2330); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    String92_tree = (CommonTree)adaptor.create(String92);
                    adaptor.addChild(root_0, String92_tree);
                    }

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:467:4: Num
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Num93=(Token)match(input,Num,FOLLOW_Num_in_primitive_pattern2335); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Num93_tree = (CommonTree)adaptor.create(Num93);
                    adaptor.addChild(root_0, Num93_tree);
                    }

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:468:4: L_true
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_true94=(Token)match(input,L_true,FOLLOW_L_true_in_primitive_pattern2340); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_true94_tree = (CommonTree)adaptor.create(L_true94);
                    adaptor.addChild(root_0, L_true94_tree);
                    }

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:469:4: L_false
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_false95=(Token)match(input,L_false,FOLLOW_L_false_in_primitive_pattern2345); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_false95_tree = (CommonTree)adaptor.create(L_false95);
                    adaptor.addChild(root_0, L_false95_tree);
                    }

                    }
                    break;
                case 7 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:470:4: L_nil
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_nil96=(Token)match(input,L_nil,FOLLOW_L_nil_in_primitive_pattern2350); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_nil96_tree = (CommonTree)adaptor.create(L_nil96);
                    adaptor.addChild(root_0, L_nil96_tree);
                    }

                    }
                    break;
                case 8 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:4: '-' ( NL )? Num
                    {
                    char_literal97=(Token)match(input,MINUS,FOLLOW_MINUS_in_primitive_pattern2358); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(char_literal97);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:8: ( NL )?
                    int alt41=2;
                    int LA41_0 = input.LA(1);

                    if ( (LA41_0==NL) ) {
                        alt41=1;
                    }
                    switch (alt41) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:8: NL
                            {
                            NL98=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2360); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL98);


                            }
                            break;

                    }

                    Num99=(Token)match(input,Num,FOLLOW_Num_in_primitive_pattern2363); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Num.add(Num99);



                    // AST REWRITE
                    // elements: Num
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 473:16: -> ^( UMINUS Num )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:19: ^( UMINUS Num )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UMINUS, "UMINUS"), root_1);

                        adaptor.addChild(root_1, stream_Num.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:474:4: '[' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )? ']'
                    {
                    char_literal100=(Token)match(input,SQUARE_BRACKET_OPEN,FOLLOW_SQUARE_BRACKET_OPEN_in_primitive_pattern2376); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_OPEN.add(char_literal100);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:474:9: ( NL )?
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==NL) ) {
                        alt42=1;
                    }
                    switch (alt42) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:474:9: NL
                            {
                            NL101=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2379); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL101);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:474:13: ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )?
                    int alt47=2;
                    int LA47_0 = input.LA(1);

                    if ( (LA47_0==L_begin||(LA47_0>=L_obj && LA47_0<=L_if)||(LA47_0>=L_while && LA47_0<=L_for)||LA47_0==L_match||LA47_0==L_val||LA47_0==L_exception||LA47_0==L_try||(LA47_0>=L_concurrent && LA47_0<=L_lazy)||(LA47_0>=L_true && LA47_0<=L_nil)||LA47_0==L_typeof||LA47_0==L_not||(LA47_0>=L_root && LA47_0<=L_native)||LA47_0==MINUS||(LA47_0>=A_ELLIPSIS && LA47_0<=U_ELLIPSIS)||LA47_0==L_force||(LA47_0>=Constr && LA47_0<=Id)||(LA47_0>=Float && LA47_0<=Num)||(LA47_0>=String && LA47_0<=ROUND_BRACKET_OPEN)||LA47_0==SQUARE_BRACKET_OPEN||LA47_0==CURLY_BRACKET_OPEN||LA47_0==UNDERSCORE) ) {
                        alt47=1;
                    }
                    switch (alt47) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:474:14: bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )*
                            {
                            pushFollow(FOLLOW_bracket_pattern_in_primitive_pattern2383);
                            bracket_pattern102=bracket_pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern102.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:474:30: ( NL )?
                            int alt43=2;
                            int LA43_0 = input.LA(1);

                            if ( (LA43_0==NL) ) {
                                alt43=1;
                            }
                            switch (alt43) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:474:30: NL
                                    {
                                    NL103=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2385); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL103);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:474:34: ( COMMA ( NL )? bracket_pattern ( NL )? )*
                            loop46:
                            do {
                                int alt46=2;
                                int LA46_0 = input.LA(1);

                                if ( (LA46_0==COMMA) ) {
                                    alt46=1;
                                }


                                switch (alt46) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:474:36: COMMA ( NL )? bracket_pattern ( NL )?
                            	    {
                            	    COMMA104=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitive_pattern2390); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA104);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:474:42: ( NL )?
                            	    int alt44=2;
                            	    int LA44_0 = input.LA(1);

                            	    if ( (LA44_0==NL) ) {
                            	        alt44=1;
                            	    }
                            	    switch (alt44) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:474:42: NL
                            	            {
                            	            NL105=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2392); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL105);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_bracket_pattern_in_primitive_pattern2395);
                            	    bracket_pattern106=bracket_pattern();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern106.getTree());
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:474:62: ( NL )?
                            	    int alt45=2;
                            	    int LA45_0 = input.LA(1);

                            	    if ( (LA45_0==NL) ) {
                            	        alt45=1;
                            	    }
                            	    switch (alt45) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:474:62: NL
                            	            {
                            	            NL107=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2397); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL107);


                            	            }
                            	            break;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop46;
                                }
                            } while (true);


                            }
                            break;

                    }

                    char_literal108=(Token)match(input,SQUARE_BRACKET_CLOSE,FOLLOW_SQUARE_BRACKET_CLOSE_in_primitive_pattern2405); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_CLOSE.add(char_literal108);



                    // AST REWRITE
                    // elements: bracket_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 475:6: -> ^( SQUARE_LIST ( bracket_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:9: ^( SQUARE_LIST ( bracket_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SQUARE_LIST, "SQUARE_LIST"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:23: ( bracket_pattern )*
                        while ( stream_bracket_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_bracket_pattern.nextTree());

                        }
                        stream_bracket_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:4: '(' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )? ')'
                    {
                    char_literal109=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_primitive_pattern2425); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal109);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:9: ( NL )?
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==NL) ) {
                        alt48=1;
                    }
                    switch (alt48) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:9: NL
                            {
                            NL110=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2428); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL110);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:13: ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )?
                    int alt55=2;
                    int LA55_0 = input.LA(1);

                    if ( (LA55_0==L_begin||(LA55_0>=L_obj && LA55_0<=L_if)||(LA55_0>=L_while && LA55_0<=L_for)||LA55_0==L_match||LA55_0==L_val||LA55_0==L_exception||LA55_0==L_try||(LA55_0>=L_concurrent && LA55_0<=L_lazy)||(LA55_0>=L_true && LA55_0<=L_nil)||LA55_0==L_typeof||LA55_0==L_not||(LA55_0>=L_root && LA55_0<=L_native)||LA55_0==MINUS||(LA55_0>=A_ELLIPSIS && LA55_0<=U_ELLIPSIS)||LA55_0==L_force||(LA55_0>=Constr && LA55_0<=Id)||(LA55_0>=Float && LA55_0<=Num)||(LA55_0>=String && LA55_0<=ROUND_BRACKET_OPEN)||LA55_0==SQUARE_BRACKET_OPEN||LA55_0==CURLY_BRACKET_OPEN||LA55_0==UNDERSCORE) ) {
                        alt55=1;
                    }
                    switch (alt55) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:14: bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )?
                            {
                            pushFollow(FOLLOW_bracket_pattern_in_primitive_pattern2432);
                            bracket_pattern111=bracket_pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern111.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:30: ( NL )?
                            int alt49=2;
                            int LA49_0 = input.LA(1);

                            if ( (LA49_0==NL) ) {
                                alt49=1;
                            }
                            switch (alt49) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:30: NL
                                    {
                                    NL112=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2434); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL112);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:34: ( COMMA ( NL )? bracket_pattern ( NL )? )*
                            loop52:
                            do {
                                int alt52=2;
                                int LA52_0 = input.LA(1);

                                if ( (LA52_0==COMMA) ) {
                                    int LA52_1 = input.LA(2);

                                    if ( (LA52_1==NL) ) {
                                        int LA52_3 = input.LA(3);

                                        if ( (LA52_3==L_begin||(LA52_3>=L_obj && LA52_3<=L_if)||(LA52_3>=L_while && LA52_3<=L_for)||LA52_3==L_match||LA52_3==L_val||LA52_3==L_exception||LA52_3==L_try||(LA52_3>=L_concurrent && LA52_3<=L_lazy)||(LA52_3>=L_true && LA52_3<=L_nil)||LA52_3==L_typeof||LA52_3==L_not||(LA52_3>=L_root && LA52_3<=L_native)||LA52_3==MINUS||(LA52_3>=A_ELLIPSIS && LA52_3<=U_ELLIPSIS)||LA52_3==L_force||(LA52_3>=Constr && LA52_3<=Id)||(LA52_3>=Float && LA52_3<=Num)||(LA52_3>=String && LA52_3<=ROUND_BRACKET_OPEN)||LA52_3==SQUARE_BRACKET_OPEN||LA52_3==CURLY_BRACKET_OPEN||LA52_3==UNDERSCORE) ) {
                                            alt52=1;
                                        }


                                    }
                                    else if ( (LA52_1==L_begin||(LA52_1>=L_obj && LA52_1<=L_if)||(LA52_1>=L_while && LA52_1<=L_for)||LA52_1==L_match||LA52_1==L_val||LA52_1==L_exception||LA52_1==L_try||(LA52_1>=L_concurrent && LA52_1<=L_lazy)||(LA52_1>=L_true && LA52_1<=L_nil)||LA52_1==L_typeof||LA52_1==L_not||(LA52_1>=L_root && LA52_1<=L_native)||LA52_1==MINUS||(LA52_1>=A_ELLIPSIS && LA52_1<=U_ELLIPSIS)||LA52_1==L_force||(LA52_1>=Constr && LA52_1<=Id)||(LA52_1>=Float && LA52_1<=Num)||(LA52_1>=String && LA52_1<=ROUND_BRACKET_OPEN)||LA52_1==SQUARE_BRACKET_OPEN||LA52_1==CURLY_BRACKET_OPEN||LA52_1==UNDERSCORE) ) {
                                        alt52=1;
                                    }


                                }


                                switch (alt52) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:36: COMMA ( NL )? bracket_pattern ( NL )?
                            	    {
                            	    COMMA113=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitive_pattern2439); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA113);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:43: ( NL )?
                            	    int alt50=2;
                            	    int LA50_0 = input.LA(1);

                            	    if ( (LA50_0==NL) ) {
                            	        alt50=1;
                            	    }
                            	    switch (alt50) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:43: NL
                            	            {
                            	            NL114=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2442); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL114);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_bracket_pattern_in_primitive_pattern2445);
                            	    bracket_pattern115=bracket_pattern();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern115.getTree());
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:63: ( NL )?
                            	    int alt51=2;
                            	    int LA51_0 = input.LA(1);

                            	    if ( (LA51_0==NL) ) {
                            	        alt51=1;
                            	    }
                            	    switch (alt51) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:63: NL
                            	            {
                            	            NL116=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2447); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL116);


                            	            }
                            	            break;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop52;
                                }
                            } while (true);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:69: ( COMMA ( NL )? )?
                            int alt54=2;
                            int LA54_0 = input.LA(1);

                            if ( (LA54_0==COMMA) ) {
                                alt54=1;
                            }
                            switch (alt54) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:70: COMMA ( NL )?
                                    {
                                    COMMA117=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitive_pattern2453); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA117);

                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:76: ( NL )?
                                    int alt53=2;
                                    int LA53_0 = input.LA(1);

                                    if ( (LA53_0==NL) ) {
                                        alt53=1;
                                    }
                                    switch (alt53) {
                                        case 1 :
                                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:76: NL
                                            {
                                            NL118=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2455); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_NL.add(NL118);


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    char_literal119=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_primitive_pattern2462); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal119);



                    // AST REWRITE
                    // elements: COMMA, bracket_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 477:5: -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:477:8: ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROUND_LIST, "ROUND_LIST"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:477:21: ^( NIL_TOKEN ( COMMA )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:477:33: ( COMMA )*
                        while ( stream_COMMA.hasNext() ) {
                            adaptor.addChild(root_2, stream_COMMA.nextNode());

                        }
                        stream_COMMA.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:477:41: ^( NIL_TOKEN ( bracket_pattern )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:477:53: ( bracket_pattern )*
                        while ( stream_bracket_pattern.hasNext() ) {
                            adaptor.addChild(root_2, stream_bracket_pattern.nextTree());

                        }
                        stream_bracket_pattern.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:4: '{' ( NL )? ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )? '}'
                    {
                    char_literal120=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_primitive_pattern2494); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal120);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:9: ( NL )?
                    int alt56=2;
                    int LA56_0 = input.LA(1);

                    if ( (LA56_0==NL) ) {
                        alt56=1;
                    }
                    switch (alt56) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:9: NL
                            {
                            NL121=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2497); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL121);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:13: ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )?
                    int alt61=2;
                    int LA61_0 = input.LA(1);

                    if ( (LA61_0==L_begin||(LA61_0>=L_obj && LA61_0<=L_if)||(LA61_0>=L_while && LA61_0<=L_for)||LA61_0==L_match||LA61_0==L_val||LA61_0==L_exception||LA61_0==L_try||(LA61_0>=L_concurrent && LA61_0<=L_lazy)||(LA61_0>=L_true && LA61_0<=L_nil)||LA61_0==L_typeof||LA61_0==L_not||(LA61_0>=L_root && LA61_0<=L_native)||LA61_0==MINUS||(LA61_0>=A_ELLIPSIS && LA61_0<=U_ELLIPSIS)||LA61_0==L_force||(LA61_0>=Constr && LA61_0<=Id)||(LA61_0>=Float && LA61_0<=Num)||(LA61_0>=String && LA61_0<=ROUND_BRACKET_OPEN)||LA61_0==SQUARE_BRACKET_OPEN||LA61_0==CURLY_BRACKET_OPEN||LA61_0==UNDERSCORE) ) {
                        alt61=1;
                    }
                    switch (alt61) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:14: mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )*
                            {
                            pushFollow(FOLLOW_mselem_pattern_in_primitive_pattern2501);
                            mselem_pattern122=mselem_pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_mselem_pattern.add(mselem_pattern122.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:29: ( NL )?
                            int alt57=2;
                            int LA57_0 = input.LA(1);

                            if ( (LA57_0==NL) ) {
                                alt57=1;
                            }
                            switch (alt57) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:29: NL
                                    {
                                    NL123=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2503); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL123);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:33: ( COMMA ( NL )? mselem_pattern ( NL )? )*
                            loop60:
                            do {
                                int alt60=2;
                                int LA60_0 = input.LA(1);

                                if ( (LA60_0==COMMA) ) {
                                    alt60=1;
                                }


                                switch (alt60) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:35: COMMA ( NL )? mselem_pattern ( NL )?
                            	    {
                            	    COMMA124=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitive_pattern2508); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA124);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:42: ( NL )?
                            	    int alt58=2;
                            	    int LA58_0 = input.LA(1);

                            	    if ( (LA58_0==NL) ) {
                            	        alt58=1;
                            	    }
                            	    switch (alt58) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:42: NL
                            	            {
                            	            NL125=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2511); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL125);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_mselem_pattern_in_primitive_pattern2514);
                            	    mselem_pattern126=mselem_pattern();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_mselem_pattern.add(mselem_pattern126.getTree());
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:61: ( NL )?
                            	    int alt59=2;
                            	    int LA59_0 = input.LA(1);

                            	    if ( (LA59_0==NL) ) {
                            	        alt59=1;
                            	    }
                            	    switch (alt59) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:61: NL
                            	            {
                            	            NL127=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2516); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL127);


                            	            }
                            	            break;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop60;
                                }
                            } while (true);


                            }
                            break;

                    }

                    char_literal128=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_primitive_pattern2524); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal128);



                    // AST REWRITE
                    // elements: mselem_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 479:5: -> ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:479:8: ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MAP_OR_SET_OR_OBJ, "MAP_OR_SET_OR_OBJ"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:479:28: ( mselem_pattern )*
                        while ( stream_mselem_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_mselem_pattern.nextTree());

                        }
                        stream_mselem_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:4: '{' ( NL )? token_ARROW ( NL )? '}'
                    {
                    char_literal129=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_primitive_pattern2542); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal129);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:8: ( NL )?
                    int alt62=2;
                    int LA62_0 = input.LA(1);

                    if ( (LA62_0==NL) ) {
                        alt62=1;
                    }
                    switch (alt62) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:8: NL
                            {
                            NL130=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2544); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL130);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_token_ARROW_in_primitive_pattern2547);
                    token_ARROW131=token_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_ARROW.add(token_ARROW131.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:24: ( NL )?
                    int alt63=2;
                    int LA63_0 = input.LA(1);

                    if ( (LA63_0==NL) ) {
                        alt63=1;
                    }
                    switch (alt63) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:24: NL
                            {
                            NL132=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2549); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL132);


                            }
                            break;

                    }

                    char_literal133=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_primitive_pattern2552); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal133);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 480:32: -> ^( EMPTY_MAP )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:480:35: ^( EMPTY_MAP )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EMPTY_MAP, "EMPTY_MAP"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "primitive_pattern"

    public static class sep_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sep"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:483:1: sep : ( NL | SC )+ ;
    public final babel17Parser.sep_return sep() throws RecognitionException {
        babel17Parser.sep_return retval = new babel17Parser.sep_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set134=null;

        CommonTree set134_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:483:5: ( ( NL | SC )+ )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:483:7: ( NL | SC )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:483:7: ( NL | SC )+
            int cnt65=0;
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==SC||LA65_0==NL) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            	    {
            	    set134=(Token)input.LT(1);
            	    if ( input.LA(1)==SC||input.LA(1)==NL ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set134));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt65 >= 1 ) break loop65;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(65, input);
                        throw eee;
                }
                cnt65++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sep"

    public static class block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:485:1: block : ( ( sep )? statement ( sep statement )* ( sep )? -> ^( BLOCK ( statement )* ) | ( sep )? -> ^( BLOCK ) );
    public final babel17Parser.block_return block() throws RecognitionException {
        babel17Parser.block_return retval = new babel17Parser.block_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.sep_return sep135 = null;

        babel17Parser.statement_return statement136 = null;

        babel17Parser.sep_return sep137 = null;

        babel17Parser.statement_return statement138 = null;

        babel17Parser.sep_return sep139 = null;

        babel17Parser.sep_return sep140 = null;


        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_sep=new RewriteRuleSubtreeStream(adaptor,"rule sep");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:485:8: ( ( sep )? statement ( sep statement )* ( sep )? -> ^( BLOCK ( statement )* ) | ( sep )? -> ^( BLOCK ) )
            int alt70=2;
            alt70 = dfa70.predict(input);
            switch (alt70) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:485:10: ( sep )? statement ( sep statement )* ( sep )?
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:485:10: ( sep )?
                    int alt66=2;
                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==SC||LA66_0==NL) ) {
                        alt66=1;
                    }
                    switch (alt66) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:485:10: sep
                            {
                            pushFollow(FOLLOW_sep_in_block2584);
                            sep135=sep();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_sep.add(sep135.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_statement_in_block2587);
                    statement136=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement136.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:485:25: ( sep statement )*
                    loop67:
                    do {
                        int alt67=2;
                        alt67 = dfa67.predict(input);
                        switch (alt67) {
                    	case 1 :
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:485:26: sep statement
                    	    {
                    	    pushFollow(FOLLOW_sep_in_block2590);
                    	    sep137=sep();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_sep.add(sep137.getTree());
                    	    pushFollow(FOLLOW_statement_in_block2592);
                    	    statement138=statement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_statement.add(statement138.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop67;
                        }
                    } while (true);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:485:42: ( sep )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==SC||LA68_0==NL) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:485:42: sep
                            {
                            pushFollow(FOLLOW_sep_in_block2596);
                            sep139=sep();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_sep.add(sep139.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 485:47: -> ^( BLOCK ( statement )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:485:50: ^( BLOCK ( statement )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK, "BLOCK"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:485:58: ( statement )*
                        while ( stream_statement.hasNext() ) {
                            adaptor.addChild(root_1, stream_statement.nextTree());

                        }
                        stream_statement.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:486:4: ( sep )?
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:486:4: ( sep )?
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==SC||LA69_0==NL) ) {
                        alt69=1;
                    }
                    switch (alt69) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:486:4: sep
                            {
                            pushFollow(FOLLOW_sep_in_block2612);
                            sep140=sep();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_sep.add(sep140.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 486:9: -> ^( BLOCK )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:486:12: ^( BLOCK )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK, "BLOCK"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class pure_block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pure_block"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:1: pure_block : statement ( sep statement )* -> ^( BLOCK ( statement )* ) ;
    public final babel17Parser.pure_block_return pure_block() throws RecognitionException {
        babel17Parser.pure_block_return retval = new babel17Parser.pure_block_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.statement_return statement141 = null;

        babel17Parser.sep_return sep142 = null;

        babel17Parser.statement_return statement143 = null;


        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_sep=new RewriteRuleSubtreeStream(adaptor,"rule sep");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:489:2: ( statement ( sep statement )* -> ^( BLOCK ( statement )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:489:4: statement ( sep statement )*
            {
            pushFollow(FOLLOW_statement_in_pure_block2629);
            statement141=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_statement.add(statement141.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:489:14: ( sep statement )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==NL) ) {
                    int LA71_1 = input.LA(2);

                    if ( (LA71_1==L_begin||(LA71_1>=L_obj && LA71_1<=L_if)||(LA71_1>=L_while && LA71_1<=L_for)||(LA71_1>=L_yield && LA71_1<=L_match)||(LA71_1>=L_val && LA71_1<=L_def)||LA71_1==L_exception||LA71_1==L_try||(LA71_1>=L_concurrent && LA71_1<=L_nil)||(LA71_1>=L_module && LA71_1<=L_import)||LA71_1==L_not||(LA71_1>=L_root && LA71_1<=L_native)||LA71_1==SC||LA71_1==MINUS||(LA71_1>=A_ELLIPSIS && LA71_1<=U_ELLIPSIS)||LA71_1==L_force||(LA71_1>=NL && LA71_1<=Id)||(LA71_1>=Float && LA71_1<=Num)||(LA71_1>=String && LA71_1<=ROUND_BRACKET_OPEN)||LA71_1==SQUARE_BRACKET_OPEN||LA71_1==CURLY_BRACKET_OPEN||LA71_1==UNDERSCORE||(LA71_1>=PRAGMA_LOG && LA71_1<=PRAGMA_CATCH)) ) {
                        alt71=1;
                    }


                }
                else if ( (LA71_0==SC) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:489:15: sep statement
            	    {
            	    pushFollow(FOLLOW_sep_in_pure_block2632);
            	    sep142=sep();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sep.add(sep142.getTree());
            	    pushFollow(FOLLOW_statement_in_pure_block2634);
            	    statement143=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_statement.add(statement143.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);



            // AST REWRITE
            // elements: statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 489:31: -> ^( BLOCK ( statement )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:489:34: ^( BLOCK ( statement )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK, "BLOCK"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:489:42: ( statement )*
                while ( stream_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_statement.nextTree());

                }
                stream_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pure_block"

    public static class statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:491:1: statement : ( st_typedef | st_val | st_def | st_yield | st_memoize | st_private | st_module | st_import | expr_or_assign | PRAGMA_PRINT ( NL )? expr -> ^( PRAGMA_PRINT expr ) | PRAGMA_LOG ( NL )? expr -> ^( PRAGMA_LOG expr ) | PRAGMA_PROFILE ( NL )? expr -> ^( PRAGMA_PROFILE expr ) | PRAGMA_ASSERT ( NL )? expr -> ^( PRAGMA_ASSERT expr ) | PRAGMA_CATCH ( NL )? casepattern ( NL )? L_try ( NL )? COLON ( NL )? expr -> ^( PRAGMA_CATCH expr casepattern ) );
    public final babel17Parser.statement_return statement() throws RecognitionException {
        babel17Parser.statement_return retval = new babel17Parser.statement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PRAGMA_PRINT153=null;
        Token NL154=null;
        Token PRAGMA_LOG156=null;
        Token NL157=null;
        Token PRAGMA_PROFILE159=null;
        Token NL160=null;
        Token PRAGMA_ASSERT162=null;
        Token NL163=null;
        Token PRAGMA_CATCH165=null;
        Token NL166=null;
        Token NL168=null;
        Token L_try169=null;
        Token NL170=null;
        Token COLON171=null;
        Token NL172=null;
        babel17Parser.st_typedef_return st_typedef144 = null;

        babel17Parser.st_val_return st_val145 = null;

        babel17Parser.st_def_return st_def146 = null;

        babel17Parser.st_yield_return st_yield147 = null;

        babel17Parser.st_memoize_return st_memoize148 = null;

        babel17Parser.st_private_return st_private149 = null;

        babel17Parser.st_module_return st_module150 = null;

        babel17Parser.st_import_return st_import151 = null;

        babel17Parser.expr_or_assign_return expr_or_assign152 = null;

        babel17Parser.expr_return expr155 = null;

        babel17Parser.expr_return expr158 = null;

        babel17Parser.expr_return expr161 = null;

        babel17Parser.expr_return expr164 = null;

        babel17Parser.casepattern_return casepattern167 = null;

        babel17Parser.expr_return expr173 = null;


        CommonTree PRAGMA_PRINT153_tree=null;
        CommonTree NL154_tree=null;
        CommonTree PRAGMA_LOG156_tree=null;
        CommonTree NL157_tree=null;
        CommonTree PRAGMA_PROFILE159_tree=null;
        CommonTree NL160_tree=null;
        CommonTree PRAGMA_ASSERT162_tree=null;
        CommonTree NL163_tree=null;
        CommonTree PRAGMA_CATCH165_tree=null;
        CommonTree NL166_tree=null;
        CommonTree NL168_tree=null;
        CommonTree L_try169_tree=null;
        CommonTree NL170_tree=null;
        CommonTree COLON171_tree=null;
        CommonTree NL172_tree=null;
        RewriteRuleTokenStream stream_PRAGMA_CATCH=new RewriteRuleTokenStream(adaptor,"token PRAGMA_CATCH");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_PRAGMA_PROFILE=new RewriteRuleTokenStream(adaptor,"token PRAGMA_PROFILE");
        RewriteRuleTokenStream stream_PRAGMA_ASSERT=new RewriteRuleTokenStream(adaptor,"token PRAGMA_ASSERT");
        RewriteRuleTokenStream stream_PRAGMA_LOG=new RewriteRuleTokenStream(adaptor,"token PRAGMA_LOG");
        RewriteRuleTokenStream stream_L_try=new RewriteRuleTokenStream(adaptor,"token L_try");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_PRAGMA_PRINT=new RewriteRuleTokenStream(adaptor,"token PRAGMA_PRINT");
        RewriteRuleSubtreeStream stream_casepattern=new RewriteRuleSubtreeStream(adaptor,"rule casepattern");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:492:2: ( st_typedef | st_val | st_def | st_yield | st_memoize | st_private | st_module | st_import | expr_or_assign | PRAGMA_PRINT ( NL )? expr -> ^( PRAGMA_PRINT expr ) | PRAGMA_LOG ( NL )? expr -> ^( PRAGMA_LOG expr ) | PRAGMA_PROFILE ( NL )? expr -> ^( PRAGMA_PROFILE expr ) | PRAGMA_ASSERT ( NL )? expr -> ^( PRAGMA_ASSERT expr ) | PRAGMA_CATCH ( NL )? casepattern ( NL )? L_try ( NL )? COLON ( NL )? expr -> ^( PRAGMA_CATCH expr casepattern ) )
            int alt80=14;
            alt80 = dfa80.predict(input);
            switch (alt80) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:492:4: st_typedef
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_typedef_in_statement2655);
                    st_typedef144=st_typedef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_typedef144.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:493:10: st_val
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_val_in_statement2666);
                    st_val145=st_val();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_val145.getTree());

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:494:4: st_def
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_def_in_statement2671);
                    st_def146=st_def();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_def146.getTree());

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:495:4: st_yield
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_yield_in_statement2676);
                    st_yield147=st_yield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_yield147.getTree());

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:496:4: st_memoize
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_memoize_in_statement2681);
                    st_memoize148=st_memoize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_memoize148.getTree());

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:497:4: st_private
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_private_in_statement2686);
                    st_private149=st_private();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_private149.getTree());

                    }
                    break;
                case 7 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:498:4: st_module
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_module_in_statement2691);
                    st_module150=st_module();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_module150.getTree());

                    }
                    break;
                case 8 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:499:4: st_import
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_import_in_statement2696);
                    st_import151=st_import();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_import151.getTree());

                    }
                    break;
                case 9 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:500:4: expr_or_assign
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expr_or_assign_in_statement2701);
                    expr_or_assign152=expr_or_assign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_or_assign152.getTree());

                    }
                    break;
                case 10 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:501:5: PRAGMA_PRINT ( NL )? expr
                    {
                    PRAGMA_PRINT153=(Token)match(input,PRAGMA_PRINT,FOLLOW_PRAGMA_PRINT_in_statement2707); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRAGMA_PRINT.add(PRAGMA_PRINT153);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:501:18: ( NL )?
                    int alt72=2;
                    int LA72_0 = input.LA(1);

                    if ( (LA72_0==NL) ) {
                        alt72=1;
                    }
                    switch (alt72) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:501:18: NL
                            {
                            NL154=(Token)match(input,NL,FOLLOW_NL_in_statement2709); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL154);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_statement2712);
                    expr155=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr155.getTree());


                    // AST REWRITE
                    // elements: PRAGMA_PRINT, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 501:27: -> ^( PRAGMA_PRINT expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:501:30: ^( PRAGMA_PRINT expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PRAGMA_PRINT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:502:5: PRAGMA_LOG ( NL )? expr
                    {
                    PRAGMA_LOG156=(Token)match(input,PRAGMA_LOG,FOLLOW_PRAGMA_LOG_in_statement2726); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRAGMA_LOG.add(PRAGMA_LOG156);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:502:16: ( NL )?
                    int alt73=2;
                    int LA73_0 = input.LA(1);

                    if ( (LA73_0==NL) ) {
                        alt73=1;
                    }
                    switch (alt73) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:502:16: NL
                            {
                            NL157=(Token)match(input,NL,FOLLOW_NL_in_statement2728); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL157);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_statement2731);
                    expr158=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr158.getTree());


                    // AST REWRITE
                    // elements: PRAGMA_LOG, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 502:25: -> ^( PRAGMA_LOG expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:502:28: ^( PRAGMA_LOG expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PRAGMA_LOG.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:503:5: PRAGMA_PROFILE ( NL )? expr
                    {
                    PRAGMA_PROFILE159=(Token)match(input,PRAGMA_PROFILE,FOLLOW_PRAGMA_PROFILE_in_statement2745); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRAGMA_PROFILE.add(PRAGMA_PROFILE159);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:503:20: ( NL )?
                    int alt74=2;
                    int LA74_0 = input.LA(1);

                    if ( (LA74_0==NL) ) {
                        alt74=1;
                    }
                    switch (alt74) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:503:20: NL
                            {
                            NL160=(Token)match(input,NL,FOLLOW_NL_in_statement2747); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL160);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_statement2750);
                    expr161=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr161.getTree());


                    // AST REWRITE
                    // elements: PRAGMA_PROFILE, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 503:29: -> ^( PRAGMA_PROFILE expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:503:32: ^( PRAGMA_PROFILE expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PRAGMA_PROFILE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:504:5: PRAGMA_ASSERT ( NL )? expr
                    {
                    PRAGMA_ASSERT162=(Token)match(input,PRAGMA_ASSERT,FOLLOW_PRAGMA_ASSERT_in_statement2764); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRAGMA_ASSERT.add(PRAGMA_ASSERT162);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:504:19: ( NL )?
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==NL) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:504:19: NL
                            {
                            NL163=(Token)match(input,NL,FOLLOW_NL_in_statement2766); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL163);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_statement2769);
                    expr164=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr164.getTree());


                    // AST REWRITE
                    // elements: expr, PRAGMA_ASSERT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 504:28: -> ^( PRAGMA_ASSERT expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:504:31: ^( PRAGMA_ASSERT expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PRAGMA_ASSERT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 14 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:505:4: PRAGMA_CATCH ( NL )? casepattern ( NL )? L_try ( NL )? COLON ( NL )? expr
                    {
                    PRAGMA_CATCH165=(Token)match(input,PRAGMA_CATCH,FOLLOW_PRAGMA_CATCH_in_statement2782); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRAGMA_CATCH.add(PRAGMA_CATCH165);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:505:17: ( NL )?
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==NL) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:505:17: NL
                            {
                            NL166=(Token)match(input,NL,FOLLOW_NL_in_statement2784); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL166);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_casepattern_in_statement2787);
                    casepattern167=casepattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_casepattern.add(casepattern167.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:505:33: ( NL )?
                    int alt77=2;
                    int LA77_0 = input.LA(1);

                    if ( (LA77_0==NL) ) {
                        alt77=1;
                    }
                    switch (alt77) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:505:33: NL
                            {
                            NL168=(Token)match(input,NL,FOLLOW_NL_in_statement2789); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL168);


                            }
                            break;

                    }

                    L_try169=(Token)match(input,L_try,FOLLOW_L_try_in_statement2792); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_try.add(L_try169);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:505:43: ( NL )?
                    int alt78=2;
                    int LA78_0 = input.LA(1);

                    if ( (LA78_0==NL) ) {
                        alt78=1;
                    }
                    switch (alt78) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:505:43: NL
                            {
                            NL170=(Token)match(input,NL,FOLLOW_NL_in_statement2794); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL170);


                            }
                            break;

                    }

                    COLON171=(Token)match(input,COLON,FOLLOW_COLON_in_statement2797); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON171);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:505:53: ( NL )?
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==NL) ) {
                        alt79=1;
                    }
                    switch (alt79) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:505:53: NL
                            {
                            NL172=(Token)match(input,NL,FOLLOW_NL_in_statement2799); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL172);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_statement2802);
                    expr173=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr173.getTree());


                    // AST REWRITE
                    // elements: casepattern, expr, PRAGMA_CATCH
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 505:62: -> ^( PRAGMA_CATCH expr casepattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:505:65: ^( PRAGMA_CATCH expr casepattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PRAGMA_CATCH.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());
                        adaptor.addChild(root_1, stream_casepattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class objelem_assign_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "objelem_assign"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:507:1: objelem_assign : Id PERIOD Id -> ^( OBJELEM_ASSIGN Id Id ) ;
    public final babel17Parser.objelem_assign_return objelem_assign() throws RecognitionException {
        babel17Parser.objelem_assign_return retval = new babel17Parser.objelem_assign_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id174=null;
        Token PERIOD175=null;
        Token Id176=null;

        CommonTree Id174_tree=null;
        CommonTree PERIOD175_tree=null;
        CommonTree Id176_tree=null;
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:2: ( Id PERIOD Id -> ^( OBJELEM_ASSIGN Id Id ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:4: Id PERIOD Id
            {
            Id174=(Token)match(input,Id,FOLLOW_Id_in_objelem_assign2822); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id174);

            PERIOD175=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_objelem_assign2824); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD175);

            Id176=(Token)match(input,Id,FOLLOW_Id_in_objelem_assign2826); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id176);



            // AST REWRITE
            // elements: Id, Id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 508:17: -> ^( OBJELEM_ASSIGN Id Id )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:20: ^( OBJELEM_ASSIGN Id Id )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJELEM_ASSIGN, "OBJELEM_ASSIGN"), root_1);

                adaptor.addChild(root_1, stream_Id.nextNode());
                adaptor.addChild(root_1, stream_Id.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "objelem_assign"

    public static class st_val_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_val"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:1: st_val : L_val ( NL )? ( pattern | objelem_assign ) ( NL )? '=' ( NL )? expr -> ^( VAL ( pattern )* ( objelem_assign )* expr ) ;
    public final babel17Parser.st_val_return st_val() throws RecognitionException {
        babel17Parser.st_val_return retval = new babel17Parser.st_val_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_val177=null;
        Token NL178=null;
        Token NL181=null;
        Token char_literal182=null;
        Token NL183=null;
        babel17Parser.pattern_return pattern179 = null;

        babel17Parser.objelem_assign_return objelem_assign180 = null;

        babel17Parser.expr_return expr184 = null;


        CommonTree L_val177_tree=null;
        CommonTree NL178_tree=null;
        CommonTree NL181_tree=null;
        CommonTree char_literal182_tree=null;
        CommonTree NL183_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_val=new RewriteRuleTokenStream(adaptor,"token L_val");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_objelem_assign=new RewriteRuleSubtreeStream(adaptor,"rule objelem_assign");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:8: ( L_val ( NL )? ( pattern | objelem_assign ) ( NL )? '=' ( NL )? expr -> ^( VAL ( pattern )* ( objelem_assign )* expr ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:10: L_val ( NL )? ( pattern | objelem_assign ) ( NL )? '=' ( NL )? expr
            {
            L_val177=(Token)match(input,L_val,FOLLOW_L_val_in_st_val2845); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_val.add(L_val177);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:16: ( NL )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==NL) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:16: NL
                    {
                    NL178=(Token)match(input,NL,FOLLOW_NL_in_st_val2847); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL178);


                    }
                    break;

            }

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:20: ( pattern | objelem_assign )
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==L_exception||(LA82_0>=L_true && LA82_0<=L_false)||LA82_0==L_nil||LA82_0==MINUS||(LA82_0>=A_ELLIPSIS && LA82_0<=U_ELLIPSIS)||LA82_0==Constr||LA82_0==Num||(LA82_0>=String && LA82_0<=ROUND_BRACKET_OPEN)||LA82_0==SQUARE_BRACKET_OPEN||LA82_0==CURLY_BRACKET_OPEN||LA82_0==UNDERSCORE) ) {
                alt82=1;
            }
            else if ( (LA82_0==Id) ) {
                int LA82_2 = input.LA(2);

                if ( (LA82_2==PERIOD) ) {
                    alt82=2;
                }
                else if ( (LA82_2==ASSIGN||(LA82_2>=A_DOUBLE_COLON && LA82_2<=U_DOUBLE_COLON)||LA82_2==NL) ) {
                    alt82=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 82, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;
            }
            switch (alt82) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:21: pattern
                    {
                    pushFollow(FOLLOW_pattern_in_st_val2851);
                    pattern179=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern179.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:31: objelem_assign
                    {
                    pushFollow(FOLLOW_objelem_assign_in_st_val2855);
                    objelem_assign180=objelem_assign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_objelem_assign.add(objelem_assign180.getTree());

                    }
                    break;

            }

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:47: ( NL )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==NL) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:47: NL
                    {
                    NL181=(Token)match(input,NL,FOLLOW_NL_in_st_val2858); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL181);


                    }
                    break;

            }

            char_literal182=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_st_val2861); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal182);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:55: ( NL )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==NL) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:55: NL
                    {
                    NL183=(Token)match(input,NL,FOLLOW_NL_in_st_val2863); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL183);


                    }
                    break;

            }

            pushFollow(FOLLOW_expr_in_st_val2866);
            expr184=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr184.getTree());


            // AST REWRITE
            // elements: expr, objelem_assign, pattern
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 510:64: -> ^( VAL ( pattern )* ( objelem_assign )* expr )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:67: ^( VAL ( pattern )* ( objelem_assign )* expr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAL, "VAL"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:73: ( pattern )*
                while ( stream_pattern.hasNext() ) {
                    adaptor.addChild(root_1, stream_pattern.nextTree());

                }
                stream_pattern.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:82: ( objelem_assign )*
                while ( stream_objelem_assign.hasNext() ) {
                    adaptor.addChild(root_1, stream_objelem_assign.nextTree());

                }
                stream_objelem_assign.reset();
                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_val"

    public static class st_def_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_def"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:1: st_def : ( L_def ( NL )? Id ( NL )? ( defpattern ( NL )? )? ( ':' ( NL )? typeid ( NL )? )? '=' ( NL )? expr -> ^( DEF Id ( typeid )? ( defpattern )? expr ) | L_def ( NL )? L_this ( NL )? ':' ( NL )? typeid ( NL )? '=' ( NL )? expr -> ^( CONVERSION typeid expr ) );
    public final babel17Parser.st_def_return st_def() throws RecognitionException {
        babel17Parser.st_def_return retval = new babel17Parser.st_def_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_def185=null;
        Token NL186=null;
        Token Id187=null;
        Token NL188=null;
        Token NL190=null;
        Token char_literal191=null;
        Token NL192=null;
        Token NL194=null;
        Token char_literal195=null;
        Token NL196=null;
        Token L_def198=null;
        Token NL199=null;
        Token L_this200=null;
        Token NL201=null;
        Token char_literal202=null;
        Token NL203=null;
        Token NL205=null;
        Token char_literal206=null;
        Token NL207=null;
        babel17Parser.defpattern_return defpattern189 = null;

        babel17Parser.typeid_return typeid193 = null;

        babel17Parser.expr_return expr197 = null;

        babel17Parser.typeid_return typeid204 = null;

        babel17Parser.expr_return expr208 = null;


        CommonTree L_def185_tree=null;
        CommonTree NL186_tree=null;
        CommonTree Id187_tree=null;
        CommonTree NL188_tree=null;
        CommonTree NL190_tree=null;
        CommonTree char_literal191_tree=null;
        CommonTree NL192_tree=null;
        CommonTree NL194_tree=null;
        CommonTree char_literal195_tree=null;
        CommonTree NL196_tree=null;
        CommonTree L_def198_tree=null;
        CommonTree NL199_tree=null;
        CommonTree L_this200_tree=null;
        CommonTree NL201_tree=null;
        CommonTree char_literal202_tree=null;
        CommonTree NL203_tree=null;
        CommonTree NL205_tree=null;
        CommonTree char_literal206_tree=null;
        CommonTree NL207_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_L_this=new RewriteRuleTokenStream(adaptor,"token L_this");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_L_def=new RewriteRuleTokenStream(adaptor,"token L_def");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_typeid=new RewriteRuleSubtreeStream(adaptor,"rule typeid");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_defpattern=new RewriteRuleSubtreeStream(adaptor,"rule defpattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:8: ( L_def ( NL )? Id ( NL )? ( defpattern ( NL )? )? ( ':' ( NL )? typeid ( NL )? )? '=' ( NL )? expr -> ^( DEF Id ( typeid )? ( defpattern )? expr ) | L_def ( NL )? L_this ( NL )? ':' ( NL )? typeid ( NL )? '=' ( NL )? expr -> ^( CONVERSION typeid expr ) )
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==L_def) ) {
                switch ( input.LA(2) ) {
                case NL:
                    {
                    int LA98_2 = input.LA(3);

                    if ( (LA98_2==Id) ) {
                        alt98=1;
                    }
                    else if ( (LA98_2==L_this) ) {
                        alt98=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 98, 2, input);

                        throw nvae;
                    }
                    }
                    break;
                case L_this:
                    {
                    alt98=2;
                    }
                    break;
                case Id:
                    {
                    alt98=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 98, 1, input);

                    throw nvae;
                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;
            }
            switch (alt98) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:10: L_def ( NL )? Id ( NL )? ( defpattern ( NL )? )? ( ':' ( NL )? typeid ( NL )? )? '=' ( NL )? expr
                    {
                    L_def185=(Token)match(input,L_def,FOLLOW_L_def_in_st_def2890); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_def.add(L_def185);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:16: ( NL )?
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==NL) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:16: NL
                            {
                            NL186=(Token)match(input,NL,FOLLOW_NL_in_st_def2892); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL186);


                            }
                            break;

                    }

                    Id187=(Token)match(input,Id,FOLLOW_Id_in_st_def2895); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id187);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:23: ( NL )?
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==NL) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:23: NL
                            {
                            NL188=(Token)match(input,NL,FOLLOW_NL_in_st_def2897); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL188);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:27: ( defpattern ( NL )? )?
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( ((LA88_0>=L_true && LA88_0<=L_false)||LA88_0==L_nil||LA88_0==MINUS||(LA88_0>=Constr && LA88_0<=Id)||LA88_0==Num||(LA88_0>=String && LA88_0<=ROUND_BRACKET_OPEN)||LA88_0==SQUARE_BRACKET_OPEN||LA88_0==CURLY_BRACKET_OPEN||LA88_0==UNDERSCORE) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:28: defpattern ( NL )?
                            {
                            pushFollow(FOLLOW_defpattern_in_st_def2901);
                            defpattern189=defpattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_defpattern.add(defpattern189.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:39: ( NL )?
                            int alt87=2;
                            int LA87_0 = input.LA(1);

                            if ( (LA87_0==NL) ) {
                                alt87=1;
                            }
                            switch (alt87) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:39: NL
                                    {
                                    NL190=(Token)match(input,NL,FOLLOW_NL_in_st_def2903); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL190);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:45: ( ':' ( NL )? typeid ( NL )? )?
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==COLON) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:46: ':' ( NL )? typeid ( NL )?
                            {
                            char_literal191=(Token)match(input,COLON,FOLLOW_COLON_in_st_def2909); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(char_literal191);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:50: ( NL )?
                            int alt89=2;
                            int LA89_0 = input.LA(1);

                            if ( (LA89_0==NL) ) {
                                alt89=1;
                            }
                            switch (alt89) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:50: NL
                                    {
                                    NL192=(Token)match(input,NL,FOLLOW_NL_in_st_def2911); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL192);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_typeid_in_st_def2914);
                            typeid193=typeid();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typeid.add(typeid193.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:61: ( NL )?
                            int alt90=2;
                            int LA90_0 = input.LA(1);

                            if ( (LA90_0==NL) ) {
                                alt90=1;
                            }
                            switch (alt90) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:61: NL
                                    {
                                    NL194=(Token)match(input,NL,FOLLOW_NL_in_st_def2916); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL194);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    char_literal195=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_st_def2921); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal195);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:71: ( NL )?
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( (LA92_0==NL) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:71: NL
                            {
                            NL196=(Token)match(input,NL,FOLLOW_NL_in_st_def2923); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL196);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_st_def2926);
                    expr197=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr197.getTree());


                    // AST REWRITE
                    // elements: typeid, expr, Id, defpattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 513:5: -> ^( DEF Id ( typeid )? ( defpattern )? expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:513:8: ^( DEF Id ( typeid )? ( defpattern )? expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DEF, "DEF"), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:513:17: ( typeid )?
                        if ( stream_typeid.hasNext() ) {
                            adaptor.addChild(root_1, stream_typeid.nextTree());

                        }
                        stream_typeid.reset();
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:513:25: ( defpattern )?
                        if ( stream_defpattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_defpattern.nextTree());

                        }
                        stream_defpattern.reset();
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:4: L_def ( NL )? L_this ( NL )? ':' ( NL )? typeid ( NL )? '=' ( NL )? expr
                    {
                    L_def198=(Token)match(input,L_def,FOLLOW_L_def_in_st_def2952); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_def.add(L_def198);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:10: ( NL )?
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==NL) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:10: NL
                            {
                            NL199=(Token)match(input,NL,FOLLOW_NL_in_st_def2954); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL199);


                            }
                            break;

                    }

                    L_this200=(Token)match(input,L_this,FOLLOW_L_this_in_st_def2957); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_this.add(L_this200);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:21: ( NL )?
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==NL) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:21: NL
                            {
                            NL201=(Token)match(input,NL,FOLLOW_NL_in_st_def2959); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL201);


                            }
                            break;

                    }

                    char_literal202=(Token)match(input,COLON,FOLLOW_COLON_in_st_def2962); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(char_literal202);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:29: ( NL )?
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==NL) ) {
                        alt95=1;
                    }
                    switch (alt95) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:29: NL
                            {
                            NL203=(Token)match(input,NL,FOLLOW_NL_in_st_def2964); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL203);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeid_in_st_def2967);
                    typeid204=typeid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeid.add(typeid204.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:40: ( NL )?
                    int alt96=2;
                    int LA96_0 = input.LA(1);

                    if ( (LA96_0==NL) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:40: NL
                            {
                            NL205=(Token)match(input,NL,FOLLOW_NL_in_st_def2969); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL205);


                            }
                            break;

                    }

                    char_literal206=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_st_def2972); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal206);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:48: ( NL )?
                    int alt97=2;
                    int LA97_0 = input.LA(1);

                    if ( (LA97_0==NL) ) {
                        alt97=1;
                    }
                    switch (alt97) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:48: NL
                            {
                            NL207=(Token)match(input,NL,FOLLOW_NL_in_st_def2974); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL207);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_st_def2977);
                    expr208=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr208.getTree());


                    // AST REWRITE
                    // elements: expr, typeid
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 514:57: -> ^( CONVERSION typeid expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:60: ^( CONVERSION typeid expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONVERSION, "CONVERSION"), root_1);

                        adaptor.addChild(root_1, stream_typeid.nextTree());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_def"

    public static class st_typedef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_typedef"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:516:1: st_typedef : L_typedef ( NL )? Id ( NL )? typedef_clause ( ( NL )? COMMA ( NL )? typedef_clause )* -> ^( TYPEDEF Id ^( NIL_TOKEN ( typedef_clause )* ) ) ;
    public final babel17Parser.st_typedef_return st_typedef() throws RecognitionException {
        babel17Parser.st_typedef_return retval = new babel17Parser.st_typedef_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_typedef209=null;
        Token NL210=null;
        Token Id211=null;
        Token NL212=null;
        Token NL214=null;
        Token COMMA215=null;
        Token NL216=null;
        babel17Parser.typedef_clause_return typedef_clause213 = null;

        babel17Parser.typedef_clause_return typedef_clause217 = null;


        CommonTree L_typedef209_tree=null;
        CommonTree NL210_tree=null;
        CommonTree Id211_tree=null;
        CommonTree NL212_tree=null;
        CommonTree NL214_tree=null;
        CommonTree COMMA215_tree=null;
        CommonTree NL216_tree=null;
        RewriteRuleTokenStream stream_L_typedef=new RewriteRuleTokenStream(adaptor,"token L_typedef");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleSubtreeStream stream_typedef_clause=new RewriteRuleSubtreeStream(adaptor,"rule typedef_clause");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:2: ( L_typedef ( NL )? Id ( NL )? typedef_clause ( ( NL )? COMMA ( NL )? typedef_clause )* -> ^( TYPEDEF Id ^( NIL_TOKEN ( typedef_clause )* ) ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:4: L_typedef ( NL )? Id ( NL )? typedef_clause ( ( NL )? COMMA ( NL )? typedef_clause )*
            {
            L_typedef209=(Token)match(input,L_typedef,FOLLOW_L_typedef_in_st_typedef3000); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_typedef.add(L_typedef209);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:14: ( NL )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==NL) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:14: NL
                    {
                    NL210=(Token)match(input,NL,FOLLOW_NL_in_st_typedef3002); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL210);


                    }
                    break;

            }

            Id211=(Token)match(input,Id,FOLLOW_Id_in_st_typedef3005); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id211);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:21: ( NL )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==NL) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:21: NL
                    {
                    NL212=(Token)match(input,NL,FOLLOW_NL_in_st_typedef3007); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL212);


                    }
                    break;

            }

            pushFollow(FOLLOW_typedef_clause_in_st_typedef3010);
            typedef_clause213=typedef_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_clause.add(typedef_clause213.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:40: ( ( NL )? COMMA ( NL )? typedef_clause )*
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==NL) ) {
                    int LA103_1 = input.LA(2);

                    if ( (LA103_1==COMMA) ) {
                        alt103=1;
                    }


                }
                else if ( (LA103_0==COMMA) ) {
                    alt103=1;
                }


                switch (alt103) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:41: ( NL )? COMMA ( NL )? typedef_clause
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:41: ( NL )?
            	    int alt101=2;
            	    int LA101_0 = input.LA(1);

            	    if ( (LA101_0==NL) ) {
            	        alt101=1;
            	    }
            	    switch (alt101) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:41: NL
            	            {
            	            NL214=(Token)match(input,NL,FOLLOW_NL_in_st_typedef3013); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL214);


            	            }
            	            break;

            	    }

            	    COMMA215=(Token)match(input,COMMA,FOLLOW_COMMA_in_st_typedef3016); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA215);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:51: ( NL )?
            	    int alt102=2;
            	    int LA102_0 = input.LA(1);

            	    if ( (LA102_0==NL) ) {
            	        alt102=1;
            	    }
            	    switch (alt102) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:51: NL
            	            {
            	            NL216=(Token)match(input,NL,FOLLOW_NL_in_st_typedef3018); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL216);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_typedef_clause_in_st_typedef3021);
            	    typedef_clause217=typedef_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typedef_clause.add(typedef_clause217.getTree());

            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);



            // AST REWRITE
            // elements: Id, typedef_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 517:72: -> ^( TYPEDEF Id ^( NIL_TOKEN ( typedef_clause )* ) )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:75: ^( TYPEDEF Id ^( NIL_TOKEN ( typedef_clause )* ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEDEF, "TYPEDEF"), root_1);

                adaptor.addChild(root_1, stream_Id.nextNode());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:88: ^( NIL_TOKEN ( typedef_clause )* )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:100: ( typedef_clause )*
                while ( stream_typedef_clause.hasNext() ) {
                    adaptor.addChild(root_2, stream_typedef_clause.nextTree());

                }
                stream_typedef_clause.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_typedef"

    public static class typedef_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typedef_clause"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:1: typedef_clause : ( ( defpattern ( NL )? '=' )=> defpattern ( NL )? '=' ( NL )? expr -> ^( TYPEDEF_CLAUSE defpattern expr ) | defpattern -> ^( TYPEDEF_CLAUSE defpattern ) );
    public final babel17Parser.typedef_clause_return typedef_clause() throws RecognitionException {
        babel17Parser.typedef_clause_return retval = new babel17Parser.typedef_clause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL219=null;
        Token char_literal220=null;
        Token NL221=null;
        babel17Parser.defpattern_return defpattern218 = null;

        babel17Parser.expr_return expr222 = null;

        babel17Parser.defpattern_return defpattern223 = null;


        CommonTree NL219_tree=null;
        CommonTree char_literal220_tree=null;
        CommonTree NL221_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_defpattern=new RewriteRuleSubtreeStream(adaptor,"rule defpattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:2: ( ( defpattern ( NL )? '=' )=> defpattern ( NL )? '=' ( NL )? expr -> ^( TYPEDEF_CLAUSE defpattern expr ) | defpattern -> ^( TYPEDEF_CLAUSE defpattern ) )
            int alt106=2;
            alt106 = dfa106.predict(input);
            switch (alt106) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:4: ( defpattern ( NL )? '=' )=> defpattern ( NL )? '=' ( NL )? expr
                    {
                    pushFollow(FOLLOW_defpattern_in_typedef_clause3059);
                    defpattern218=defpattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_defpattern.add(defpattern218.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:39: ( NL )?
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( (LA104_0==NL) ) {
                        alt104=1;
                    }
                    switch (alt104) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:39: NL
                            {
                            NL219=(Token)match(input,NL,FOLLOW_NL_in_typedef_clause3061); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL219);


                            }
                            break;

                    }

                    char_literal220=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_typedef_clause3064); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal220);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:47: ( NL )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==NL) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:47: NL
                            {
                            NL221=(Token)match(input,NL,FOLLOW_NL_in_typedef_clause3066); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL221);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_typedef_clause3069);
                    expr222=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr222.getTree());


                    // AST REWRITE
                    // elements: expr, defpattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 520:56: -> ^( TYPEDEF_CLAUSE defpattern expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:59: ^( TYPEDEF_CLAUSE defpattern expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEDEF_CLAUSE, "TYPEDEF_CLAUSE"), root_1);

                        adaptor.addChild(root_1, stream_defpattern.nextTree());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:4: defpattern
                    {
                    pushFollow(FOLLOW_defpattern_in_typedef_clause3084);
                    defpattern223=defpattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_defpattern.add(defpattern223.getTree());


                    // AST REWRITE
                    // elements: defpattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 521:15: -> ^( TYPEDEF_CLAUSE defpattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:18: ^( TYPEDEF_CLAUSE defpattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEDEF_CLAUSE, "TYPEDEF_CLAUSE"), root_1);

                        adaptor.addChild(root_1, stream_defpattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typedef_clause"

    public static class st_yield_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_yield"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:523:1: st_yield : L_yield expr -> ^( YIELD expr ) ;
    public final babel17Parser.st_yield_return st_yield() throws RecognitionException {
        babel17Parser.st_yield_return retval = new babel17Parser.st_yield_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_yield224=null;
        babel17Parser.expr_return expr225 = null;


        CommonTree L_yield224_tree=null;
        RewriteRuleTokenStream stream_L_yield=new RewriteRuleTokenStream(adaptor,"token L_yield");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:523:9: ( L_yield expr -> ^( YIELD expr ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:523:11: L_yield expr
            {
            L_yield224=(Token)match(input,L_yield,FOLLOW_L_yield_in_st_yield3103); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_yield.add(L_yield224);

            pushFollow(FOLLOW_expr_in_st_yield3105);
            expr225=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr225.getTree());


            // AST REWRITE
            // elements: expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 523:24: -> ^( YIELD expr )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:523:27: ^( YIELD expr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YIELD, "YIELD"), root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_yield"

    public static class st_memoize_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_memoize"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:525:1: st_memoize : L_memoize memo_id ( ( NL )? COMMA ( NL )? memo_id )* -> ^( MEMOIZE ( memo_id )* ) ;
    public final babel17Parser.st_memoize_return st_memoize() throws RecognitionException {
        babel17Parser.st_memoize_return retval = new babel17Parser.st_memoize_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_memoize226=null;
        Token NL228=null;
        Token COMMA229=null;
        Token NL230=null;
        babel17Parser.memo_id_return memo_id227 = null;

        babel17Parser.memo_id_return memo_id231 = null;


        CommonTree L_memoize226_tree=null;
        CommonTree NL228_tree=null;
        CommonTree COMMA229_tree=null;
        CommonTree NL230_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_memoize=new RewriteRuleTokenStream(adaptor,"token L_memoize");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_memo_id=new RewriteRuleSubtreeStream(adaptor,"rule memo_id");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:526:2: ( L_memoize memo_id ( ( NL )? COMMA ( NL )? memo_id )* -> ^( MEMOIZE ( memo_id )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:526:4: L_memoize memo_id ( ( NL )? COMMA ( NL )? memo_id )*
            {
            L_memoize226=(Token)match(input,L_memoize,FOLLOW_L_memoize_in_st_memoize3126); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_memoize.add(L_memoize226);

            pushFollow(FOLLOW_memo_id_in_st_memoize3128);
            memo_id227=memo_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_memo_id.add(memo_id227.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:526:22: ( ( NL )? COMMA ( NL )? memo_id )*
            loop109:
            do {
                int alt109=2;
                int LA109_0 = input.LA(1);

                if ( (LA109_0==NL) ) {
                    int LA109_1 = input.LA(2);

                    if ( (LA109_1==COMMA) ) {
                        alt109=1;
                    }


                }
                else if ( (LA109_0==COMMA) ) {
                    alt109=1;
                }


                switch (alt109) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:526:23: ( NL )? COMMA ( NL )? memo_id
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:526:23: ( NL )?
            	    int alt107=2;
            	    int LA107_0 = input.LA(1);

            	    if ( (LA107_0==NL) ) {
            	        alt107=1;
            	    }
            	    switch (alt107) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:526:23: NL
            	            {
            	            NL228=(Token)match(input,NL,FOLLOW_NL_in_st_memoize3131); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL228);


            	            }
            	            break;

            	    }

            	    COMMA229=(Token)match(input,COMMA,FOLLOW_COMMA_in_st_memoize3134); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA229);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:526:33: ( NL )?
            	    int alt108=2;
            	    int LA108_0 = input.LA(1);

            	    if ( (LA108_0==NL) ) {
            	        alt108=1;
            	    }
            	    switch (alt108) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:526:33: NL
            	            {
            	            NL230=(Token)match(input,NL,FOLLOW_NL_in_st_memoize3136); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL230);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_memo_id_in_st_memoize3139);
            	    memo_id231=memo_id();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_memo_id.add(memo_id231.getTree());

            	    }
            	    break;

            	default :
            	    break loop109;
                }
            } while (true);



            // AST REWRITE
            // elements: memo_id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 527:5: -> ^( MEMOIZE ( memo_id )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:8: ^( MEMOIZE ( memo_id )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MEMOIZE, "MEMOIZE"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:18: ( memo_id )*
                while ( stream_memo_id.hasNext() ) {
                    adaptor.addChild(root_1, stream_memo_id.nextTree());

                }
                stream_memo_id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_memoize"

    public static class memo_id_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "memo_id"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:529:1: memo_id : ( Id -> ^( MEMOID_STRONG Id ) | '(' Id ')' -> ^( MEMOID_WEAK Id ) );
    public final babel17Parser.memo_id_return memo_id() throws RecognitionException {
        babel17Parser.memo_id_return retval = new babel17Parser.memo_id_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id232=null;
        Token char_literal233=null;
        Token Id234=null;
        Token char_literal235=null;

        CommonTree Id232_tree=null;
        CommonTree char_literal233_tree=null;
        CommonTree Id234_tree=null;
        CommonTree char_literal235_tree=null;
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:529:9: ( Id -> ^( MEMOID_STRONG Id ) | '(' Id ')' -> ^( MEMOID_WEAK Id ) )
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==Id) ) {
                alt110=1;
            }
            else if ( (LA110_0==ROUND_BRACKET_OPEN) ) {
                alt110=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 110, 0, input);

                throw nvae;
            }
            switch (alt110) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:529:11: Id
                    {
                    Id232=(Token)match(input,Id,FOLLOW_Id_in_memo_id3168); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id232);



                    // AST REWRITE
                    // elements: Id
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 529:14: -> ^( MEMOID_STRONG Id )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:529:17: ^( MEMOID_STRONG Id )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MEMOID_STRONG, "MEMOID_STRONG"), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:530:4: '(' Id ')'
                    {
                    char_literal233=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_memo_id3181); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal233);

                    Id234=(Token)match(input,Id,FOLLOW_Id_in_memo_id3183); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id234);

                    char_literal235=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_memo_id3185); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal235);



                    // AST REWRITE
                    // elements: Id
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 530:15: -> ^( MEMOID_WEAK Id )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:530:18: ^( MEMOID_WEAK Id )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MEMOID_WEAK, "MEMOID_WEAK"), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "memo_id"

    public static class st_private_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_private"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:532:1: st_private : L_private private_id ( ( NL )? COMMA ( NL )? private_id )* -> ^( PRIVATE ( private_id )* ) ;
    public final babel17Parser.st_private_return st_private() throws RecognitionException {
        babel17Parser.st_private_return retval = new babel17Parser.st_private_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_private236=null;
        Token NL238=null;
        Token COMMA239=null;
        Token NL240=null;
        babel17Parser.private_id_return private_id237 = null;

        babel17Parser.private_id_return private_id241 = null;


        CommonTree L_private236_tree=null;
        CommonTree NL238_tree=null;
        CommonTree COMMA239_tree=null;
        CommonTree NL240_tree=null;
        RewriteRuleTokenStream stream_L_private=new RewriteRuleTokenStream(adaptor,"token L_private");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_private_id=new RewriteRuleSubtreeStream(adaptor,"rule private_id");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:533:2: ( L_private private_id ( ( NL )? COMMA ( NL )? private_id )* -> ^( PRIVATE ( private_id )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:533:4: L_private private_id ( ( NL )? COMMA ( NL )? private_id )*
            {
            L_private236=(Token)match(input,L_private,FOLLOW_L_private_in_st_private3202); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_private.add(L_private236);

            pushFollow(FOLLOW_private_id_in_st_private3204);
            private_id237=private_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_private_id.add(private_id237.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:533:25: ( ( NL )? COMMA ( NL )? private_id )*
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==NL) ) {
                    int LA113_1 = input.LA(2);

                    if ( (LA113_1==COMMA) ) {
                        alt113=1;
                    }


                }
                else if ( (LA113_0==COMMA) ) {
                    alt113=1;
                }


                switch (alt113) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:533:26: ( NL )? COMMA ( NL )? private_id
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:533:26: ( NL )?
            	    int alt111=2;
            	    int LA111_0 = input.LA(1);

            	    if ( (LA111_0==NL) ) {
            	        alt111=1;
            	    }
            	    switch (alt111) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:533:26: NL
            	            {
            	            NL238=(Token)match(input,NL,FOLLOW_NL_in_st_private3207); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL238);


            	            }
            	            break;

            	    }

            	    COMMA239=(Token)match(input,COMMA,FOLLOW_COMMA_in_st_private3210); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA239);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:533:36: ( NL )?
            	    int alt112=2;
            	    int LA112_0 = input.LA(1);

            	    if ( (LA112_0==NL) ) {
            	        alt112=1;
            	    }
            	    switch (alt112) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:533:36: NL
            	            {
            	            NL240=(Token)match(input,NL,FOLLOW_NL_in_st_private3212); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL240);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_private_id_in_st_private3215);
            	    private_id241=private_id();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_private_id.add(private_id241.getTree());

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);



            // AST REWRITE
            // elements: private_id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 534:5: -> ^( PRIVATE ( private_id )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:534:8: ^( PRIVATE ( private_id )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRIVATE, "PRIVATE"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:534:18: ( private_id )*
                while ( stream_private_id.hasNext() ) {
                    adaptor.addChild(root_1, stream_private_id.nextTree());

                }
                stream_private_id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_private"

    public static class private_id_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "private_id"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:536:1: private_id : Id -> ^( PRIVATEID Id ) ;
    public final babel17Parser.private_id_return private_id() throws RecognitionException {
        babel17Parser.private_id_return retval = new babel17Parser.private_id_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id242=null;

        CommonTree Id242_tree=null;
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:537:2: ( Id -> ^( PRIVATEID Id ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:537:4: Id
            {
            Id242=(Token)match(input,Id,FOLLOW_Id_in_private_id3241); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id242);



            // AST REWRITE
            // elements: Id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 537:7: -> ^( PRIVATEID Id )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:537:10: ^( PRIVATEID Id )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRIVATEID, "PRIVATEID"), root_1);

                adaptor.addChild(root_1, stream_Id.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "private_id"

    public static class testid_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "testid"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:539:1: testid : ( Id | L_unittest );
    public final babel17Parser.testid_return testid() throws RecognitionException {
        babel17Parser.testid_return retval = new babel17Parser.testid_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set243=null;

        CommonTree set243_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:539:8: ( Id | L_unittest )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set243=(Token)input.LT(1);
            if ( input.LA(1)==L_unittest||input.LA(1)==Id ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set243));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "testid"

    public static class moduleid_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moduleid"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:542:1: moduleid : Id ( ( NL )? PERIOD ( NL )? testid )* -> ^( MODULEID ( Id )? ( testid )* ) ;
    public final babel17Parser.moduleid_return moduleid() throws RecognitionException {
        babel17Parser.moduleid_return retval = new babel17Parser.moduleid_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id244=null;
        Token NL245=null;
        Token PERIOD246=null;
        Token NL247=null;
        babel17Parser.testid_return testid248 = null;


        CommonTree Id244_tree=null;
        CommonTree NL245_tree=null;
        CommonTree PERIOD246_tree=null;
        CommonTree NL247_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_testid=new RewriteRuleSubtreeStream(adaptor,"rule testid");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:2: ( Id ( ( NL )? PERIOD ( NL )? testid )* -> ^( MODULEID ( Id )? ( testid )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:4: Id ( ( NL )? PERIOD ( NL )? testid )*
            {
            Id244=(Token)match(input,Id,FOLLOW_Id_in_moduleid3274); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id244);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:7: ( ( NL )? PERIOD ( NL )? testid )*
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( (LA116_0==NL) ) {
                    int LA116_1 = input.LA(2);

                    if ( (LA116_1==PERIOD) ) {
                        alt116=1;
                    }


                }
                else if ( (LA116_0==PERIOD) ) {
                    alt116=1;
                }


                switch (alt116) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:8: ( NL )? PERIOD ( NL )? testid
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:8: ( NL )?
            	    int alt114=2;
            	    int LA114_0 = input.LA(1);

            	    if ( (LA114_0==NL) ) {
            	        alt114=1;
            	    }
            	    switch (alt114) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:8: NL
            	            {
            	            NL245=(Token)match(input,NL,FOLLOW_NL_in_moduleid3277); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL245);


            	            }
            	            break;

            	    }

            	    PERIOD246=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_moduleid3280); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD246);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:19: ( NL )?
            	    int alt115=2;
            	    int LA115_0 = input.LA(1);

            	    if ( (LA115_0==NL) ) {
            	        alt115=1;
            	    }
            	    switch (alt115) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:19: NL
            	            {
            	            NL247=(Token)match(input,NL,FOLLOW_NL_in_moduleid3282); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL247);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_testid_in_moduleid3285);
            	    testid248=testid();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_testid.add(testid248.getTree());

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);



            // AST REWRITE
            // elements: testid, Id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 543:32: -> ^( MODULEID ( Id )? ( testid )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:35: ^( MODULEID ( Id )? ( testid )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MODULEID, "MODULEID"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:46: ( Id )?
                if ( stream_Id.hasNext() ) {
                    adaptor.addChild(root_1, stream_Id.nextNode());

                }
                stream_Id.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:50: ( testid )*
                while ( stream_testid.hasNext() ) {
                    adaptor.addChild(root_1, stream_testid.nextTree());

                }
                stream_testid.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moduleid"

    public static class st_module_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_module"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:545:1: st_module : L_module ( NL )? moduleid block ( L_unittest block )? L_end -> ^( L_module moduleid block ( L_unittest )? ( block )? ) ;
    public final babel17Parser.st_module_return st_module() throws RecognitionException {
        babel17Parser.st_module_return retval = new babel17Parser.st_module_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_module249=null;
        Token NL250=null;
        Token L_unittest253=null;
        Token L_end255=null;
        babel17Parser.moduleid_return moduleid251 = null;

        babel17Parser.block_return block252 = null;

        babel17Parser.block_return block254 = null;


        CommonTree L_module249_tree=null;
        CommonTree NL250_tree=null;
        CommonTree L_unittest253_tree=null;
        CommonTree L_end255_tree=null;
        RewriteRuleTokenStream stream_L_module=new RewriteRuleTokenStream(adaptor,"token L_module");
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_unittest=new RewriteRuleTokenStream(adaptor,"token L_unittest");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_moduleid=new RewriteRuleSubtreeStream(adaptor,"rule moduleid");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:546:2: ( L_module ( NL )? moduleid block ( L_unittest block )? L_end -> ^( L_module moduleid block ( L_unittest )? ( block )? ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:546:4: L_module ( NL )? moduleid block ( L_unittest block )? L_end
            {
            L_module249=(Token)match(input,L_module,FOLLOW_L_module_in_st_module3308); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_module.add(L_module249);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:546:13: ( NL )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==NL) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:546:13: NL
                    {
                    NL250=(Token)match(input,NL,FOLLOW_NL_in_st_module3310); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL250);


                    }
                    break;

            }

            pushFollow(FOLLOW_moduleid_in_st_module3313);
            moduleid251=moduleid();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moduleid.add(moduleid251.getTree());
            pushFollow(FOLLOW_block_in_st_module3315);
            block252=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block252.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:546:32: ( L_unittest block )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==L_unittest) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:546:33: L_unittest block
                    {
                    L_unittest253=(Token)match(input,L_unittest,FOLLOW_L_unittest_in_st_module3318); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_unittest.add(L_unittest253);

                    pushFollow(FOLLOW_block_in_st_module3320);
                    block254=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block254.getTree());

                    }
                    break;

            }

            L_end255=(Token)match(input,L_end,FOLLOW_L_end_in_st_module3324); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end255);



            // AST REWRITE
            // elements: L_unittest, L_module, block, moduleid, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 546:58: -> ^( L_module moduleid block ( L_unittest )? ( block )? )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:546:61: ^( L_module moduleid block ( L_unittest )? ( block )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_L_module.nextNode(), root_1);

                adaptor.addChild(root_1, stream_moduleid.nextTree());
                adaptor.addChild(root_1, stream_block.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:546:87: ( L_unittest )?
                if ( stream_L_unittest.hasNext() ) {
                    adaptor.addChild(root_1, stream_L_unittest.nextNode());

                }
                stream_L_unittest.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:546:99: ( block )?
                if ( stream_block.hasNext() ) {
                    adaptor.addChild(root_1, stream_block.nextTree());

                }
                stream_block.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_module"

    public static class importprefix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importprefix"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:548:1: importprefix : ( L_root | testid ) ( ( NL )? PERIOD ( NL )? testid )* -> ^( IMPORT_PREFIX ( L_root )? ( testid )* ) ;
    public final babel17Parser.importprefix_return importprefix() throws RecognitionException {
        babel17Parser.importprefix_return retval = new babel17Parser.importprefix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_root256=null;
        Token NL258=null;
        Token PERIOD259=null;
        Token NL260=null;
        babel17Parser.testid_return testid257 = null;

        babel17Parser.testid_return testid261 = null;


        CommonTree L_root256_tree=null;
        CommonTree NL258_tree=null;
        CommonTree PERIOD259_tree=null;
        CommonTree NL260_tree=null;
        RewriteRuleTokenStream stream_L_root=new RewriteRuleTokenStream(adaptor,"token L_root");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_testid=new RewriteRuleSubtreeStream(adaptor,"rule testid");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:2: ( ( L_root | testid ) ( ( NL )? PERIOD ( NL )? testid )* -> ^( IMPORT_PREFIX ( L_root )? ( testid )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:4: ( L_root | testid ) ( ( NL )? PERIOD ( NL )? testid )*
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:4: ( L_root | testid )
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==L_root) ) {
                alt119=1;
            }
            else if ( (LA119_0==L_unittest||LA119_0==Id) ) {
                alt119=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 119, 0, input);

                throw nvae;
            }
            switch (alt119) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:5: L_root
                    {
                    L_root256=(Token)match(input,L_root,FOLLOW_L_root_in_importprefix3351); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_root.add(L_root256);


                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:14: testid
                    {
                    pushFollow(FOLLOW_testid_in_importprefix3355);
                    testid257=testid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_testid.add(testid257.getTree());

                    }
                    break;

            }

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:22: ( ( NL )? PERIOD ( NL )? testid )*
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);

                if ( (LA122_0==NL) ) {
                    int LA122_1 = input.LA(2);

                    if ( (LA122_1==PERIOD) ) {
                        int LA122_2 = input.LA(3);

                        if ( (LA122_2==NL) ) {
                            int LA122_4 = input.LA(4);

                            if ( (LA122_4==L_unittest||LA122_4==Id) ) {
                                alt122=1;
                            }


                        }
                        else if ( (LA122_2==L_unittest||LA122_2==Id) ) {
                            alt122=1;
                        }


                    }


                }
                else if ( (LA122_0==PERIOD) ) {
                    int LA122_2 = input.LA(2);

                    if ( (LA122_2==NL) ) {
                        int LA122_4 = input.LA(3);

                        if ( (LA122_4==L_unittest||LA122_4==Id) ) {
                            alt122=1;
                        }


                    }
                    else if ( (LA122_2==L_unittest||LA122_2==Id) ) {
                        alt122=1;
                    }


                }


                switch (alt122) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:23: ( NL )? PERIOD ( NL )? testid
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:23: ( NL )?
            	    int alt120=2;
            	    int LA120_0 = input.LA(1);

            	    if ( (LA120_0==NL) ) {
            	        alt120=1;
            	    }
            	    switch (alt120) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:23: NL
            	            {
            	            NL258=(Token)match(input,NL,FOLLOW_NL_in_importprefix3359); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL258);


            	            }
            	            break;

            	    }

            	    PERIOD259=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_importprefix3362); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD259);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:34: ( NL )?
            	    int alt121=2;
            	    int LA121_0 = input.LA(1);

            	    if ( (LA121_0==NL) ) {
            	        alt121=1;
            	    }
            	    switch (alt121) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:34: NL
            	            {
            	            NL260=(Token)match(input,NL,FOLLOW_NL_in_importprefix3364); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL260);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_testid_in_importprefix3367);
            	    testid261=testid();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_testid.add(testid261.getTree());

            	    }
            	    break;

            	default :
            	    break loop122;
                }
            } while (true);



            // AST REWRITE
            // elements: L_root, testid
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 549:47: -> ^( IMPORT_PREFIX ( L_root )? ( testid )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:50: ^( IMPORT_PREFIX ( L_root )? ( testid )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_PREFIX, "IMPORT_PREFIX"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:66: ( L_root )?
                if ( stream_L_root.hasNext() ) {
                    adaptor.addChild(root_1, stream_L_root.nextNode());

                }
                stream_L_root.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:74: ( testid )*
                while ( stream_testid.hasNext() ) {
                    adaptor.addChild(root_1, stream_testid.nextTree());

                }
                stream_testid.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "importprefix"

    public static class importall_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importall"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:551:1: importall : UNDERSCORE -> ^( IMPORT_ALL ) ;
    public final babel17Parser.importall_return importall() throws RecognitionException {
        babel17Parser.importall_return retval = new babel17Parser.importall_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token UNDERSCORE262=null;

        CommonTree UNDERSCORE262_tree=null;
        RewriteRuleTokenStream stream_UNDERSCORE=new RewriteRuleTokenStream(adaptor,"token UNDERSCORE");

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:552:2: ( UNDERSCORE -> ^( IMPORT_ALL ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:552:4: UNDERSCORE
            {
            UNDERSCORE262=(Token)match(input,UNDERSCORE,FOLLOW_UNDERSCORE_in_importall3392); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UNDERSCORE.add(UNDERSCORE262);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 552:15: -> ^( IMPORT_ALL )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:552:18: ^( IMPORT_ALL )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_ALL, "IMPORT_ALL"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "importall"

    public static class importsetclause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importsetclause"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:554:1: importsetclause : ( testid ( ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )? )? -> ^( IMPORT_PLUS testid ( Id )? ) | '-' ( NL )? testid -> ^( IMPORT_MINUS testid ) | importall );
    public final babel17Parser.importsetclause_return importsetclause() throws RecognitionException {
        babel17Parser.importsetclause_return retval = new babel17Parser.importsetclause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL264=null;
        Token NL266=null;
        Token Id267=null;
        Token char_literal268=null;
        Token NL269=null;
        babel17Parser.testid_return testid263 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW265 = null;

        babel17Parser.testid_return testid270 = null;

        babel17Parser.importall_return importall271 = null;


        CommonTree NL264_tree=null;
        CommonTree NL266_tree=null;
        CommonTree Id267_tree=null;
        CommonTree char_literal268_tree=null;
        CommonTree NL269_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_testid=new RewriteRuleSubtreeStream(adaptor,"rule testid");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:2: ( testid ( ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )? )? -> ^( IMPORT_PLUS testid ( Id )? ) | '-' ( NL )? testid -> ^( IMPORT_MINUS testid ) | importall )
            int alt128=3;
            switch ( input.LA(1) ) {
            case L_unittest:
            case Id:
                {
                alt128=1;
                }
                break;
            case MINUS:
                {
                alt128=2;
                }
                break;
            case UNDERSCORE:
                {
                alt128=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;
            }

            switch (alt128) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:4: testid ( ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )? )?
                    {
                    pushFollow(FOLLOW_testid_in_importsetclause3408);
                    testid263=testid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_testid.add(testid263.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:11: ( ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )? )?
                    int alt126=2;
                    int LA126_0 = input.LA(1);

                    if ( (LA126_0==NL) ) {
                        int LA126_1 = input.LA(2);

                        if ( ((LA126_1>=A_DOUBLE_ARROW && LA126_1<=U_DOUBLE_ARROW)) ) {
                            alt126=1;
                        }
                    }
                    else if ( ((LA126_0>=A_DOUBLE_ARROW && LA126_0<=U_DOUBLE_ARROW)) ) {
                        alt126=1;
                    }
                    switch (alt126) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:12: ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )?
                            {
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:12: ( NL )?
                            int alt123=2;
                            int LA123_0 = input.LA(1);

                            if ( (LA123_0==NL) ) {
                                alt123=1;
                            }
                            switch (alt123) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:12: NL
                                    {
                                    NL264=(Token)match(input,NL,FOLLOW_NL_in_importsetclause3411); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL264);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_importsetclause3414);
                            token_DOUBLE_ARROW265=token_DOUBLE_ARROW();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW265.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:35: ( ( NL )? Id )?
                            int alt125=2;
                            int LA125_0 = input.LA(1);

                            if ( (LA125_0==NL) ) {
                                int LA125_1 = input.LA(2);

                                if ( (LA125_1==Id) ) {
                                    alt125=1;
                                }
                            }
                            else if ( (LA125_0==Id) ) {
                                alt125=1;
                            }
                            switch (alt125) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:36: ( NL )? Id
                                    {
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:36: ( NL )?
                                    int alt124=2;
                                    int LA124_0 = input.LA(1);

                                    if ( (LA124_0==NL) ) {
                                        alt124=1;
                                    }
                                    switch (alt124) {
                                        case 1 :
                                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:36: NL
                                            {
                                            NL266=(Token)match(input,NL,FOLLOW_NL_in_importsetclause3417); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_NL.add(NL266);


                                            }
                                            break;

                                    }

                                    Id267=(Token)match(input,Id,FOLLOW_Id_in_importsetclause3420); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_Id.add(Id267);


                                    }
                                    break;

                            }


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: Id, testid
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 555:47: -> ^( IMPORT_PLUS testid ( Id )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:50: ^( IMPORT_PLUS testid ( Id )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_PLUS, "IMPORT_PLUS"), root_1);

                        adaptor.addChild(root_1, stream_testid.nextTree());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:71: ( Id )?
                        if ( stream_Id.hasNext() ) {
                            adaptor.addChild(root_1, stream_Id.nextNode());

                        }
                        stream_Id.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:556:4: '-' ( NL )? testid
                    {
                    char_literal268=(Token)match(input,MINUS,FOLLOW_MINUS_in_importsetclause3440); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(char_literal268);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:556:8: ( NL )?
                    int alt127=2;
                    int LA127_0 = input.LA(1);

                    if ( (LA127_0==NL) ) {
                        alt127=1;
                    }
                    switch (alt127) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:556:8: NL
                            {
                            NL269=(Token)match(input,NL,FOLLOW_NL_in_importsetclause3442); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL269);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_testid_in_importsetclause3445);
                    testid270=testid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_testid.add(testid270.getTree());


                    // AST REWRITE
                    // elements: testid
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 556:19: -> ^( IMPORT_MINUS testid )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:556:22: ^( IMPORT_MINUS testid )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_MINUS, "IMPORT_MINUS"), root_1);

                        adaptor.addChild(root_1, stream_testid.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:4: importall
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_importall_in_importsetclause3458);
                    importall271=importall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, importall271.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "importsetclause"

    public static class importset_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importset"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:559:1: importset : '{' ( NL )? importsetclause ( ( NL )? ',' ( NL )? importsetclause )* ( NL )? '}' -> ^( IMPORT_SET ( importsetclause )* ) ;
    public final babel17Parser.importset_return importset() throws RecognitionException {
        babel17Parser.importset_return retval = new babel17Parser.importset_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal272=null;
        Token NL273=null;
        Token NL275=null;
        Token char_literal276=null;
        Token NL277=null;
        Token NL279=null;
        Token char_literal280=null;
        babel17Parser.importsetclause_return importsetclause274 = null;

        babel17Parser.importsetclause_return importsetclause278 = null;


        CommonTree char_literal272_tree=null;
        CommonTree NL273_tree=null;
        CommonTree NL275_tree=null;
        CommonTree char_literal276_tree=null;
        CommonTree NL277_tree=null;
        CommonTree NL279_tree=null;
        CommonTree char_literal280_tree=null;
        RewriteRuleTokenStream stream_CURLY_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_OPEN");
        RewriteRuleTokenStream stream_CURLY_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_importsetclause=new RewriteRuleSubtreeStream(adaptor,"rule importsetclause");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:2: ( '{' ( NL )? importsetclause ( ( NL )? ',' ( NL )? importsetclause )* ( NL )? '}' -> ^( IMPORT_SET ( importsetclause )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:4: '{' ( NL )? importsetclause ( ( NL )? ',' ( NL )? importsetclause )* ( NL )? '}'
            {
            char_literal272=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_importset3468); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal272);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:8: ( NL )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==NL) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:8: NL
                    {
                    NL273=(Token)match(input,NL,FOLLOW_NL_in_importset3470); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL273);


                    }
                    break;

            }

            pushFollow(FOLLOW_importsetclause_in_importset3473);
            importsetclause274=importsetclause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importsetclause.add(importsetclause274.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:28: ( ( NL )? ',' ( NL )? importsetclause )*
            loop132:
            do {
                int alt132=2;
                int LA132_0 = input.LA(1);

                if ( (LA132_0==NL) ) {
                    int LA132_1 = input.LA(2);

                    if ( (LA132_1==COMMA) ) {
                        alt132=1;
                    }


                }
                else if ( (LA132_0==COMMA) ) {
                    alt132=1;
                }


                switch (alt132) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:29: ( NL )? ',' ( NL )? importsetclause
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:29: ( NL )?
            	    int alt130=2;
            	    int LA130_0 = input.LA(1);

            	    if ( (LA130_0==NL) ) {
            	        alt130=1;
            	    }
            	    switch (alt130) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:29: NL
            	            {
            	            NL275=(Token)match(input,NL,FOLLOW_NL_in_importset3476); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL275);


            	            }
            	            break;

            	    }

            	    char_literal276=(Token)match(input,COMMA,FOLLOW_COMMA_in_importset3479); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal276);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:37: ( NL )?
            	    int alt131=2;
            	    int LA131_0 = input.LA(1);

            	    if ( (LA131_0==NL) ) {
            	        alt131=1;
            	    }
            	    switch (alt131) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:37: NL
            	            {
            	            NL277=(Token)match(input,NL,FOLLOW_NL_in_importset3481); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL277);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_importsetclause_in_importset3484);
            	    importsetclause278=importsetclause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_importsetclause.add(importsetclause278.getTree());

            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:59: ( NL )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==NL) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:59: NL
                    {
                    NL279=(Token)match(input,NL,FOLLOW_NL_in_importset3488); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL279);


                    }
                    break;

            }

            char_literal280=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_importset3491); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal280);



            // AST REWRITE
            // elements: importsetclause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 560:67: -> ^( IMPORT_SET ( importsetclause )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:70: ^( IMPORT_SET ( importsetclause )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_SET, "IMPORT_SET"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:83: ( importsetclause )*
                while ( stream_importsetclause.hasNext() ) {
                    adaptor.addChild(root_1, stream_importsetclause.nextTree());

                }
                stream_importsetclause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "importset"

    public static class st_import_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_import"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:562:1: st_import : L_import ( NL )? importprefix ( ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id ) )? -> ^( L_import importprefix ( importall )? ( importset )? ( Id )? ) ;
    public final babel17Parser.st_import_return st_import() throws RecognitionException {
        babel17Parser.st_import_return retval = new babel17Parser.st_import_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_import281=null;
        Token NL282=null;
        Token NL284=null;
        Token PERIOD285=null;
        Token NL286=null;
        Token PERIOD288=null;
        Token NL289=null;
        Token NL292=null;
        Token Id293=null;
        babel17Parser.importprefix_return importprefix283 = null;

        babel17Parser.importall_return importall287 = null;

        babel17Parser.importset_return importset290 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW291 = null;


        CommonTree L_import281_tree=null;
        CommonTree NL282_tree=null;
        CommonTree NL284_tree=null;
        CommonTree PERIOD285_tree=null;
        CommonTree NL286_tree=null;
        CommonTree PERIOD288_tree=null;
        CommonTree NL289_tree=null;
        CommonTree NL292_tree=null;
        CommonTree Id293_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_L_import=new RewriteRuleTokenStream(adaptor,"token L_import");
        RewriteRuleSubtreeStream stream_importprefix=new RewriteRuleSubtreeStream(adaptor,"rule importprefix");
        RewriteRuleSubtreeStream stream_importset=new RewriteRuleSubtreeStream(adaptor,"rule importset");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_importall=new RewriteRuleSubtreeStream(adaptor,"rule importall");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:563:2: ( L_import ( NL )? importprefix ( ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id ) )? -> ^( L_import importprefix ( importall )? ( importset )? ( Id )? ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:563:4: L_import ( NL )? importprefix ( ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id ) )?
            {
            L_import281=(Token)match(input,L_import,FOLLOW_L_import_in_st_import3509); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_import.add(L_import281);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:563:13: ( NL )?
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==NL) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:563:13: NL
                    {
                    NL282=(Token)match(input,NL,FOLLOW_NL_in_st_import3511); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL282);


                    }
                    break;

            }

            pushFollow(FOLLOW_importprefix_in_st_import3514);
            importprefix283=importprefix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importprefix.add(importprefix283.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:563:30: ( ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id ) )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==NL) ) {
                int LA140_1 = input.LA(2);

                if ( ((LA140_1>=A_DOUBLE_ARROW && LA140_1<=U_DOUBLE_ARROW)||LA140_1==PERIOD) ) {
                    alt140=1;
                }
            }
            else if ( ((LA140_0>=A_DOUBLE_ARROW && LA140_0<=U_DOUBLE_ARROW)||LA140_0==PERIOD) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:563:31: ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id )
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:563:31: ( NL )?
                    int alt135=2;
                    int LA135_0 = input.LA(1);

                    if ( (LA135_0==NL) ) {
                        alt135=1;
                    }
                    switch (alt135) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:563:31: NL
                            {
                            NL284=(Token)match(input,NL,FOLLOW_NL_in_st_import3517); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL284);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:563:35: ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id )
                    int alt139=3;
                    int LA139_0 = input.LA(1);

                    if ( (LA139_0==PERIOD) ) {
                        switch ( input.LA(2) ) {
                        case NL:
                            {
                            int LA139_3 = input.LA(3);

                            if ( (LA139_3==CURLY_BRACKET_OPEN) ) {
                                alt139=2;
                            }
                            else if ( (LA139_3==UNDERSCORE) ) {
                                alt139=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 139, 3, input);

                                throw nvae;
                            }
                            }
                            break;
                        case UNDERSCORE:
                            {
                            alt139=1;
                            }
                            break;
                        case CURLY_BRACKET_OPEN:
                            {
                            alt139=2;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 139, 1, input);

                            throw nvae;
                        }

                    }
                    else if ( ((LA139_0>=A_DOUBLE_ARROW && LA139_0<=U_DOUBLE_ARROW)) ) {
                        alt139=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 139, 0, input);

                        throw nvae;
                    }
                    switch (alt139) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:563:36: PERIOD ( NL )? importall
                            {
                            PERIOD285=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_st_import3521); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD285);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:563:43: ( NL )?
                            int alt136=2;
                            int LA136_0 = input.LA(1);

                            if ( (LA136_0==NL) ) {
                                alt136=1;
                            }
                            switch (alt136) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:563:43: NL
                                    {
                                    NL286=(Token)match(input,NL,FOLLOW_NL_in_st_import3523); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL286);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_importall_in_st_import3526);
                            importall287=importall();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_importall.add(importall287.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:563:59: PERIOD ( NL )? importset
                            {
                            PERIOD288=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_st_import3530); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD288);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:563:66: ( NL )?
                            int alt137=2;
                            int LA137_0 = input.LA(1);

                            if ( (LA137_0==NL) ) {
                                alt137=1;
                            }
                            switch (alt137) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:563:66: NL
                                    {
                                    NL289=(Token)match(input,NL,FOLLOW_NL_in_st_import3532); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL289);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_importset_in_st_import3535);
                            importset290=importset();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_importset.add(importset290.getTree());

                            }
                            break;
                        case 3 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:563:82: token_DOUBLE_ARROW ( NL )? Id
                            {
                            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_st_import3539);
                            token_DOUBLE_ARROW291=token_DOUBLE_ARROW();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW291.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:563:101: ( NL )?
                            int alt138=2;
                            int LA138_0 = input.LA(1);

                            if ( (LA138_0==NL) ) {
                                alt138=1;
                            }
                            switch (alt138) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:563:101: NL
                                    {
                                    NL292=(Token)match(input,NL,FOLLOW_NL_in_st_import3541); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL292);


                                    }
                                    break;

                            }

                            Id293=(Token)match(input,Id,FOLLOW_Id_in_st_import3544); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Id.add(Id293);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: importprefix, L_import, Id, importset, importall
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 563:111: -> ^( L_import importprefix ( importall )? ( importset )? ( Id )? )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:563:114: ^( L_import importprefix ( importall )? ( importset )? ( Id )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_L_import.nextNode(), root_1);

                adaptor.addChild(root_1, stream_importprefix.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:563:138: ( importall )?
                if ( stream_importall.hasNext() ) {
                    adaptor.addChild(root_1, stream_importall.nextTree());

                }
                stream_importall.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:563:149: ( importset )?
                if ( stream_importset.hasNext() ) {
                    adaptor.addChild(root_1, stream_importset.nextTree());

                }
                stream_importset.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:563:160: ( Id )?
                if ( stream_Id.hasNext() ) {
                    adaptor.addChild(root_1, stream_Id.nextNode());

                }
                stream_Id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_import"

    public static class expr_or_assign_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_or_assign"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:1: expr_or_assign : ( ( ( pattern | objelem_assign ) ( NL )? '=' )=> ( pattern | objelem_assign ) ( NL )? '=' ( NL )? expr -> ^( ASSIGN ( pattern )* ( objelem_assign )* expr ) | expr );
    public final babel17Parser.expr_or_assign_return expr_or_assign() throws RecognitionException {
        babel17Parser.expr_or_assign_return retval = new babel17Parser.expr_or_assign_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL296=null;
        Token char_literal297=null;
        Token NL298=null;
        babel17Parser.pattern_return pattern294 = null;

        babel17Parser.objelem_assign_return objelem_assign295 = null;

        babel17Parser.expr_return expr299 = null;

        babel17Parser.expr_return expr300 = null;


        CommonTree NL296_tree=null;
        CommonTree char_literal297_tree=null;
        CommonTree NL298_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_objelem_assign=new RewriteRuleSubtreeStream(adaptor,"rule objelem_assign");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:566:2: ( ( ( pattern | objelem_assign ) ( NL )? '=' )=> ( pattern | objelem_assign ) ( NL )? '=' ( NL )? expr -> ^( ASSIGN ( pattern )* ( objelem_assign )* expr ) | expr )
            int alt144=2;
            alt144 = dfa144.predict(input);
            switch (alt144) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:566:4: ( ( pattern | objelem_assign ) ( NL )? '=' )=> ( pattern | objelem_assign ) ( NL )? '=' ( NL )? expr
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:566:44: ( pattern | objelem_assign )
                    int alt141=2;
                    int LA141_0 = input.LA(1);

                    if ( (LA141_0==L_exception||(LA141_0>=L_true && LA141_0<=L_false)||LA141_0==L_nil||LA141_0==MINUS||(LA141_0>=A_ELLIPSIS && LA141_0<=U_ELLIPSIS)||LA141_0==Constr||LA141_0==Num||(LA141_0>=String && LA141_0<=ROUND_BRACKET_OPEN)||LA141_0==SQUARE_BRACKET_OPEN||LA141_0==CURLY_BRACKET_OPEN||LA141_0==UNDERSCORE) ) {
                        alt141=1;
                    }
                    else if ( (LA141_0==Id) ) {
                        int LA141_2 = input.LA(2);

                        if ( (LA141_2==PERIOD) ) {
                            alt141=2;
                        }
                        else if ( (LA141_2==ASSIGN||(LA141_2>=A_DOUBLE_COLON && LA141_2<=U_DOUBLE_COLON)||LA141_2==NL) ) {
                            alt141=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 141, 2, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 141, 0, input);

                        throw nvae;
                    }
                    switch (alt141) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:566:45: pattern
                            {
                            pushFollow(FOLLOW_pattern_in_expr_or_assign3592);
                            pattern294=pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pattern.add(pattern294.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:566:55: objelem_assign
                            {
                            pushFollow(FOLLOW_objelem_assign_in_expr_or_assign3596);
                            objelem_assign295=objelem_assign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_objelem_assign.add(objelem_assign295.getTree());

                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:566:71: ( NL )?
                    int alt142=2;
                    int LA142_0 = input.LA(1);

                    if ( (LA142_0==NL) ) {
                        alt142=1;
                    }
                    switch (alt142) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:566:71: NL
                            {
                            NL296=(Token)match(input,NL,FOLLOW_NL_in_expr_or_assign3599); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL296);


                            }
                            break;

                    }

                    char_literal297=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_expr_or_assign3602); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal297);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:566:79: ( NL )?
                    int alt143=2;
                    int LA143_0 = input.LA(1);

                    if ( (LA143_0==NL) ) {
                        alt143=1;
                    }
                    switch (alt143) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:566:79: NL
                            {
                            NL298=(Token)match(input,NL,FOLLOW_NL_in_expr_or_assign3604); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL298);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_expr_or_assign3607);
                    expr299=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr299.getTree());


                    // AST REWRITE
                    // elements: objelem_assign, expr, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 566:88: -> ^( ASSIGN ( pattern )* ( objelem_assign )* expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:566:91: ^( ASSIGN ( pattern )* ( objelem_assign )* expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:566:100: ( pattern )*
                        while ( stream_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_pattern.nextTree());

                        }
                        stream_pattern.reset();
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:566:109: ( objelem_assign )*
                        while ( stream_objelem_assign.hasNext() ) {
                            adaptor.addChild(root_1, stream_objelem_assign.nextTree());

                        }
                        stream_objelem_assign.reset();
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:567:4: expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expr_in_expr_or_assign3626);
                    expr300=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr300.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expr_or_assign"

    public static class expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:569:1: expr : lop_expr ;
    public final babel17Parser.expr_return expr() throws RecognitionException {
        babel17Parser.expr_return retval = new babel17Parser.expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.lop_expr_return lop_expr301 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:570:2: ( lop_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:570:4: lop_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_lop_expr_in_expr3637);
            lop_expr301=lop_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lop_expr301.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expr"

    public static class control_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "control_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:1: control_expr : ( if_expr | while_do_expr | match_expr | for_expr | try_expr | begin_end );
    public final babel17Parser.control_expr_return control_expr() throws RecognitionException {
        babel17Parser.control_expr_return retval = new babel17Parser.control_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.if_expr_return if_expr302 = null;

        babel17Parser.while_do_expr_return while_do_expr303 = null;

        babel17Parser.match_expr_return match_expr304 = null;

        babel17Parser.for_expr_return for_expr305 = null;

        babel17Parser.try_expr_return try_expr306 = null;

        babel17Parser.begin_end_return begin_end307 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:574:2: ( if_expr | while_do_expr | match_expr | for_expr | try_expr | begin_end )
            int alt145=6;
            switch ( input.LA(1) ) {
            case L_if:
                {
                alt145=1;
                }
                break;
            case L_while:
                {
                alt145=2;
                }
                break;
            case L_match:
                {
                alt145=3;
                }
                break;
            case L_for:
                {
                alt145=4;
                }
                break;
            case L_try:
                {
                alt145=5;
                }
                break;
            case L_begin:
                {
                alt145=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);

                throw nvae;
            }

            switch (alt145) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:574:4: if_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_if_expr_in_control_expr3649);
                    if_expr302=if_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_expr302.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:575:4: while_do_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_while_do_expr_in_control_expr3654);
                    while_do_expr303=while_do_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_do_expr303.getTree());

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:576:4: match_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_match_expr_in_control_expr3659);
                    match_expr304=match_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, match_expr304.getTree());

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:4: for_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_for_expr_in_control_expr3664);
                    for_expr305=for_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_expr305.getTree());

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:578:5: try_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_try_expr_in_control_expr3670);
                    try_expr306=try_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, try_expr306.getTree());

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:579:4: begin_end
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_begin_end_in_control_expr3675);
                    begin_end307=begin_end();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, begin_end307.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "control_expr"

    public static class with_control_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "with_control_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:581:1: with_control_expr : ( control_expr | L_with ( NL )? protected_expr ( NL )? L_do block L_end -> ^( WITH protected_expr ^( BEGIN block ) ) );
    public final babel17Parser.with_control_expr_return with_control_expr() throws RecognitionException {
        babel17Parser.with_control_expr_return retval = new babel17Parser.with_control_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_with309=null;
        Token NL310=null;
        Token NL312=null;
        Token L_do313=null;
        Token L_end315=null;
        babel17Parser.control_expr_return control_expr308 = null;

        babel17Parser.protected_expr_return protected_expr311 = null;

        babel17Parser.block_return block314 = null;


        CommonTree L_with309_tree=null;
        CommonTree NL310_tree=null;
        CommonTree NL312_tree=null;
        CommonTree L_do313_tree=null;
        CommonTree L_end315_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_do=new RewriteRuleTokenStream(adaptor,"token L_do");
        RewriteRuleTokenStream stream_L_with=new RewriteRuleTokenStream(adaptor,"token L_with");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:582:2: ( control_expr | L_with ( NL )? protected_expr ( NL )? L_do block L_end -> ^( WITH protected_expr ^( BEGIN block ) ) )
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==L_begin||LA148_0==L_if||(LA148_0>=L_while && LA148_0<=L_for)||LA148_0==L_match||LA148_0==L_try) ) {
                alt148=1;
            }
            else if ( (LA148_0==L_with) ) {
                alt148=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);

                throw nvae;
            }
            switch (alt148) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:582:4: control_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_control_expr_in_with_control_expr3685);
                    control_expr308=control_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, control_expr308.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:583:4: L_with ( NL )? protected_expr ( NL )? L_do block L_end
                    {
                    L_with309=(Token)match(input,L_with,FOLLOW_L_with_in_with_control_expr3690); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_with.add(L_with309);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:583:11: ( NL )?
                    int alt146=2;
                    int LA146_0 = input.LA(1);

                    if ( (LA146_0==NL) ) {
                        alt146=1;
                    }
                    switch (alt146) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:583:11: NL
                            {
                            NL310=(Token)match(input,NL,FOLLOW_NL_in_with_control_expr3692); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL310);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_in_with_control_expr3695);
                    protected_expr311=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr311.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:583:30: ( NL )?
                    int alt147=2;
                    int LA147_0 = input.LA(1);

                    if ( (LA147_0==NL) ) {
                        alt147=1;
                    }
                    switch (alt147) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:583:30: NL
                            {
                            NL312=(Token)match(input,NL,FOLLOW_NL_in_with_control_expr3697); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL312);


                            }
                            break;

                    }

                    L_do313=(Token)match(input,L_do,FOLLOW_L_do_in_with_control_expr3700); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_do.add(L_do313);

                    pushFollow(FOLLOW_block_in_with_control_expr3702);
                    block314=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block314.getTree());
                    L_end315=(Token)match(input,L_end,FOLLOW_L_end_in_with_control_expr3704); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_end.add(L_end315);



                    // AST REWRITE
                    // elements: block, protected_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 583:51: -> ^( WITH protected_expr ^( BEGIN block ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:583:54: ^( WITH protected_expr ^( BEGIN block ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WITH, "WITH"), root_1);

                        adaptor.addChild(root_1, stream_protected_expr.nextTree());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:583:76: ^( BEGIN block )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BEGIN, "BEGIN"), root_2);

                        adaptor.addChild(root_2, stream_block.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "with_control_expr"

    public static class protected_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "protected_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:586:1: protected_expr : p_lop_expr ;
    public final babel17Parser.protected_expr_return protected_expr() throws RecognitionException {
        babel17Parser.protected_expr_return retval = new babel17Parser.protected_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.p_lop_expr_return p_lop_expr316 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:587:2: ( p_lop_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:587:4: p_lop_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_lop_expr_in_protected_expr3729);
            p_lop_expr316=p_lop_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_lop_expr316.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "protected_expr"

    public static class protected_expr_nc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "protected_expr_nc"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:590:1: protected_expr_nc : protected_expr ;
    public final babel17Parser.protected_expr_nc_return protected_expr_nc() throws RecognitionException {
        babel17Parser.protected_expr_nc_return retval = new babel17Parser.protected_expr_nc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.protected_expr_return protected_expr317 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:591:2: ( protected_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:591:4: protected_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_protected_expr_in_protected_expr_nc3742);
            protected_expr317=protected_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, protected_expr317.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "protected_expr_nc"

    public static class begin_end_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "begin_end"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:593:1: begin_end : L_begin block L_end -> ^( BEGIN block ) ;
    public final babel17Parser.begin_end_return begin_end() throws RecognitionException {
        babel17Parser.begin_end_return retval = new babel17Parser.begin_end_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_begin318=null;
        Token L_end320=null;
        babel17Parser.block_return block319 = null;


        CommonTree L_begin318_tree=null;
        CommonTree L_end320_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_begin=new RewriteRuleTokenStream(adaptor,"token L_begin");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:594:2: ( L_begin block L_end -> ^( BEGIN block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:594:4: L_begin block L_end
            {
            L_begin318=(Token)match(input,L_begin,FOLLOW_L_begin_in_begin_end3752); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_begin.add(L_begin318);

            pushFollow(FOLLOW_block_in_begin_end3754);
            block319=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block319.getTree());
            L_end320=(Token)match(input,L_end,FOLLOW_L_end_in_begin_end3756); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end320);



            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 594:24: -> ^( BEGIN block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:594:27: ^( BEGIN block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BEGIN, "BEGIN"), root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "begin_end"

    public static class parents_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parents"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:597:1: parents : ( '+' primitive_expr -> ^( PARENTS_PLUS primitive_expr ) | '*' primitive_expr -> ^( PARENTS_MUL primitive_expr ) );
    public final babel17Parser.parents_return parents() throws RecognitionException {
        babel17Parser.parents_return retval = new babel17Parser.parents_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal321=null;
        Token char_literal323=null;
        babel17Parser.primitive_expr_return primitive_expr322 = null;

        babel17Parser.primitive_expr_return primitive_expr324 = null;


        CommonTree char_literal321_tree=null;
        CommonTree char_literal323_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_TIMES=new RewriteRuleTokenStream(adaptor,"token TIMES");
        RewriteRuleSubtreeStream stream_primitive_expr=new RewriteRuleSubtreeStream(adaptor,"rule primitive_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:597:9: ( '+' primitive_expr -> ^( PARENTS_PLUS primitive_expr ) | '*' primitive_expr -> ^( PARENTS_MUL primitive_expr ) )
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==PLUS) ) {
                alt149=1;
            }
            else if ( (LA149_0==TIMES) ) {
                alt149=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);

                throw nvae;
            }
            switch (alt149) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:597:11: '+' primitive_expr
                    {
                    char_literal321=(Token)match(input,PLUS,FOLLOW_PLUS_in_parents3774); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(char_literal321);

                    pushFollow(FOLLOW_primitive_expr_in_parents3776);
                    primitive_expr322=primitive_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitive_expr.add(primitive_expr322.getTree());


                    // AST REWRITE
                    // elements: primitive_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 597:30: -> ^( PARENTS_PLUS primitive_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:597:33: ^( PARENTS_PLUS primitive_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARENTS_PLUS, "PARENTS_PLUS"), root_1);

                        adaptor.addChild(root_1, stream_primitive_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:598:4: '*' primitive_expr
                    {
                    char_literal323=(Token)match(input,TIMES,FOLLOW_TIMES_in_parents3789); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMES.add(char_literal323);

                    pushFollow(FOLLOW_primitive_expr_in_parents3791);
                    primitive_expr324=primitive_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitive_expr.add(primitive_expr324.getTree());


                    // AST REWRITE
                    // elements: primitive_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 598:23: -> ^( PARENTS_MUL primitive_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:598:26: ^( PARENTS_MUL primitive_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARENTS_MUL, "PARENTS_MUL"), root_1);

                        adaptor.addChild(root_1, stream_primitive_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parents"

    public static class obj_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "obj_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:601:1: obj_expr : ( ( L_obj ( NL )? parents )=> L_obj ( NL )? parents block L_end -> ^( OBJ block parents ) | L_obj block L_end -> ^( OBJ block ) );
    public final babel17Parser.obj_expr_return obj_expr() throws RecognitionException {
        babel17Parser.obj_expr_return retval = new babel17Parser.obj_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_obj325=null;
        Token NL326=null;
        Token L_end329=null;
        Token L_obj330=null;
        Token L_end332=null;
        babel17Parser.parents_return parents327 = null;

        babel17Parser.block_return block328 = null;

        babel17Parser.block_return block331 = null;


        CommonTree L_obj325_tree=null;
        CommonTree NL326_tree=null;
        CommonTree L_end329_tree=null;
        CommonTree L_obj330_tree=null;
        CommonTree L_end332_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_obj=new RewriteRuleTokenStream(adaptor,"token L_obj");
        RewriteRuleSubtreeStream stream_parents=new RewriteRuleSubtreeStream(adaptor,"rule parents");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:601:9: ( ( L_obj ( NL )? parents )=> L_obj ( NL )? parents block L_end -> ^( OBJ block parents ) | L_obj block L_end -> ^( OBJ block ) )
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==L_obj) ) {
                int LA151_1 = input.LA(2);

                if ( (LA151_1==NL) ) {
                    int LA151_2 = input.LA(3);

                    if ( ((LA151_2>=L_begin && LA151_2<=L_if)||(LA151_2>=L_while && LA151_2<=L_for)||(LA151_2>=L_yield && LA151_2<=L_match)||(LA151_2>=L_val && LA151_2<=L_def)||LA151_2==L_exception||LA151_2==L_try||(LA151_2>=L_concurrent && LA151_2<=L_nil)||(LA151_2>=L_module && LA151_2<=L_import)||LA151_2==L_not||(LA151_2>=L_root && LA151_2<=L_native)||LA151_2==SC||LA151_2==MINUS||(LA151_2>=A_ELLIPSIS && LA151_2<=U_ELLIPSIS)||LA151_2==L_force||(LA151_2>=NL && LA151_2<=Id)||(LA151_2>=Float && LA151_2<=Num)||(LA151_2>=String && LA151_2<=ROUND_BRACKET_OPEN)||LA151_2==SQUARE_BRACKET_OPEN||LA151_2==CURLY_BRACKET_OPEN||LA151_2==UNDERSCORE||(LA151_2>=PRAGMA_LOG && LA151_2<=PRAGMA_CATCH)) ) {
                        alt151=2;
                    }
                    else if ( (LA151_2==PLUS) && (synpred9_babel17())) {
                        alt151=1;
                    }
                    else if ( (LA151_2==TIMES) && (synpred9_babel17())) {
                        alt151=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 151, 2, input);

                        throw nvae;
                    }
                }
                else if ( ((LA151_1>=L_begin && LA151_1<=L_if)||(LA151_1>=L_while && LA151_1<=L_for)||(LA151_1>=L_yield && LA151_1<=L_match)||(LA151_1>=L_val && LA151_1<=L_def)||LA151_1==L_exception||LA151_1==L_try||(LA151_1>=L_concurrent && LA151_1<=L_nil)||(LA151_1>=L_module && LA151_1<=L_import)||LA151_1==L_not||(LA151_1>=L_root && LA151_1<=L_native)||LA151_1==SC||LA151_1==MINUS||(LA151_1>=A_ELLIPSIS && LA151_1<=U_ELLIPSIS)||LA151_1==L_force||(LA151_1>=Constr && LA151_1<=Id)||(LA151_1>=Float && LA151_1<=Num)||(LA151_1>=String && LA151_1<=ROUND_BRACKET_OPEN)||LA151_1==SQUARE_BRACKET_OPEN||LA151_1==CURLY_BRACKET_OPEN||LA151_1==UNDERSCORE||(LA151_1>=PRAGMA_LOG && LA151_1<=PRAGMA_CATCH)) ) {
                    alt151=2;
                }
                else if ( (LA151_1==PLUS) && (synpred9_babel17())) {
                    alt151=1;
                }
                else if ( (LA151_1==TIMES) && (synpred9_babel17())) {
                    alt151=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 151, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);

                throw nvae;
            }
            switch (alt151) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:601:11: ( L_obj ( NL )? parents )=> L_obj ( NL )? parents block L_end
                    {
                    L_obj325=(Token)match(input,L_obj,FOLLOW_L_obj_in_obj_expr3819); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_obj.add(L_obj325);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:601:40: ( NL )?
                    int alt150=2;
                    int LA150_0 = input.LA(1);

                    if ( (LA150_0==NL) ) {
                        alt150=1;
                    }
                    switch (alt150) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:601:40: NL
                            {
                            NL326=(Token)match(input,NL,FOLLOW_NL_in_obj_expr3821); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL326);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_parents_in_obj_expr3824);
                    parents327=parents();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parents.add(parents327.getTree());
                    pushFollow(FOLLOW_block_in_obj_expr3826);
                    block328=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block328.getTree());
                    L_end329=(Token)match(input,L_end,FOLLOW_L_end_in_obj_expr3828); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_end.add(L_end329);



                    // AST REWRITE
                    // elements: parents, block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 601:64: -> ^( OBJ block parents )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:601:67: ^( OBJ block parents )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJ, "OBJ"), root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());
                        adaptor.addChild(root_1, stream_parents.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:602:17: L_obj block L_end
                    {
                    L_obj330=(Token)match(input,L_obj,FOLLOW_L_obj_in_obj_expr3856); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_obj.add(L_obj330);

                    pushFollow(FOLLOW_block_in_obj_expr3858);
                    block331=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block331.getTree());
                    L_end332=(Token)match(input,L_end,FOLLOW_L_end_in_obj_expr3860); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_end.add(L_end332);



                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 602:35: -> ^( OBJ block )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:602:38: ^( OBJ block )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJ, "OBJ"), root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "obj_expr"

    public static class lop_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lop_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:604:1: lop_expr : ( ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | op_expr );
    public final babel17Parser.lop_expr_return lop_expr() throws RecognitionException {
        babel17Parser.lop_expr_return retval = new babel17Parser.lop_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.lambda_expr_nobrackets_return lambda_expr_nobrackets333 = null;

        babel17Parser.op_expr_return op_expr334 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:606:2: ( ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | op_expr )
            int alt152=2;
            alt152 = dfa152.predict(input);
            switch (alt152) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:606:4: ( lambda_expr_nobrackets )=> lambda_expr_nobrackets
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lambda_expr_nobrackets_in_lop_expr3890);
                    lambda_expr_nobrackets333=lambda_expr_nobrackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lambda_expr_nobrackets333.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:607:4: op_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_op_expr_in_lop_expr3895);
                    op_expr334=op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op_expr334.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lop_expr"

    public static class p_lop_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_lop_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:609:1: p_lop_expr : ( ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | p_op_expr );
    public final babel17Parser.p_lop_expr_return p_lop_expr() throws RecognitionException {
        babel17Parser.p_lop_expr_return retval = new babel17Parser.p_lop_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.lambda_expr_nobrackets_return lambda_expr_nobrackets335 = null;

        babel17Parser.p_op_expr_return p_op_expr336 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:611:2: ( ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | p_op_expr )
            int alt153=2;
            alt153 = dfa153.predict(input);
            switch (alt153) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:611:4: ( lambda_expr_nobrackets )=> lambda_expr_nobrackets
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lambda_expr_nobrackets_in_p_lop_expr3913);
                    lambda_expr_nobrackets335=lambda_expr_nobrackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lambda_expr_nobrackets335.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:612:4: p_op_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_op_expr_in_p_lop_expr3918);
                    p_op_expr336=p_op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_op_expr336.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_lop_expr"

    public static class if_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "if_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:614:1: if_expr : L_if ( NL )? protected_expr ( NL )? L_then block ( L_elseif ( NL )? protected_expr ( NL )? L_then block )* ( L_else block )? L_end -> ^( IF ( protected_expr )* ( block )* ) ;
    public final babel17Parser.if_expr_return if_expr() throws RecognitionException {
        babel17Parser.if_expr_return retval = new babel17Parser.if_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_if337=null;
        Token NL338=null;
        Token NL340=null;
        Token L_then341=null;
        Token L_elseif343=null;
        Token NL344=null;
        Token NL346=null;
        Token L_then347=null;
        Token L_else349=null;
        Token L_end351=null;
        babel17Parser.protected_expr_return protected_expr339 = null;

        babel17Parser.block_return block342 = null;

        babel17Parser.protected_expr_return protected_expr345 = null;

        babel17Parser.block_return block348 = null;

        babel17Parser.block_return block350 = null;


        CommonTree L_if337_tree=null;
        CommonTree NL338_tree=null;
        CommonTree NL340_tree=null;
        CommonTree L_then341_tree=null;
        CommonTree L_elseif343_tree=null;
        CommonTree NL344_tree=null;
        CommonTree NL346_tree=null;
        CommonTree L_then347_tree=null;
        CommonTree L_else349_tree=null;
        CommonTree L_end351_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_else=new RewriteRuleTokenStream(adaptor,"token L_else");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_elseif=new RewriteRuleTokenStream(adaptor,"token L_elseif");
        RewriteRuleTokenStream stream_L_then=new RewriteRuleTokenStream(adaptor,"token L_then");
        RewriteRuleTokenStream stream_L_if=new RewriteRuleTokenStream(adaptor,"token L_if");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:614:9: ( L_if ( NL )? protected_expr ( NL )? L_then block ( L_elseif ( NL )? protected_expr ( NL )? L_then block )* ( L_else block )? L_end -> ^( IF ( protected_expr )* ( block )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:614:11: L_if ( NL )? protected_expr ( NL )? L_then block ( L_elseif ( NL )? protected_expr ( NL )? L_then block )* ( L_else block )? L_end
            {
            L_if337=(Token)match(input,L_if,FOLLOW_L_if_in_if_expr3928); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_if.add(L_if337);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:614:16: ( NL )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==NL) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:614:16: NL
                    {
                    NL338=(Token)match(input,NL,FOLLOW_NL_in_if_expr3930); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL338);


                    }
                    break;

            }

            pushFollow(FOLLOW_protected_expr_in_if_expr3933);
            protected_expr339=protected_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr339.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:614:35: ( NL )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==NL) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:614:35: NL
                    {
                    NL340=(Token)match(input,NL,FOLLOW_NL_in_if_expr3935); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL340);


                    }
                    break;

            }

            L_then341=(Token)match(input,L_then,FOLLOW_L_then_in_if_expr3938); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_then.add(L_then341);

            pushFollow(FOLLOW_block_in_if_expr3940);
            block342=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block342.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:615:3: ( L_elseif ( NL )? protected_expr ( NL )? L_then block )*
            loop158:
            do {
                int alt158=2;
                int LA158_0 = input.LA(1);

                if ( (LA158_0==L_elseif) ) {
                    alt158=1;
                }


                switch (alt158) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:615:4: L_elseif ( NL )? protected_expr ( NL )? L_then block
            	    {
            	    L_elseif343=(Token)match(input,L_elseif,FOLLOW_L_elseif_in_if_expr3946); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_L_elseif.add(L_elseif343);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:615:13: ( NL )?
            	    int alt156=2;
            	    int LA156_0 = input.LA(1);

            	    if ( (LA156_0==NL) ) {
            	        alt156=1;
            	    }
            	    switch (alt156) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:615:13: NL
            	            {
            	            NL344=(Token)match(input,NL,FOLLOW_NL_in_if_expr3948); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL344);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_protected_expr_in_if_expr3951);
            	    protected_expr345=protected_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr345.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:615:32: ( NL )?
            	    int alt157=2;
            	    int LA157_0 = input.LA(1);

            	    if ( (LA157_0==NL) ) {
            	        alt157=1;
            	    }
            	    switch (alt157) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:615:32: NL
            	            {
            	            NL346=(Token)match(input,NL,FOLLOW_NL_in_if_expr3953); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL346);


            	            }
            	            break;

            	    }

            	    L_then347=(Token)match(input,L_then,FOLLOW_L_then_in_if_expr3956); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_L_then.add(L_then347);

            	    pushFollow(FOLLOW_block_in_if_expr3958);
            	    block348=block();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_block.add(block348.getTree());

            	    }
            	    break;

            	default :
            	    break loop158;
                }
            } while (true);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:616:3: ( L_else block )?
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==L_else) ) {
                alt159=1;
            }
            switch (alt159) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:616:4: L_else block
                    {
                    L_else349=(Token)match(input,L_else,FOLLOW_L_else_in_if_expr3966); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_else.add(L_else349);

                    pushFollow(FOLLOW_block_in_if_expr3968);
                    block350=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block350.getTree());

                    }
                    break;

            }

            L_end351=(Token)match(input,L_end,FOLLOW_L_end_in_if_expr3972); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end351);



            // AST REWRITE
            // elements: protected_expr, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 616:26: -> ^( IF ( protected_expr )* ( block )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:616:29: ^( IF ( protected_expr )* ( block )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IF, "IF"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:616:34: ( protected_expr )*
                while ( stream_protected_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_protected_expr.nextTree());

                }
                stream_protected_expr.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:616:50: ( block )*
                while ( stream_block.hasNext() ) {
                    adaptor.addChild(root_1, stream_block.nextTree());

                }
                stream_block.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "if_expr"

    public static class while_do_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "while_do_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:618:1: while_do_expr : L_while ( NL )? protected_expr ( NL )? L_do block L_end -> ^( WHILE_DO protected_expr block ) ;
    public final babel17Parser.while_do_expr_return while_do_expr() throws RecognitionException {
        babel17Parser.while_do_expr_return retval = new babel17Parser.while_do_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_while352=null;
        Token NL353=null;
        Token NL355=null;
        Token L_do356=null;
        Token L_end358=null;
        babel17Parser.protected_expr_return protected_expr354 = null;

        babel17Parser.block_return block357 = null;


        CommonTree L_while352_tree=null;
        CommonTree NL353_tree=null;
        CommonTree NL355_tree=null;
        CommonTree L_do356_tree=null;
        CommonTree L_end358_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_do=new RewriteRuleTokenStream(adaptor,"token L_do");
        RewriteRuleTokenStream stream_L_while=new RewriteRuleTokenStream(adaptor,"token L_while");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:619:2: ( L_while ( NL )? protected_expr ( NL )? L_do block L_end -> ^( WHILE_DO protected_expr block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:619:4: L_while ( NL )? protected_expr ( NL )? L_do block L_end
            {
            L_while352=(Token)match(input,L_while,FOLLOW_L_while_in_while_do_expr3996); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_while.add(L_while352);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:619:12: ( NL )?
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==NL) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:619:12: NL
                    {
                    NL353=(Token)match(input,NL,FOLLOW_NL_in_while_do_expr3998); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL353);


                    }
                    break;

            }

            pushFollow(FOLLOW_protected_expr_in_while_do_expr4001);
            protected_expr354=protected_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr354.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:619:31: ( NL )?
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==NL) ) {
                alt161=1;
            }
            switch (alt161) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:619:31: NL
                    {
                    NL355=(Token)match(input,NL,FOLLOW_NL_in_while_do_expr4003); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL355);


                    }
                    break;

            }

            L_do356=(Token)match(input,L_do,FOLLOW_L_do_in_while_do_expr4006); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_do.add(L_do356);

            pushFollow(FOLLOW_block_in_while_do_expr4008);
            block357=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block357.getTree());
            L_end358=(Token)match(input,L_end,FOLLOW_L_end_in_while_do_expr4010); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end358);



            // AST REWRITE
            // elements: block, protected_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 620:5: -> ^( WHILE_DO protected_expr block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:620:8: ^( WHILE_DO protected_expr block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHILE_DO, "WHILE_DO"), root_1);

                adaptor.addChild(root_1, stream_protected_expr.nextTree());
                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "while_do_expr"

    public static class cases_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cases"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:622:1: cases : ( full_cases | pattern ( NL )? token_DOUBLE_ARROW block -> ^( CASES ^( NIL_TOKEN pattern block ) ) );
    public final babel17Parser.cases_return cases() throws RecognitionException {
        babel17Parser.cases_return retval = new babel17Parser.cases_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL361=null;
        babel17Parser.full_cases_return full_cases359 = null;

        babel17Parser.pattern_return pattern360 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW362 = null;

        babel17Parser.block_return block363 = null;


        CommonTree NL361_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:623:2: ( full_cases | pattern ( NL )? token_DOUBLE_ARROW block -> ^( CASES ^( NIL_TOKEN pattern block ) ) )
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==L_case) ) {
                alt163=1;
            }
            else if ( (LA163_0==L_exception||(LA163_0>=L_true && LA163_0<=L_false)||LA163_0==L_nil||LA163_0==MINUS||(LA163_0>=A_ELLIPSIS && LA163_0<=U_ELLIPSIS)||(LA163_0>=Constr && LA163_0<=Id)||LA163_0==Num||(LA163_0>=String && LA163_0<=ROUND_BRACKET_OPEN)||LA163_0==SQUARE_BRACKET_OPEN||LA163_0==CURLY_BRACKET_OPEN||LA163_0==UNDERSCORE) ) {
                alt163=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 163, 0, input);

                throw nvae;
            }
            switch (alt163) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:623:4: full_cases
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_full_cases_in_cases4040);
                    full_cases359=full_cases();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, full_cases359.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:624:4: pattern ( NL )? token_DOUBLE_ARROW block
                    {
                    pushFollow(FOLLOW_pattern_in_cases4045);
                    pattern360=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern360.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:624:12: ( NL )?
                    int alt162=2;
                    int LA162_0 = input.LA(1);

                    if ( (LA162_0==NL) ) {
                        alt162=1;
                    }
                    switch (alt162) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:624:12: NL
                            {
                            NL361=(Token)match(input,NL,FOLLOW_NL_in_cases4047); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL361);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_token_DOUBLE_ARROW_in_cases4050);
                    token_DOUBLE_ARROW362=token_DOUBLE_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW362.getTree());
                    pushFollow(FOLLOW_block_in_cases4052);
                    block363=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block363.getTree());


                    // AST REWRITE
                    // elements: pattern, block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 624:41: -> ^( CASES ^( NIL_TOKEN pattern block ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:624:44: ^( CASES ^( NIL_TOKEN pattern block ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:624:52: ^( NIL_TOKEN pattern block )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        adaptor.addChild(root_2, stream_pattern.nextTree());
                        adaptor.addChild(root_2, stream_block.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cases"

    public static class full_cases_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "full_cases"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:626:1: full_cases : ( case_expr )+ -> ^( CASES ( case_expr )+ ) ;
    public final babel17Parser.full_cases_return full_cases() throws RecognitionException {
        babel17Parser.full_cases_return retval = new babel17Parser.full_cases_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.case_expr_return case_expr364 = null;


        RewriteRuleSubtreeStream stream_case_expr=new RewriteRuleSubtreeStream(adaptor,"rule case_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:627:2: ( ( case_expr )+ -> ^( CASES ( case_expr )+ ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:627:4: ( case_expr )+
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:627:4: ( case_expr )+
            int cnt164=0;
            loop164:
            do {
                int alt164=2;
                int LA164_0 = input.LA(1);

                if ( (LA164_0==L_case) ) {
                    alt164=1;
                }


                switch (alt164) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:627:4: case_expr
            	    {
            	    pushFollow(FOLLOW_case_expr_in_full_cases4075);
            	    case_expr364=case_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_case_expr.add(case_expr364.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt164 >= 1 ) break loop164;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(164, input);
                        throw eee;
                }
                cnt164++;
            } while (true);



            // AST REWRITE
            // elements: case_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 627:15: -> ^( CASES ( case_expr )+ )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:627:18: ^( CASES ( case_expr )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                if ( !(stream_case_expr.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_case_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_case_expr.nextTree());

                }
                stream_case_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "full_cases"

    public static class case_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "case_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:629:1: case_expr : ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block ) -> ^( NIL_TOKEN casepattern block ) ;
    public final babel17Parser.case_expr_return case_expr() throws RecognitionException {
        babel17Parser.case_expr_return retval = new babel17Parser.case_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_case365=null;
        Token NL366=null;
        Token NL368=null;
        babel17Parser.casepattern_return casepattern367 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW369 = null;

        babel17Parser.block_return block370 = null;


        CommonTree L_case365_tree=null;
        CommonTree NL366_tree=null;
        CommonTree NL368_tree=null;
        RewriteRuleTokenStream stream_L_case=new RewriteRuleTokenStream(adaptor,"token L_case");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_casepattern=new RewriteRuleSubtreeStream(adaptor,"rule casepattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:630:2: ( ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block ) -> ^( NIL_TOKEN casepattern block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:630:4: ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block )
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:630:4: ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:630:5: L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block
            {
            L_case365=(Token)match(input,L_case,FOLLOW_L_case_in_case_expr4096); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_case.add(L_case365);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:630:12: ( NL )?
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==NL) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:630:12: NL
                    {
                    NL366=(Token)match(input,NL,FOLLOW_NL_in_case_expr4098); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL366);


                    }
                    break;

            }

            pushFollow(FOLLOW_casepattern_in_case_expr4101);
            casepattern367=casepattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_casepattern.add(casepattern367.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:630:28: ( NL )?
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==NL) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:630:28: NL
                    {
                    NL368=(Token)match(input,NL,FOLLOW_NL_in_case_expr4103); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL368);


                    }
                    break;

            }

            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_case_expr4106);
            token_DOUBLE_ARROW369=token_DOUBLE_ARROW();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW369.getTree());
            pushFollow(FOLLOW_block_in_case_expr4108);
            block370=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block370.getTree());

            }



            // AST REWRITE
            // elements: casepattern, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 630:58: -> ^( NIL_TOKEN casepattern block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:630:61: ^( NIL_TOKEN casepattern block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_1);

                adaptor.addChild(root_1, stream_casepattern.nextTree());
                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "case_expr"

    public static class match_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "match_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:632:1: match_expr : L_match ( NL )? p_op_expr ( NL )? full_cases L_end -> ^( MATCH p_op_expr full_cases ) ;
    public final babel17Parser.match_expr_return match_expr() throws RecognitionException {
        babel17Parser.match_expr_return retval = new babel17Parser.match_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_match371=null;
        Token NL372=null;
        Token NL374=null;
        Token L_end376=null;
        babel17Parser.p_op_expr_return p_op_expr373 = null;

        babel17Parser.full_cases_return full_cases375 = null;


        CommonTree L_match371_tree=null;
        CommonTree NL372_tree=null;
        CommonTree NL374_tree=null;
        CommonTree L_end376_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_match=new RewriteRuleTokenStream(adaptor,"token L_match");
        RewriteRuleSubtreeStream stream_full_cases=new RewriteRuleSubtreeStream(adaptor,"rule full_cases");
        RewriteRuleSubtreeStream stream_p_op_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_op_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:633:2: ( L_match ( NL )? p_op_expr ( NL )? full_cases L_end -> ^( MATCH p_op_expr full_cases ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:633:4: L_match ( NL )? p_op_expr ( NL )? full_cases L_end
            {
            L_match371=(Token)match(input,L_match,FOLLOW_L_match_in_match_expr4129); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_match.add(L_match371);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:633:12: ( NL )?
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==NL) ) {
                alt167=1;
            }
            switch (alt167) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:633:12: NL
                    {
                    NL372=(Token)match(input,NL,FOLLOW_NL_in_match_expr4131); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL372);


                    }
                    break;

            }

            pushFollow(FOLLOW_p_op_expr_in_match_expr4134);
            p_op_expr373=p_op_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_op_expr.add(p_op_expr373.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:633:26: ( NL )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==NL) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:633:26: NL
                    {
                    NL374=(Token)match(input,NL,FOLLOW_NL_in_match_expr4136); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL374);


                    }
                    break;

            }

            pushFollow(FOLLOW_full_cases_in_match_expr4139);
            full_cases375=full_cases();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_full_cases.add(full_cases375.getTree());
            L_end376=(Token)match(input,L_end,FOLLOW_L_end_in_match_expr4141); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end376);



            // AST REWRITE
            // elements: full_cases, p_op_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 634:5: -> ^( MATCH p_op_expr full_cases )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:634:8: ^( MATCH p_op_expr full_cases )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH, "MATCH"), root_1);

                adaptor.addChild(root_1, stream_p_op_expr.nextTree());
                adaptor.addChild(root_1, stream_full_cases.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "match_expr"

    public static class try_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "try_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:636:1: try_expr : L_try ( NL )? pure_block ( NL )? L_catch ( NL )? full_cases L_end -> ^( TRY pure_block full_cases ) ;
    public final babel17Parser.try_expr_return try_expr() throws RecognitionException {
        babel17Parser.try_expr_return retval = new babel17Parser.try_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_try377=null;
        Token NL378=null;
        Token NL380=null;
        Token L_catch381=null;
        Token NL382=null;
        Token L_end384=null;
        babel17Parser.pure_block_return pure_block379 = null;

        babel17Parser.full_cases_return full_cases383 = null;


        CommonTree L_try377_tree=null;
        CommonTree NL378_tree=null;
        CommonTree NL380_tree=null;
        CommonTree L_catch381_tree=null;
        CommonTree NL382_tree=null;
        CommonTree L_end384_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_try=new RewriteRuleTokenStream(adaptor,"token L_try");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_catch=new RewriteRuleTokenStream(adaptor,"token L_catch");
        RewriteRuleSubtreeStream stream_full_cases=new RewriteRuleSubtreeStream(adaptor,"rule full_cases");
        RewriteRuleSubtreeStream stream_pure_block=new RewriteRuleSubtreeStream(adaptor,"rule pure_block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:636:9: ( L_try ( NL )? pure_block ( NL )? L_catch ( NL )? full_cases L_end -> ^( TRY pure_block full_cases ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:636:11: L_try ( NL )? pure_block ( NL )? L_catch ( NL )? full_cases L_end
            {
            L_try377=(Token)match(input,L_try,FOLLOW_L_try_in_try_expr4167); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_try.add(L_try377);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:636:17: ( NL )?
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==NL) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:636:17: NL
                    {
                    NL378=(Token)match(input,NL,FOLLOW_NL_in_try_expr4169); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL378);


                    }
                    break;

            }

            pushFollow(FOLLOW_pure_block_in_try_expr4172);
            pure_block379=pure_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pure_block.add(pure_block379.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:636:32: ( NL )?
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==NL) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:636:32: NL
                    {
                    NL380=(Token)match(input,NL,FOLLOW_NL_in_try_expr4174); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL380);


                    }
                    break;

            }

            L_catch381=(Token)match(input,L_catch,FOLLOW_L_catch_in_try_expr4177); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_catch.add(L_catch381);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:636:44: ( NL )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==NL) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:636:44: NL
                    {
                    NL382=(Token)match(input,NL,FOLLOW_NL_in_try_expr4179); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL382);


                    }
                    break;

            }

            pushFollow(FOLLOW_full_cases_in_try_expr4182);
            full_cases383=full_cases();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_full_cases.add(full_cases383.getTree());
            L_end384=(Token)match(input,L_end,FOLLOW_L_end_in_try_expr4184); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end384);



            // AST REWRITE
            // elements: full_cases, pure_block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 637:5: -> ^( TRY pure_block full_cases )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:637:8: ^( TRY pure_block full_cases )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TRY, "TRY"), root_1);

                adaptor.addChild(root_1, stream_pure_block.nextTree());
                adaptor.addChild(root_1, stream_full_cases.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "try_expr"

    public static class lambda_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:639:1: lambda_expr : '(' ( NL )? lambda_cases ( NL )? ')' -> ^( LAMBDA lambda_cases ) ;
    public final babel17Parser.lambda_expr_return lambda_expr() throws RecognitionException {
        babel17Parser.lambda_expr_return retval = new babel17Parser.lambda_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal385=null;
        Token NL386=null;
        Token NL388=null;
        Token char_literal389=null;
        babel17Parser.lambda_cases_return lambda_cases387 = null;


        CommonTree char_literal385_tree=null;
        CommonTree NL386_tree=null;
        CommonTree NL388_tree=null;
        CommonTree char_literal389_tree=null;
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleSubtreeStream stream_lambda_cases=new RewriteRuleSubtreeStream(adaptor,"rule lambda_cases");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:640:2: ( '(' ( NL )? lambda_cases ( NL )? ')' -> ^( LAMBDA lambda_cases ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:640:4: '(' ( NL )? lambda_cases ( NL )? ')'
            {
            char_literal385=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_lambda_expr4208); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal385);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:640:8: ( NL )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==NL) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:640:8: NL
                    {
                    NL386=(Token)match(input,NL,FOLLOW_NL_in_lambda_expr4210); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL386);


                    }
                    break;

            }

            pushFollow(FOLLOW_lambda_cases_in_lambda_expr4213);
            lambda_cases387=lambda_cases();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lambda_cases.add(lambda_cases387.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:640:25: ( NL )?
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==NL) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:640:25: NL
                    {
                    NL388=(Token)match(input,NL,FOLLOW_NL_in_lambda_expr4215); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL388);


                    }
                    break;

            }

            char_literal389=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_lambda_expr4218); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal389);



            // AST REWRITE
            // elements: lambda_cases
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 640:33: -> ^( LAMBDA lambda_cases )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:640:36: ^( LAMBDA lambda_cases )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAMBDA, "LAMBDA"), root_1);

                adaptor.addChild(root_1, stream_lambda_cases.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_expr"

    public static class lambda_expr_nobrackets_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_expr_nobrackets"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:642:1: lambda_expr_nobrackets : lambda_cases_nobrackets -> ^( LAMBDA lambda_cases_nobrackets ) ;
    public final babel17Parser.lambda_expr_nobrackets_return lambda_expr_nobrackets() throws RecognitionException {
        babel17Parser.lambda_expr_nobrackets_return retval = new babel17Parser.lambda_expr_nobrackets_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.lambda_cases_nobrackets_return lambda_cases_nobrackets390 = null;


        RewriteRuleSubtreeStream stream_lambda_cases_nobrackets=new RewriteRuleSubtreeStream(adaptor,"rule lambda_cases_nobrackets");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:643:2: ( lambda_cases_nobrackets -> ^( LAMBDA lambda_cases_nobrackets ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:643:4: lambda_cases_nobrackets
            {
            pushFollow(FOLLOW_lambda_cases_nobrackets_in_lambda_expr_nobrackets4237);
            lambda_cases_nobrackets390=lambda_cases_nobrackets();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lambda_cases_nobrackets.add(lambda_cases_nobrackets390.getTree());


            // AST REWRITE
            // elements: lambda_cases_nobrackets
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 643:28: -> ^( LAMBDA lambda_cases_nobrackets )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:643:31: ^( LAMBDA lambda_cases_nobrackets )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAMBDA, "LAMBDA"), root_1);

                adaptor.addChild(root_1, stream_lambda_cases_nobrackets.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_expr_nobrackets"

    public static class lambda_cases_nobrackets_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_cases_nobrackets"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:645:1: lambda_cases_nobrackets : pattern ( NL )? token_DOUBLE_ARROW ( NL )? lop_expr -> ^( CASES ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) ) ) ;
    public final babel17Parser.lambda_cases_nobrackets_return lambda_cases_nobrackets() throws RecognitionException {
        babel17Parser.lambda_cases_nobrackets_return retval = new babel17Parser.lambda_cases_nobrackets_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL392=null;
        Token NL394=null;
        babel17Parser.pattern_return pattern391 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW393 = null;

        babel17Parser.lop_expr_return lop_expr395 = null;


        CommonTree NL392_tree=null;
        CommonTree NL394_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_lop_expr=new RewriteRuleSubtreeStream(adaptor,"rule lop_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:646:2: ( pattern ( NL )? token_DOUBLE_ARROW ( NL )? lop_expr -> ^( CASES ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) ) ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:646:4: pattern ( NL )? token_DOUBLE_ARROW ( NL )? lop_expr
            {
            pushFollow(FOLLOW_pattern_in_lambda_cases_nobrackets4255);
            pattern391=pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pattern.add(pattern391.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:646:12: ( NL )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==NL) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:646:12: NL
                    {
                    NL392=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases_nobrackets4257); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL392);


                    }
                    break;

            }

            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_lambda_cases_nobrackets4260);
            token_DOUBLE_ARROW393=token_DOUBLE_ARROW();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW393.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:646:35: ( NL )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==NL) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:646:35: NL
                    {
                    NL394=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases_nobrackets4262); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL394);


                    }
                    break;

            }

            pushFollow(FOLLOW_lop_expr_in_lambda_cases_nobrackets4265);
            lop_expr395=lop_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lop_expr.add(lop_expr395.getTree());


            // AST REWRITE
            // elements: lop_expr, pattern
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 646:48: -> ^( CASES ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) ) )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:646:51: ^( CASES ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:646:59: ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                adaptor.addChild(root_2, stream_pattern.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:646:79: ^( BLOCK lop_expr )
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK, "BLOCK"), root_3);

                adaptor.addChild(root_3, stream_lop_expr.nextTree());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_cases_nobrackets"

    public static class lambda_case_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_case_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:648:1: lambda_case_expr : ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block ) -> ^( NIL_TOKEN casepattern pure_block ) ;
    public final babel17Parser.lambda_case_expr_return lambda_case_expr() throws RecognitionException {
        babel17Parser.lambda_case_expr_return retval = new babel17Parser.lambda_case_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_case396=null;
        Token NL397=null;
        Token NL399=null;
        Token NL401=null;
        babel17Parser.casepattern_return casepattern398 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW400 = null;

        babel17Parser.pure_block_return pure_block402 = null;


        CommonTree L_case396_tree=null;
        CommonTree NL397_tree=null;
        CommonTree NL399_tree=null;
        CommonTree NL401_tree=null;
        RewriteRuleTokenStream stream_L_case=new RewriteRuleTokenStream(adaptor,"token L_case");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_casepattern=new RewriteRuleSubtreeStream(adaptor,"rule casepattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_pure_block=new RewriteRuleSubtreeStream(adaptor,"rule pure_block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:649:2: ( ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block ) -> ^( NIL_TOKEN casepattern pure_block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:649:4: ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block )
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:649:4: ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:649:5: L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block
            {
            L_case396=(Token)match(input,L_case,FOLLOW_L_case_in_lambda_case_expr4293); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_case.add(L_case396);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:649:12: ( NL )?
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==NL) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:649:12: NL
                    {
                    NL397=(Token)match(input,NL,FOLLOW_NL_in_lambda_case_expr4295); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL397);


                    }
                    break;

            }

            pushFollow(FOLLOW_casepattern_in_lambda_case_expr4298);
            casepattern398=casepattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_casepattern.add(casepattern398.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:649:28: ( NL )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==NL) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:649:28: NL
                    {
                    NL399=(Token)match(input,NL,FOLLOW_NL_in_lambda_case_expr4300); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL399);


                    }
                    break;

            }

            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_lambda_case_expr4303);
            token_DOUBLE_ARROW400=token_DOUBLE_ARROW();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW400.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:649:51: ( NL )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==NL) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:649:51: NL
                    {
                    NL401=(Token)match(input,NL,FOLLOW_NL_in_lambda_case_expr4305); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL401);


                    }
                    break;

            }

            pushFollow(FOLLOW_pure_block_in_lambda_case_expr4308);
            pure_block402=pure_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pure_block.add(pure_block402.getTree());

            }



            // AST REWRITE
            // elements: casepattern, pure_block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 649:67: -> ^( NIL_TOKEN casepattern pure_block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:649:70: ^( NIL_TOKEN casepattern pure_block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_1);

                adaptor.addChild(root_1, stream_casepattern.nextTree());
                adaptor.addChild(root_1, stream_pure_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_case_expr"

    public static class lambda_cases_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_cases"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:651:1: lambda_cases : ( pattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block -> ^( CASES ^( NIL_TOKEN pattern pure_block ) ) | lambda_case_expr ( ( NL )? lambda_case_expr )* -> ^( CASES ( lambda_case_expr )+ ) );
    public final babel17Parser.lambda_cases_return lambda_cases() throws RecognitionException {
        babel17Parser.lambda_cases_return retval = new babel17Parser.lambda_cases_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL404=null;
        Token NL406=null;
        Token NL409=null;
        babel17Parser.pattern_return pattern403 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW405 = null;

        babel17Parser.pure_block_return pure_block407 = null;

        babel17Parser.lambda_case_expr_return lambda_case_expr408 = null;

        babel17Parser.lambda_case_expr_return lambda_case_expr410 = null;


        CommonTree NL404_tree=null;
        CommonTree NL406_tree=null;
        CommonTree NL409_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_lambda_case_expr=new RewriteRuleSubtreeStream(adaptor,"rule lambda_case_expr");
        RewriteRuleSubtreeStream stream_pure_block=new RewriteRuleSubtreeStream(adaptor,"rule pure_block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:652:2: ( pattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block -> ^( CASES ^( NIL_TOKEN pattern pure_block ) ) | lambda_case_expr ( ( NL )? lambda_case_expr )* -> ^( CASES ( lambda_case_expr )+ ) )
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==L_exception||(LA183_0>=L_true && LA183_0<=L_false)||LA183_0==L_nil||LA183_0==MINUS||(LA183_0>=A_ELLIPSIS && LA183_0<=U_ELLIPSIS)||(LA183_0>=Constr && LA183_0<=Id)||LA183_0==Num||(LA183_0>=String && LA183_0<=ROUND_BRACKET_OPEN)||LA183_0==SQUARE_BRACKET_OPEN||LA183_0==CURLY_BRACKET_OPEN||LA183_0==UNDERSCORE) ) {
                alt183=1;
            }
            else if ( (LA183_0==L_case) ) {
                alt183=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 183, 0, input);

                throw nvae;
            }
            switch (alt183) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:652:4: pattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block
                    {
                    pushFollow(FOLLOW_pattern_in_lambda_cases4329);
                    pattern403=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern403.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:652:12: ( NL )?
                    int alt179=2;
                    int LA179_0 = input.LA(1);

                    if ( (LA179_0==NL) ) {
                        alt179=1;
                    }
                    switch (alt179) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:652:12: NL
                            {
                            NL404=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases4331); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL404);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_token_DOUBLE_ARROW_in_lambda_cases4334);
                    token_DOUBLE_ARROW405=token_DOUBLE_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW405.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:652:35: ( NL )?
                    int alt180=2;
                    int LA180_0 = input.LA(1);

                    if ( (LA180_0==NL) ) {
                        alt180=1;
                    }
                    switch (alt180) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:652:35: NL
                            {
                            NL406=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases4336); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL406);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_pure_block_in_lambda_cases4339);
                    pure_block407=pure_block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pure_block.add(pure_block407.getTree());


                    // AST REWRITE
                    // elements: pattern, pure_block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 652:50: -> ^( CASES ^( NIL_TOKEN pattern pure_block ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:652:53: ^( CASES ^( NIL_TOKEN pattern pure_block ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:652:61: ^( NIL_TOKEN pattern pure_block )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        adaptor.addChild(root_2, stream_pattern.nextTree());
                        adaptor.addChild(root_2, stream_pure_block.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:653:4: lambda_case_expr ( ( NL )? lambda_case_expr )*
                    {
                    pushFollow(FOLLOW_lambda_case_expr_in_lambda_cases4358);
                    lambda_case_expr408=lambda_case_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lambda_case_expr.add(lambda_case_expr408.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:653:21: ( ( NL )? lambda_case_expr )*
                    loop182:
                    do {
                        int alt182=2;
                        int LA182_0 = input.LA(1);

                        if ( (LA182_0==NL) ) {
                            int LA182_1 = input.LA(2);

                            if ( (LA182_1==L_case) ) {
                                alt182=1;
                            }


                        }
                        else if ( (LA182_0==L_case) ) {
                            alt182=1;
                        }


                        switch (alt182) {
                    	case 1 :
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:653:22: ( NL )? lambda_case_expr
                    	    {
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:653:22: ( NL )?
                    	    int alt181=2;
                    	    int LA181_0 = input.LA(1);

                    	    if ( (LA181_0==NL) ) {
                    	        alt181=1;
                    	    }
                    	    switch (alt181) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:653:22: NL
                    	            {
                    	            NL409=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases4361); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL409);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_lambda_case_expr_in_lambda_cases4364);
                    	    lambda_case_expr410=lambda_case_expr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_lambda_case_expr.add(lambda_case_expr410.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop182;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: lambda_case_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 653:45: -> ^( CASES ( lambda_case_expr )+ )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:653:48: ^( CASES ( lambda_case_expr )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                        if ( !(stream_lambda_case_expr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_lambda_case_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_lambda_case_expr.nextTree());

                        }
                        stream_lambda_case_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_cases"

    public static class for_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:655:1: for_expr : L_for ( NL )? pattern ( NL )? L_in ( NL )? protected_expr ( NL )? L_do block L_end -> ^( FOR_EXPR pattern protected_expr block ) ;
    public final babel17Parser.for_expr_return for_expr() throws RecognitionException {
        babel17Parser.for_expr_return retval = new babel17Parser.for_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_for411=null;
        Token NL412=null;
        Token NL414=null;
        Token L_in415=null;
        Token NL416=null;
        Token NL418=null;
        Token L_do419=null;
        Token L_end421=null;
        babel17Parser.pattern_return pattern413 = null;

        babel17Parser.protected_expr_return protected_expr417 = null;

        babel17Parser.block_return block420 = null;


        CommonTree L_for411_tree=null;
        CommonTree NL412_tree=null;
        CommonTree NL414_tree=null;
        CommonTree L_in415_tree=null;
        CommonTree NL416_tree=null;
        CommonTree NL418_tree=null;
        CommonTree L_do419_tree=null;
        CommonTree L_end421_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_for=new RewriteRuleTokenStream(adaptor,"token L_for");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_in=new RewriteRuleTokenStream(adaptor,"token L_in");
        RewriteRuleTokenStream stream_L_do=new RewriteRuleTokenStream(adaptor,"token L_do");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:655:9: ( L_for ( NL )? pattern ( NL )? L_in ( NL )? protected_expr ( NL )? L_do block L_end -> ^( FOR_EXPR pattern protected_expr block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:655:11: L_for ( NL )? pattern ( NL )? L_in ( NL )? protected_expr ( NL )? L_do block L_end
            {
            L_for411=(Token)match(input,L_for,FOLLOW_L_for_in_for_expr4382); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_for.add(L_for411);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:655:17: ( NL )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==NL) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:655:17: NL
                    {
                    NL412=(Token)match(input,NL,FOLLOW_NL_in_for_expr4384); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL412);


                    }
                    break;

            }

            pushFollow(FOLLOW_pattern_in_for_expr4387);
            pattern413=pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pattern.add(pattern413.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:655:29: ( NL )?
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==NL) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:655:29: NL
                    {
                    NL414=(Token)match(input,NL,FOLLOW_NL_in_for_expr4389); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL414);


                    }
                    break;

            }

            L_in415=(Token)match(input,L_in,FOLLOW_L_in_in_for_expr4392); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_in.add(L_in415);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:655:38: ( NL )?
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==NL) ) {
                alt186=1;
            }
            switch (alt186) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:655:38: NL
                    {
                    NL416=(Token)match(input,NL,FOLLOW_NL_in_for_expr4394); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL416);


                    }
                    break;

            }

            pushFollow(FOLLOW_protected_expr_in_for_expr4397);
            protected_expr417=protected_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr417.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:655:57: ( NL )?
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==NL) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:655:57: NL
                    {
                    NL418=(Token)match(input,NL,FOLLOW_NL_in_for_expr4399); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL418);


                    }
                    break;

            }

            L_do419=(Token)match(input,L_do,FOLLOW_L_do_in_for_expr4402); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_do.add(L_do419);

            pushFollow(FOLLOW_block_in_for_expr4404);
            block420=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block420.getTree());
            L_end421=(Token)match(input,L_end,FOLLOW_L_end_in_for_expr4406); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end421);



            // AST REWRITE
            // elements: pattern, block, protected_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 656:5: -> ^( FOR_EXPR pattern protected_expr block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:656:8: ^( FOR_EXPR pattern protected_expr block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_EXPR, "FOR_EXPR"), root_1);

                adaptor.addChild(root_1, stream_pattern.nextTree());
                adaptor.addChild(root_1, stream_protected_expr.nextTree());
                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "for_expr"

    public static class op_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "op_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:659:1: op_expr : ( builtin_primitive op_expr | bool_expr );
    public final babel17Parser.op_expr_return op_expr() throws RecognitionException {
        babel17Parser.op_expr_return retval = new babel17Parser.op_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.builtin_primitive_return builtin_primitive422 = null;

        babel17Parser.op_expr_return op_expr423 = null;

        babel17Parser.bool_expr_return bool_expr424 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:660:2: ( builtin_primitive op_expr | bool_expr )
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==L_exception||LA188_0==L_concurrent||LA188_0==L_lazy||LA188_0==L_force) ) {
                alt188=1;
            }
            else if ( (LA188_0==L_begin||(LA188_0>=L_obj && LA188_0<=L_if)||(LA188_0>=L_while && LA188_0<=L_for)||LA188_0==L_match||LA188_0==L_try||LA188_0==L_choose||(LA188_0>=L_true && LA188_0<=L_nil)||LA188_0==L_typeof||LA188_0==L_not||(LA188_0>=L_root && LA188_0<=L_native)||LA188_0==MINUS||(LA188_0>=Constr && LA188_0<=Id)||(LA188_0>=Float && LA188_0<=Num)||(LA188_0>=String && LA188_0<=ROUND_BRACKET_OPEN)||LA188_0==SQUARE_BRACKET_OPEN||LA188_0==CURLY_BRACKET_OPEN) ) {
                alt188=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 188, 0, input);

                throw nvae;
            }
            switch (alt188) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:660:4: builtin_primitive op_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_builtin_primitive_in_op_expr4435);
                    builtin_primitive422=builtin_primitive();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(builtin_primitive422.getTree(), root_0);
                    pushFollow(FOLLOW_op_expr_in_op_expr4438);
                    op_expr423=op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op_expr423.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:661:4: bool_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_bool_expr_in_op_expr4443);
                    bool_expr424=bool_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_expr424.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "op_expr"

    public static class p_op_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_op_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:663:1: p_op_expr : ( builtin_primitive ( NL )? p_op_expr | p_bool_expr );
    public final babel17Parser.p_op_expr_return p_op_expr() throws RecognitionException {
        babel17Parser.p_op_expr_return retval = new babel17Parser.p_op_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL426=null;
        babel17Parser.builtin_primitive_return builtin_primitive425 = null;

        babel17Parser.p_op_expr_return p_op_expr427 = null;

        babel17Parser.p_bool_expr_return p_bool_expr428 = null;


        CommonTree NL426_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:664:2: ( builtin_primitive ( NL )? p_op_expr | p_bool_expr )
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==L_exception||LA190_0==L_concurrent||LA190_0==L_lazy||LA190_0==L_force) ) {
                alt190=1;
            }
            else if ( (LA190_0==L_begin||(LA190_0>=L_obj && LA190_0<=L_if)||(LA190_0>=L_while && LA190_0<=L_for)||LA190_0==L_match||LA190_0==L_try||LA190_0==L_choose||(LA190_0>=L_true && LA190_0<=L_nil)||LA190_0==L_typeof||LA190_0==L_not||(LA190_0>=L_root && LA190_0<=L_native)||LA190_0==MINUS||(LA190_0>=Constr && LA190_0<=Id)||(LA190_0>=Float && LA190_0<=Num)||(LA190_0>=String && LA190_0<=ROUND_BRACKET_OPEN)||LA190_0==SQUARE_BRACKET_OPEN||LA190_0==CURLY_BRACKET_OPEN) ) {
                alt190=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 190, 0, input);

                throw nvae;
            }
            switch (alt190) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:664:4: builtin_primitive ( NL )? p_op_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_builtin_primitive_in_p_op_expr4453);
                    builtin_primitive425=builtin_primitive();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(builtin_primitive425.getTree(), root_0);
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:664:25: ( NL )?
                    int alt189=2;
                    int LA189_0 = input.LA(1);

                    if ( (LA189_0==NL) ) {
                        alt189=1;
                    }
                    switch (alt189) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:664:25: NL
                            {
                            NL426=(Token)match(input,NL,FOLLOW_NL_in_p_op_expr4456); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_op_expr_in_p_op_expr4460);
                    p_op_expr427=p_op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_op_expr427.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:665:4: p_bool_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_bool_expr_in_p_op_expr4465);
                    p_bool_expr428=p_bool_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_expr428.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_op_expr"

    public static class builtin_primitive_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtin_primitive"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:667:1: builtin_primitive : ( L_exception | L_lazy | L_concurrent | L_force );
    public final babel17Parser.builtin_primitive_return builtin_primitive() throws RecognitionException {
        babel17Parser.builtin_primitive_return retval = new babel17Parser.builtin_primitive_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set429=null;

        CommonTree set429_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:668:2: ( L_exception | L_lazy | L_concurrent | L_force )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set429=(Token)input.LT(1);
            if ( input.LA(1)==L_exception||input.LA(1)==L_concurrent||input.LA(1)==L_lazy||input.LA(1)==L_force ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set429));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtin_primitive"

    public static class bool_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bool_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:670:1: bool_expr : bool_or_expr ;
    public final babel17Parser.bool_expr_return bool_expr() throws RecognitionException {
        babel17Parser.bool_expr_return retval = new babel17Parser.bool_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.bool_or_expr_return bool_or_expr430 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:671:2: ( bool_or_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:671:4: bool_or_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_bool_or_expr_in_bool_expr4496);
            bool_or_expr430=bool_or_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_or_expr430.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bool_expr"

    public static class p_bool_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_bool_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:673:1: p_bool_expr : p_bool_or_expr ;
    public final babel17Parser.p_bool_expr_return p_bool_expr() throws RecognitionException {
        babel17Parser.p_bool_expr_return retval = new babel17Parser.p_bool_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.p_bool_or_expr_return p_bool_or_expr431 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:674:2: ( p_bool_or_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:674:4: p_bool_or_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_bool_or_expr_in_p_bool_expr4506);
            p_bool_or_expr431=p_bool_or_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_or_expr431.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_bool_expr"

    public static class bool_or_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bool_or_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:676:1: bool_or_expr : bool_and_expr ( ( NL )? token_OR ( NL )? bool_and_expr )* ;
    public final babel17Parser.bool_or_expr_return bool_or_expr() throws RecognitionException {
        babel17Parser.bool_or_expr_return retval = new babel17Parser.bool_or_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL433=null;
        Token NL435=null;
        babel17Parser.bool_and_expr_return bool_and_expr432 = null;

        babel17Parser.token_OR_return token_OR434 = null;

        babel17Parser.bool_and_expr_return bool_and_expr436 = null;


        CommonTree NL433_tree=null;
        CommonTree NL435_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:677:2: ( bool_and_expr ( ( NL )? token_OR ( NL )? bool_and_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:677:4: bool_and_expr ( ( NL )? token_OR ( NL )? bool_and_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_bool_and_expr_in_bool_or_expr4515);
            bool_and_expr432=bool_and_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_and_expr432.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:677:18: ( ( NL )? token_OR ( NL )? bool_and_expr )*
            loop193:
            do {
                int alt193=2;
                int LA193_0 = input.LA(1);

                if ( (LA193_0==NL) ) {
                    int LA193_1 = input.LA(2);

                    if ( (LA193_1==L_or) ) {
                        alt193=1;
                    }


                }
                else if ( (LA193_0==L_or) ) {
                    alt193=1;
                }


                switch (alt193) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:677:19: ( NL )? token_OR ( NL )? bool_and_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:677:21: ( NL )?
            	    int alt191=2;
            	    int LA191_0 = input.LA(1);

            	    if ( (LA191_0==NL) ) {
            	        alt191=1;
            	    }
            	    switch (alt191) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:677:21: NL
            	            {
            	            NL433=(Token)match(input,NL,FOLLOW_NL_in_bool_or_expr4518); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_OR_in_bool_or_expr4522);
            	    token_OR434=token_OR();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_OR434.getTree(), root_0);
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:677:36: ( NL )?
            	    int alt192=2;
            	    int LA192_0 = input.LA(1);

            	    if ( (LA192_0==NL) ) {
            	        alt192=1;
            	    }
            	    switch (alt192) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:677:36: NL
            	            {
            	            NL435=(Token)match(input,NL,FOLLOW_NL_in_bool_or_expr4525); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_bool_and_expr_in_bool_or_expr4529);
            	    bool_and_expr436=bool_and_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_and_expr436.getTree());

            	    }
            	    break;

            	default :
            	    break loop193;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bool_or_expr"

    public static class p_bool_or_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_bool_or_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:679:1: p_bool_or_expr : p_bool_and_expr ( ( NL )? token_OR ( NL )? p_bool_and_expr )* ;
    public final babel17Parser.p_bool_or_expr_return p_bool_or_expr() throws RecognitionException {
        babel17Parser.p_bool_or_expr_return retval = new babel17Parser.p_bool_or_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL438=null;
        Token NL440=null;
        babel17Parser.p_bool_and_expr_return p_bool_and_expr437 = null;

        babel17Parser.token_OR_return token_OR439 = null;

        babel17Parser.p_bool_and_expr_return p_bool_and_expr441 = null;


        CommonTree NL438_tree=null;
        CommonTree NL440_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:680:2: ( p_bool_and_expr ( ( NL )? token_OR ( NL )? p_bool_and_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:680:4: p_bool_and_expr ( ( NL )? token_OR ( NL )? p_bool_and_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_bool_and_expr_in_p_bool_or_expr4541);
            p_bool_and_expr437=p_bool_and_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_and_expr437.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:680:20: ( ( NL )? token_OR ( NL )? p_bool_and_expr )*
            loop196:
            do {
                int alt196=2;
                int LA196_0 = input.LA(1);

                if ( (LA196_0==NL) ) {
                    int LA196_2 = input.LA(2);

                    if ( (LA196_2==L_or) ) {
                        alt196=1;
                    }


                }
                else if ( (LA196_0==L_or) ) {
                    alt196=1;
                }


                switch (alt196) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:680:21: ( NL )? token_OR ( NL )? p_bool_and_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:680:23: ( NL )?
            	    int alt194=2;
            	    int LA194_0 = input.LA(1);

            	    if ( (LA194_0==NL) ) {
            	        alt194=1;
            	    }
            	    switch (alt194) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:680:23: NL
            	            {
            	            NL438=(Token)match(input,NL,FOLLOW_NL_in_p_bool_or_expr4544); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_OR_in_p_bool_or_expr4548);
            	    token_OR439=token_OR();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_OR439.getTree(), root_0);
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:680:38: ( NL )?
            	    int alt195=2;
            	    int LA195_0 = input.LA(1);

            	    if ( (LA195_0==NL) ) {
            	        alt195=1;
            	    }
            	    switch (alt195) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:680:38: NL
            	            {
            	            NL440=(Token)match(input,NL,FOLLOW_NL_in_p_bool_or_expr4551); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_bool_and_expr_in_p_bool_or_expr4555);
            	    p_bool_and_expr441=p_bool_and_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_and_expr441.getTree());

            	    }
            	    break;

            	default :
            	    break loop196;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_bool_or_expr"

    public static class bool_and_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bool_and_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:682:1: bool_and_expr : bool_not_expr ( ( NL )? token_AND ( NL )? bool_not_expr )* ;
    public final babel17Parser.bool_and_expr_return bool_and_expr() throws RecognitionException {
        babel17Parser.bool_and_expr_return retval = new babel17Parser.bool_and_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL443=null;
        Token NL445=null;
        babel17Parser.bool_not_expr_return bool_not_expr442 = null;

        babel17Parser.token_AND_return token_AND444 = null;

        babel17Parser.bool_not_expr_return bool_not_expr446 = null;


        CommonTree NL443_tree=null;
        CommonTree NL445_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:683:2: ( bool_not_expr ( ( NL )? token_AND ( NL )? bool_not_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:683:4: bool_not_expr ( ( NL )? token_AND ( NL )? bool_not_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_bool_not_expr_in_bool_and_expr4567);
            bool_not_expr442=bool_not_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_not_expr442.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:683:18: ( ( NL )? token_AND ( NL )? bool_not_expr )*
            loop199:
            do {
                int alt199=2;
                int LA199_0 = input.LA(1);

                if ( (LA199_0==NL) ) {
                    int LA199_1 = input.LA(2);

                    if ( (LA199_1==L_and) ) {
                        alt199=1;
                    }


                }
                else if ( (LA199_0==L_and) ) {
                    alt199=1;
                }


                switch (alt199) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:683:19: ( NL )? token_AND ( NL )? bool_not_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:683:21: ( NL )?
            	    int alt197=2;
            	    int LA197_0 = input.LA(1);

            	    if ( (LA197_0==NL) ) {
            	        alt197=1;
            	    }
            	    switch (alt197) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:683:21: NL
            	            {
            	            NL443=(Token)match(input,NL,FOLLOW_NL_in_bool_and_expr4570); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_AND_in_bool_and_expr4574);
            	    token_AND444=token_AND();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_AND444.getTree(), root_0);
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:683:37: ( NL )?
            	    int alt198=2;
            	    int LA198_0 = input.LA(1);

            	    if ( (LA198_0==NL) ) {
            	        alt198=1;
            	    }
            	    switch (alt198) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:683:37: NL
            	            {
            	            NL445=(Token)match(input,NL,FOLLOW_NL_in_bool_and_expr4577); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_bool_not_expr_in_bool_and_expr4581);
            	    bool_not_expr446=bool_not_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_not_expr446.getTree());

            	    }
            	    break;

            	default :
            	    break loop199;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bool_and_expr"

    public static class p_bool_and_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_bool_and_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:685:1: p_bool_and_expr : p_bool_not_expr ( ( NL )? token_AND ( NL )? p_bool_not_expr )* ;
    public final babel17Parser.p_bool_and_expr_return p_bool_and_expr() throws RecognitionException {
        babel17Parser.p_bool_and_expr_return retval = new babel17Parser.p_bool_and_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL448=null;
        Token NL450=null;
        babel17Parser.p_bool_not_expr_return p_bool_not_expr447 = null;

        babel17Parser.token_AND_return token_AND449 = null;

        babel17Parser.p_bool_not_expr_return p_bool_not_expr451 = null;


        CommonTree NL448_tree=null;
        CommonTree NL450_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:686:2: ( p_bool_not_expr ( ( NL )? token_AND ( NL )? p_bool_not_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:686:4: p_bool_not_expr ( ( NL )? token_AND ( NL )? p_bool_not_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_bool_not_expr_in_p_bool_and_expr4593);
            p_bool_not_expr447=p_bool_not_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_not_expr447.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:686:20: ( ( NL )? token_AND ( NL )? p_bool_not_expr )*
            loop202:
            do {
                int alt202=2;
                int LA202_0 = input.LA(1);

                if ( (LA202_0==NL) ) {
                    int LA202_1 = input.LA(2);

                    if ( (LA202_1==L_and) ) {
                        alt202=1;
                    }


                }
                else if ( (LA202_0==L_and) ) {
                    alt202=1;
                }


                switch (alt202) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:686:21: ( NL )? token_AND ( NL )? p_bool_not_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:686:23: ( NL )?
            	    int alt200=2;
            	    int LA200_0 = input.LA(1);

            	    if ( (LA200_0==NL) ) {
            	        alt200=1;
            	    }
            	    switch (alt200) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:686:23: NL
            	            {
            	            NL448=(Token)match(input,NL,FOLLOW_NL_in_p_bool_and_expr4596); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_AND_in_p_bool_and_expr4600);
            	    token_AND449=token_AND();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_AND449.getTree(), root_0);
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:686:39: ( NL )?
            	    int alt201=2;
            	    int LA201_0 = input.LA(1);

            	    if ( (LA201_0==NL) ) {
            	        alt201=1;
            	    }
            	    switch (alt201) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:686:39: NL
            	            {
            	            NL450=(Token)match(input,NL,FOLLOW_NL_in_p_bool_and_expr4603); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_bool_not_expr_in_p_bool_and_expr4607);
            	    p_bool_not_expr451=p_bool_not_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_not_expr451.getTree());

            	    }
            	    break;

            	default :
            	    break loop202;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_bool_and_expr"

    public static class bool_not_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bool_not_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:689:1: bool_not_expr : ( token_NOT ( NL )? bool_not_expr | rel_expr );
    public final babel17Parser.bool_not_expr_return bool_not_expr() throws RecognitionException {
        babel17Parser.bool_not_expr_return retval = new babel17Parser.bool_not_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL453=null;
        babel17Parser.token_NOT_return token_NOT452 = null;

        babel17Parser.bool_not_expr_return bool_not_expr454 = null;

        babel17Parser.rel_expr_return rel_expr455 = null;


        CommonTree NL453_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:690:2: ( token_NOT ( NL )? bool_not_expr | rel_expr )
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==L_not) ) {
                alt204=1;
            }
            else if ( (LA204_0==L_begin||(LA204_0>=L_obj && LA204_0<=L_if)||(LA204_0>=L_while && LA204_0<=L_for)||LA204_0==L_match||LA204_0==L_try||LA204_0==L_choose||(LA204_0>=L_true && LA204_0<=L_nil)||LA204_0==L_typeof||(LA204_0>=L_root && LA204_0<=L_native)||LA204_0==MINUS||(LA204_0>=Constr && LA204_0<=Id)||(LA204_0>=Float && LA204_0<=Num)||(LA204_0>=String && LA204_0<=ROUND_BRACKET_OPEN)||LA204_0==SQUARE_BRACKET_OPEN||LA204_0==CURLY_BRACKET_OPEN) ) {
                alt204=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 204, 0, input);

                throw nvae;
            }
            switch (alt204) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:690:4: token_NOT ( NL )? bool_not_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_NOT_in_bool_not_expr4619);
                    token_NOT452=token_NOT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_NOT452.getTree(), root_0);
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:690:17: ( NL )?
                    int alt203=2;
                    int LA203_0 = input.LA(1);

                    if ( (LA203_0==NL) ) {
                        alt203=1;
                    }
                    switch (alt203) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:690:17: NL
                            {
                            NL453=(Token)match(input,NL,FOLLOW_NL_in_bool_not_expr4622); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_bool_not_expr_in_bool_not_expr4626);
                    bool_not_expr454=bool_not_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_not_expr454.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:691:4: rel_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rel_expr_in_bool_not_expr4631);
                    rel_expr455=rel_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_expr455.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bool_not_expr"

    public static class p_bool_not_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_bool_not_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:693:1: p_bool_not_expr : ( token_NOT ( NL )? p_bool_not_expr | p_rel_expr );
    public final babel17Parser.p_bool_not_expr_return p_bool_not_expr() throws RecognitionException {
        babel17Parser.p_bool_not_expr_return retval = new babel17Parser.p_bool_not_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL457=null;
        babel17Parser.token_NOT_return token_NOT456 = null;

        babel17Parser.p_bool_not_expr_return p_bool_not_expr458 = null;

        babel17Parser.p_rel_expr_return p_rel_expr459 = null;


        CommonTree NL457_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:694:2: ( token_NOT ( NL )? p_bool_not_expr | p_rel_expr )
            int alt206=2;
            int LA206_0 = input.LA(1);

            if ( (LA206_0==L_not) ) {
                alt206=1;
            }
            else if ( (LA206_0==L_begin||(LA206_0>=L_obj && LA206_0<=L_if)||(LA206_0>=L_while && LA206_0<=L_for)||LA206_0==L_match||LA206_0==L_try||LA206_0==L_choose||(LA206_0>=L_true && LA206_0<=L_nil)||LA206_0==L_typeof||(LA206_0>=L_root && LA206_0<=L_native)||LA206_0==MINUS||(LA206_0>=Constr && LA206_0<=Id)||(LA206_0>=Float && LA206_0<=Num)||(LA206_0>=String && LA206_0<=ROUND_BRACKET_OPEN)||LA206_0==SQUARE_BRACKET_OPEN||LA206_0==CURLY_BRACKET_OPEN) ) {
                alt206=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 206, 0, input);

                throw nvae;
            }
            switch (alt206) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:694:4: token_NOT ( NL )? p_bool_not_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_NOT_in_p_bool_not_expr4642);
                    token_NOT456=token_NOT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_NOT456.getTree(), root_0);
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:694:17: ( NL )?
                    int alt205=2;
                    int LA205_0 = input.LA(1);

                    if ( (LA205_0==NL) ) {
                        alt205=1;
                    }
                    switch (alt205) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:694:17: NL
                            {
                            NL457=(Token)match(input,NL,FOLLOW_NL_in_p_bool_not_expr4645); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_bool_not_expr_in_p_bool_not_expr4649);
                    p_bool_not_expr458=p_bool_not_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_not_expr458.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:695:4: p_rel_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_rel_expr_in_p_bool_not_expr4654);
                    p_rel_expr459=p_rel_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_rel_expr459.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_bool_not_expr"

    public static class rel_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rel_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:698:1: rel_expr : relate_expr ( ( NL )? rel_op ( NL )? relate_expr )* -> ^( COMPARE relate_expr ( rel_op relate_expr )* ) ;
    public final babel17Parser.rel_expr_return rel_expr() throws RecognitionException {
        babel17Parser.rel_expr_return retval = new babel17Parser.rel_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL461=null;
        Token NL463=null;
        babel17Parser.relate_expr_return relate_expr460 = null;

        babel17Parser.rel_op_return rel_op462 = null;

        babel17Parser.relate_expr_return relate_expr464 = null;


        CommonTree NL461_tree=null;
        CommonTree NL463_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_relate_expr=new RewriteRuleSubtreeStream(adaptor,"rule relate_expr");
        RewriteRuleSubtreeStream stream_rel_op=new RewriteRuleSubtreeStream(adaptor,"rule rel_op");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:2: ( relate_expr ( ( NL )? rel_op ( NL )? relate_expr )* -> ^( COMPARE relate_expr ( rel_op relate_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:4: relate_expr ( ( NL )? rel_op ( NL )? relate_expr )*
            {
            pushFollow(FOLLOW_relate_expr_in_rel_expr4664);
            relate_expr460=relate_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_relate_expr.add(relate_expr460.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:16: ( ( NL )? rel_op ( NL )? relate_expr )*
            loop209:
            do {
                int alt209=2;
                int LA209_0 = input.LA(1);

                if ( (LA209_0==NL) ) {
                    int LA209_1 = input.LA(2);

                    if ( ((LA209_1>=A_EQUAL && LA209_1<=U_GREATER_EQ)) ) {
                        alt209=1;
                    }


                }
                else if ( ((LA209_0>=A_EQUAL && LA209_0<=U_GREATER_EQ)) ) {
                    alt209=1;
                }


                switch (alt209) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:17: ( NL )? rel_op ( NL )? relate_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:17: ( NL )?
            	    int alt207=2;
            	    int LA207_0 = input.LA(1);

            	    if ( (LA207_0==NL) ) {
            	        alt207=1;
            	    }
            	    switch (alt207) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:17: NL
            	            {
            	            NL461=(Token)match(input,NL,FOLLOW_NL_in_rel_expr4667); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL461);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_rel_op_in_rel_expr4670);
            	    rel_op462=rel_op();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_rel_op.add(rel_op462.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:28: ( NL )?
            	    int alt208=2;
            	    int LA208_0 = input.LA(1);

            	    if ( (LA208_0==NL) ) {
            	        alt208=1;
            	    }
            	    switch (alt208) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:28: NL
            	            {
            	            NL463=(Token)match(input,NL,FOLLOW_NL_in_rel_expr4672); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL463);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_relate_expr_in_rel_expr4675);
            	    relate_expr464=relate_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_relate_expr.add(relate_expr464.getTree());

            	    }
            	    break;

            	default :
            	    break loop209;
                }
            } while (true);



            // AST REWRITE
            // elements: relate_expr, relate_expr, rel_op
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 699:46: -> ^( COMPARE relate_expr ( rel_op relate_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:49: ^( COMPARE relate_expr ( rel_op relate_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPARE, "COMPARE"), root_1);

                adaptor.addChild(root_1, stream_relate_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:71: ( rel_op relate_expr )*
                while ( stream_relate_expr.hasNext()||stream_rel_op.hasNext() ) {
                    adaptor.addChild(root_1, stream_rel_op.nextTree());
                    adaptor.addChild(root_1, stream_relate_expr.nextTree());

                }
                stream_relate_expr.reset();
                stream_rel_op.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rel_expr"

    public static class p_rel_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_rel_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:701:1: p_rel_expr : p_relate_expr ( ( NL )? rel_op ( NL )? p_relate_expr )* -> ^( COMPARE p_relate_expr ( rel_op p_relate_expr )* ) ;
    public final babel17Parser.p_rel_expr_return p_rel_expr() throws RecognitionException {
        babel17Parser.p_rel_expr_return retval = new babel17Parser.p_rel_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL466=null;
        Token NL468=null;
        babel17Parser.p_relate_expr_return p_relate_expr465 = null;

        babel17Parser.rel_op_return rel_op467 = null;

        babel17Parser.p_relate_expr_return p_relate_expr469 = null;


        CommonTree NL466_tree=null;
        CommonTree NL468_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_p_relate_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_relate_expr");
        RewriteRuleSubtreeStream stream_rel_op=new RewriteRuleSubtreeStream(adaptor,"rule rel_op");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:702:2: ( p_relate_expr ( ( NL )? rel_op ( NL )? p_relate_expr )* -> ^( COMPARE p_relate_expr ( rel_op p_relate_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:702:4: p_relate_expr ( ( NL )? rel_op ( NL )? p_relate_expr )*
            {
            pushFollow(FOLLOW_p_relate_expr_in_p_rel_expr4702);
            p_relate_expr465=p_relate_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_relate_expr.add(p_relate_expr465.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:702:18: ( ( NL )? rel_op ( NL )? p_relate_expr )*
            loop212:
            do {
                int alt212=2;
                int LA212_0 = input.LA(1);

                if ( (LA212_0==NL) ) {
                    int LA212_1 = input.LA(2);

                    if ( ((LA212_1>=A_EQUAL && LA212_1<=U_GREATER_EQ)) ) {
                        alt212=1;
                    }


                }
                else if ( ((LA212_0>=A_EQUAL && LA212_0<=U_GREATER_EQ)) ) {
                    alt212=1;
                }


                switch (alt212) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:702:19: ( NL )? rel_op ( NL )? p_relate_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:702:19: ( NL )?
            	    int alt210=2;
            	    int LA210_0 = input.LA(1);

            	    if ( (LA210_0==NL) ) {
            	        alt210=1;
            	    }
            	    switch (alt210) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:702:19: NL
            	            {
            	            NL466=(Token)match(input,NL,FOLLOW_NL_in_p_rel_expr4705); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL466);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_rel_op_in_p_rel_expr4708);
            	    rel_op467=rel_op();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_rel_op.add(rel_op467.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:702:30: ( NL )?
            	    int alt211=2;
            	    int LA211_0 = input.LA(1);

            	    if ( (LA211_0==NL) ) {
            	        alt211=1;
            	    }
            	    switch (alt211) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:702:30: NL
            	            {
            	            NL468=(Token)match(input,NL,FOLLOW_NL_in_p_rel_expr4710); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL468);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_relate_expr_in_p_rel_expr4713);
            	    p_relate_expr469=p_relate_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_relate_expr.add(p_relate_expr469.getTree());

            	    }
            	    break;

            	default :
            	    break loop212;
                }
            } while (true);



            // AST REWRITE
            // elements: rel_op, p_relate_expr, p_relate_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 702:50: -> ^( COMPARE p_relate_expr ( rel_op p_relate_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:702:53: ^( COMPARE p_relate_expr ( rel_op p_relate_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPARE, "COMPARE"), root_1);

                adaptor.addChild(root_1, stream_p_relate_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:702:77: ( rel_op p_relate_expr )*
                while ( stream_rel_op.hasNext()||stream_p_relate_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_rel_op.nextTree());
                    adaptor.addChild(root_1, stream_p_relate_expr.nextTree());

                }
                stream_rel_op.reset();
                stream_p_relate_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_rel_expr"

    public static class rel_op_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rel_op"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:1: rel_op : ( token_EQUAL | token_NOT_EQUAL | GREATER | token_GREATER_EQ | LESS | token_LESS_EQ );
    public final babel17Parser.rel_op_return rel_op() throws RecognitionException {
        babel17Parser.rel_op_return retval = new babel17Parser.rel_op_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token GREATER472=null;
        Token LESS474=null;
        babel17Parser.token_EQUAL_return token_EQUAL470 = null;

        babel17Parser.token_NOT_EQUAL_return token_NOT_EQUAL471 = null;

        babel17Parser.token_GREATER_EQ_return token_GREATER_EQ473 = null;

        babel17Parser.token_LESS_EQ_return token_LESS_EQ475 = null;


        CommonTree GREATER472_tree=null;
        CommonTree LESS474_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:8: ( token_EQUAL | token_NOT_EQUAL | GREATER | token_GREATER_EQ | LESS | token_LESS_EQ )
            int alt213=6;
            switch ( input.LA(1) ) {
            case A_EQUAL:
            case U_EQUAL:
                {
                alt213=1;
                }
                break;
            case A_NOT_EQUAL:
            case U_NOT_EQUAL:
                {
                alt213=2;
                }
                break;
            case GREATER:
                {
                alt213=3;
                }
                break;
            case A_GREATER_EQ:
            case U_GREATER_EQ:
                {
                alt213=4;
                }
                break;
            case LESS:
                {
                alt213=5;
                }
                break;
            case A_LESS_EQ:
            case U_LESS_EQ:
                {
                alt213=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 213, 0, input);

                throw nvae;
            }

            switch (alt213) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:10: token_EQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_EQUAL_in_rel_op4739);
                    token_EQUAL470=token_EQUAL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_EQUAL470.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:24: token_NOT_EQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_NOT_EQUAL_in_rel_op4743);
                    token_NOT_EQUAL471=token_NOT_EQUAL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_NOT_EQUAL471.getTree());

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:42: GREATER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    GREATER472=(Token)match(input,GREATER,FOLLOW_GREATER_in_rel_op4747); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER472_tree = (CommonTree)adaptor.create(GREATER472);
                    adaptor.addChild(root_0, GREATER472_tree);
                    }

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:52: token_GREATER_EQ
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_GREATER_EQ_in_rel_op4751);
                    token_GREATER_EQ473=token_GREATER_EQ();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_GREATER_EQ473.getTree());

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:71: LESS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LESS474=(Token)match(input,LESS,FOLLOW_LESS_in_rel_op4755); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LESS474_tree = (CommonTree)adaptor.create(LESS474);
                    adaptor.addChild(root_0, LESS474_tree);
                    }

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:78: token_LESS_EQ
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_LESS_EQ_in_rel_op4759);
                    token_LESS_EQ475=token_LESS_EQ();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_LESS_EQ475.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rel_op"

    public static class relate_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relate_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:1: relate_expr : convert_expr ( ( NL )? TOK_RELATE ( NL )? convert_expr )? -> ^( RELATE ( convert_expr )* ) ;
    public final babel17Parser.relate_expr_return relate_expr() throws RecognitionException {
        babel17Parser.relate_expr_return retval = new babel17Parser.relate_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL477=null;
        Token TOK_RELATE478=null;
        Token NL479=null;
        babel17Parser.convert_expr_return convert_expr476 = null;

        babel17Parser.convert_expr_return convert_expr480 = null;


        CommonTree NL477_tree=null;
        CommonTree TOK_RELATE478_tree=null;
        CommonTree NL479_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_TOK_RELATE=new RewriteRuleTokenStream(adaptor,"token TOK_RELATE");
        RewriteRuleSubtreeStream stream_convert_expr=new RewriteRuleSubtreeStream(adaptor,"rule convert_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:12: ( convert_expr ( ( NL )? TOK_RELATE ( NL )? convert_expr )? -> ^( RELATE ( convert_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:14: convert_expr ( ( NL )? TOK_RELATE ( NL )? convert_expr )?
            {
            pushFollow(FOLLOW_convert_expr_in_relate_expr4768);
            convert_expr476=convert_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_convert_expr.add(convert_expr476.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:27: ( ( NL )? TOK_RELATE ( NL )? convert_expr )?
            int alt216=2;
            int LA216_0 = input.LA(1);

            if ( (LA216_0==NL) ) {
                int LA216_1 = input.LA(2);

                if ( (LA216_1==TOK_RELATE) ) {
                    alt216=1;
                }
            }
            else if ( (LA216_0==TOK_RELATE) ) {
                alt216=1;
            }
            switch (alt216) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:28: ( NL )? TOK_RELATE ( NL )? convert_expr
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:28: ( NL )?
                    int alt214=2;
                    int LA214_0 = input.LA(1);

                    if ( (LA214_0==NL) ) {
                        alt214=1;
                    }
                    switch (alt214) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:28: NL
                            {
                            NL477=(Token)match(input,NL,FOLLOW_NL_in_relate_expr4771); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL477);


                            }
                            break;

                    }

                    TOK_RELATE478=(Token)match(input,TOK_RELATE,FOLLOW_TOK_RELATE_in_relate_expr4774); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TOK_RELATE.add(TOK_RELATE478);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:43: ( NL )?
                    int alt215=2;
                    int LA215_0 = input.LA(1);

                    if ( (LA215_0==NL) ) {
                        alt215=1;
                    }
                    switch (alt215) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:43: NL
                            {
                            NL479=(Token)match(input,NL,FOLLOW_NL_in_relate_expr4776); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL479);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_convert_expr_in_relate_expr4779);
                    convert_expr480=convert_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_convert_expr.add(convert_expr480.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: convert_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 707:62: -> ^( RELATE ( convert_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:65: ^( RELATE ( convert_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RELATE, "RELATE"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:74: ( convert_expr )*
                while ( stream_convert_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_convert_expr.nextTree());

                }
                stream_convert_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "relate_expr"

    public static class p_relate_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_relate_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:1: p_relate_expr : p_convert_expr ( ( NL )? TOK_RELATE ( NL )? p_convert_expr )? -> ^( RELATE ( p_convert_expr )* ) ;
    public final babel17Parser.p_relate_expr_return p_relate_expr() throws RecognitionException {
        babel17Parser.p_relate_expr_return retval = new babel17Parser.p_relate_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL482=null;
        Token TOK_RELATE483=null;
        Token NL484=null;
        babel17Parser.p_convert_expr_return p_convert_expr481 = null;

        babel17Parser.p_convert_expr_return p_convert_expr485 = null;


        CommonTree NL482_tree=null;
        CommonTree TOK_RELATE483_tree=null;
        CommonTree NL484_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_TOK_RELATE=new RewriteRuleTokenStream(adaptor,"token TOK_RELATE");
        RewriteRuleSubtreeStream stream_p_convert_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_convert_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:14: ( p_convert_expr ( ( NL )? TOK_RELATE ( NL )? p_convert_expr )? -> ^( RELATE ( p_convert_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:16: p_convert_expr ( ( NL )? TOK_RELATE ( NL )? p_convert_expr )?
            {
            pushFollow(FOLLOW_p_convert_expr_in_p_relate_expr4798);
            p_convert_expr481=p_convert_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_convert_expr.add(p_convert_expr481.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:31: ( ( NL )? TOK_RELATE ( NL )? p_convert_expr )?
            int alt219=2;
            int LA219_0 = input.LA(1);

            if ( (LA219_0==NL) ) {
                int LA219_1 = input.LA(2);

                if ( (LA219_1==TOK_RELATE) ) {
                    alt219=1;
                }
            }
            else if ( (LA219_0==TOK_RELATE) ) {
                alt219=1;
            }
            switch (alt219) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:32: ( NL )? TOK_RELATE ( NL )? p_convert_expr
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:32: ( NL )?
                    int alt217=2;
                    int LA217_0 = input.LA(1);

                    if ( (LA217_0==NL) ) {
                        alt217=1;
                    }
                    switch (alt217) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:32: NL
                            {
                            NL482=(Token)match(input,NL,FOLLOW_NL_in_p_relate_expr4801); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL482);


                            }
                            break;

                    }

                    TOK_RELATE483=(Token)match(input,TOK_RELATE,FOLLOW_TOK_RELATE_in_p_relate_expr4804); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TOK_RELATE.add(TOK_RELATE483);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:47: ( NL )?
                    int alt218=2;
                    int LA218_0 = input.LA(1);

                    if ( (LA218_0==NL) ) {
                        alt218=1;
                    }
                    switch (alt218) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:47: NL
                            {
                            NL484=(Token)match(input,NL,FOLLOW_NL_in_p_relate_expr4806); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL484);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_convert_expr_in_p_relate_expr4809);
                    p_convert_expr485=p_convert_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_convert_expr.add(p_convert_expr485.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: p_convert_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 709:68: -> ^( RELATE ( p_convert_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:71: ^( RELATE ( p_convert_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RELATE, "RELATE"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:80: ( p_convert_expr )*
                while ( stream_p_convert_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_convert_expr.nextTree());

                }
                stream_p_convert_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_relate_expr"

    public static class convert_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "convert_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:711:1: convert_expr : term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )? -> ^( CONVERT term_expr ( typeannotation )? ) ;
    public final babel17Parser.convert_expr_return convert_expr() throws RecognitionException {
        babel17Parser.convert_expr_return retval = new babel17Parser.convert_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL487=null;
        Token TOK_CONVERT488=null;
        Token NL489=null;
        babel17Parser.term_expr_return term_expr486 = null;

        babel17Parser.typeannotation_return typeannotation490 = null;


        CommonTree NL487_tree=null;
        CommonTree TOK_CONVERT488_tree=null;
        CommonTree NL489_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_TOK_CONVERT=new RewriteRuleTokenStream(adaptor,"token TOK_CONVERT");
        RewriteRuleSubtreeStream stream_typeannotation=new RewriteRuleSubtreeStream(adaptor,"rule typeannotation");
        RewriteRuleSubtreeStream stream_term_expr=new RewriteRuleSubtreeStream(adaptor,"rule term_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:712:2: ( term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )? -> ^( CONVERT term_expr ( typeannotation )? ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:712:4: term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )?
            {
            pushFollow(FOLLOW_term_expr_in_convert_expr4830);
            term_expr486=term_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_term_expr.add(term_expr486.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:712:14: ( ( NL )? TOK_CONVERT ( NL )? typeannotation )?
            int alt222=2;
            int LA222_0 = input.LA(1);

            if ( (LA222_0==NL) ) {
                int LA222_1 = input.LA(2);

                if ( (LA222_1==TOK_CONVERT) ) {
                    alt222=1;
                }
            }
            else if ( (LA222_0==TOK_CONVERT) ) {
                alt222=1;
            }
            switch (alt222) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:712:15: ( NL )? TOK_CONVERT ( NL )? typeannotation
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:712:15: ( NL )?
                    int alt220=2;
                    int LA220_0 = input.LA(1);

                    if ( (LA220_0==NL) ) {
                        alt220=1;
                    }
                    switch (alt220) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:712:15: NL
                            {
                            NL487=(Token)match(input,NL,FOLLOW_NL_in_convert_expr4833); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL487);


                            }
                            break;

                    }

                    TOK_CONVERT488=(Token)match(input,TOK_CONVERT,FOLLOW_TOK_CONVERT_in_convert_expr4836); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TOK_CONVERT.add(TOK_CONVERT488);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:712:31: ( NL )?
                    int alt221=2;
                    int LA221_0 = input.LA(1);

                    if ( (LA221_0==NL) ) {
                        alt221=1;
                    }
                    switch (alt221) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:712:31: NL
                            {
                            NL489=(Token)match(input,NL,FOLLOW_NL_in_convert_expr4838); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL489);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeannotation_in_convert_expr4841);
                    typeannotation490=typeannotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeannotation.add(typeannotation490.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: typeannotation, term_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 712:52: -> ^( CONVERT term_expr ( typeannotation )? )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:712:55: ^( CONVERT term_expr ( typeannotation )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONVERT, "CONVERT"), root_1);

                adaptor.addChild(root_1, stream_term_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:712:75: ( typeannotation )?
                if ( stream_typeannotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeannotation.nextTree());

                }
                stream_typeannotation.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "convert_expr"

    public static class p_convert_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_convert_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:714:1: p_convert_expr : p_term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )? -> ^( CONVERT p_term_expr ( typeannotation )? ) ;
    public final babel17Parser.p_convert_expr_return p_convert_expr() throws RecognitionException {
        babel17Parser.p_convert_expr_return retval = new babel17Parser.p_convert_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL492=null;
        Token TOK_CONVERT493=null;
        Token NL494=null;
        babel17Parser.p_term_expr_return p_term_expr491 = null;

        babel17Parser.typeannotation_return typeannotation495 = null;


        CommonTree NL492_tree=null;
        CommonTree TOK_CONVERT493_tree=null;
        CommonTree NL494_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_TOK_CONVERT=new RewriteRuleTokenStream(adaptor,"token TOK_CONVERT");
        RewriteRuleSubtreeStream stream_typeannotation=new RewriteRuleSubtreeStream(adaptor,"rule typeannotation");
        RewriteRuleSubtreeStream stream_p_term_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_term_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:715:2: ( p_term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )? -> ^( CONVERT p_term_expr ( typeannotation )? ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:715:4: p_term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )?
            {
            pushFollow(FOLLOW_p_term_expr_in_p_convert_expr4863);
            p_term_expr491=p_term_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_term_expr.add(p_term_expr491.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:715:16: ( ( NL )? TOK_CONVERT ( NL )? typeannotation )?
            int alt225=2;
            int LA225_0 = input.LA(1);

            if ( (LA225_0==NL) ) {
                int LA225_1 = input.LA(2);

                if ( (LA225_1==TOK_CONVERT) ) {
                    alt225=1;
                }
            }
            else if ( (LA225_0==TOK_CONVERT) ) {
                alt225=1;
            }
            switch (alt225) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:715:17: ( NL )? TOK_CONVERT ( NL )? typeannotation
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:715:17: ( NL )?
                    int alt223=2;
                    int LA223_0 = input.LA(1);

                    if ( (LA223_0==NL) ) {
                        alt223=1;
                    }
                    switch (alt223) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:715:17: NL
                            {
                            NL492=(Token)match(input,NL,FOLLOW_NL_in_p_convert_expr4866); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL492);


                            }
                            break;

                    }

                    TOK_CONVERT493=(Token)match(input,TOK_CONVERT,FOLLOW_TOK_CONVERT_in_p_convert_expr4869); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TOK_CONVERT.add(TOK_CONVERT493);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:715:33: ( NL )?
                    int alt224=2;
                    int LA224_0 = input.LA(1);

                    if ( (LA224_0==NL) ) {
                        alt224=1;
                    }
                    switch (alt224) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:715:33: NL
                            {
                            NL494=(Token)match(input,NL,FOLLOW_NL_in_p_convert_expr4871); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL494);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeannotation_in_p_convert_expr4874);
                    typeannotation495=typeannotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeannotation.add(typeannotation495.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: p_term_expr, typeannotation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 715:54: -> ^( CONVERT p_term_expr ( typeannotation )? )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:715:57: ^( CONVERT p_term_expr ( typeannotation )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONVERT, "CONVERT"), root_1);

                adaptor.addChild(root_1, stream_p_term_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:715:79: ( typeannotation )?
                if ( stream_typeannotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeannotation.nextTree());

                }
                stream_typeannotation.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_convert_expr"

    public static class term_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "term_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:717:1: term_expr : ( builtin_fun term_expr | arith_expr );
    public final babel17Parser.term_expr_return term_expr() throws RecognitionException {
        babel17Parser.term_expr_return retval = new babel17Parser.term_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.builtin_fun_return builtin_fun496 = null;

        babel17Parser.term_expr_return term_expr497 = null;

        babel17Parser.arith_expr_return arith_expr498 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:718:2: ( builtin_fun term_expr | arith_expr )
            int alt226=2;
            int LA226_0 = input.LA(1);

            if ( (LA226_0==L_choose||LA226_0==L_random||LA226_0==L_typeof||LA226_0==L_native) ) {
                alt226=1;
            }
            else if ( (LA226_0==L_begin||(LA226_0>=L_obj && LA226_0<=L_if)||(LA226_0>=L_while && LA226_0<=L_for)||LA226_0==L_match||LA226_0==L_try||(LA226_0>=L_true && LA226_0<=L_this)||LA226_0==L_nil||LA226_0==L_root||LA226_0==MINUS||(LA226_0>=Constr && LA226_0<=Id)||(LA226_0>=Float && LA226_0<=Num)||(LA226_0>=String && LA226_0<=ROUND_BRACKET_OPEN)||LA226_0==SQUARE_BRACKET_OPEN||LA226_0==CURLY_BRACKET_OPEN) ) {
                alt226=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 226, 0, input);

                throw nvae;
            }
            switch (alt226) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:718:4: builtin_fun term_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_builtin_fun_in_term_expr4897);
                    builtin_fun496=builtin_fun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(builtin_fun496.getTree(), root_0);
                    pushFollow(FOLLOW_term_expr_in_term_expr4900);
                    term_expr497=term_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, term_expr497.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:719:4: arith_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arith_expr_in_term_expr4905);
                    arith_expr498=arith_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_expr498.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "term_expr"

    public static class p_term_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_term_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:721:1: p_term_expr : ( builtin_fun ( NL )? p_term_expr | p_arith_expr );
    public final babel17Parser.p_term_expr_return p_term_expr() throws RecognitionException {
        babel17Parser.p_term_expr_return retval = new babel17Parser.p_term_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL500=null;
        babel17Parser.builtin_fun_return builtin_fun499 = null;

        babel17Parser.p_term_expr_return p_term_expr501 = null;

        babel17Parser.p_arith_expr_return p_arith_expr502 = null;


        CommonTree NL500_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:722:2: ( builtin_fun ( NL )? p_term_expr | p_arith_expr )
            int alt228=2;
            int LA228_0 = input.LA(1);

            if ( (LA228_0==L_choose||LA228_0==L_random||LA228_0==L_typeof||LA228_0==L_native) ) {
                alt228=1;
            }
            else if ( (LA228_0==L_begin||(LA228_0>=L_obj && LA228_0<=L_if)||(LA228_0>=L_while && LA228_0<=L_for)||LA228_0==L_match||LA228_0==L_try||(LA228_0>=L_true && LA228_0<=L_this)||LA228_0==L_nil||LA228_0==L_root||LA228_0==MINUS||(LA228_0>=Constr && LA228_0<=Id)||(LA228_0>=Float && LA228_0<=Num)||(LA228_0>=String && LA228_0<=ROUND_BRACKET_OPEN)||LA228_0==SQUARE_BRACKET_OPEN||LA228_0==CURLY_BRACKET_OPEN) ) {
                alt228=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 228, 0, input);

                throw nvae;
            }
            switch (alt228) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:722:4: builtin_fun ( NL )? p_term_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_builtin_fun_in_p_term_expr4915);
                    builtin_fun499=builtin_fun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(builtin_fun499.getTree(), root_0);
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:722:19: ( NL )?
                    int alt227=2;
                    int LA227_0 = input.LA(1);

                    if ( (LA227_0==NL) ) {
                        alt227=1;
                    }
                    switch (alt227) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:722:19: NL
                            {
                            NL500=(Token)match(input,NL,FOLLOW_NL_in_p_term_expr4918); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_term_expr_in_p_term_expr4922);
                    p_term_expr501=p_term_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_term_expr501.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:723:4: p_arith_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_arith_expr_in_p_term_expr4927);
                    p_arith_expr502=p_arith_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_expr502.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_term_expr"

    public static class builtin_fun_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtin_fun"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:725:1: builtin_fun : ( L_random | L_choose | L_typeof | L_native );
    public final babel17Parser.builtin_fun_return builtin_fun() throws RecognitionException {
        babel17Parser.builtin_fun_return retval = new babel17Parser.builtin_fun_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set503=null;

        CommonTree set503_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:726:2: ( L_random | L_choose | L_typeof | L_native )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set503=(Token)input.LT(1);
            if ( input.LA(1)==L_choose||input.LA(1)==L_random||input.LA(1)==L_typeof||input.LA(1)==L_native ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set503));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtin_fun"

    public static class arith_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:728:1: arith_expr : plusplus_expr ;
    public final babel17Parser.arith_expr_return arith_expr() throws RecognitionException {
        babel17Parser.arith_expr_return retval = new babel17Parser.arith_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.plusplus_expr_return plusplus_expr504 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:729:2: ( plusplus_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:729:4: plusplus_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_plusplus_expr_in_arith_expr4957);
            plusplus_expr504=plusplus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, plusplus_expr504.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_expr"

    public static class p_arith_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:731:1: p_arith_expr : p_plusplus_expr ;
    public final babel17Parser.p_arith_expr_return p_arith_expr() throws RecognitionException {
        babel17Parser.p_arith_expr_return retval = new babel17Parser.p_arith_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.p_plusplus_expr_return p_plusplus_expr505 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:732:2: ( p_plusplus_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:732:4: p_plusplus_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_plusplus_expr_in_p_arith_expr4966);
            p_plusplus_expr505=p_plusplus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_plusplus_expr505.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_expr"

    public static class plusplus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "plusplus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:734:1: plusplus_expr : timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr )* ;
    public final babel17Parser.plusplus_expr_return plusplus_expr() throws RecognitionException {
        babel17Parser.plusplus_expr_return retval = new babel17Parser.plusplus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL507=null;
        Token PLUSPLUS508=null;
        Token MINUSMINUS509=null;
        Token NL510=null;
        babel17Parser.timestimes_expr_return timestimes_expr506 = null;

        babel17Parser.timestimes_expr_return timestimes_expr511 = null;


        CommonTree NL507_tree=null;
        CommonTree PLUSPLUS508_tree=null;
        CommonTree MINUSMINUS509_tree=null;
        CommonTree NL510_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:735:2: ( timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:735:4: timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_timestimes_expr_in_plusplus_expr4976);
            timestimes_expr506=timestimes_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, timestimes_expr506.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:735:20: ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr )*
            loop232:
            do {
                int alt232=2;
                int LA232_0 = input.LA(1);

                if ( (LA232_0==NL) ) {
                    int LA232_1 = input.LA(2);

                    if ( ((LA232_1>=PLUSPLUS && LA232_1<=MINUSMINUS)) ) {
                        alt232=1;
                    }


                }
                else if ( ((LA232_0>=PLUSPLUS && LA232_0<=MINUSMINUS)) ) {
                    alt232=1;
                }


                switch (alt232) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:735:21: ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:735:23: ( NL )?
            	    int alt229=2;
            	    int LA229_0 = input.LA(1);

            	    if ( (LA229_0==NL) ) {
            	        alt229=1;
            	    }
            	    switch (alt229) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:735:23: NL
            	            {
            	            NL507=(Token)match(input,NL,FOLLOW_NL_in_plusplus_expr4979); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:735:26: ( PLUSPLUS | MINUSMINUS )
            	    int alt230=2;
            	    int LA230_0 = input.LA(1);

            	    if ( (LA230_0==PLUSPLUS) ) {
            	        alt230=1;
            	    }
            	    else if ( (LA230_0==MINUSMINUS) ) {
            	        alt230=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 230, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt230) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:735:27: PLUSPLUS
            	            {
            	            PLUSPLUS508=(Token)match(input,PLUSPLUS,FOLLOW_PLUSPLUS_in_plusplus_expr4984); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUSPLUS508_tree = (CommonTree)adaptor.create(PLUSPLUS508);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUSPLUS508_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:735:37: MINUSMINUS
            	            {
            	            MINUSMINUS509=(Token)match(input,MINUSMINUS,FOLLOW_MINUSMINUS_in_plusplus_expr4987); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUSMINUS509_tree = (CommonTree)adaptor.create(MINUSMINUS509);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUSMINUS509_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:735:52: ( NL )?
            	    int alt231=2;
            	    int LA231_0 = input.LA(1);

            	    if ( (LA231_0==NL) ) {
            	        alt231=1;
            	    }
            	    switch (alt231) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:735:52: NL
            	            {
            	            NL510=(Token)match(input,NL,FOLLOW_NL_in_plusplus_expr4991); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_timestimes_expr_in_plusplus_expr4995);
            	    timestimes_expr511=timestimes_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, timestimes_expr511.getTree());

            	    }
            	    break;

            	default :
            	    break loop232;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "plusplus_expr"

    public static class p_plusplus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_plusplus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:737:1: p_plusplus_expr : p_timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr )* ;
    public final babel17Parser.p_plusplus_expr_return p_plusplus_expr() throws RecognitionException {
        babel17Parser.p_plusplus_expr_return retval = new babel17Parser.p_plusplus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL513=null;
        Token PLUSPLUS514=null;
        Token MINUSMINUS515=null;
        Token NL516=null;
        babel17Parser.p_timestimes_expr_return p_timestimes_expr512 = null;

        babel17Parser.p_timestimes_expr_return p_timestimes_expr517 = null;


        CommonTree NL513_tree=null;
        CommonTree PLUSPLUS514_tree=null;
        CommonTree MINUSMINUS515_tree=null;
        CommonTree NL516_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:738:2: ( p_timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:738:4: p_timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_timestimes_expr_in_p_plusplus_expr5007);
            p_timestimes_expr512=p_timestimes_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_timestimes_expr512.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:738:22: ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr )*
            loop236:
            do {
                int alt236=2;
                int LA236_0 = input.LA(1);

                if ( (LA236_0==NL) ) {
                    int LA236_1 = input.LA(2);

                    if ( ((LA236_1>=PLUSPLUS && LA236_1<=MINUSMINUS)) ) {
                        alt236=1;
                    }


                }
                else if ( ((LA236_0>=PLUSPLUS && LA236_0<=MINUSMINUS)) ) {
                    alt236=1;
                }


                switch (alt236) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:738:23: ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:738:25: ( NL )?
            	    int alt233=2;
            	    int LA233_0 = input.LA(1);

            	    if ( (LA233_0==NL) ) {
            	        alt233=1;
            	    }
            	    switch (alt233) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:738:25: NL
            	            {
            	            NL513=(Token)match(input,NL,FOLLOW_NL_in_p_plusplus_expr5010); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:738:28: ( PLUSPLUS | MINUSMINUS )
            	    int alt234=2;
            	    int LA234_0 = input.LA(1);

            	    if ( (LA234_0==PLUSPLUS) ) {
            	        alt234=1;
            	    }
            	    else if ( (LA234_0==MINUSMINUS) ) {
            	        alt234=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 234, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt234) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:738:29: PLUSPLUS
            	            {
            	            PLUSPLUS514=(Token)match(input,PLUSPLUS,FOLLOW_PLUSPLUS_in_p_plusplus_expr5015); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUSPLUS514_tree = (CommonTree)adaptor.create(PLUSPLUS514);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUSPLUS514_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:738:39: MINUSMINUS
            	            {
            	            MINUSMINUS515=(Token)match(input,MINUSMINUS,FOLLOW_MINUSMINUS_in_p_plusplus_expr5018); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUSMINUS515_tree = (CommonTree)adaptor.create(MINUSMINUS515);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUSMINUS515_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:738:54: ( NL )?
            	    int alt235=2;
            	    int LA235_0 = input.LA(1);

            	    if ( (LA235_0==NL) ) {
            	        alt235=1;
            	    }
            	    switch (alt235) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:738:54: NL
            	            {
            	            NL516=(Token)match(input,NL,FOLLOW_NL_in_p_plusplus_expr5022); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_timestimes_expr_in_p_plusplus_expr5026);
            	    p_timestimes_expr517=p_timestimes_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_timestimes_expr517.getTree());

            	    }
            	    break;

            	default :
            	    break loop236;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_plusplus_expr"

    public static class timestimes_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timestimes_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:741:1: timestimes_expr : simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr )* ;
    public final babel17Parser.timestimes_expr_return timestimes_expr() throws RecognitionException {
        babel17Parser.timestimes_expr_return retval = new babel17Parser.timestimes_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL519=null;
        Token TIMESTIMES520=null;
        Token QUOTIENTQUOTIENT521=null;
        Token NL522=null;
        babel17Parser.simple_expr_return simple_expr518 = null;

        babel17Parser.simple_expr_return simple_expr523 = null;


        CommonTree NL519_tree=null;
        CommonTree TIMESTIMES520_tree=null;
        CommonTree QUOTIENTQUOTIENT521_tree=null;
        CommonTree NL522_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:742:2: ( simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:742:4: simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_simple_expr_in_timestimes_expr5038);
            simple_expr518=simple_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expr518.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:742:16: ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr )*
            loop240:
            do {
                int alt240=2;
                int LA240_0 = input.LA(1);

                if ( (LA240_0==NL) ) {
                    int LA240_1 = input.LA(2);

                    if ( ((LA240_1>=TIMESTIMES && LA240_1<=QUOTIENTQUOTIENT)) ) {
                        alt240=1;
                    }


                }
                else if ( ((LA240_0>=TIMESTIMES && LA240_0<=QUOTIENTQUOTIENT)) ) {
                    alt240=1;
                }


                switch (alt240) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:742:17: ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:742:19: ( NL )?
            	    int alt237=2;
            	    int LA237_0 = input.LA(1);

            	    if ( (LA237_0==NL) ) {
            	        alt237=1;
            	    }
            	    switch (alt237) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:742:19: NL
            	            {
            	            NL519=(Token)match(input,NL,FOLLOW_NL_in_timestimes_expr5041); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:742:22: ( TIMESTIMES | QUOTIENTQUOTIENT )
            	    int alt238=2;
            	    int LA238_0 = input.LA(1);

            	    if ( (LA238_0==TIMESTIMES) ) {
            	        alt238=1;
            	    }
            	    else if ( (LA238_0==QUOTIENTQUOTIENT) ) {
            	        alt238=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 238, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt238) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:742:23: TIMESTIMES
            	            {
            	            TIMESTIMES520=(Token)match(input,TIMESTIMES,FOLLOW_TIMESTIMES_in_timestimes_expr5046); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            TIMESTIMES520_tree = (CommonTree)adaptor.create(TIMESTIMES520);
            	            root_0 = (CommonTree)adaptor.becomeRoot(TIMESTIMES520_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:742:35: QUOTIENTQUOTIENT
            	            {
            	            QUOTIENTQUOTIENT521=(Token)match(input,QUOTIENTQUOTIENT,FOLLOW_QUOTIENTQUOTIENT_in_timestimes_expr5049); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            QUOTIENTQUOTIENT521_tree = (CommonTree)adaptor.create(QUOTIENTQUOTIENT521);
            	            root_0 = (CommonTree)adaptor.becomeRoot(QUOTIENTQUOTIENT521_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:742:56: ( NL )?
            	    int alt239=2;
            	    int LA239_0 = input.LA(1);

            	    if ( (LA239_0==NL) ) {
            	        alt239=1;
            	    }
            	    switch (alt239) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:742:56: NL
            	            {
            	            NL522=(Token)match(input,NL,FOLLOW_NL_in_timestimes_expr5053); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_simple_expr_in_timestimes_expr5057);
            	    simple_expr523=simple_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expr523.getTree());

            	    }
            	    break;

            	default :
            	    break loop240;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timestimes_expr"

    public static class p_timestimes_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_timestimes_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:744:1: p_timestimes_expr : p_simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr )* ;
    public final babel17Parser.p_timestimes_expr_return p_timestimes_expr() throws RecognitionException {
        babel17Parser.p_timestimes_expr_return retval = new babel17Parser.p_timestimes_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL525=null;
        Token TIMESTIMES526=null;
        Token QUOTIENTQUOTIENT527=null;
        Token NL528=null;
        babel17Parser.p_simple_expr_return p_simple_expr524 = null;

        babel17Parser.p_simple_expr_return p_simple_expr529 = null;


        CommonTree NL525_tree=null;
        CommonTree TIMESTIMES526_tree=null;
        CommonTree QUOTIENTQUOTIENT527_tree=null;
        CommonTree NL528_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:745:2: ( p_simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:745:4: p_simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_simple_expr_in_p_timestimes_expr5070);
            p_simple_expr524=p_simple_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_simple_expr524.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:745:18: ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr )*
            loop244:
            do {
                int alt244=2;
                int LA244_0 = input.LA(1);

                if ( (LA244_0==NL) ) {
                    int LA244_1 = input.LA(2);

                    if ( ((LA244_1>=TIMESTIMES && LA244_1<=QUOTIENTQUOTIENT)) ) {
                        alt244=1;
                    }


                }
                else if ( ((LA244_0>=TIMESTIMES && LA244_0<=QUOTIENTQUOTIENT)) ) {
                    alt244=1;
                }


                switch (alt244) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:745:19: ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:745:21: ( NL )?
            	    int alt241=2;
            	    int LA241_0 = input.LA(1);

            	    if ( (LA241_0==NL) ) {
            	        alt241=1;
            	    }
            	    switch (alt241) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:745:21: NL
            	            {
            	            NL525=(Token)match(input,NL,FOLLOW_NL_in_p_timestimes_expr5073); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:745:24: ( TIMESTIMES | QUOTIENTQUOTIENT )
            	    int alt242=2;
            	    int LA242_0 = input.LA(1);

            	    if ( (LA242_0==TIMESTIMES) ) {
            	        alt242=1;
            	    }
            	    else if ( (LA242_0==QUOTIENTQUOTIENT) ) {
            	        alt242=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 242, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt242) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:745:25: TIMESTIMES
            	            {
            	            TIMESTIMES526=(Token)match(input,TIMESTIMES,FOLLOW_TIMESTIMES_in_p_timestimes_expr5078); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            TIMESTIMES526_tree = (CommonTree)adaptor.create(TIMESTIMES526);
            	            root_0 = (CommonTree)adaptor.becomeRoot(TIMESTIMES526_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:745:37: QUOTIENTQUOTIENT
            	            {
            	            QUOTIENTQUOTIENT527=(Token)match(input,QUOTIENTQUOTIENT,FOLLOW_QUOTIENTQUOTIENT_in_p_timestimes_expr5081); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            QUOTIENTQUOTIENT527_tree = (CommonTree)adaptor.create(QUOTIENTQUOTIENT527);
            	            root_0 = (CommonTree)adaptor.becomeRoot(QUOTIENTQUOTIENT527_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:745:58: ( NL )?
            	    int alt243=2;
            	    int LA243_0 = input.LA(1);

            	    if ( (LA243_0==NL) ) {
            	        alt243=1;
            	    }
            	    switch (alt243) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:745:58: NL
            	            {
            	            NL528=(Token)match(input,NL,FOLLOW_NL_in_p_timestimes_expr5085); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_simple_expr_in_p_timestimes_expr5089);
            	    p_simple_expr529=p_simple_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_simple_expr529.getTree());

            	    }
            	    break;

            	default :
            	    break loop244;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_timestimes_expr"

    public static class simple_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:747:1: simple_expr : cons_expr ;
    public final babel17Parser.simple_expr_return simple_expr() throws RecognitionException {
        babel17Parser.simple_expr_return retval = new babel17Parser.simple_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.cons_expr_return cons_expr530 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:748:2: ( cons_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:748:4: cons_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_cons_expr_in_simple_expr5100);
            cons_expr530=cons_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cons_expr530.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "simple_expr"

    public static class p_simple_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_simple_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:750:1: p_simple_expr : p_cons_expr ;
    public final babel17Parser.p_simple_expr_return p_simple_expr() throws RecognitionException {
        babel17Parser.p_simple_expr_return retval = new babel17Parser.p_simple_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.p_cons_expr_return p_cons_expr531 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:751:2: ( p_cons_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:751:4: p_cons_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_cons_expr_in_p_simple_expr5109);
            p_cons_expr531=p_cons_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_cons_expr531.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_simple_expr"

    public static class cons_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cons_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:753:1: cons_expr : to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? to_expr )* -> ^( LIST_CONS ( to_expr )* ) ;
    public final babel17Parser.cons_expr_return cons_expr() throws RecognitionException {
        babel17Parser.cons_expr_return retval = new babel17Parser.cons_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL533=null;
        Token NL535=null;
        babel17Parser.to_expr_return to_expr532 = null;

        babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON534 = null;

        babel17Parser.to_expr_return to_expr536 = null;


        CommonTree NL533_tree=null;
        CommonTree NL535_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_token_DOUBLE_COLON=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_COLON");
        RewriteRuleSubtreeStream stream_to_expr=new RewriteRuleSubtreeStream(adaptor,"rule to_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:754:2: ( to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? to_expr )* -> ^( LIST_CONS ( to_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:754:4: to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? to_expr )*
            {
            pushFollow(FOLLOW_to_expr_in_cons_expr5118);
            to_expr532=to_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_to_expr.add(to_expr532.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:754:12: ( ( NL )? token_DOUBLE_COLON ( NL )? to_expr )*
            loop247:
            do {
                int alt247=2;
                int LA247_0 = input.LA(1);

                if ( (LA247_0==NL) ) {
                    int LA247_1 = input.LA(2);

                    if ( ((LA247_1>=A_DOUBLE_COLON && LA247_1<=U_DOUBLE_COLON)) ) {
                        alt247=1;
                    }


                }
                else if ( ((LA247_0>=A_DOUBLE_COLON && LA247_0<=U_DOUBLE_COLON)) ) {
                    alt247=1;
                }


                switch (alt247) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:754:13: ( NL )? token_DOUBLE_COLON ( NL )? to_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:754:13: ( NL )?
            	    int alt245=2;
            	    int LA245_0 = input.LA(1);

            	    if ( (LA245_0==NL) ) {
            	        alt245=1;
            	    }
            	    switch (alt245) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:754:13: NL
            	            {
            	            NL533=(Token)match(input,NL,FOLLOW_NL_in_cons_expr5121); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL533);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_DOUBLE_COLON_in_cons_expr5124);
            	    token_DOUBLE_COLON534=token_DOUBLE_COLON();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_token_DOUBLE_COLON.add(token_DOUBLE_COLON534.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:754:36: ( NL )?
            	    int alt246=2;
            	    int LA246_0 = input.LA(1);

            	    if ( (LA246_0==NL) ) {
            	        alt246=1;
            	    }
            	    switch (alt246) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:754:36: NL
            	            {
            	            NL535=(Token)match(input,NL,FOLLOW_NL_in_cons_expr5126); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL535);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_to_expr_in_cons_expr5129);
            	    to_expr536=to_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_to_expr.add(to_expr536.getTree());

            	    }
            	    break;

            	default :
            	    break loop247;
                }
            } while (true);



            // AST REWRITE
            // elements: to_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 754:50: -> ^( LIST_CONS ( to_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:754:53: ^( LIST_CONS ( to_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST_CONS, "LIST_CONS"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:754:65: ( to_expr )*
                while ( stream_to_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_to_expr.nextTree());

                }
                stream_to_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cons_expr"

    public static class p_cons_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_cons_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:756:1: p_cons_expr : p_to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr )* -> ^( LIST_CONS ( p_to_expr )* ) ;
    public final babel17Parser.p_cons_expr_return p_cons_expr() throws RecognitionException {
        babel17Parser.p_cons_expr_return retval = new babel17Parser.p_cons_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL538=null;
        Token NL540=null;
        babel17Parser.p_to_expr_return p_to_expr537 = null;

        babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON539 = null;

        babel17Parser.p_to_expr_return p_to_expr541 = null;


        CommonTree NL538_tree=null;
        CommonTree NL540_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_p_to_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_to_expr");
        RewriteRuleSubtreeStream stream_token_DOUBLE_COLON=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_COLON");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:2: ( p_to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr )* -> ^( LIST_CONS ( p_to_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:4: p_to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr )*
            {
            pushFollow(FOLLOW_p_to_expr_in_p_cons_expr5149);
            p_to_expr537=p_to_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_to_expr.add(p_to_expr537.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:14: ( ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr )*
            loop250:
            do {
                int alt250=2;
                int LA250_0 = input.LA(1);

                if ( (LA250_0==NL) ) {
                    int LA250_1 = input.LA(2);

                    if ( ((LA250_1>=A_DOUBLE_COLON && LA250_1<=U_DOUBLE_COLON)) ) {
                        alt250=1;
                    }


                }
                else if ( ((LA250_0>=A_DOUBLE_COLON && LA250_0<=U_DOUBLE_COLON)) ) {
                    alt250=1;
                }


                switch (alt250) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:15: ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:15: ( NL )?
            	    int alt248=2;
            	    int LA248_0 = input.LA(1);

            	    if ( (LA248_0==NL) ) {
            	        alt248=1;
            	    }
            	    switch (alt248) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:15: NL
            	            {
            	            NL538=(Token)match(input,NL,FOLLOW_NL_in_p_cons_expr5152); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL538);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_DOUBLE_COLON_in_p_cons_expr5155);
            	    token_DOUBLE_COLON539=token_DOUBLE_COLON();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_token_DOUBLE_COLON.add(token_DOUBLE_COLON539.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:38: ( NL )?
            	    int alt249=2;
            	    int LA249_0 = input.LA(1);

            	    if ( (LA249_0==NL) ) {
            	        alt249=1;
            	    }
            	    switch (alt249) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:38: NL
            	            {
            	            NL540=(Token)match(input,NL,FOLLOW_NL_in_p_cons_expr5157); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL540);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_to_expr_in_p_cons_expr5160);
            	    p_to_expr541=p_to_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_to_expr.add(p_to_expr541.getTree());

            	    }
            	    break;

            	default :
            	    break loop250;
                }
            } while (true);



            // AST REWRITE
            // elements: p_to_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 757:54: -> ^( LIST_CONS ( p_to_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:57: ^( LIST_CONS ( p_to_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST_CONS, "LIST_CONS"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:757:69: ( p_to_expr )*
                while ( stream_p_to_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_to_expr.nextTree());

                }
                stream_p_to_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_cons_expr"

    public static class to_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:1: to_expr : arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr )? ;
    public final babel17Parser.to_expr_return to_expr() throws RecognitionException {
        babel17Parser.to_expr_return retval = new babel17Parser.to_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL543=null;
        Token L_to544=null;
        Token L_downto545=null;
        Token NL546=null;
        babel17Parser.arith_plus_expr_return arith_plus_expr542 = null;

        babel17Parser.arith_plus_expr_return arith_plus_expr547 = null;


        CommonTree NL543_tree=null;
        CommonTree L_to544_tree=null;
        CommonTree L_downto545_tree=null;
        CommonTree NL546_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:9: ( arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr )? )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:11: arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_arith_plus_expr_in_to_expr5180);
            arith_plus_expr542=arith_plus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_plus_expr542.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:27: ( ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr )?
            int alt254=2;
            int LA254_0 = input.LA(1);

            if ( (LA254_0==NL) ) {
                int LA254_1 = input.LA(2);

                if ( ((LA254_1>=L_to && LA254_1<=L_downto)) ) {
                    alt254=1;
                }
            }
            else if ( ((LA254_0>=L_to && LA254_0<=L_downto)) ) {
                alt254=1;
            }
            switch (alt254) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:28: ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:30: ( NL )?
                    int alt251=2;
                    int LA251_0 = input.LA(1);

                    if ( (LA251_0==NL) ) {
                        alt251=1;
                    }
                    switch (alt251) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:30: NL
                            {
                            NL543=(Token)match(input,NL,FOLLOW_NL_in_to_expr5183); if (state.failed) return retval;

                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:33: ( L_to | L_downto )
                    int alt252=2;
                    int LA252_0 = input.LA(1);

                    if ( (LA252_0==L_to) ) {
                        alt252=1;
                    }
                    else if ( (LA252_0==L_downto) ) {
                        alt252=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 252, 0, input);

                        throw nvae;
                    }
                    switch (alt252) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:34: L_to
                            {
                            L_to544=(Token)match(input,L_to,FOLLOW_L_to_in_to_expr5188); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            L_to544_tree = (CommonTree)adaptor.create(L_to544);
                            root_0 = (CommonTree)adaptor.becomeRoot(L_to544_tree, root_0);
                            }

                            }
                            break;
                        case 2 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:41: L_downto
                            {
                            L_downto545=(Token)match(input,L_downto,FOLLOW_L_downto_in_to_expr5192); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            L_downto545_tree = (CommonTree)adaptor.create(L_downto545);
                            root_0 = (CommonTree)adaptor.becomeRoot(L_downto545_tree, root_0);
                            }

                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:54: ( NL )?
                    int alt253=2;
                    int LA253_0 = input.LA(1);

                    if ( (LA253_0==NL) ) {
                        alt253=1;
                    }
                    switch (alt253) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:54: NL
                            {
                            NL546=(Token)match(input,NL,FOLLOW_NL_in_to_expr5196); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_arith_plus_expr_in_to_expr5200);
                    arith_plus_expr547=arith_plus_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_plus_expr547.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "to_expr"

    public static class p_to_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_to_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:762:1: p_to_expr : p_arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr )? ;
    public final babel17Parser.p_to_expr_return p_to_expr() throws RecognitionException {
        babel17Parser.p_to_expr_return retval = new babel17Parser.p_to_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL549=null;
        Token L_to550=null;
        Token L_downto551=null;
        Token NL552=null;
        babel17Parser.p_arith_plus_expr_return p_arith_plus_expr548 = null;

        babel17Parser.p_arith_plus_expr_return p_arith_plus_expr553 = null;


        CommonTree NL549_tree=null;
        CommonTree L_to550_tree=null;
        CommonTree L_downto551_tree=null;
        CommonTree NL552_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:763:2: ( p_arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr )? )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:763:4: p_arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_arith_plus_expr_in_p_to_expr5213);
            p_arith_plus_expr548=p_arith_plus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_plus_expr548.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:763:22: ( ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr )?
            int alt258=2;
            int LA258_0 = input.LA(1);

            if ( (LA258_0==NL) ) {
                int LA258_1 = input.LA(2);

                if ( ((LA258_1>=L_to && LA258_1<=L_downto)) ) {
                    alt258=1;
                }
            }
            else if ( ((LA258_0>=L_to && LA258_0<=L_downto)) ) {
                alt258=1;
            }
            switch (alt258) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:763:23: ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:763:25: ( NL )?
                    int alt255=2;
                    int LA255_0 = input.LA(1);

                    if ( (LA255_0==NL) ) {
                        alt255=1;
                    }
                    switch (alt255) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:763:25: NL
                            {
                            NL549=(Token)match(input,NL,FOLLOW_NL_in_p_to_expr5216); if (state.failed) return retval;

                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:763:28: ( L_to | L_downto )
                    int alt256=2;
                    int LA256_0 = input.LA(1);

                    if ( (LA256_0==L_to) ) {
                        alt256=1;
                    }
                    else if ( (LA256_0==L_downto) ) {
                        alt256=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 256, 0, input);

                        throw nvae;
                    }
                    switch (alt256) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:763:29: L_to
                            {
                            L_to550=(Token)match(input,L_to,FOLLOW_L_to_in_p_to_expr5221); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            L_to550_tree = (CommonTree)adaptor.create(L_to550);
                            root_0 = (CommonTree)adaptor.becomeRoot(L_to550_tree, root_0);
                            }

                            }
                            break;
                        case 2 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:763:36: L_downto
                            {
                            L_downto551=(Token)match(input,L_downto,FOLLOW_L_downto_in_p_to_expr5225); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            L_downto551_tree = (CommonTree)adaptor.create(L_downto551);
                            root_0 = (CommonTree)adaptor.becomeRoot(L_downto551_tree, root_0);
                            }

                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:763:49: ( NL )?
                    int alt257=2;
                    int LA257_0 = input.LA(1);

                    if ( (LA257_0==NL) ) {
                        alt257=1;
                    }
                    switch (alt257) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:763:49: NL
                            {
                            NL552=(Token)match(input,NL,FOLLOW_NL_in_p_to_expr5229); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_arith_plus_expr_in_p_to_expr5233);
                    p_arith_plus_expr553=p_arith_plus_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_plus_expr553.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_to_expr"

    public static class arith_plus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_plus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:765:1: arith_plus_expr : arith_uminus_expr ( ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr )* ;
    public final babel17Parser.arith_plus_expr_return arith_plus_expr() throws RecognitionException {
        babel17Parser.arith_plus_expr_return retval = new babel17Parser.arith_plus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL555=null;
        Token PLUS556=null;
        Token MINUS557=null;
        Token NL558=null;
        babel17Parser.arith_uminus_expr_return arith_uminus_expr554 = null;

        babel17Parser.arith_uminus_expr_return arith_uminus_expr559 = null;


        CommonTree NL555_tree=null;
        CommonTree PLUS556_tree=null;
        CommonTree MINUS557_tree=null;
        CommonTree NL558_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:766:2: ( arith_uminus_expr ( ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:766:4: arith_uminus_expr ( ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_arith_uminus_expr_in_arith_plus_expr5245);
            arith_uminus_expr554=arith_uminus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_uminus_expr554.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:766:22: ( ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr )*
            loop262:
            do {
                int alt262=2;
                int LA262_0 = input.LA(1);

                if ( (LA262_0==NL) ) {
                    int LA262_1 = input.LA(2);

                    if ( (LA262_1==PLUS) ) {
                        alt262=1;
                    }


                }
                else if ( ((LA262_0>=PLUS && LA262_0<=MINUS)) ) {
                    alt262=1;
                }


                switch (alt262) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:766:23: ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:766:23: ( ( NL )? PLUS | MINUS )
            	    int alt260=2;
            	    int LA260_0 = input.LA(1);

            	    if ( (LA260_0==PLUS||LA260_0==NL) ) {
            	        alt260=1;
            	    }
            	    else if ( (LA260_0==MINUS) ) {
            	        alt260=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 260, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt260) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:766:24: ( NL )? PLUS
            	            {
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:766:26: ( NL )?
            	            int alt259=2;
            	            int LA259_0 = input.LA(1);

            	            if ( (LA259_0==NL) ) {
            	                alt259=1;
            	            }
            	            switch (alt259) {
            	                case 1 :
            	                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:766:26: NL
            	                    {
            	                    NL555=(Token)match(input,NL,FOLLOW_NL_in_arith_plus_expr5249); if (state.failed) return retval;

            	                    }
            	                    break;

            	            }

            	            PLUS556=(Token)match(input,PLUS,FOLLOW_PLUS_in_arith_plus_expr5253); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS556_tree = (CommonTree)adaptor.create(PLUS556);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS556_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:766:37: MINUS
            	            {
            	            MINUS557=(Token)match(input,MINUS,FOLLOW_MINUS_in_arith_plus_expr5258); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS557_tree = (CommonTree)adaptor.create(MINUS557);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS557_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:766:47: ( NL )?
            	    int alt261=2;
            	    int LA261_0 = input.LA(1);

            	    if ( (LA261_0==NL) ) {
            	        alt261=1;
            	    }
            	    switch (alt261) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:766:47: NL
            	            {
            	            NL558=(Token)match(input,NL,FOLLOW_NL_in_arith_plus_expr5262); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_arith_uminus_expr_in_arith_plus_expr5266);
            	    arith_uminus_expr559=arith_uminus_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_uminus_expr559.getTree());

            	    }
            	    break;

            	default :
            	    break loop262;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_plus_expr"

    public static class p_arith_plus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_plus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:768:1: p_arith_plus_expr : p_arith_uminus_expr ( ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr )* ;
    public final babel17Parser.p_arith_plus_expr_return p_arith_plus_expr() throws RecognitionException {
        babel17Parser.p_arith_plus_expr_return retval = new babel17Parser.p_arith_plus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL561=null;
        Token set562=null;
        Token NL563=null;
        babel17Parser.p_arith_uminus_expr_return p_arith_uminus_expr560 = null;

        babel17Parser.p_arith_uminus_expr_return p_arith_uminus_expr564 = null;


        CommonTree NL561_tree=null;
        CommonTree set562_tree=null;
        CommonTree NL563_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:769:2: ( p_arith_uminus_expr ( ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:769:4: p_arith_uminus_expr ( ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_arith_uminus_expr_in_p_arith_plus_expr5277);
            p_arith_uminus_expr560=p_arith_uminus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_uminus_expr560.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:769:24: ( ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr )*
            loop265:
            do {
                int alt265=2;
                int LA265_0 = input.LA(1);

                if ( (LA265_0==NL) ) {
                    int LA265_1 = input.LA(2);

                    if ( ((LA265_1>=PLUS && LA265_1<=MINUS)) ) {
                        alt265=1;
                    }


                }
                else if ( ((LA265_0>=PLUS && LA265_0<=MINUS)) ) {
                    alt265=1;
                }


                switch (alt265) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:769:25: ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:769:27: ( NL )?
            	    int alt263=2;
            	    int LA263_0 = input.LA(1);

            	    if ( (LA263_0==NL) ) {
            	        alt263=1;
            	    }
            	    switch (alt263) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:769:27: NL
            	            {
            	            NL561=(Token)match(input,NL,FOLLOW_NL_in_p_arith_plus_expr5280); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    set562=(Token)input.LT(1);
            	    set562=(Token)input.LT(1);
            	    if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set562), root_0);
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:769:48: ( NL )?
            	    int alt264=2;
            	    int LA264_0 = input.LA(1);

            	    if ( (LA264_0==NL) ) {
            	        alt264=1;
            	    }
            	    switch (alt264) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:769:48: NL
            	            {
            	            NL563=(Token)match(input,NL,FOLLOW_NL_in_p_arith_plus_expr5293); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_arith_uminus_expr_in_p_arith_plus_expr5297);
            	    p_arith_uminus_expr564=p_arith_uminus_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_uminus_expr564.getTree());

            	    }
            	    break;

            	default :
            	    break loop265;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_plus_expr"

    public static class arith_uminus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_uminus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:771:1: arith_uminus_expr : ( MINUS ( NL )? arith_mult_expr -> ^( UMINUS arith_mult_expr ) | arith_mult_expr );
    public final babel17Parser.arith_uminus_expr_return arith_uminus_expr() throws RecognitionException {
        babel17Parser.arith_uminus_expr_return retval = new babel17Parser.arith_uminus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS565=null;
        Token NL566=null;
        babel17Parser.arith_mult_expr_return arith_mult_expr567 = null;

        babel17Parser.arith_mult_expr_return arith_mult_expr568 = null;


        CommonTree MINUS565_tree=null;
        CommonTree NL566_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_arith_mult_expr=new RewriteRuleSubtreeStream(adaptor,"rule arith_mult_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:772:2: ( MINUS ( NL )? arith_mult_expr -> ^( UMINUS arith_mult_expr ) | arith_mult_expr )
            int alt267=2;
            int LA267_0 = input.LA(1);

            if ( (LA267_0==MINUS) ) {
                alt267=1;
            }
            else if ( (LA267_0==L_begin||(LA267_0>=L_obj && LA267_0<=L_if)||(LA267_0>=L_while && LA267_0<=L_for)||LA267_0==L_match||LA267_0==L_try||(LA267_0>=L_true && LA267_0<=L_this)||LA267_0==L_nil||LA267_0==L_root||(LA267_0>=Constr && LA267_0<=Id)||(LA267_0>=Float && LA267_0<=Num)||(LA267_0>=String && LA267_0<=ROUND_BRACKET_OPEN)||LA267_0==SQUARE_BRACKET_OPEN||LA267_0==CURLY_BRACKET_OPEN) ) {
                alt267=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 267, 0, input);

                throw nvae;
            }
            switch (alt267) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:772:4: MINUS ( NL )? arith_mult_expr
                    {
                    MINUS565=(Token)match(input,MINUS,FOLLOW_MINUS_in_arith_uminus_expr5310); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS565);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:772:10: ( NL )?
                    int alt266=2;
                    int LA266_0 = input.LA(1);

                    if ( (LA266_0==NL) ) {
                        alt266=1;
                    }
                    switch (alt266) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:772:10: NL
                            {
                            NL566=(Token)match(input,NL,FOLLOW_NL_in_arith_uminus_expr5312); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL566);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_arith_mult_expr_in_arith_uminus_expr5315);
                    arith_mult_expr567=arith_mult_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arith_mult_expr.add(arith_mult_expr567.getTree());


                    // AST REWRITE
                    // elements: arith_mult_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 772:30: -> ^( UMINUS arith_mult_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:772:33: ^( UMINUS arith_mult_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UMINUS, "UMINUS"), root_1);

                        adaptor.addChild(root_1, stream_arith_mult_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:773:4: arith_mult_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arith_mult_expr_in_arith_uminus_expr5328);
                    arith_mult_expr568=arith_mult_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_mult_expr568.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_uminus_expr"

    public static class p_arith_uminus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_uminus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:775:1: p_arith_uminus_expr : ( MINUS ( NL )? p_arith_mult_expr -> ^( UMINUS p_arith_mult_expr ) | p_arith_mult_expr );
    public final babel17Parser.p_arith_uminus_expr_return p_arith_uminus_expr() throws RecognitionException {
        babel17Parser.p_arith_uminus_expr_return retval = new babel17Parser.p_arith_uminus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS569=null;
        Token NL570=null;
        babel17Parser.p_arith_mult_expr_return p_arith_mult_expr571 = null;

        babel17Parser.p_arith_mult_expr_return p_arith_mult_expr572 = null;


        CommonTree MINUS569_tree=null;
        CommonTree NL570_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_p_arith_mult_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_arith_mult_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:776:2: ( MINUS ( NL )? p_arith_mult_expr -> ^( UMINUS p_arith_mult_expr ) | p_arith_mult_expr )
            int alt269=2;
            int LA269_0 = input.LA(1);

            if ( (LA269_0==MINUS) ) {
                alt269=1;
            }
            else if ( (LA269_0==L_begin||(LA269_0>=L_obj && LA269_0<=L_if)||(LA269_0>=L_while && LA269_0<=L_for)||LA269_0==L_match||LA269_0==L_try||(LA269_0>=L_true && LA269_0<=L_this)||LA269_0==L_nil||LA269_0==L_root||(LA269_0>=Constr && LA269_0<=Id)||(LA269_0>=Float && LA269_0<=Num)||(LA269_0>=String && LA269_0<=ROUND_BRACKET_OPEN)||LA269_0==SQUARE_BRACKET_OPEN||LA269_0==CURLY_BRACKET_OPEN) ) {
                alt269=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 269, 0, input);

                throw nvae;
            }
            switch (alt269) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:776:4: MINUS ( NL )? p_arith_mult_expr
                    {
                    MINUS569=(Token)match(input,MINUS,FOLLOW_MINUS_in_p_arith_uminus_expr5339); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS569);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:776:10: ( NL )?
                    int alt268=2;
                    int LA268_0 = input.LA(1);

                    if ( (LA268_0==NL) ) {
                        alt268=1;
                    }
                    switch (alt268) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:776:10: NL
                            {
                            NL570=(Token)match(input,NL,FOLLOW_NL_in_p_arith_uminus_expr5341); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL570);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_arith_mult_expr_in_p_arith_uminus_expr5344);
                    p_arith_mult_expr571=p_arith_mult_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_arith_mult_expr.add(p_arith_mult_expr571.getTree());


                    // AST REWRITE
                    // elements: p_arith_mult_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 776:32: -> ^( UMINUS p_arith_mult_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:776:35: ^( UMINUS p_arith_mult_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UMINUS, "UMINUS"), root_1);

                        adaptor.addChild(root_1, stream_p_arith_mult_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:777:4: p_arith_mult_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_arith_mult_expr_in_p_arith_uminus_expr5357);
                    p_arith_mult_expr572=p_arith_mult_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_mult_expr572.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_uminus_expr"

    public static class arith_mult_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_mult_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:779:1: arith_mult_expr : arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr )* ;
    public final babel17Parser.arith_mult_expr_return arith_mult_expr() throws RecognitionException {
        babel17Parser.arith_mult_expr_return retval = new babel17Parser.arith_mult_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL574=null;
        Token set575=null;
        Token NL576=null;
        babel17Parser.arith_pow_expr_return arith_pow_expr573 = null;

        babel17Parser.arith_pow_expr_return arith_pow_expr577 = null;


        CommonTree NL574_tree=null;
        CommonTree set575_tree=null;
        CommonTree NL576_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:2: ( arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:4: arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_arith_pow_expr_in_arith_mult_expr5366);
            arith_pow_expr573=arith_pow_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_pow_expr573.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:19: ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr )*
            loop272:
            do {
                int alt272=2;
                int LA272_0 = input.LA(1);

                if ( (LA272_0==NL) ) {
                    int LA272_1 = input.LA(2);

                    if ( ((LA272_1>=L_div && LA272_1<=L_mod)||(LA272_1>=TIMES && LA272_1<=QUOTIENT)) ) {
                        alt272=1;
                    }


                }
                else if ( ((LA272_0>=L_div && LA272_0<=L_mod)||(LA272_0>=TIMES && LA272_0<=QUOTIENT)) ) {
                    alt272=1;
                }


                switch (alt272) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:20: ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:22: ( NL )?
            	    int alt270=2;
            	    int LA270_0 = input.LA(1);

            	    if ( (LA270_0==NL) ) {
            	        alt270=1;
            	    }
            	    switch (alt270) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:22: NL
            	            {
            	            NL574=(Token)match(input,NL,FOLLOW_NL_in_arith_mult_expr5369); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    set575=(Token)input.LT(1);
            	    set575=(Token)input.LT(1);
            	    if ( (input.LA(1)>=L_div && input.LA(1)<=L_mod)||(input.LA(1)>=TIMES && input.LA(1)<=QUOTIENT) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set575), root_0);
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:63: ( NL )?
            	    int alt271=2;
            	    int LA271_0 = input.LA(1);

            	    if ( (LA271_0==NL) ) {
            	        alt271=1;
            	    }
            	    switch (alt271) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:63: NL
            	            {
            	            NL576=(Token)match(input,NL,FOLLOW_NL_in_arith_mult_expr5390); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_arith_pow_expr_in_arith_mult_expr5394);
            	    arith_pow_expr577=arith_pow_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_pow_expr577.getTree());

            	    }
            	    break;

            	default :
            	    break loop272;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_mult_expr"

    public static class p_arith_mult_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_mult_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:782:1: p_arith_mult_expr : p_arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr )* ;
    public final babel17Parser.p_arith_mult_expr_return p_arith_mult_expr() throws RecognitionException {
        babel17Parser.p_arith_mult_expr_return retval = new babel17Parser.p_arith_mult_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL579=null;
        Token set580=null;
        Token NL581=null;
        babel17Parser.p_arith_pow_expr_return p_arith_pow_expr578 = null;

        babel17Parser.p_arith_pow_expr_return p_arith_pow_expr582 = null;


        CommonTree NL579_tree=null;
        CommonTree set580_tree=null;
        CommonTree NL581_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:783:2: ( p_arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:783:4: p_arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_arith_pow_expr_in_p_arith_mult_expr5406);
            p_arith_pow_expr578=p_arith_pow_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_pow_expr578.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:783:21: ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr )*
            loop275:
            do {
                int alt275=2;
                int LA275_0 = input.LA(1);

                if ( (LA275_0==NL) ) {
                    int LA275_1 = input.LA(2);

                    if ( ((LA275_1>=L_div && LA275_1<=L_mod)||(LA275_1>=TIMES && LA275_1<=QUOTIENT)) ) {
                        alt275=1;
                    }


                }
                else if ( ((LA275_0>=L_div && LA275_0<=L_mod)||(LA275_0>=TIMES && LA275_0<=QUOTIENT)) ) {
                    alt275=1;
                }


                switch (alt275) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:783:22: ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:783:24: ( NL )?
            	    int alt273=2;
            	    int LA273_0 = input.LA(1);

            	    if ( (LA273_0==NL) ) {
            	        alt273=1;
            	    }
            	    switch (alt273) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:783:24: NL
            	            {
            	            NL579=(Token)match(input,NL,FOLLOW_NL_in_p_arith_mult_expr5409); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    set580=(Token)input.LT(1);
            	    set580=(Token)input.LT(1);
            	    if ( (input.LA(1)>=L_div && input.LA(1)<=L_mod)||(input.LA(1)>=TIMES && input.LA(1)<=QUOTIENT) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set580), root_0);
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:783:65: ( NL )?
            	    int alt274=2;
            	    int LA274_0 = input.LA(1);

            	    if ( (LA274_0==NL) ) {
            	        alt274=1;
            	    }
            	    switch (alt274) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:783:65: NL
            	            {
            	            NL581=(Token)match(input,NL,FOLLOW_NL_in_p_arith_mult_expr5430); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_arith_pow_expr_in_p_arith_mult_expr5434);
            	    p_arith_pow_expr582=p_arith_pow_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_pow_expr582.getTree());

            	    }
            	    break;

            	default :
            	    break loop275;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_mult_expr"

    public static class arith_pow_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_pow_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:785:1: arith_pow_expr : apply_expr ( ( NL )? POW_tok ( NL )? apply_expr )* -> ^( POW ( apply_expr )* ) ;
    public final babel17Parser.arith_pow_expr_return arith_pow_expr() throws RecognitionException {
        babel17Parser.arith_pow_expr_return retval = new babel17Parser.arith_pow_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL584=null;
        Token POW_tok585=null;
        Token NL586=null;
        babel17Parser.apply_expr_return apply_expr583 = null;

        babel17Parser.apply_expr_return apply_expr587 = null;


        CommonTree NL584_tree=null;
        CommonTree POW_tok585_tree=null;
        CommonTree NL586_tree=null;
        RewriteRuleTokenStream stream_POW_tok=new RewriteRuleTokenStream(adaptor,"token POW_tok");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_apply_expr=new RewriteRuleSubtreeStream(adaptor,"rule apply_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:786:2: ( apply_expr ( ( NL )? POW_tok ( NL )? apply_expr )* -> ^( POW ( apply_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:786:4: apply_expr ( ( NL )? POW_tok ( NL )? apply_expr )*
            {
            pushFollow(FOLLOW_apply_expr_in_arith_pow_expr5445);
            apply_expr583=apply_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_apply_expr.add(apply_expr583.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:786:15: ( ( NL )? POW_tok ( NL )? apply_expr )*
            loop278:
            do {
                int alt278=2;
                int LA278_0 = input.LA(1);

                if ( (LA278_0==NL) ) {
                    int LA278_1 = input.LA(2);

                    if ( (LA278_1==POW_tok) ) {
                        alt278=1;
                    }


                }
                else if ( (LA278_0==POW_tok) ) {
                    alt278=1;
                }


                switch (alt278) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:786:16: ( NL )? POW_tok ( NL )? apply_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:786:16: ( NL )?
            	    int alt276=2;
            	    int LA276_0 = input.LA(1);

            	    if ( (LA276_0==NL) ) {
            	        alt276=1;
            	    }
            	    switch (alt276) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:786:16: NL
            	            {
            	            NL584=(Token)match(input,NL,FOLLOW_NL_in_arith_pow_expr5448); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL584);


            	            }
            	            break;

            	    }

            	    POW_tok585=(Token)match(input,POW_tok,FOLLOW_POW_tok_in_arith_pow_expr5451); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_POW_tok.add(POW_tok585);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:786:28: ( NL )?
            	    int alt277=2;
            	    int LA277_0 = input.LA(1);

            	    if ( (LA277_0==NL) ) {
            	        alt277=1;
            	    }
            	    switch (alt277) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:786:28: NL
            	            {
            	            NL586=(Token)match(input,NL,FOLLOW_NL_in_arith_pow_expr5453); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL586);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_apply_expr_in_arith_pow_expr5456);
            	    apply_expr587=apply_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_apply_expr.add(apply_expr587.getTree());

            	    }
            	    break;

            	default :
            	    break loop278;
                }
            } while (true);



            // AST REWRITE
            // elements: apply_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 786:45: -> ^( POW ( apply_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:786:48: ^( POW ( apply_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(POW, "POW"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:786:54: ( apply_expr )*
                while ( stream_apply_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_apply_expr.nextTree());

                }
                stream_apply_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_pow_expr"

    public static class p_arith_pow_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_pow_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:788:1: p_arith_pow_expr : p_apply_expr ( ( NL )? POW_tok ( NL )? p_apply_expr )* -> ^( POW ( p_apply_expr )* ) ;
    public final babel17Parser.p_arith_pow_expr_return p_arith_pow_expr() throws RecognitionException {
        babel17Parser.p_arith_pow_expr_return retval = new babel17Parser.p_arith_pow_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL589=null;
        Token POW_tok590=null;
        Token NL591=null;
        babel17Parser.p_apply_expr_return p_apply_expr588 = null;

        babel17Parser.p_apply_expr_return p_apply_expr592 = null;


        CommonTree NL589_tree=null;
        CommonTree POW_tok590_tree=null;
        CommonTree NL591_tree=null;
        RewriteRuleTokenStream stream_POW_tok=new RewriteRuleTokenStream(adaptor,"token POW_tok");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_p_apply_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_apply_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:789:2: ( p_apply_expr ( ( NL )? POW_tok ( NL )? p_apply_expr )* -> ^( POW ( p_apply_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:789:4: p_apply_expr ( ( NL )? POW_tok ( NL )? p_apply_expr )*
            {
            pushFollow(FOLLOW_p_apply_expr_in_p_arith_pow_expr5477);
            p_apply_expr588=p_apply_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_apply_expr.add(p_apply_expr588.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:789:17: ( ( NL )? POW_tok ( NL )? p_apply_expr )*
            loop281:
            do {
                int alt281=2;
                int LA281_0 = input.LA(1);

                if ( (LA281_0==NL) ) {
                    int LA281_1 = input.LA(2);

                    if ( (LA281_1==POW_tok) ) {
                        alt281=1;
                    }


                }
                else if ( (LA281_0==POW_tok) ) {
                    alt281=1;
                }


                switch (alt281) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:789:18: ( NL )? POW_tok ( NL )? p_apply_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:789:18: ( NL )?
            	    int alt279=2;
            	    int LA279_0 = input.LA(1);

            	    if ( (LA279_0==NL) ) {
            	        alt279=1;
            	    }
            	    switch (alt279) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:789:18: NL
            	            {
            	            NL589=(Token)match(input,NL,FOLLOW_NL_in_p_arith_pow_expr5480); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL589);


            	            }
            	            break;

            	    }

            	    POW_tok590=(Token)match(input,POW_tok,FOLLOW_POW_tok_in_p_arith_pow_expr5483); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_POW_tok.add(POW_tok590);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:789:30: ( NL )?
            	    int alt280=2;
            	    int LA280_0 = input.LA(1);

            	    if ( (LA280_0==NL) ) {
            	        alt280=1;
            	    }
            	    switch (alt280) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:789:30: NL
            	            {
            	            NL591=(Token)match(input,NL,FOLLOW_NL_in_p_arith_pow_expr5485); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL591);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_apply_expr_in_p_arith_pow_expr5488);
            	    p_apply_expr592=p_apply_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_apply_expr.add(p_apply_expr592.getTree());

            	    }
            	    break;

            	default :
            	    break loop281;
                }
            } while (true);



            // AST REWRITE
            // elements: p_apply_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 789:49: -> ^( POW ( p_apply_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:789:52: ^( POW ( p_apply_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(POW, "POW"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:789:58: ( p_apply_expr )*
                while ( stream_p_apply_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_apply_expr.nextTree());

                }
                stream_p_apply_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_pow_expr"

    public static class apply_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apply_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:791:1: apply_expr : ( basic_expr )+ -> ^( APPLY ( basic_expr )* ) ;
    public final babel17Parser.apply_expr_return apply_expr() throws RecognitionException {
        babel17Parser.apply_expr_return retval = new babel17Parser.apply_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.basic_expr_return basic_expr593 = null;


        RewriteRuleSubtreeStream stream_basic_expr=new RewriteRuleSubtreeStream(adaptor,"rule basic_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:792:2: ( ( basic_expr )+ -> ^( APPLY ( basic_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:792:4: ( basic_expr )+
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:792:4: ( basic_expr )+
            int cnt282=0;
            loop282:
            do {
                int alt282=2;
                int LA282_0 = input.LA(1);

                if ( (LA282_0==L_try) ) {
                    int LA282_2 = input.LA(2);

                    if ( (LA282_2==NL) ) {
                        int LA282_4 = input.LA(3);

                        if ( (LA282_4==L_begin||(LA282_4>=L_obj && LA282_4<=L_if)||(LA282_4>=L_while && LA282_4<=L_for)||(LA282_4>=L_yield && LA282_4<=L_match)||(LA282_4>=L_val && LA282_4<=L_def)||LA282_4==L_exception||LA282_4==L_try||(LA282_4>=L_concurrent && LA282_4<=L_nil)||(LA282_4>=L_module && LA282_4<=L_import)||LA282_4==L_not||(LA282_4>=L_root && LA282_4<=L_native)||LA282_4==MINUS||(LA282_4>=A_ELLIPSIS && LA282_4<=U_ELLIPSIS)||LA282_4==L_force||(LA282_4>=Constr && LA282_4<=Id)||(LA282_4>=Float && LA282_4<=Num)||(LA282_4>=String && LA282_4<=ROUND_BRACKET_OPEN)||LA282_4==SQUARE_BRACKET_OPEN||LA282_4==CURLY_BRACKET_OPEN||LA282_4==UNDERSCORE||(LA282_4>=PRAGMA_LOG && LA282_4<=PRAGMA_CATCH)) ) {
                            alt282=1;
                        }


                    }
                    else if ( (LA282_2==L_begin||(LA282_2>=L_obj && LA282_2<=L_if)||(LA282_2>=L_while && LA282_2<=L_for)||(LA282_2>=L_yield && LA282_2<=L_match)||(LA282_2>=L_val && LA282_2<=L_def)||LA282_2==L_exception||LA282_2==L_try||(LA282_2>=L_concurrent && LA282_2<=L_nil)||(LA282_2>=L_module && LA282_2<=L_import)||LA282_2==L_not||(LA282_2>=L_root && LA282_2<=L_native)||LA282_2==MINUS||(LA282_2>=A_ELLIPSIS && LA282_2<=U_ELLIPSIS)||LA282_2==L_force||(LA282_2>=Constr && LA282_2<=Id)||(LA282_2>=Float && LA282_2<=Num)||(LA282_2>=String && LA282_2<=ROUND_BRACKET_OPEN)||LA282_2==SQUARE_BRACKET_OPEN||LA282_2==CURLY_BRACKET_OPEN||LA282_2==UNDERSCORE||(LA282_2>=PRAGMA_LOG && LA282_2<=PRAGMA_CATCH)) ) {
                        alt282=1;
                    }


                }
                else if ( (LA282_0==L_begin||(LA282_0>=L_obj && LA282_0<=L_if)||(LA282_0>=L_while && LA282_0<=L_for)||LA282_0==L_match||(LA282_0>=L_true && LA282_0<=L_this)||LA282_0==L_nil||LA282_0==L_root||(LA282_0>=Constr && LA282_0<=Id)||(LA282_0>=Float && LA282_0<=Num)||(LA282_0>=String && LA282_0<=ROUND_BRACKET_OPEN)||LA282_0==SQUARE_BRACKET_OPEN||LA282_0==CURLY_BRACKET_OPEN) ) {
                    alt282=1;
                }


                switch (alt282) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:792:4: basic_expr
            	    {
            	    pushFollow(FOLLOW_basic_expr_in_apply_expr5509);
            	    basic_expr593=basic_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_basic_expr.add(basic_expr593.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt282 >= 1 ) break loop282;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(282, input);
                        throw eee;
                }
                cnt282++;
            } while (true);



            // AST REWRITE
            // elements: basic_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 792:16: -> ^( APPLY ( basic_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:792:19: ^( APPLY ( basic_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(APPLY, "APPLY"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:792:27: ( basic_expr )*
                while ( stream_basic_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_basic_expr.nextTree());

                }
                stream_basic_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "apply_expr"

    public static class p_apply_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_apply_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:793:1: p_apply_expr : p_basic_expr ( ( NL )? p_basic_expr )* -> ^( APPLY ( p_basic_expr )* ) ;
    public final babel17Parser.p_apply_expr_return p_apply_expr() throws RecognitionException {
        babel17Parser.p_apply_expr_return retval = new babel17Parser.p_apply_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL595=null;
        babel17Parser.p_basic_expr_return p_basic_expr594 = null;

        babel17Parser.p_basic_expr_return p_basic_expr596 = null;


        CommonTree NL595_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_p_basic_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_basic_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:794:2: ( p_basic_expr ( ( NL )? p_basic_expr )* -> ^( APPLY ( p_basic_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:794:4: p_basic_expr ( ( NL )? p_basic_expr )*
            {
            pushFollow(FOLLOW_p_basic_expr_in_p_apply_expr5527);
            p_basic_expr594=p_basic_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_basic_expr.add(p_basic_expr594.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:794:17: ( ( NL )? p_basic_expr )*
            loop284:
            do {
                int alt284=2;
                switch ( input.LA(1) ) {
                case NL:
                    {
                    int LA284_1 = input.LA(2);

                    if ( (LA284_1==L_begin||(LA284_1>=L_obj && LA284_1<=L_if)||(LA284_1>=L_while && LA284_1<=L_for)||LA284_1==L_match||(LA284_1>=L_true && LA284_1<=L_this)||LA284_1==L_nil||LA284_1==L_root||(LA284_1>=Constr && LA284_1<=Id)||(LA284_1>=Float && LA284_1<=Num)||(LA284_1>=String && LA284_1<=ROUND_BRACKET_OPEN)||LA284_1==SQUARE_BRACKET_OPEN||LA284_1==CURLY_BRACKET_OPEN) ) {
                        alt284=1;
                    }
                    else if ( (LA284_1==L_try) ) {
                        int LA284_3 = input.LA(3);

                        if ( (LA284_3==NL) ) {
                            int LA284_5 = input.LA(4);

                            if ( (LA284_5==L_begin||(LA284_5>=L_obj && LA284_5<=L_if)||(LA284_5>=L_while && LA284_5<=L_for)||(LA284_5>=L_yield && LA284_5<=L_match)||(LA284_5>=L_val && LA284_5<=L_def)||LA284_5==L_exception||LA284_5==L_try||(LA284_5>=L_concurrent && LA284_5<=L_nil)||(LA284_5>=L_module && LA284_5<=L_import)||LA284_5==L_not||(LA284_5>=L_root && LA284_5<=L_native)||LA284_5==MINUS||(LA284_5>=A_ELLIPSIS && LA284_5<=U_ELLIPSIS)||LA284_5==L_force||(LA284_5>=Constr && LA284_5<=Id)||(LA284_5>=Float && LA284_5<=Num)||(LA284_5>=String && LA284_5<=ROUND_BRACKET_OPEN)||LA284_5==SQUARE_BRACKET_OPEN||LA284_5==CURLY_BRACKET_OPEN||LA284_5==UNDERSCORE||(LA284_5>=PRAGMA_LOG && LA284_5<=PRAGMA_CATCH)) ) {
                                alt284=1;
                            }


                        }
                        else if ( (LA284_3==L_begin||(LA284_3>=L_obj && LA284_3<=L_if)||(LA284_3>=L_while && LA284_3<=L_for)||(LA284_3>=L_yield && LA284_3<=L_match)||(LA284_3>=L_val && LA284_3<=L_def)||LA284_3==L_exception||LA284_3==L_try||(LA284_3>=L_concurrent && LA284_3<=L_nil)||(LA284_3>=L_module && LA284_3<=L_import)||LA284_3==L_not||(LA284_3>=L_root && LA284_3<=L_native)||LA284_3==MINUS||(LA284_3>=A_ELLIPSIS && LA284_3<=U_ELLIPSIS)||LA284_3==L_force||(LA284_3>=Constr && LA284_3<=Id)||(LA284_3>=Float && LA284_3<=Num)||(LA284_3>=String && LA284_3<=ROUND_BRACKET_OPEN)||LA284_3==SQUARE_BRACKET_OPEN||LA284_3==CURLY_BRACKET_OPEN||LA284_3==UNDERSCORE||(LA284_3>=PRAGMA_LOG && LA284_3<=PRAGMA_CATCH)) ) {
                            alt284=1;
                        }


                    }


                    }
                    break;
                case L_try:
                    {
                    int LA284_3 = input.LA(2);

                    if ( (LA284_3==NL) ) {
                        int LA284_5 = input.LA(3);

                        if ( (LA284_5==L_begin||(LA284_5>=L_obj && LA284_5<=L_if)||(LA284_5>=L_while && LA284_5<=L_for)||(LA284_5>=L_yield && LA284_5<=L_match)||(LA284_5>=L_val && LA284_5<=L_def)||LA284_5==L_exception||LA284_5==L_try||(LA284_5>=L_concurrent && LA284_5<=L_nil)||(LA284_5>=L_module && LA284_5<=L_import)||LA284_5==L_not||(LA284_5>=L_root && LA284_5<=L_native)||LA284_5==MINUS||(LA284_5>=A_ELLIPSIS && LA284_5<=U_ELLIPSIS)||LA284_5==L_force||(LA284_5>=Constr && LA284_5<=Id)||(LA284_5>=Float && LA284_5<=Num)||(LA284_5>=String && LA284_5<=ROUND_BRACKET_OPEN)||LA284_5==SQUARE_BRACKET_OPEN||LA284_5==CURLY_BRACKET_OPEN||LA284_5==UNDERSCORE||(LA284_5>=PRAGMA_LOG && LA284_5<=PRAGMA_CATCH)) ) {
                            alt284=1;
                        }


                    }
                    else if ( (LA284_3==L_begin||(LA284_3>=L_obj && LA284_3<=L_if)||(LA284_3>=L_while && LA284_3<=L_for)||(LA284_3>=L_yield && LA284_3<=L_match)||(LA284_3>=L_val && LA284_3<=L_def)||LA284_3==L_exception||LA284_3==L_try||(LA284_3>=L_concurrent && LA284_3<=L_nil)||(LA284_3>=L_module && LA284_3<=L_import)||LA284_3==L_not||(LA284_3>=L_root && LA284_3<=L_native)||LA284_3==MINUS||(LA284_3>=A_ELLIPSIS && LA284_3<=U_ELLIPSIS)||LA284_3==L_force||(LA284_3>=Constr && LA284_3<=Id)||(LA284_3>=Float && LA284_3<=Num)||(LA284_3>=String && LA284_3<=ROUND_BRACKET_OPEN)||LA284_3==SQUARE_BRACKET_OPEN||LA284_3==CURLY_BRACKET_OPEN||LA284_3==UNDERSCORE||(LA284_3>=PRAGMA_LOG && LA284_3<=PRAGMA_CATCH)) ) {
                        alt284=1;
                    }


                    }
                    break;
                case L_begin:
                case L_obj:
                case L_with:
                case L_if:
                case L_while:
                case L_for:
                case L_match:
                case L_true:
                case L_false:
                case L_this:
                case L_nil:
                case L_root:
                case Constr:
                case Id:
                case Float:
                case Num:
                case String:
                case ROUND_BRACKET_OPEN:
                case SQUARE_BRACKET_OPEN:
                case CURLY_BRACKET_OPEN:
                    {
                    alt284=1;
                    }
                    break;

                }

                switch (alt284) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:794:18: ( NL )? p_basic_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:794:18: ( NL )?
            	    int alt283=2;
            	    int LA283_0 = input.LA(1);

            	    if ( (LA283_0==NL) ) {
            	        alt283=1;
            	    }
            	    switch (alt283) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:794:18: NL
            	            {
            	            NL595=(Token)match(input,NL,FOLLOW_NL_in_p_apply_expr5530); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL595);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_basic_expr_in_p_apply_expr5533);
            	    p_basic_expr596=p_basic_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_basic_expr.add(p_basic_expr596.getTree());

            	    }
            	    break;

            	default :
            	    break loop284;
                }
            } while (true);



            // AST REWRITE
            // elements: p_basic_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 794:37: -> ^( APPLY ( p_basic_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:794:40: ^( APPLY ( p_basic_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(APPLY, "APPLY"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:794:48: ( p_basic_expr )*
                while ( stream_p_basic_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_basic_expr.nextTree());

                }
                stream_p_basic_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_apply_expr"

    public static class basic_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "basic_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:796:1: basic_expr : message_send_expr ;
    public final babel17Parser.basic_expr_return basic_expr() throws RecognitionException {
        babel17Parser.basic_expr_return retval = new babel17Parser.basic_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.message_send_expr_return message_send_expr597 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:797:2: ( message_send_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:797:4: message_send_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_message_send_expr_in_basic_expr5553);
            message_send_expr597=message_send_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, message_send_expr597.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "basic_expr"

    public static class p_basic_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_basic_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:799:1: p_basic_expr : message_send_expr ;
    public final babel17Parser.p_basic_expr_return p_basic_expr() throws RecognitionException {
        babel17Parser.p_basic_expr_return retval = new babel17Parser.p_basic_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.message_send_expr_return message_send_expr598 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:800:2: ( message_send_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:800:4: message_send_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_message_send_expr_in_p_basic_expr5562);
            message_send_expr598=message_send_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, message_send_expr598.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_basic_expr"

    public static class message_send_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "message_send_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:802:1: message_send_expr : primitive_expr ( ( NL )? PERIOD ( NL )? Id )* -> ^( MESSAGE_SEND primitive_expr ( Id )* ) ;
    public final babel17Parser.message_send_expr_return message_send_expr() throws RecognitionException {
        babel17Parser.message_send_expr_return retval = new babel17Parser.message_send_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL600=null;
        Token PERIOD601=null;
        Token NL602=null;
        Token Id603=null;
        babel17Parser.primitive_expr_return primitive_expr599 = null;


        CommonTree NL600_tree=null;
        CommonTree PERIOD601_tree=null;
        CommonTree NL602_tree=null;
        CommonTree Id603_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleSubtreeStream stream_primitive_expr=new RewriteRuleSubtreeStream(adaptor,"rule primitive_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:803:2: ( primitive_expr ( ( NL )? PERIOD ( NL )? Id )* -> ^( MESSAGE_SEND primitive_expr ( Id )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:803:4: primitive_expr ( ( NL )? PERIOD ( NL )? Id )*
            {
            pushFollow(FOLLOW_primitive_expr_in_message_send_expr5571);
            primitive_expr599=primitive_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_primitive_expr.add(primitive_expr599.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:803:19: ( ( NL )? PERIOD ( NL )? Id )*
            loop287:
            do {
                int alt287=2;
                int LA287_0 = input.LA(1);

                if ( (LA287_0==NL) ) {
                    int LA287_1 = input.LA(2);

                    if ( (LA287_1==PERIOD) ) {
                        alt287=1;
                    }


                }
                else if ( (LA287_0==PERIOD) ) {
                    alt287=1;
                }


                switch (alt287) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:803:20: ( NL )? PERIOD ( NL )? Id
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:803:20: ( NL )?
            	    int alt285=2;
            	    int LA285_0 = input.LA(1);

            	    if ( (LA285_0==NL) ) {
            	        alt285=1;
            	    }
            	    switch (alt285) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:803:20: NL
            	            {
            	            NL600=(Token)match(input,NL,FOLLOW_NL_in_message_send_expr5574); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL600);


            	            }
            	            break;

            	    }

            	    PERIOD601=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_message_send_expr5577); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD601);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:803:31: ( NL )?
            	    int alt286=2;
            	    int LA286_0 = input.LA(1);

            	    if ( (LA286_0==NL) ) {
            	        alt286=1;
            	    }
            	    switch (alt286) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:803:31: NL
            	            {
            	            NL602=(Token)match(input,NL,FOLLOW_NL_in_message_send_expr5579); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL602);


            	            }
            	            break;

            	    }

            	    Id603=(Token)match(input,Id,FOLLOW_Id_in_message_send_expr5582); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_Id.add(Id603);


            	    }
            	    break;

            	default :
            	    break loop287;
                }
            } while (true);



            // AST REWRITE
            // elements: Id, primitive_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 803:40: -> ^( MESSAGE_SEND primitive_expr ( Id )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:803:43: ^( MESSAGE_SEND primitive_expr ( Id )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MESSAGE_SEND, "MESSAGE_SEND"), root_1);

                adaptor.addChild(root_1, stream_primitive_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:803:73: ( Id )*
                while ( stream_Id.hasNext() ) {
                    adaptor.addChild(root_1, stream_Id.nextNode());

                }
                stream_Id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "message_send_expr"

    public static class list_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "list_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:1: list_expr : ( ( '[' ( NL )? protected_expr_nc ( NL )? ';' )=> '[' ( NL )? protected_expr_nc ( NL )? ';' ( NL )? protected_expr_nc ( NL )? ']' -> ^( INTERVAL ( protected_expr_nc )* ) | '[' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? )? ']' -> ^( SQUARE_LIST ( protected_expr_nc )* ) | '(' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( protected_expr_nc )* ) ) );
    public final babel17Parser.list_expr_return list_expr() throws RecognitionException {
        babel17Parser.list_expr_return retval = new babel17Parser.list_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal604=null;
        Token NL605=null;
        Token NL607=null;
        Token char_literal608=null;
        Token NL609=null;
        Token NL611=null;
        Token char_literal612=null;
        Token char_literal613=null;
        Token NL614=null;
        Token NL616=null;
        Token COMMA617=null;
        Token NL618=null;
        Token NL620=null;
        Token char_literal621=null;
        Token char_literal622=null;
        Token NL623=null;
        Token NL625=null;
        Token COMMA626=null;
        Token NL627=null;
        Token NL629=null;
        Token COMMA630=null;
        Token NL631=null;
        Token char_literal632=null;
        babel17Parser.protected_expr_nc_return protected_expr_nc606 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc610 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc615 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc619 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc624 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc628 = null;


        CommonTree char_literal604_tree=null;
        CommonTree NL605_tree=null;
        CommonTree NL607_tree=null;
        CommonTree char_literal608_tree=null;
        CommonTree NL609_tree=null;
        CommonTree NL611_tree=null;
        CommonTree char_literal612_tree=null;
        CommonTree char_literal613_tree=null;
        CommonTree NL614_tree=null;
        CommonTree NL616_tree=null;
        CommonTree COMMA617_tree=null;
        CommonTree NL618_tree=null;
        CommonTree NL620_tree=null;
        CommonTree char_literal621_tree=null;
        CommonTree char_literal622_tree=null;
        CommonTree NL623_tree=null;
        CommonTree NL625_tree=null;
        CommonTree COMMA626_tree=null;
        CommonTree NL627_tree=null;
        CommonTree NL629_tree=null;
        CommonTree COMMA630_tree=null;
        CommonTree NL631_tree=null;
        CommonTree char_literal632_tree=null;
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_SC=new RewriteRuleTokenStream(adaptor,"token SC");
        RewriteRuleTokenStream stream_SQUARE_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token SQUARE_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_SQUARE_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token SQUARE_BRACKET_OPEN");
        RewriteRuleSubtreeStream stream_protected_expr_nc=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr_nc");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:2: ( ( '[' ( NL )? protected_expr_nc ( NL )? ';' )=> '[' ( NL )? protected_expr_nc ( NL )? ';' ( NL )? protected_expr_nc ( NL )? ']' -> ^( INTERVAL ( protected_expr_nc )* ) | '[' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? )? ']' -> ^( SQUARE_LIST ( protected_expr_nc )* ) | '(' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( protected_expr_nc )* ) ) )
            int alt306=3;
            int LA306_0 = input.LA(1);

            if ( (LA306_0==SQUARE_BRACKET_OPEN) ) {
                int LA306_1 = input.LA(2);

                if ( (synpred12_babel17()) ) {
                    alt306=1;
                }
                else if ( (true) ) {
                    alt306=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 306, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA306_0==ROUND_BRACKET_OPEN) ) {
                alt306=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 306, 0, input);

                throw nvae;
            }
            switch (alt306) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:4: ( '[' ( NL )? protected_expr_nc ( NL )? ';' )=> '[' ( NL )? protected_expr_nc ( NL )? ';' ( NL )? protected_expr_nc ( NL )? ']'
                    {
                    char_literal604=(Token)match(input,SQUARE_BRACKET_OPEN,FOLLOW_SQUARE_BRACKET_OPEN_in_list_expr5622); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_OPEN.add(char_literal604);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:47: ( NL )?
                    int alt288=2;
                    int LA288_0 = input.LA(1);

                    if ( (LA288_0==NL) ) {
                        alt288=1;
                    }
                    switch (alt288) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:47: NL
                            {
                            NL605=(Token)match(input,NL,FOLLOW_NL_in_list_expr5624); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL605);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_list_expr5627);
                    protected_expr_nc606=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc606.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:69: ( NL )?
                    int alt289=2;
                    int LA289_0 = input.LA(1);

                    if ( (LA289_0==NL) ) {
                        alt289=1;
                    }
                    switch (alt289) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:69: NL
                            {
                            NL607=(Token)match(input,NL,FOLLOW_NL_in_list_expr5629); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL607);


                            }
                            break;

                    }

                    char_literal608=(Token)match(input,SC,FOLLOW_SC_in_list_expr5632); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SC.add(char_literal608);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:77: ( NL )?
                    int alt290=2;
                    int LA290_0 = input.LA(1);

                    if ( (LA290_0==NL) ) {
                        alt290=1;
                    }
                    switch (alt290) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:77: NL
                            {
                            NL609=(Token)match(input,NL,FOLLOW_NL_in_list_expr5634); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL609);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_list_expr5637);
                    protected_expr_nc610=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc610.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:99: ( NL )?
                    int alt291=2;
                    int LA291_0 = input.LA(1);

                    if ( (LA291_0==NL) ) {
                        alt291=1;
                    }
                    switch (alt291) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:99: NL
                            {
                            NL611=(Token)match(input,NL,FOLLOW_NL_in_list_expr5639); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL611);


                            }
                            break;

                    }

                    char_literal612=(Token)match(input,SQUARE_BRACKET_CLOSE,FOLLOW_SQUARE_BRACKET_CLOSE_in_list_expr5642); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_CLOSE.add(char_literal612);



                    // AST REWRITE
                    // elements: protected_expr_nc
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 806:107: -> ^( INTERVAL ( protected_expr_nc )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:110: ^( INTERVAL ( protected_expr_nc )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTERVAL, "INTERVAL"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:121: ( protected_expr_nc )*
                        while ( stream_protected_expr_nc.hasNext() ) {
                            adaptor.addChild(root_1, stream_protected_expr_nc.nextTree());

                        }
                        stream_protected_expr_nc.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:807:4: '[' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? )? ']'
                    {
                    char_literal613=(Token)match(input,SQUARE_BRACKET_OPEN,FOLLOW_SQUARE_BRACKET_OPEN_in_list_expr5656); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_OPEN.add(char_literal613);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:807:8: ( NL )?
                    int alt292=2;
                    int LA292_0 = input.LA(1);

                    if ( (LA292_0==NL) ) {
                        alt292=1;
                    }
                    switch (alt292) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:807:8: NL
                            {
                            NL614=(Token)match(input,NL,FOLLOW_NL_in_list_expr5658); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL614);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:807:12: ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? )?
                    int alt297=2;
                    int LA297_0 = input.LA(1);

                    if ( (LA297_0==L_begin||(LA297_0>=L_obj && LA297_0<=L_if)||(LA297_0>=L_while && LA297_0<=L_for)||LA297_0==L_match||LA297_0==L_exception||LA297_0==L_try||(LA297_0>=L_concurrent && LA297_0<=L_lazy)||(LA297_0>=L_true && LA297_0<=L_nil)||LA297_0==L_typeof||LA297_0==L_not||(LA297_0>=L_root && LA297_0<=L_native)||LA297_0==MINUS||(LA297_0>=A_ELLIPSIS && LA297_0<=U_ELLIPSIS)||LA297_0==L_force||(LA297_0>=Constr && LA297_0<=Id)||(LA297_0>=Float && LA297_0<=Num)||(LA297_0>=String && LA297_0<=ROUND_BRACKET_OPEN)||LA297_0==SQUARE_BRACKET_OPEN||LA297_0==CURLY_BRACKET_OPEN||LA297_0==UNDERSCORE) ) {
                        alt297=1;
                    }
                    switch (alt297) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:807:13: protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )?
                            {
                            pushFollow(FOLLOW_protected_expr_nc_in_list_expr5662);
                            protected_expr_nc615=protected_expr_nc();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc615.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:807:31: ( ( NL )? COMMA ( NL )? protected_expr_nc )*
                            loop295:
                            do {
                                int alt295=2;
                                int LA295_0 = input.LA(1);

                                if ( (LA295_0==NL) ) {
                                    int LA295_1 = input.LA(2);

                                    if ( (LA295_1==COMMA) ) {
                                        alt295=1;
                                    }


                                }
                                else if ( (LA295_0==COMMA) ) {
                                    alt295=1;
                                }


                                switch (alt295) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:807:32: ( NL )? COMMA ( NL )? protected_expr_nc
                            	    {
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:807:32: ( NL )?
                            	    int alt293=2;
                            	    int LA293_0 = input.LA(1);

                            	    if ( (LA293_0==NL) ) {
                            	        alt293=1;
                            	    }
                            	    switch (alt293) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:807:32: NL
                            	            {
                            	            NL616=(Token)match(input,NL,FOLLOW_NL_in_list_expr5665); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL616);


                            	            }
                            	            break;

                            	    }

                            	    COMMA617=(Token)match(input,COMMA,FOLLOW_COMMA_in_list_expr5668); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA617);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:807:42: ( NL )?
                            	    int alt294=2;
                            	    int LA294_0 = input.LA(1);

                            	    if ( (LA294_0==NL) ) {
                            	        alt294=1;
                            	    }
                            	    switch (alt294) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:807:42: NL
                            	            {
                            	            NL618=(Token)match(input,NL,FOLLOW_NL_in_list_expr5670); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL618);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_protected_expr_nc_in_list_expr5673);
                            	    protected_expr_nc619=protected_expr_nc();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc619.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop295;
                                }
                            } while (true);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:807:66: ( NL )?
                            int alt296=2;
                            int LA296_0 = input.LA(1);

                            if ( (LA296_0==NL) ) {
                                alt296=1;
                            }
                            switch (alt296) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:807:66: NL
                                    {
                                    NL620=(Token)match(input,NL,FOLLOW_NL_in_list_expr5677); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL620);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    char_literal621=(Token)match(input,SQUARE_BRACKET_CLOSE,FOLLOW_SQUARE_BRACKET_CLOSE_in_list_expr5682); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_CLOSE.add(char_literal621);



                    // AST REWRITE
                    // elements: protected_expr_nc
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 807:76: -> ^( SQUARE_LIST ( protected_expr_nc )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:807:79: ^( SQUARE_LIST ( protected_expr_nc )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SQUARE_LIST, "SQUARE_LIST"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:807:93: ( protected_expr_nc )*
                        while ( stream_protected_expr_nc.hasNext() ) {
                            adaptor.addChild(root_1, stream_protected_expr_nc.nextTree());

                        }
                        stream_protected_expr_nc.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:4: '(' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )? )? ')'
                    {
                    char_literal622=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_list_expr5696); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal622);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:8: ( NL )?
                    int alt298=2;
                    int LA298_0 = input.LA(1);

                    if ( (LA298_0==NL) ) {
                        alt298=1;
                    }
                    switch (alt298) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:8: NL
                            {
                            NL623=(Token)match(input,NL,FOLLOW_NL_in_list_expr5698); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL623);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:12: ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )? )?
                    int alt305=2;
                    int LA305_0 = input.LA(1);

                    if ( (LA305_0==L_begin||(LA305_0>=L_obj && LA305_0<=L_if)||(LA305_0>=L_while && LA305_0<=L_for)||LA305_0==L_match||LA305_0==L_exception||LA305_0==L_try||(LA305_0>=L_concurrent && LA305_0<=L_lazy)||(LA305_0>=L_true && LA305_0<=L_nil)||LA305_0==L_typeof||LA305_0==L_not||(LA305_0>=L_root && LA305_0<=L_native)||LA305_0==MINUS||(LA305_0>=A_ELLIPSIS && LA305_0<=U_ELLIPSIS)||LA305_0==L_force||(LA305_0>=Constr && LA305_0<=Id)||(LA305_0>=Float && LA305_0<=Num)||(LA305_0>=String && LA305_0<=ROUND_BRACKET_OPEN)||LA305_0==SQUARE_BRACKET_OPEN||LA305_0==CURLY_BRACKET_OPEN||LA305_0==UNDERSCORE) ) {
                        alt305=1;
                    }
                    switch (alt305) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:13: protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )?
                            {
                            pushFollow(FOLLOW_protected_expr_nc_in_list_expr5702);
                            protected_expr_nc624=protected_expr_nc();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc624.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:31: ( ( NL )? COMMA ( NL )? protected_expr_nc )*
                            loop301:
                            do {
                                int alt301=2;
                                int LA301_0 = input.LA(1);

                                if ( (LA301_0==NL) ) {
                                    int LA301_1 = input.LA(2);

                                    if ( (LA301_1==COMMA) ) {
                                        int LA301_2 = input.LA(3);

                                        if ( (LA301_2==NL) ) {
                                            int LA301_4 = input.LA(4);

                                            if ( (LA301_4==L_begin||(LA301_4>=L_obj && LA301_4<=L_if)||(LA301_4>=L_while && LA301_4<=L_for)||LA301_4==L_match||LA301_4==L_exception||LA301_4==L_try||(LA301_4>=L_concurrent && LA301_4<=L_lazy)||(LA301_4>=L_true && LA301_4<=L_nil)||LA301_4==L_typeof||LA301_4==L_not||(LA301_4>=L_root && LA301_4<=L_native)||LA301_4==MINUS||(LA301_4>=A_ELLIPSIS && LA301_4<=U_ELLIPSIS)||LA301_4==L_force||(LA301_4>=Constr && LA301_4<=Id)||(LA301_4>=Float && LA301_4<=Num)||(LA301_4>=String && LA301_4<=ROUND_BRACKET_OPEN)||LA301_4==SQUARE_BRACKET_OPEN||LA301_4==CURLY_BRACKET_OPEN||LA301_4==UNDERSCORE) ) {
                                                alt301=1;
                                            }


                                        }
                                        else if ( (LA301_2==L_begin||(LA301_2>=L_obj && LA301_2<=L_if)||(LA301_2>=L_while && LA301_2<=L_for)||LA301_2==L_match||LA301_2==L_exception||LA301_2==L_try||(LA301_2>=L_concurrent && LA301_2<=L_lazy)||(LA301_2>=L_true && LA301_2<=L_nil)||LA301_2==L_typeof||LA301_2==L_not||(LA301_2>=L_root && LA301_2<=L_native)||LA301_2==MINUS||(LA301_2>=A_ELLIPSIS && LA301_2<=U_ELLIPSIS)||LA301_2==L_force||(LA301_2>=Constr && LA301_2<=Id)||(LA301_2>=Float && LA301_2<=Num)||(LA301_2>=String && LA301_2<=ROUND_BRACKET_OPEN)||LA301_2==SQUARE_BRACKET_OPEN||LA301_2==CURLY_BRACKET_OPEN||LA301_2==UNDERSCORE) ) {
                                            alt301=1;
                                        }


                                    }


                                }
                                else if ( (LA301_0==COMMA) ) {
                                    int LA301_2 = input.LA(2);

                                    if ( (LA301_2==NL) ) {
                                        int LA301_4 = input.LA(3);

                                        if ( (LA301_4==L_begin||(LA301_4>=L_obj && LA301_4<=L_if)||(LA301_4>=L_while && LA301_4<=L_for)||LA301_4==L_match||LA301_4==L_exception||LA301_4==L_try||(LA301_4>=L_concurrent && LA301_4<=L_lazy)||(LA301_4>=L_true && LA301_4<=L_nil)||LA301_4==L_typeof||LA301_4==L_not||(LA301_4>=L_root && LA301_4<=L_native)||LA301_4==MINUS||(LA301_4>=A_ELLIPSIS && LA301_4<=U_ELLIPSIS)||LA301_4==L_force||(LA301_4>=Constr && LA301_4<=Id)||(LA301_4>=Float && LA301_4<=Num)||(LA301_4>=String && LA301_4<=ROUND_BRACKET_OPEN)||LA301_4==SQUARE_BRACKET_OPEN||LA301_4==CURLY_BRACKET_OPEN||LA301_4==UNDERSCORE) ) {
                                            alt301=1;
                                        }


                                    }
                                    else if ( (LA301_2==L_begin||(LA301_2>=L_obj && LA301_2<=L_if)||(LA301_2>=L_while && LA301_2<=L_for)||LA301_2==L_match||LA301_2==L_exception||LA301_2==L_try||(LA301_2>=L_concurrent && LA301_2<=L_lazy)||(LA301_2>=L_true && LA301_2<=L_nil)||LA301_2==L_typeof||LA301_2==L_not||(LA301_2>=L_root && LA301_2<=L_native)||LA301_2==MINUS||(LA301_2>=A_ELLIPSIS && LA301_2<=U_ELLIPSIS)||LA301_2==L_force||(LA301_2>=Constr && LA301_2<=Id)||(LA301_2>=Float && LA301_2<=Num)||(LA301_2>=String && LA301_2<=ROUND_BRACKET_OPEN)||LA301_2==SQUARE_BRACKET_OPEN||LA301_2==CURLY_BRACKET_OPEN||LA301_2==UNDERSCORE) ) {
                                        alt301=1;
                                    }


                                }


                                switch (alt301) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:32: ( NL )? COMMA ( NL )? protected_expr_nc
                            	    {
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:32: ( NL )?
                            	    int alt299=2;
                            	    int LA299_0 = input.LA(1);

                            	    if ( (LA299_0==NL) ) {
                            	        alt299=1;
                            	    }
                            	    switch (alt299) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:32: NL
                            	            {
                            	            NL625=(Token)match(input,NL,FOLLOW_NL_in_list_expr5705); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL625);


                            	            }
                            	            break;

                            	    }

                            	    COMMA626=(Token)match(input,COMMA,FOLLOW_COMMA_in_list_expr5708); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA626);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:42: ( NL )?
                            	    int alt300=2;
                            	    int LA300_0 = input.LA(1);

                            	    if ( (LA300_0==NL) ) {
                            	        alt300=1;
                            	    }
                            	    switch (alt300) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:42: NL
                            	            {
                            	            NL627=(Token)match(input,NL,FOLLOW_NL_in_list_expr5710); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL627);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_protected_expr_nc_in_list_expr5713);
                            	    protected_expr_nc628=protected_expr_nc();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc628.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop301;
                                }
                            } while (true);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:66: ( NL )?
                            int alt302=2;
                            int LA302_0 = input.LA(1);

                            if ( (LA302_0==NL) ) {
                                alt302=1;
                            }
                            switch (alt302) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:66: NL
                                    {
                                    NL629=(Token)match(input,NL,FOLLOW_NL_in_list_expr5717); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL629);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:70: ( COMMA ( NL )? )?
                            int alt304=2;
                            int LA304_0 = input.LA(1);

                            if ( (LA304_0==COMMA) ) {
                                alt304=1;
                            }
                            switch (alt304) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:71: COMMA ( NL )?
                                    {
                                    COMMA630=(Token)match(input,COMMA,FOLLOW_COMMA_in_list_expr5721); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA630);

                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:77: ( NL )?
                                    int alt303=2;
                                    int LA303_0 = input.LA(1);

                                    if ( (LA303_0==NL) ) {
                                        alt303=1;
                                    }
                                    switch (alt303) {
                                        case 1 :
                                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:77: NL
                                            {
                                            NL631=(Token)match(input,NL,FOLLOW_NL_in_list_expr5723); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_NL.add(NL631);


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    char_literal632=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_list_expr5730); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal632);



                    // AST REWRITE
                    // elements: protected_expr_nc, COMMA
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 808:89: -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( protected_expr_nc )* ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:92: ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( protected_expr_nc )* ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROUND_LIST, "ROUND_LIST"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:105: ^( NIL_TOKEN ( COMMA )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:117: ( COMMA )*
                        while ( stream_COMMA.hasNext() ) {
                            adaptor.addChild(root_2, stream_COMMA.nextNode());

                        }
                        stream_COMMA.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:125: ^( NIL_TOKEN ( protected_expr_nc )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:137: ( protected_expr_nc )*
                        while ( stream_protected_expr_nc.hasNext() ) {
                            adaptor.addChild(root_2, stream_protected_expr_nc.nextTree());

                        }
                        stream_protected_expr_nc.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "list_expr"

    public static class map_or_set_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "map_or_set_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:1: map_or_set_expr : ( '{' ( NL )? ( map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( map_or_set_elem_expr )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) );
    public final babel17Parser.map_or_set_expr_return map_or_set_expr() throws RecognitionException {
        babel17Parser.map_or_set_expr_return retval = new babel17Parser.map_or_set_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal633=null;
        Token NL634=null;
        Token NL636=null;
        Token COMMA637=null;
        Token NL638=null;
        Token NL640=null;
        Token char_literal641=null;
        Token char_literal642=null;
        Token NL643=null;
        Token NL645=null;
        Token char_literal646=null;
        babel17Parser.map_or_set_elem_expr_return map_or_set_elem_expr635 = null;

        babel17Parser.map_or_set_elem_expr_return map_or_set_elem_expr639 = null;

        babel17Parser.token_ARROW_return token_ARROW644 = null;


        CommonTree char_literal633_tree=null;
        CommonTree NL634_tree=null;
        CommonTree NL636_tree=null;
        CommonTree COMMA637_tree=null;
        CommonTree NL638_tree=null;
        CommonTree NL640_tree=null;
        CommonTree char_literal641_tree=null;
        CommonTree char_literal642_tree=null;
        CommonTree NL643_tree=null;
        CommonTree NL645_tree=null;
        CommonTree char_literal646_tree=null;
        RewriteRuleTokenStream stream_CURLY_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_OPEN");
        RewriteRuleTokenStream stream_CURLY_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_map_or_set_elem_expr=new RewriteRuleSubtreeStream(adaptor,"rule map_or_set_elem_expr");
        RewriteRuleSubtreeStream stream_token_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_ARROW");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:811:2: ( '{' ( NL )? ( map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( map_or_set_elem_expr )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) )
            int alt315=2;
            int LA315_0 = input.LA(1);

            if ( (LA315_0==CURLY_BRACKET_OPEN) ) {
                switch ( input.LA(2) ) {
                case NL:
                    {
                    int LA315_2 = input.LA(3);

                    if ( (LA315_2==L_begin||(LA315_2>=L_obj && LA315_2<=L_if)||(LA315_2>=L_while && LA315_2<=L_for)||LA315_2==L_match||LA315_2==L_exception||LA315_2==L_try||(LA315_2>=L_concurrent && LA315_2<=L_lazy)||(LA315_2>=L_true && LA315_2<=L_nil)||LA315_2==L_typeof||LA315_2==L_not||(LA315_2>=L_root && LA315_2<=L_native)||LA315_2==MINUS||(LA315_2>=A_ELLIPSIS && LA315_2<=U_ELLIPSIS)||LA315_2==L_force||(LA315_2>=Constr && LA315_2<=Id)||(LA315_2>=Float && LA315_2<=Num)||(LA315_2>=String && LA315_2<=ROUND_BRACKET_OPEN)||LA315_2==SQUARE_BRACKET_OPEN||(LA315_2>=CURLY_BRACKET_OPEN && LA315_2<=UNDERSCORE)) ) {
                        alt315=1;
                    }
                    else if ( ((LA315_2>=A_ARROW && LA315_2<=U_ARROW)) ) {
                        alt315=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 315, 2, input);

                        throw nvae;
                    }
                    }
                    break;
                case A_ARROW:
                case U_ARROW:
                    {
                    alt315=2;
                    }
                    break;
                case L_begin:
                case L_obj:
                case L_with:
                case L_if:
                case L_while:
                case L_for:
                case L_match:
                case L_exception:
                case L_try:
                case L_concurrent:
                case L_choose:
                case L_lazy:
                case L_true:
                case L_false:
                case L_this:
                case L_random:
                case L_nil:
                case L_typeof:
                case L_not:
                case L_root:
                case L_native:
                case MINUS:
                case A_ELLIPSIS:
                case U_ELLIPSIS:
                case L_force:
                case Constr:
                case Id:
                case Float:
                case Num:
                case String:
                case ROUND_BRACKET_OPEN:
                case SQUARE_BRACKET_OPEN:
                case CURLY_BRACKET_OPEN:
                case CURLY_BRACKET_CLOSE:
                case UNDERSCORE:
                    {
                    alt315=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 315, 1, input);

                    throw nvae;
                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 315, 0, input);

                throw nvae;
            }
            switch (alt315) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:811:4: '{' ( NL )? ( map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )* )? '}'
                    {
                    char_literal633=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_map_or_set_expr5759); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal633);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:811:8: ( NL )?
                    int alt307=2;
                    int LA307_0 = input.LA(1);

                    if ( (LA307_0==NL) ) {
                        alt307=1;
                    }
                    switch (alt307) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:811:8: NL
                            {
                            NL634=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr5761); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL634);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:811:12: ( map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )* )?
                    int alt312=2;
                    int LA312_0 = input.LA(1);

                    if ( (LA312_0==L_begin||(LA312_0>=L_obj && LA312_0<=L_if)||(LA312_0>=L_while && LA312_0<=L_for)||LA312_0==L_match||LA312_0==L_exception||LA312_0==L_try||(LA312_0>=L_concurrent && LA312_0<=L_lazy)||(LA312_0>=L_true && LA312_0<=L_nil)||LA312_0==L_typeof||LA312_0==L_not||(LA312_0>=L_root && LA312_0<=L_native)||LA312_0==MINUS||(LA312_0>=A_ELLIPSIS && LA312_0<=U_ELLIPSIS)||LA312_0==L_force||(LA312_0>=Constr && LA312_0<=Id)||(LA312_0>=Float && LA312_0<=Num)||(LA312_0>=String && LA312_0<=ROUND_BRACKET_OPEN)||LA312_0==SQUARE_BRACKET_OPEN||LA312_0==CURLY_BRACKET_OPEN||LA312_0==UNDERSCORE) ) {
                        alt312=1;
                    }
                    switch (alt312) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:811:13: map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )*
                            {
                            pushFollow(FOLLOW_map_or_set_elem_expr_in_map_or_set_expr5765);
                            map_or_set_elem_expr635=map_or_set_elem_expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_map_or_set_elem_expr.add(map_or_set_elem_expr635.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:811:34: ( NL )?
                            int alt308=2;
                            int LA308_0 = input.LA(1);

                            if ( (LA308_0==NL) ) {
                                alt308=1;
                            }
                            switch (alt308) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:811:34: NL
                                    {
                                    NL636=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr5767); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL636);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:811:38: ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )*
                            loop311:
                            do {
                                int alt311=2;
                                int LA311_0 = input.LA(1);

                                if ( (LA311_0==COMMA) ) {
                                    alt311=1;
                                }


                                switch (alt311) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:811:39: COMMA ( NL )? map_or_set_elem_expr ( NL )?
                            	    {
                            	    COMMA637=(Token)match(input,COMMA,FOLLOW_COMMA_in_map_or_set_expr5771); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA637);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:811:45: ( NL )?
                            	    int alt309=2;
                            	    int LA309_0 = input.LA(1);

                            	    if ( (LA309_0==NL) ) {
                            	        alt309=1;
                            	    }
                            	    switch (alt309) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:811:45: NL
                            	            {
                            	            NL638=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr5773); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL638);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_map_or_set_elem_expr_in_map_or_set_expr5776);
                            	    map_or_set_elem_expr639=map_or_set_elem_expr();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_map_or_set_elem_expr.add(map_or_set_elem_expr639.getTree());
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:811:70: ( NL )?
                            	    int alt310=2;
                            	    int LA310_0 = input.LA(1);

                            	    if ( (LA310_0==NL) ) {
                            	        alt310=1;
                            	    }
                            	    switch (alt310) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:811:70: NL
                            	            {
                            	            NL640=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr5778); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL640);


                            	            }
                            	            break;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop311;
                                }
                            } while (true);


                            }
                            break;

                    }

                    char_literal641=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_map_or_set_expr5785); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal641);



                    // AST REWRITE
                    // elements: map_or_set_elem_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 811:82: -> ^( MAP_OR_SET_OR_OBJ ( map_or_set_elem_expr )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:811:85: ^( MAP_OR_SET_OR_OBJ ( map_or_set_elem_expr )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MAP_OR_SET_OR_OBJ, "MAP_OR_SET_OR_OBJ"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:811:105: ( map_or_set_elem_expr )*
                        while ( stream_map_or_set_elem_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_map_or_set_elem_expr.nextTree());

                        }
                        stream_map_or_set_elem_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:812:10: '{' ( NL )? token_ARROW ( NL )? '}'
                    {
                    char_literal642=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_map_or_set_expr5805); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal642);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:812:14: ( NL )?
                    int alt313=2;
                    int LA313_0 = input.LA(1);

                    if ( (LA313_0==NL) ) {
                        alt313=1;
                    }
                    switch (alt313) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:812:14: NL
                            {
                            NL643=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr5807); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL643);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_token_ARROW_in_map_or_set_expr5810);
                    token_ARROW644=token_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_ARROW.add(token_ARROW644.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:812:30: ( NL )?
                    int alt314=2;
                    int LA314_0 = input.LA(1);

                    if ( (LA314_0==NL) ) {
                        alt314=1;
                    }
                    switch (alt314) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:812:30: NL
                            {
                            NL645=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr5812); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL645);


                            }
                            break;

                    }

                    char_literal646=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_map_or_set_expr5815); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal646);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 812:38: -> ^( EMPTY_MAP )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:812:41: ^( EMPTY_MAP )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EMPTY_MAP, "EMPTY_MAP"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "map_or_set_expr"

    public static class map_or_set_elem_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "map_or_set_elem_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:814:1: map_or_set_elem_expr : protected_expr_nc ( ( NL )? arrow_or_assign ( NL )? protected_expr_nc )? -> ^( NIL_TOKEN ^( NIL_TOKEN ( protected_expr_nc )* ) ( arrow_or_assign )* ) ;
    public final babel17Parser.map_or_set_elem_expr_return map_or_set_elem_expr() throws RecognitionException {
        babel17Parser.map_or_set_elem_expr_return retval = new babel17Parser.map_or_set_elem_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL648=null;
        Token NL650=null;
        babel17Parser.protected_expr_nc_return protected_expr_nc647 = null;

        babel17Parser.arrow_or_assign_return arrow_or_assign649 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc651 = null;


        CommonTree NL648_tree=null;
        CommonTree NL650_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_arrow_or_assign=new RewriteRuleSubtreeStream(adaptor,"rule arrow_or_assign");
        RewriteRuleSubtreeStream stream_protected_expr_nc=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr_nc");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:815:2: ( protected_expr_nc ( ( NL )? arrow_or_assign ( NL )? protected_expr_nc )? -> ^( NIL_TOKEN ^( NIL_TOKEN ( protected_expr_nc )* ) ( arrow_or_assign )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:815:4: protected_expr_nc ( ( NL )? arrow_or_assign ( NL )? protected_expr_nc )?
            {
            pushFollow(FOLLOW_protected_expr_nc_in_map_or_set_elem_expr5832);
            protected_expr_nc647=protected_expr_nc();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc647.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:815:22: ( ( NL )? arrow_or_assign ( NL )? protected_expr_nc )?
            int alt318=2;
            int LA318_0 = input.LA(1);

            if ( (LA318_0==NL) ) {
                int LA318_1 = input.LA(2);

                if ( (LA318_1==ASSIGN||(LA318_1>=A_ARROW && LA318_1<=U_ARROW)) ) {
                    alt318=1;
                }
            }
            else if ( (LA318_0==ASSIGN||(LA318_0>=A_ARROW && LA318_0<=U_ARROW)) ) {
                alt318=1;
            }
            switch (alt318) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:815:23: ( NL )? arrow_or_assign ( NL )? protected_expr_nc
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:815:23: ( NL )?
                    int alt316=2;
                    int LA316_0 = input.LA(1);

                    if ( (LA316_0==NL) ) {
                        alt316=1;
                    }
                    switch (alt316) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:815:23: NL
                            {
                            NL648=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_elem_expr5835); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL648);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_arrow_or_assign_in_map_or_set_elem_expr5838);
                    arrow_or_assign649=arrow_or_assign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrow_or_assign.add(arrow_or_assign649.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:815:43: ( NL )?
                    int alt317=2;
                    int LA317_0 = input.LA(1);

                    if ( (LA317_0==NL) ) {
                        alt317=1;
                    }
                    switch (alt317) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:815:43: NL
                            {
                            NL650=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_elem_expr5840); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL650);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_map_or_set_elem_expr5843);
                    protected_expr_nc651=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc651.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: arrow_or_assign, protected_expr_nc
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 815:67: -> ^( NIL_TOKEN ^( NIL_TOKEN ( protected_expr_nc )* ) ( arrow_or_assign )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:815:70: ^( NIL_TOKEN ^( NIL_TOKEN ( protected_expr_nc )* ) ( arrow_or_assign )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:815:82: ^( NIL_TOKEN ( protected_expr_nc )* )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:815:94: ( protected_expr_nc )*
                while ( stream_protected_expr_nc.hasNext() ) {
                    adaptor.addChild(root_2, stream_protected_expr_nc.nextTree());

                }
                stream_protected_expr_nc.reset();

                adaptor.addChild(root_1, root_2);
                }
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:815:114: ( arrow_or_assign )*
                while ( stream_arrow_or_assign.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrow_or_assign.nextTree());

                }
                stream_arrow_or_assign.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "map_or_set_elem_expr"

    public static class type_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:817:1: type_expr : '(' ( NL )? ':' ( NL )? typeid ( NL )? ')' -> ^( TYPE_EXPR typeid ) ;
    public final babel17Parser.type_expr_return type_expr() throws RecognitionException {
        babel17Parser.type_expr_return retval = new babel17Parser.type_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal652=null;
        Token NL653=null;
        Token char_literal654=null;
        Token NL655=null;
        Token NL657=null;
        Token char_literal658=null;
        babel17Parser.typeid_return typeid656 = null;


        CommonTree char_literal652_tree=null;
        CommonTree NL653_tree=null;
        CommonTree char_literal654_tree=null;
        CommonTree NL655_tree=null;
        CommonTree NL657_tree=null;
        CommonTree char_literal658_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleSubtreeStream stream_typeid=new RewriteRuleSubtreeStream(adaptor,"rule typeid");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:818:2: ( '(' ( NL )? ':' ( NL )? typeid ( NL )? ')' -> ^( TYPE_EXPR typeid ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:818:4: '(' ( NL )? ':' ( NL )? typeid ( NL )? ')'
            {
            char_literal652=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_type_expr5870); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal652);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:818:8: ( NL )?
            int alt319=2;
            int LA319_0 = input.LA(1);

            if ( (LA319_0==NL) ) {
                alt319=1;
            }
            switch (alt319) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:818:8: NL
                    {
                    NL653=(Token)match(input,NL,FOLLOW_NL_in_type_expr5872); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL653);


                    }
                    break;

            }

            char_literal654=(Token)match(input,COLON,FOLLOW_COLON_in_type_expr5875); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(char_literal654);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:818:16: ( NL )?
            int alt320=2;
            int LA320_0 = input.LA(1);

            if ( (LA320_0==NL) ) {
                alt320=1;
            }
            switch (alt320) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:818:16: NL
                    {
                    NL655=(Token)match(input,NL,FOLLOW_NL_in_type_expr5877); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL655);


                    }
                    break;

            }

            pushFollow(FOLLOW_typeid_in_type_expr5880);
            typeid656=typeid();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeid.add(typeid656.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:818:27: ( NL )?
            int alt321=2;
            int LA321_0 = input.LA(1);

            if ( (LA321_0==NL) ) {
                alt321=1;
            }
            switch (alt321) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:818:27: NL
                    {
                    NL657=(Token)match(input,NL,FOLLOW_NL_in_type_expr5882); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL657);


                    }
                    break;

            }

            char_literal658=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_type_expr5885); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal658);



            // AST REWRITE
            // elements: typeid
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 818:35: -> ^( TYPE_EXPR typeid )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:818:38: ^( TYPE_EXPR typeid )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_EXPR, "TYPE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_typeid.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_expr"

    public static class primitive_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitive_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:820:1: primitive_expr : ( Num | Float | String | Id | Constr | L_true | L_false | L_this | L_nil | L_root | ( type_expr )=> type_expr | ( lambda_expr )=> lambda_expr | obj_expr | list_expr | with_control_expr | map_or_set_expr );
    public final babel17Parser.primitive_expr_return primitive_expr() throws RecognitionException {
        babel17Parser.primitive_expr_return retval = new babel17Parser.primitive_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Num659=null;
        Token Float660=null;
        Token String661=null;
        Token Id662=null;
        Token Constr663=null;
        Token L_true664=null;
        Token L_false665=null;
        Token L_this666=null;
        Token L_nil667=null;
        Token L_root668=null;
        babel17Parser.type_expr_return type_expr669 = null;

        babel17Parser.lambda_expr_return lambda_expr670 = null;

        babel17Parser.obj_expr_return obj_expr671 = null;

        babel17Parser.list_expr_return list_expr672 = null;

        babel17Parser.with_control_expr_return with_control_expr673 = null;

        babel17Parser.map_or_set_expr_return map_or_set_expr674 = null;


        CommonTree Num659_tree=null;
        CommonTree Float660_tree=null;
        CommonTree String661_tree=null;
        CommonTree Id662_tree=null;
        CommonTree Constr663_tree=null;
        CommonTree L_true664_tree=null;
        CommonTree L_false665_tree=null;
        CommonTree L_this666_tree=null;
        CommonTree L_nil667_tree=null;
        CommonTree L_root668_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:821:2: ( Num | Float | String | Id | Constr | L_true | L_false | L_this | L_nil | L_root | ( type_expr )=> type_expr | ( lambda_expr )=> lambda_expr | obj_expr | list_expr | with_control_expr | map_or_set_expr )
            int alt322=16;
            alt322 = dfa322.predict(input);
            switch (alt322) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:821:4: Num
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Num659=(Token)match(input,Num,FOLLOW_Num_in_primitive_expr5903); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Num659_tree = (CommonTree)adaptor.create(Num659);
                    adaptor.addChild(root_0, Num659_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:822:4: Float
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Float660=(Token)match(input,Float,FOLLOW_Float_in_primitive_expr5908); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Float660_tree = (CommonTree)adaptor.create(Float660);
                    adaptor.addChild(root_0, Float660_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:823:4: String
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    String661=(Token)match(input,String,FOLLOW_String_in_primitive_expr5913); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    String661_tree = (CommonTree)adaptor.create(String661);
                    adaptor.addChild(root_0, String661_tree);
                    }

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:824:4: Id
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Id662=(Token)match(input,Id,FOLLOW_Id_in_primitive_expr5918); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Id662_tree = (CommonTree)adaptor.create(Id662);
                    adaptor.addChild(root_0, Id662_tree);
                    }

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:825:4: Constr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Constr663=(Token)match(input,Constr,FOLLOW_Constr_in_primitive_expr5923); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Constr663_tree = (CommonTree)adaptor.create(Constr663);
                    adaptor.addChild(root_0, Constr663_tree);
                    }

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:826:4: L_true
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_true664=(Token)match(input,L_true,FOLLOW_L_true_in_primitive_expr5928); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_true664_tree = (CommonTree)adaptor.create(L_true664);
                    adaptor.addChild(root_0, L_true664_tree);
                    }

                    }
                    break;
                case 7 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:827:4: L_false
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_false665=(Token)match(input,L_false,FOLLOW_L_false_in_primitive_expr5933); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_false665_tree = (CommonTree)adaptor.create(L_false665);
                    adaptor.addChild(root_0, L_false665_tree);
                    }

                    }
                    break;
                case 8 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:828:4: L_this
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_this666=(Token)match(input,L_this,FOLLOW_L_this_in_primitive_expr5938); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_this666_tree = (CommonTree)adaptor.create(L_this666);
                    adaptor.addChild(root_0, L_this666_tree);
                    }

                    }
                    break;
                case 9 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:829:4: L_nil
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_nil667=(Token)match(input,L_nil,FOLLOW_L_nil_in_primitive_expr5944); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_nil667_tree = (CommonTree)adaptor.create(L_nil667);
                    adaptor.addChild(root_0, L_nil667_tree);
                    }

                    }
                    break;
                case 10 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:830:4: L_root
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_root668=(Token)match(input,L_root,FOLLOW_L_root_in_primitive_expr5949); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_root668_tree = (CommonTree)adaptor.create(L_root668);
                    adaptor.addChild(root_0, L_root668_tree);
                    }

                    }
                    break;
                case 11 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:831:4: ( type_expr )=> type_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_type_expr_in_primitive_expr5960);
                    type_expr669=type_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_expr669.getTree());

                    }
                    break;
                case 12 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:4: ( lambda_expr )=> lambda_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lambda_expr_in_primitive_expr5971);
                    lambda_expr670=lambda_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lambda_expr670.getTree());

                    }
                    break;
                case 13 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:833:4: obj_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_obj_expr_in_primitive_expr5976);
                    obj_expr671=obj_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, obj_expr671.getTree());

                    }
                    break;
                case 14 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:834:5: list_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_list_expr_in_primitive_expr5982);
                    list_expr672=list_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, list_expr672.getTree());

                    }
                    break;
                case 15 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:835:4: with_control_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_with_control_expr_in_primitive_expr5987);
                    with_control_expr673=with_control_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, with_control_expr673.getTree());

                    }
                    break;
                case 16 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:836:4: map_or_set_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_map_or_set_expr_in_primitive_expr5992);
                    map_or_set_expr674=map_or_set_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, map_or_set_expr674.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "primitive_expr"

    // $ANTLR start synpred1_babel17
    public final void synpred1_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:443:10: ( Id ( NL )? L_as )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:443:11: Id ( NL )? L_as
        {
        match(input,Id,FOLLOW_Id_in_synpred1_babel171956); if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:443:14: ( NL )?
        int alt323=2;
        int LA323_0 = input.LA(1);

        if ( (LA323_0==NL) ) {
            alt323=1;
        }
        switch (alt323) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:443:14: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred1_babel171958); if (state.failed) return ;

                }
                break;

        }

        match(input,L_as,FOLLOW_L_as_in_synpred1_babel171961); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_babel17

    // $ANTLR start synpred2_babel17
    public final void synpred2_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:444:4: ( protected_expr ( NL )? QUESTION_MARK )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:444:5: protected_expr ( NL )? QUESTION_MARK
        {
        pushFollow(FOLLOW_protected_expr_in_synpred2_babel171992);
        protected_expr();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:444:20: ( NL )?
        int alt324=2;
        int LA324_0 = input.LA(1);

        if ( (LA324_0==NL) ) {
            alt324=1;
        }
        switch (alt324) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:444:20: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred2_babel171994); if (state.failed) return ;

                }
                break;

        }

        match(input,QUESTION_MARK,FOLLOW_QUESTION_MARK_in_synpred2_babel171997); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_babel17

    // $ANTLR start synpred3_babel17
    public final void synpred3_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:4: ( protected_expr ( NL )? EXCLAMATION_MARK )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:5: protected_expr ( NL )? EXCLAMATION_MARK
        {
        pushFollow(FOLLOW_protected_expr_in_synpred3_babel172035);
        protected_expr();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:20: ( NL )?
        int alt325=2;
        int LA325_0 = input.LA(1);

        if ( (LA325_0==NL) ) {
            alt325=1;
        }
        switch (alt325) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:20: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred3_babel172037); if (state.failed) return ;

                }
                break;

        }

        match(input,EXCLAMATION_MARK,FOLLOW_EXCLAMATION_MARK_in_synpred3_babel172040); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_babel17

    // $ANTLR start synpred4_babel17
    public final void synpred4_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:448:4: ( Id pattern )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:448:5: Id pattern
        {
        match(input,Id,FOLLOW_Id_in_synpred4_babel172078); if (state.failed) return ;
        pushFollow(FOLLOW_pattern_in_synpred4_babel172080);
        pattern();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_babel17

    // $ANTLR start synpred5_babel17
    public final void synpred5_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:451:4: ( pattern ( NL )? L_if )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:451:5: pattern ( NL )? L_if
        {
        pushFollow(FOLLOW_pattern_in_synpred5_babel172169);
        pattern();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:451:13: ( NL )?
        int alt326=2;
        int LA326_0 = input.LA(1);

        if ( (LA326_0==NL) ) {
            alt326=1;
        }
        switch (alt326) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:451:13: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred5_babel172171); if (state.failed) return ;

                }
                break;

        }

        match(input,L_if,FOLLOW_L_if_in_synpred5_babel172174); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_babel17

    // $ANTLR start synpred6_babel17
    public final void synpred6_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:4: ( pattern ( NL )? ':' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:5: pattern ( NL )? ':'
        {
        pushFollow(FOLLOW_pattern_in_synpred6_babel172205);
        pattern();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:13: ( NL )?
        int alt327=2;
        int LA327_0 = input.LA(1);

        if ( (LA327_0==NL) ) {
            alt327=1;
        }
        switch (alt327) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:13: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred6_babel172207); if (state.failed) return ;

                }
                break;

        }

        match(input,COLON,FOLLOW_COLON_in_synpred6_babel172210); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_babel17

    // $ANTLR start synpred7_babel17
    public final void synpred7_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:4: ( defpattern ( NL )? '=' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:5: defpattern ( NL )? '='
        {
        pushFollow(FOLLOW_defpattern_in_synpred7_babel173049);
        defpattern();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:16: ( NL )?
        int alt328=2;
        int LA328_0 = input.LA(1);

        if ( (LA328_0==NL) ) {
            alt328=1;
        }
        switch (alt328) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:520:16: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred7_babel173051); if (state.failed) return ;

                }
                break;

        }

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred7_babel173054); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_babel17

    // $ANTLR start synpred8_babel17
    public final void synpred8_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:566:4: ( ( pattern | objelem_assign ) ( NL )? '=' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:566:5: ( pattern | objelem_assign ) ( NL )? '='
        {
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:566:5: ( pattern | objelem_assign )
        int alt329=2;
        int LA329_0 = input.LA(1);

        if ( (LA329_0==L_exception||(LA329_0>=L_true && LA329_0<=L_false)||LA329_0==L_nil||LA329_0==MINUS||(LA329_0>=A_ELLIPSIS && LA329_0<=U_ELLIPSIS)||LA329_0==Constr||LA329_0==Num||(LA329_0>=String && LA329_0<=ROUND_BRACKET_OPEN)||LA329_0==SQUARE_BRACKET_OPEN||LA329_0==CURLY_BRACKET_OPEN||LA329_0==UNDERSCORE) ) {
            alt329=1;
        }
        else if ( (LA329_0==Id) ) {
            int LA329_2 = input.LA(2);

            if ( (LA329_2==PERIOD) ) {
                alt329=2;
            }
            else if ( (LA329_2==ASSIGN||(LA329_2>=A_DOUBLE_COLON && LA329_2<=U_DOUBLE_COLON)||LA329_2==NL) ) {
                alt329=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 329, 2, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 329, 0, input);

            throw nvae;
        }
        switch (alt329) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:566:6: pattern
                {
                pushFollow(FOLLOW_pattern_in_synpred8_babel173576);
                pattern();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:566:16: objelem_assign
                {
                pushFollow(FOLLOW_objelem_assign_in_synpred8_babel173580);
                objelem_assign();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:566:32: ( NL )?
        int alt330=2;
        int LA330_0 = input.LA(1);

        if ( (LA330_0==NL) ) {
            alt330=1;
        }
        switch (alt330) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:566:32: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred8_babel173583); if (state.failed) return ;

                }
                break;

        }

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred8_babel173586); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_babel17

    // $ANTLR start synpred9_babel17
    public final void synpred9_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:601:11: ( L_obj ( NL )? parents )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:601:12: L_obj ( NL )? parents
        {
        match(input,L_obj,FOLLOW_L_obj_in_synpred9_babel173809); if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:601:18: ( NL )?
        int alt331=2;
        int LA331_0 = input.LA(1);

        if ( (LA331_0==NL) ) {
            alt331=1;
        }
        switch (alt331) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:601:18: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred9_babel173811); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_parents_in_synpred9_babel173814);
        parents();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_babel17

    // $ANTLR start synpred10_babel17
    public final void synpred10_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:606:4: ( lambda_expr_nobrackets )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:606:5: lambda_expr_nobrackets
        {
        pushFollow(FOLLOW_lambda_expr_nobrackets_in_synpred10_babel173885);
        lambda_expr_nobrackets();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_babel17

    // $ANTLR start synpred11_babel17
    public final void synpred11_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:611:4: ( lambda_expr_nobrackets )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:611:5: lambda_expr_nobrackets
        {
        pushFollow(FOLLOW_lambda_expr_nobrackets_in_synpred11_babel173908);
        lambda_expr_nobrackets();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_babel17

    // $ANTLR start synpred12_babel17
    public final void synpred12_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:4: ( '[' ( NL )? protected_expr_nc ( NL )? ';' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:5: '[' ( NL )? protected_expr_nc ( NL )? ';'
        {
        match(input,SQUARE_BRACKET_OPEN,FOLLOW_SQUARE_BRACKET_OPEN_in_synpred12_babel175607); if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:9: ( NL )?
        int alt332=2;
        int LA332_0 = input.LA(1);

        if ( (LA332_0==NL) ) {
            alt332=1;
        }
        switch (alt332) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:9: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred12_babel175609); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_protected_expr_nc_in_synpred12_babel175612);
        protected_expr_nc();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:31: ( NL )?
        int alt333=2;
        int LA333_0 = input.LA(1);

        if ( (LA333_0==NL) ) {
            alt333=1;
        }
        switch (alt333) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:31: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred12_babel175614); if (state.failed) return ;

                }
                break;

        }

        match(input,SC,FOLLOW_SC_in_synpred12_babel175617); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_babel17

    // $ANTLR start synpred13_babel17
    public final void synpred13_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:831:4: ( type_expr )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:831:5: type_expr
        {
        pushFollow(FOLLOW_type_expr_in_synpred13_babel175955);
        type_expr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_babel17

    // $ANTLR start synpred14_babel17
    public final void synpred14_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:4: ( lambda_expr )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:5: lambda_expr
        {
        pushFollow(FOLLOW_lambda_expr_in_synpred14_babel175966);
        lambda_expr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_babel17

    // Delegated rules

    public final boolean synpred4_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA36 dfa36 = new DFA36(this);
    protected DFA64 dfa64 = new DFA64(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA67 dfa67 = new DFA67(this);
    protected DFA80 dfa80 = new DFA80(this);
    protected DFA106 dfa106 = new DFA106(this);
    protected DFA144 dfa144 = new DFA144(this);
    protected DFA152 dfa152 = new DFA152(this);
    protected DFA153 dfa153 = new DFA153(this);
    protected DFA322 dfa322 = new DFA322(this);
    static final String DFA36_eotS =
        "\46\uffff";
    static final String DFA36_eofS =
        "\46\uffff";
    static final String DFA36_minS =
        "\1\107\34\0\11\uffff";
    static final String DFA36_maxS =
        "\1\u00a7\34\0\11\uffff";
    static final String DFA36_acceptS =
        "\35\uffff\1\5\1\1\1\2\1\3\1\4\1\7\1\10\1\11\1\6";
    static final String DFA36_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\11\uffff}>";
    static final String[] DFA36_transitionS = {
            "\1\33\1\uffff\1\25\1\34\1\26\3\uffff\1\27\1\31\2\uffff\1\30"+
            "\2\uffff\1\35\2\uffff\1\15\2\uffff\1\32\1\uffff\1\17\1\21\1"+
            "\17\1\uffff\1\6\1\7\1\23\1\21\1\10\4\uffff\1\21\4\uffff\1\20"+
            "\1\uffff\1\24\1\21\14\uffff\1\11\17\uffff\2\16\4\uffff\1\17"+
            "\3\uffff\1\2\1\1\1\uffff\1\22\1\5\1\uffff\1\4\1\13\1\uffff\1"+
            "\12\1\uffff\1\14\1\uffff\1\3",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA36_eot = DFA.unpackEncodedString(DFA36_eotS);
    static final short[] DFA36_eof = DFA.unpackEncodedString(DFA36_eofS);
    static final char[] DFA36_min = DFA.unpackEncodedStringToUnsignedChars(DFA36_minS);
    static final char[] DFA36_max = DFA.unpackEncodedStringToUnsignedChars(DFA36_maxS);
    static final short[] DFA36_accept = DFA.unpackEncodedString(DFA36_acceptS);
    static final short[] DFA36_special = DFA.unpackEncodedString(DFA36_specialS);
    static final short[][] DFA36_transition;

    static {
        int numStates = DFA36_transitionS.length;
        DFA36_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA36_transition[i] = DFA.unpackEncodedString(DFA36_transitionS[i]);
        }
    }

    class DFA36 extends DFA {

        public DFA36(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = DFA36_eot;
            this.eof = DFA36_eof;
            this.min = DFA36_min;
            this.max = DFA36_max;
            this.accept = DFA36_accept;
            this.special = DFA36_special;
            this.transition = DFA36_transition;
        }
        public String getDescription() {
            return "442:1: bracket_pattern : ( ( Id ( NL )? L_as )=> Id ( NL )? L_as ( NL )? pattern -> ^( L_as Id pattern ) | ( protected_expr ( NL )? QUESTION_MARK )=> protected_expr ( NL )? QUESTION_MARK ( ( NL )? pattern )? -> ^( QUESTION_MARK protected_expr ( pattern )? ) | ( protected_expr ( NL )? EXCLAMATION_MARK )=> protected_expr ( NL )? EXCLAMATION_MARK ( ( NL )? pattern )? -> ^( EXCLAMATION_MARK protected_expr ( pattern )? ) | ( Id pattern )=> Id pattern -> ^( INNERVALUE_PATTERN Id pattern ) | L_val ( NL )? protected_expr_nc -> ^( L_val protected_expr_nc ) | L_for ( NL )? ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )? L_end -> ^( L_for ( bracket_pattern )* ) | ( pattern ( NL )? L_if )=> pattern ( NL )? L_if ( NL )? protected_expr_nc -> ^( IF_PATTERN pattern protected_expr_nc ) | ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation -> ^( TYPE_PATTERN typeannotation pattern ) | pattern );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA36_1 = input.LA(1);

                         
                        int index36_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 30;}

                        else if ( (synpred2_babel17()) ) {s = 31;}

                        else if ( (synpred3_babel17()) ) {s = 32;}

                        else if ( (synpred4_babel17()) ) {s = 33;}

                        else if ( (synpred5_babel17()) ) {s = 34;}

                        else if ( (synpred6_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index36_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA36_2 = input.LA(1);

                         
                        int index36_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 31;}

                        else if ( (synpred3_babel17()) ) {s = 32;}

                        else if ( (synpred5_babel17()) ) {s = 34;}

                        else if ( (synpred6_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index36_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA36_3 = input.LA(1);

                         
                        int index36_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 31;}

                        else if ( (synpred3_babel17()) ) {s = 32;}

                        else if ( (synpred5_babel17()) ) {s = 34;}

                        else if ( (synpred6_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index36_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA36_4 = input.LA(1);

                         
                        int index36_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 31;}

                        else if ( (synpred3_babel17()) ) {s = 32;}

                        else if ( (synpred5_babel17()) ) {s = 34;}

                        else if ( (synpred6_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index36_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA36_5 = input.LA(1);

                         
                        int index36_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 31;}

                        else if ( (synpred3_babel17()) ) {s = 32;}

                        else if ( (synpred5_babel17()) ) {s = 34;}

                        else if ( (synpred6_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index36_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA36_6 = input.LA(1);

                         
                        int index36_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 31;}

                        else if ( (synpred3_babel17()) ) {s = 32;}

                        else if ( (synpred5_babel17()) ) {s = 34;}

                        else if ( (synpred6_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index36_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA36_7 = input.LA(1);

                         
                        int index36_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 31;}

                        else if ( (synpred3_babel17()) ) {s = 32;}

                        else if ( (synpred5_babel17()) ) {s = 34;}

                        else if ( (synpred6_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index36_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA36_8 = input.LA(1);

                         
                        int index36_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 31;}

                        else if ( (synpred3_babel17()) ) {s = 32;}

                        else if ( (synpred5_babel17()) ) {s = 34;}

                        else if ( (synpred6_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index36_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA36_9 = input.LA(1);

                         
                        int index36_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 31;}

                        else if ( (synpred3_babel17()) ) {s = 32;}

                        else if ( (synpred5_babel17()) ) {s = 34;}

                        else if ( (synpred6_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index36_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA36_10 = input.LA(1);

                         
                        int index36_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 31;}

                        else if ( (synpred3_babel17()) ) {s = 32;}

                        else if ( (synpred5_babel17()) ) {s = 34;}

                        else if ( (synpred6_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index36_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA36_11 = input.LA(1);

                         
                        int index36_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 31;}

                        else if ( (synpred3_babel17()) ) {s = 32;}

                        else if ( (synpred5_babel17()) ) {s = 34;}

                        else if ( (synpred6_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index36_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA36_12 = input.LA(1);

                         
                        int index36_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 31;}

                        else if ( (synpred3_babel17()) ) {s = 32;}

                        else if ( (synpred5_babel17()) ) {s = 34;}

                        else if ( (synpred6_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index36_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA36_13 = input.LA(1);

                         
                        int index36_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 31;}

                        else if ( (synpred3_babel17()) ) {s = 32;}

                        else if ( (synpred5_babel17()) ) {s = 34;}

                        else if ( (synpred6_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index36_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA36_14 = input.LA(1);

                         
                        int index36_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 31;}

                        else if ( (synpred3_babel17()) ) {s = 32;}

                        else if ( (synpred5_babel17()) ) {s = 34;}

                        else if ( (synpred6_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index36_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA36_15 = input.LA(1);

                         
                        int index36_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 31;}

                        else if ( (synpred3_babel17()) ) {s = 32;}

                         
                        input.seek(index36_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA36_16 = input.LA(1);

                         
                        int index36_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 31;}

                        else if ( (synpred3_babel17()) ) {s = 32;}

                         
                        input.seek(index36_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA36_17 = input.LA(1);

                         
                        int index36_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 31;}

                        else if ( (synpred3_babel17()) ) {s = 32;}

                         
                        input.seek(index36_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA36_18 = input.LA(1);

                         
                        int index36_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 31;}

                        else if ( (synpred3_babel17()) ) {s = 32;}

                         
                        input.seek(index36_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA36_19 = input.LA(1);

                         
                        int index36_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 31;}

                        else if ( (synpred3_babel17()) ) {s = 32;}

                         
                        input.seek(index36_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA36_20 = input.LA(1);

                         
                        int index36_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 31;}

                        else if ( (synpred3_babel17()) ) {s = 32;}

                         
                        input.seek(index36_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA36_21 = input.LA(1);

                         
                        int index36_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 31;}

                        else if ( (synpred3_babel17()) ) {s = 32;}

                         
                        input.seek(index36_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA36_22 = input.LA(1);

                         
                        int index36_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 31;}

                        else if ( (synpred3_babel17()) ) {s = 32;}

                         
                        input.seek(index36_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA36_23 = input.LA(1);

                         
                        int index36_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 31;}

                        else if ( (synpred3_babel17()) ) {s = 32;}

                         
                        input.seek(index36_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA36_24 = input.LA(1);

                         
                        int index36_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 31;}

                        else if ( (synpred3_babel17()) ) {s = 32;}

                         
                        input.seek(index36_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA36_25 = input.LA(1);

                         
                        int index36_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 31;}

                        else if ( (synpred3_babel17()) ) {s = 32;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index36_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA36_26 = input.LA(1);

                         
                        int index36_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 31;}

                        else if ( (synpred3_babel17()) ) {s = 32;}

                         
                        input.seek(index36_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA36_27 = input.LA(1);

                         
                        int index36_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 31;}

                        else if ( (synpred3_babel17()) ) {s = 32;}

                         
                        input.seek(index36_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA36_28 = input.LA(1);

                         
                        int index36_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 31;}

                        else if ( (synpred3_babel17()) ) {s = 32;}

                         
                        input.seek(index36_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 36, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA64_eotS =
        "\17\uffff";
    static final String DFA64_eofS =
        "\17\uffff";
    static final String DFA64_minS =
        "\1\142\12\uffff\2\107\2\uffff";
    static final String DFA64_maxS =
        "\1\u00a7\12\uffff\2\u00a7\2\uffff";
    static final String DFA64_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\2\uffff\1\13"+
        "\1\14";
    static final String DFA64_specialS =
        "\17\uffff}>";
    static final String[] DFA64_transitionS = {
            "\1\5\1\6\2\uffff\1\7\31\uffff\1\10\32\uffff\1\1\2\uffff\1\4"+
            "\1\uffff\1\3\1\12\1\uffff\1\11\1\uffff\1\13\1\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\15\1\uffff\3\15\3\uffff\2\15\2\uffff\1\15\2\uffff\1\15\2"+
            "\uffff\1\15\2\uffff\1\15\1\uffff\3\15\1\uffff\5\15\4\uffff\1"+
            "\15\4\uffff\1\15\1\uffff\2\15\14\uffff\1\15\15\uffff\2\16\2"+
            "\15\4\uffff\1\15\2\uffff\1\14\2\15\1\uffff\2\15\1\uffff\2\15"+
            "\1\uffff\1\15\1\uffff\3\15",
            "\1\15\1\uffff\3\15\3\uffff\2\15\2\uffff\1\15\2\uffff\1\15\2"+
            "\uffff\1\15\2\uffff\1\15\1\uffff\3\15\1\uffff\5\15\4\uffff\1"+
            "\15\4\uffff\1\15\1\uffff\2\15\14\uffff\1\15\15\uffff\2\16\2"+
            "\15\4\uffff\1\15\3\uffff\2\15\1\uffff\2\15\1\uffff\2\15\1\uffff"+
            "\1\15\1\uffff\3\15",
            "",
            ""
    };

    static final short[] DFA64_eot = DFA.unpackEncodedString(DFA64_eotS);
    static final short[] DFA64_eof = DFA.unpackEncodedString(DFA64_eofS);
    static final char[] DFA64_min = DFA.unpackEncodedStringToUnsignedChars(DFA64_minS);
    static final char[] DFA64_max = DFA.unpackEncodedStringToUnsignedChars(DFA64_maxS);
    static final short[] DFA64_accept = DFA.unpackEncodedString(DFA64_acceptS);
    static final short[] DFA64_special = DFA.unpackEncodedString(DFA64_specialS);
    static final short[][] DFA64_transition;

    static {
        int numStates = DFA64_transitionS.length;
        DFA64_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA64_transition[i] = DFA.unpackEncodedString(DFA64_transitionS[i]);
        }
    }

    class DFA64 extends DFA {

        public DFA64(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 64;
            this.eot = DFA64_eot;
            this.eof = DFA64_eof;
            this.min = DFA64_min;
            this.max = DFA64_max;
            this.accept = DFA64_accept;
            this.special = DFA64_special;
            this.transition = DFA64_transition;
        }
        public String getDescription() {
            return "463:1: primitive_pattern : ( Id | '_' -> ANY | String | Num | L_true | L_false | L_nil | '-' ( NL )? Num -> ^( UMINUS Num ) | '[' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )? ']' -> ^( SQUARE_LIST ( bracket_pattern )* ) | '(' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) ) | '{' ( NL )? ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) );";
        }
    }
    static final String DFA70_eotS =
        "\4\uffff";
    static final String DFA70_eofS =
        "\2\3\2\uffff";
    static final String DFA70_minS =
        "\2\107\2\uffff";
    static final String DFA70_maxS =
        "\2\u00ad\2\uffff";
    static final String DFA70_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA70_specialS =
        "\4\uffff}>";
    static final String[] DFA70_transitionS = {
            "\1\2\1\3\3\2\1\uffff\2\3\2\2\1\uffff\2\2\1\3\1\uffff\2\2\1\uffff"+
            "\1\2\2\uffff\1\2\1\uffff\11\2\2\uffff\5\2\1\3\1\uffff\1\2\1"+
            "\uffff\2\2\12\uffff\1\1\1\uffff\1\2\17\uffff\2\2\4\uffff\1\2"+
            "\2\uffff\1\1\2\2\1\uffff\2\2\1\uffff\2\2\1\uffff\1\2\1\uffff"+
            "\1\2\1\uffff\1\2\1\uffff\5\2",
            "\1\2\1\3\3\2\1\uffff\2\3\2\2\1\uffff\2\2\1\3\1\uffff\2\2\1"+
            "\uffff\1\2\2\uffff\1\2\1\uffff\11\2\2\uffff\5\2\1\3\1\uffff"+
            "\1\2\1\uffff\2\2\12\uffff\1\1\1\uffff\1\2\17\uffff\2\2\4\uffff"+
            "\1\2\2\uffff\1\1\2\2\1\uffff\2\2\1\uffff\2\2\1\uffff\1\2\1\uffff"+
            "\1\2\1\uffff\1\2\1\uffff\5\2",
            "",
            ""
    };

    static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_eotS);
    static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_eofS);
    static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_minS);
    static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_maxS);
    static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_acceptS);
    static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_specialS);
    static final short[][] DFA70_transition;

    static {
        int numStates = DFA70_transitionS.length;
        DFA70_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA70_transition[i] = DFA.unpackEncodedString(DFA70_transitionS[i]);
        }
    }

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = DFA70_eot;
            this.eof = DFA70_eof;
            this.min = DFA70_min;
            this.max = DFA70_max;
            this.accept = DFA70_accept;
            this.special = DFA70_special;
            this.transition = DFA70_transition;
        }
        public String getDescription() {
            return "485:1: block : ( ( sep )? statement ( sep statement )* ( sep )? -> ^( BLOCK ( statement )* ) | ( sep )? -> ^( BLOCK ) );";
        }
    }
    static final String DFA67_eotS =
        "\4\uffff";
    static final String DFA67_eofS =
        "\2\2\2\uffff";
    static final String DFA67_minS =
        "\1\110\1\107\2\uffff";
    static final String DFA67_maxS =
        "\1\u0099\1\u00ad\2\uffff";
    static final String DFA67_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA67_specialS =
        "\4\uffff}>";
    static final String[] DFA67_transitionS = {
            "\1\2\4\uffff\2\2\5\uffff\1\2\31\uffff\1\2\17\uffff\1\1\32\uffff"+
            "\1\1",
            "\1\3\1\2\3\3\1\uffff\2\2\2\3\1\uffff\2\3\1\2\1\uffff\2\3\1"+
            "\uffff\1\3\2\uffff\1\3\1\uffff\11\3\2\uffff\5\3\1\2\1\uffff"+
            "\1\3\1\uffff\2\3\12\uffff\1\1\1\uffff\1\3\17\uffff\2\3\4\uffff"+
            "\1\3\2\uffff\1\1\2\3\1\uffff\2\3\1\uffff\2\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\uffff\1\3\1\uffff\5\3",
            "",
            ""
    };

    static final short[] DFA67_eot = DFA.unpackEncodedString(DFA67_eotS);
    static final short[] DFA67_eof = DFA.unpackEncodedString(DFA67_eofS);
    static final char[] DFA67_min = DFA.unpackEncodedStringToUnsignedChars(DFA67_minS);
    static final char[] DFA67_max = DFA.unpackEncodedStringToUnsignedChars(DFA67_maxS);
    static final short[] DFA67_accept = DFA.unpackEncodedString(DFA67_acceptS);
    static final short[] DFA67_special = DFA.unpackEncodedString(DFA67_specialS);
    static final short[][] DFA67_transition;

    static {
        int numStates = DFA67_transitionS.length;
        DFA67_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA67_transition[i] = DFA.unpackEncodedString(DFA67_transitionS[i]);
        }
    }

    class DFA67 extends DFA {

        public DFA67(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 67;
            this.eot = DFA67_eot;
            this.eof = DFA67_eof;
            this.min = DFA67_min;
            this.max = DFA67_max;
            this.accept = DFA67_accept;
            this.special = DFA67_special;
            this.transition = DFA67_transition;
        }
        public String getDescription() {
            return "()* loopback of 485:25: ( sep statement )*";
        }
    }
    static final String DFA80_eotS =
        "\17\uffff";
    static final String DFA80_eofS =
        "\17\uffff";
    static final String DFA80_minS =
        "\1\107\16\uffff";
    static final String DFA80_maxS =
        "\1\u00ad\16\uffff";
    static final String DFA80_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16";
    static final String DFA80_specialS =
        "\17\uffff}>";
    static final String[] DFA80_transitionS = {
            "\1\11\1\uffff\3\11\3\uffff\2\11\1\uffff\1\4\1\11\2\uffff\1\2"+
            "\1\3\1\uffff\1\11\2\uffff\1\11\1\uffff\3\11\1\5\5\11\2\uffff"+
            "\1\7\1\1\1\11\1\6\1\10\2\uffff\1\11\1\uffff\2\11\14\uffff\1"+
            "\11\17\uffff\2\11\4\uffff\1\11\3\uffff\2\11\1\uffff\2\11\1\uffff"+
            "\2\11\1\uffff\1\11\1\uffff\1\11\1\uffff\1\11\1\uffff\1\13\1"+
            "\12\1\15\1\14\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA80_eot = DFA.unpackEncodedString(DFA80_eotS);
    static final short[] DFA80_eof = DFA.unpackEncodedString(DFA80_eofS);
    static final char[] DFA80_min = DFA.unpackEncodedStringToUnsignedChars(DFA80_minS);
    static final char[] DFA80_max = DFA.unpackEncodedStringToUnsignedChars(DFA80_maxS);
    static final short[] DFA80_accept = DFA.unpackEncodedString(DFA80_acceptS);
    static final short[] DFA80_special = DFA.unpackEncodedString(DFA80_specialS);
    static final short[][] DFA80_transition;

    static {
        int numStates = DFA80_transitionS.length;
        DFA80_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA80_transition[i] = DFA.unpackEncodedString(DFA80_transitionS[i]);
        }
    }

    class DFA80 extends DFA {

        public DFA80(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = DFA80_eot;
            this.eof = DFA80_eof;
            this.min = DFA80_min;
            this.max = DFA80_max;
            this.accept = DFA80_accept;
            this.special = DFA80_special;
            this.transition = DFA80_transition;
        }
        public String getDescription() {
            return "491:1: statement : ( st_typedef | st_val | st_def | st_yield | st_memoize | st_private | st_module | st_import | expr_or_assign | PRAGMA_PRINT ( NL )? expr -> ^( PRAGMA_PRINT expr ) | PRAGMA_LOG ( NL )? expr -> ^( PRAGMA_LOG expr ) | PRAGMA_PROFILE ( NL )? expr -> ^( PRAGMA_PROFILE expr ) | PRAGMA_ASSERT ( NL )? expr -> ^( PRAGMA_ASSERT expr ) | PRAGMA_CATCH ( NL )? casepattern ( NL )? L_try ( NL )? COLON ( NL )? expr -> ^( PRAGMA_CATCH expr casepattern ) );";
        }
    }
    static final String DFA106_eotS =
        "\17\uffff";
    static final String DFA106_eofS =
        "\17\uffff";
    static final String DFA106_minS =
        "\1\142\14\0\2\uffff";
    static final String DFA106_maxS =
        "\1\u00a7\14\0\2\uffff";
    static final String DFA106_acceptS =
        "\15\uffff\1\1\1\2";
    static final String DFA106_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\2\uffff}>";
    static final String[] DFA106_transitionS = {
            "\1\5\1\6\2\uffff\1\7\31\uffff\1\10\31\uffff\1\14\1\1\2\uffff"+
            "\1\4\1\uffff\1\3\1\12\1\uffff\1\11\1\uffff\1\13\1\uffff\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA106_eot = DFA.unpackEncodedString(DFA106_eotS);
    static final short[] DFA106_eof = DFA.unpackEncodedString(DFA106_eofS);
    static final char[] DFA106_min = DFA.unpackEncodedStringToUnsignedChars(DFA106_minS);
    static final char[] DFA106_max = DFA.unpackEncodedStringToUnsignedChars(DFA106_maxS);
    static final short[] DFA106_accept = DFA.unpackEncodedString(DFA106_acceptS);
    static final short[] DFA106_special = DFA.unpackEncodedString(DFA106_specialS);
    static final short[][] DFA106_transition;

    static {
        int numStates = DFA106_transitionS.length;
        DFA106_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA106_transition[i] = DFA.unpackEncodedString(DFA106_transitionS[i]);
        }
    }

    class DFA106 extends DFA {

        public DFA106(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 106;
            this.eot = DFA106_eot;
            this.eof = DFA106_eof;
            this.min = DFA106_min;
            this.max = DFA106_max;
            this.accept = DFA106_accept;
            this.special = DFA106_special;
            this.transition = DFA106_transition;
        }
        public String getDescription() {
            return "519:1: typedef_clause : ( ( defpattern ( NL )? '=' )=> defpattern ( NL )? '=' ( NL )? expr -> ^( TYPEDEF_CLAUSE defpattern expr ) | defpattern -> ^( TYPEDEF_CLAUSE defpattern ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA106_1 = input.LA(1);

                         
                        int index106_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index106_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA106_2 = input.LA(1);

                         
                        int index106_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index106_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA106_3 = input.LA(1);

                         
                        int index106_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index106_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA106_4 = input.LA(1);

                         
                        int index106_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index106_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA106_5 = input.LA(1);

                         
                        int index106_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index106_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA106_6 = input.LA(1);

                         
                        int index106_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index106_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA106_7 = input.LA(1);

                         
                        int index106_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index106_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA106_8 = input.LA(1);

                         
                        int index106_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index106_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA106_9 = input.LA(1);

                         
                        int index106_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index106_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA106_10 = input.LA(1);

                         
                        int index106_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index106_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA106_11 = input.LA(1);

                         
                        int index106_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index106_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA106_12 = input.LA(1);

                         
                        int index106_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index106_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 106, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA144_eotS =
        "\36\uffff";
    static final String DFA144_eofS =
        "\36\uffff";
    static final String DFA144_minS =
        "\1\107\16\0\17\uffff";
    static final String DFA144_maxS =
        "\1\u00a7\16\0\17\uffff";
    static final String DFA144_acceptS =
        "\17\uffff\1\2\15\uffff\1\1";
    static final String DFA144_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\17\uffff}>";
    static final String[] DFA144_transitionS = {
            "\1\17\1\uffff\3\17\3\uffff\2\17\2\uffff\1\17\5\uffff\1\15\2"+
            "\uffff\1\17\1\uffff\3\17\1\uffff\1\6\1\7\2\17\1\10\4\uffff\1"+
            "\17\4\uffff\1\17\1\uffff\2\17\14\uffff\1\11\17\uffff\2\16\4"+
            "\uffff\1\17\3\uffff\1\1\1\2\1\uffff\1\17\1\5\1\uffff\1\4\1\13"+
            "\1\uffff\1\12\1\uffff\1\14\1\uffff\1\3",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA144_eot = DFA.unpackEncodedString(DFA144_eotS);
    static final short[] DFA144_eof = DFA.unpackEncodedString(DFA144_eofS);
    static final char[] DFA144_min = DFA.unpackEncodedStringToUnsignedChars(DFA144_minS);
    static final char[] DFA144_max = DFA.unpackEncodedStringToUnsignedChars(DFA144_maxS);
    static final short[] DFA144_accept = DFA.unpackEncodedString(DFA144_acceptS);
    static final short[] DFA144_special = DFA.unpackEncodedString(DFA144_specialS);
    static final short[][] DFA144_transition;

    static {
        int numStates = DFA144_transitionS.length;
        DFA144_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA144_transition[i] = DFA.unpackEncodedString(DFA144_transitionS[i]);
        }
    }

    class DFA144 extends DFA {

        public DFA144(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = DFA144_eot;
            this.eof = DFA144_eof;
            this.min = DFA144_min;
            this.max = DFA144_max;
            this.accept = DFA144_accept;
            this.special = DFA144_special;
            this.transition = DFA144_transition;
        }
        public String getDescription() {
            return "565:1: expr_or_assign : ( ( ( pattern | objelem_assign ) ( NL )? '=' )=> ( pattern | objelem_assign ) ( NL )? '=' ( NL )? expr -> ^( ASSIGN ( pattern )* ( objelem_assign )* expr ) | expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA144_1 = input.LA(1);

                         
                        int index144_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index144_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA144_2 = input.LA(1);

                         
                        int index144_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index144_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA144_3 = input.LA(1);

                         
                        int index144_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index144_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA144_4 = input.LA(1);

                         
                        int index144_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index144_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA144_5 = input.LA(1);

                         
                        int index144_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index144_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA144_6 = input.LA(1);

                         
                        int index144_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index144_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA144_7 = input.LA(1);

                         
                        int index144_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index144_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA144_8 = input.LA(1);

                         
                        int index144_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index144_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA144_9 = input.LA(1);

                         
                        int index144_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index144_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA144_10 = input.LA(1);

                         
                        int index144_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index144_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA144_11 = input.LA(1);

                         
                        int index144_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index144_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA144_12 = input.LA(1);

                         
                        int index144_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index144_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA144_13 = input.LA(1);

                         
                        int index144_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index144_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA144_14 = input.LA(1);

                         
                        int index144_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index144_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 144, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA152_eotS =
        "\35\uffff";
    static final String DFA152_eofS =
        "\35\uffff";
    static final String DFA152_minS =
        "\1\107\2\0\1\uffff\12\0\17\uffff";
    static final String DFA152_maxS =
        "\1\u00a7\2\0\1\uffff\12\0\17\uffff";
    static final String DFA152_acceptS =
        "\3\uffff\1\1\12\uffff\1\1\1\2\15\uffff";
    static final String DFA152_specialS =
        "\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\17\uffff}>";
    static final String[] DFA152_transitionS = {
            "\1\17\1\uffff\3\17\3\uffff\2\17\2\uffff\1\17\5\uffff\1\15\2"+
            "\uffff\1\17\1\uffff\3\17\1\uffff\1\6\1\7\2\17\1\10\4\uffff\1"+
            "\17\4\uffff\1\17\1\uffff\2\17\14\uffff\1\11\17\uffff\2\16\4"+
            "\uffff\1\17\3\uffff\1\1\1\2\1\uffff\1\17\1\5\1\uffff\1\4\1\13"+
            "\1\uffff\1\12\1\uffff\1\14\1\uffff\1\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA152_eot = DFA.unpackEncodedString(DFA152_eotS);
    static final short[] DFA152_eof = DFA.unpackEncodedString(DFA152_eofS);
    static final char[] DFA152_min = DFA.unpackEncodedStringToUnsignedChars(DFA152_minS);
    static final char[] DFA152_max = DFA.unpackEncodedStringToUnsignedChars(DFA152_maxS);
    static final short[] DFA152_accept = DFA.unpackEncodedString(DFA152_acceptS);
    static final short[] DFA152_special = DFA.unpackEncodedString(DFA152_specialS);
    static final short[][] DFA152_transition;

    static {
        int numStates = DFA152_transitionS.length;
        DFA152_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA152_transition[i] = DFA.unpackEncodedString(DFA152_transitionS[i]);
        }
    }

    class DFA152 extends DFA {

        public DFA152(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 152;
            this.eot = DFA152_eot;
            this.eof = DFA152_eof;
            this.min = DFA152_min;
            this.max = DFA152_max;
            this.accept = DFA152_accept;
            this.special = DFA152_special;
            this.transition = DFA152_transition;
        }
        public String getDescription() {
            return "604:1: lop_expr : ( ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | op_expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA152_0 = input.LA(1);

                         
                        int index152_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA152_0==Constr) ) {s = 1;}

                        else if ( (LA152_0==Id) ) {s = 2;}

                        else if ( (LA152_0==UNDERSCORE) && (synpred10_babel17())) {s = 3;}

                        else if ( (LA152_0==String) ) {s = 4;}

                        else if ( (LA152_0==Num) ) {s = 5;}

                        else if ( (LA152_0==L_true) ) {s = 6;}

                        else if ( (LA152_0==L_false) ) {s = 7;}

                        else if ( (LA152_0==L_nil) ) {s = 8;}

                        else if ( (LA152_0==MINUS) ) {s = 9;}

                        else if ( (LA152_0==SQUARE_BRACKET_OPEN) ) {s = 10;}

                        else if ( (LA152_0==ROUND_BRACKET_OPEN) ) {s = 11;}

                        else if ( (LA152_0==CURLY_BRACKET_OPEN) ) {s = 12;}

                        else if ( (LA152_0==L_exception) ) {s = 13;}

                        else if ( ((LA152_0>=A_ELLIPSIS && LA152_0<=U_ELLIPSIS)) && (synpred10_babel17())) {s = 14;}

                        else if ( (LA152_0==L_begin||(LA152_0>=L_obj && LA152_0<=L_if)||(LA152_0>=L_while && LA152_0<=L_for)||LA152_0==L_match||LA152_0==L_try||(LA152_0>=L_concurrent && LA152_0<=L_lazy)||(LA152_0>=L_this && LA152_0<=L_random)||LA152_0==L_typeof||LA152_0==L_not||(LA152_0>=L_root && LA152_0<=L_native)||LA152_0==L_force||LA152_0==Float) ) {s = 15;}

                         
                        input.seek(index152_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA152_1 = input.LA(1);

                         
                        int index152_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index152_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA152_2 = input.LA(1);

                         
                        int index152_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index152_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA152_4 = input.LA(1);

                         
                        int index152_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index152_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA152_5 = input.LA(1);

                         
                        int index152_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index152_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA152_6 = input.LA(1);

                         
                        int index152_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index152_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA152_7 = input.LA(1);

                         
                        int index152_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index152_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA152_8 = input.LA(1);

                         
                        int index152_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index152_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA152_9 = input.LA(1);

                         
                        int index152_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index152_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA152_10 = input.LA(1);

                         
                        int index152_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index152_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA152_11 = input.LA(1);

                         
                        int index152_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index152_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA152_12 = input.LA(1);

                         
                        int index152_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index152_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA152_13 = input.LA(1);

                         
                        int index152_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index152_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 152, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA153_eotS =
        "\35\uffff";
    static final String DFA153_eofS =
        "\35\uffff";
    static final String DFA153_minS =
        "\1\107\2\0\1\uffff\12\0\17\uffff";
    static final String DFA153_maxS =
        "\1\u00a7\2\0\1\uffff\12\0\17\uffff";
    static final String DFA153_acceptS =
        "\3\uffff\1\1\12\uffff\1\1\1\2\15\uffff";
    static final String DFA153_specialS =
        "\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\17\uffff}>";
    static final String[] DFA153_transitionS = {
            "\1\17\1\uffff\3\17\3\uffff\2\17\2\uffff\1\17\5\uffff\1\15\2"+
            "\uffff\1\17\1\uffff\3\17\1\uffff\1\6\1\7\2\17\1\10\4\uffff\1"+
            "\17\4\uffff\1\17\1\uffff\2\17\14\uffff\1\11\17\uffff\2\16\4"+
            "\uffff\1\17\3\uffff\1\1\1\2\1\uffff\1\17\1\5\1\uffff\1\4\1\13"+
            "\1\uffff\1\12\1\uffff\1\14\1\uffff\1\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA153_eot = DFA.unpackEncodedString(DFA153_eotS);
    static final short[] DFA153_eof = DFA.unpackEncodedString(DFA153_eofS);
    static final char[] DFA153_min = DFA.unpackEncodedStringToUnsignedChars(DFA153_minS);
    static final char[] DFA153_max = DFA.unpackEncodedStringToUnsignedChars(DFA153_maxS);
    static final short[] DFA153_accept = DFA.unpackEncodedString(DFA153_acceptS);
    static final short[] DFA153_special = DFA.unpackEncodedString(DFA153_specialS);
    static final short[][] DFA153_transition;

    static {
        int numStates = DFA153_transitionS.length;
        DFA153_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA153_transition[i] = DFA.unpackEncodedString(DFA153_transitionS[i]);
        }
    }

    class DFA153 extends DFA {

        public DFA153(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 153;
            this.eot = DFA153_eot;
            this.eof = DFA153_eof;
            this.min = DFA153_min;
            this.max = DFA153_max;
            this.accept = DFA153_accept;
            this.special = DFA153_special;
            this.transition = DFA153_transition;
        }
        public String getDescription() {
            return "609:1: p_lop_expr : ( ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | p_op_expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA153_0 = input.LA(1);

                         
                        int index153_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA153_0==Constr) ) {s = 1;}

                        else if ( (LA153_0==Id) ) {s = 2;}

                        else if ( (LA153_0==UNDERSCORE) && (synpred11_babel17())) {s = 3;}

                        else if ( (LA153_0==String) ) {s = 4;}

                        else if ( (LA153_0==Num) ) {s = 5;}

                        else if ( (LA153_0==L_true) ) {s = 6;}

                        else if ( (LA153_0==L_false) ) {s = 7;}

                        else if ( (LA153_0==L_nil) ) {s = 8;}

                        else if ( (LA153_0==MINUS) ) {s = 9;}

                        else if ( (LA153_0==SQUARE_BRACKET_OPEN) ) {s = 10;}

                        else if ( (LA153_0==ROUND_BRACKET_OPEN) ) {s = 11;}

                        else if ( (LA153_0==CURLY_BRACKET_OPEN) ) {s = 12;}

                        else if ( (LA153_0==L_exception) ) {s = 13;}

                        else if ( ((LA153_0>=A_ELLIPSIS && LA153_0<=U_ELLIPSIS)) && (synpred11_babel17())) {s = 14;}

                        else if ( (LA153_0==L_begin||(LA153_0>=L_obj && LA153_0<=L_if)||(LA153_0>=L_while && LA153_0<=L_for)||LA153_0==L_match||LA153_0==L_try||(LA153_0>=L_concurrent && LA153_0<=L_lazy)||(LA153_0>=L_this && LA153_0<=L_random)||LA153_0==L_typeof||LA153_0==L_not||(LA153_0>=L_root && LA153_0<=L_native)||LA153_0==L_force||LA153_0==Float) ) {s = 15;}

                         
                        input.seek(index153_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA153_1 = input.LA(1);

                         
                        int index153_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index153_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA153_2 = input.LA(1);

                         
                        int index153_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index153_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA153_4 = input.LA(1);

                         
                        int index153_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index153_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA153_5 = input.LA(1);

                         
                        int index153_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index153_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA153_6 = input.LA(1);

                         
                        int index153_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index153_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA153_7 = input.LA(1);

                         
                        int index153_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index153_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA153_8 = input.LA(1);

                         
                        int index153_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index153_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA153_9 = input.LA(1);

                         
                        int index153_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index153_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA153_10 = input.LA(1);

                         
                        int index153_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index153_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA153_11 = input.LA(1);

                         
                        int index153_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index153_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA153_12 = input.LA(1);

                         
                        int index153_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index153_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA153_13 = input.LA(1);

                         
                        int index153_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index153_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 153, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA322_eotS =
        "\30\uffff";
    static final String DFA322_eofS =
        "\30\uffff";
    static final String DFA322_minS =
        "\1\107\12\uffff\1\0\14\uffff";
    static final String DFA322_maxS =
        "\1\u00a5\12\uffff\1\0\14\uffff";
    static final String DFA322_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\uffff\1\15"+
        "\1\16\1\17\6\uffff\1\20\1\13\1\14";
    static final String DFA322_specialS =
        "\13\uffff\1\0\14\uffff}>";
    static final String[] DFA322_transitionS = {
            "\1\16\1\uffff\1\14\2\16\3\uffff\2\16\2\uffff\1\16\10\uffff\1"+
            "\16\5\uffff\1\6\1\7\1\10\1\uffff\1\11\13\uffff\1\12\47\uffff"+
            "\1\5\1\4\1\uffff\1\2\1\1\1\uffff\1\3\1\13\1\uffff\1\15\1\uffff"+
            "\1\25",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA322_eot = DFA.unpackEncodedString(DFA322_eotS);
    static final short[] DFA322_eof = DFA.unpackEncodedString(DFA322_eofS);
    static final char[] DFA322_min = DFA.unpackEncodedStringToUnsignedChars(DFA322_minS);
    static final char[] DFA322_max = DFA.unpackEncodedStringToUnsignedChars(DFA322_maxS);
    static final short[] DFA322_accept = DFA.unpackEncodedString(DFA322_acceptS);
    static final short[] DFA322_special = DFA.unpackEncodedString(DFA322_specialS);
    static final short[][] DFA322_transition;

    static {
        int numStates = DFA322_transitionS.length;
        DFA322_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA322_transition[i] = DFA.unpackEncodedString(DFA322_transitionS[i]);
        }
    }

    class DFA322 extends DFA {

        public DFA322(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 322;
            this.eot = DFA322_eot;
            this.eof = DFA322_eof;
            this.min = DFA322_min;
            this.max = DFA322_max;
            this.accept = DFA322_accept;
            this.special = DFA322_special;
            this.transition = DFA322_transition;
        }
        public String getDescription() {
            return "820:1: primitive_expr : ( Num | Float | String | Id | Constr | L_true | L_false | L_this | L_nil | L_root | ( type_expr )=> type_expr | ( lambda_expr )=> lambda_expr | obj_expr | list_expr | with_control_expr | map_or_set_expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA322_11 = input.LA(1);

                         
                        int index322_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_babel17()) ) {s = 22;}

                        else if ( (synpred14_babel17()) ) {s = 23;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index322_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 322, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_block_in_prog260 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_prog262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_EQUAL0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_NOT_EQUAL0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_LESS_EQ0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_GREATER_EQ0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_or_in_token_OR1086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_and_in_token_AND1094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_not_in_token_NOT1102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_DOUBLE_COLON0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_DOUBLE_ARROW0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_ARROW0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_ELLIPSIS0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_typeid1752 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_NL_in_typeid1755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_PERIOD_in_typeid1758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_typeid1760 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Id_in_typeid1763 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_typeid_in_typeannotation1783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_typeannotation1788 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_protected_expr_in_typeannotation1790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_typeannotation1792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Constr_in_pattern1809 = new BitSet(new long[]{0x0000000000000002L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_pattern1812 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4C030001L});
    public static final BitSet FOLLOW_pattern_in_pattern1815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitive_pattern_in_pattern1831 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_NL_in_pattern1834 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_token_DOUBLE_COLON_in_pattern1837 = new BitSet(new long[]{0x0000000000000000L,0x0000004C00000000L,0x000000AB4A000001L});
    public static final BitSet FOLLOW_NL_in_pattern1839 = new BitSet(new long[]{0x0000000000000000L,0x0000004C00000000L,0x000000AB48000001L});
    public static final BitSet FOLLOW_primitive_pattern_in_pattern1842 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_L_exception_in_pattern1861 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_pattern1863 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4C030001L});
    public static final BitSet FOLLOW_pattern_in_pattern1866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_ELLIPSIS_in_pattern1879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitive_pattern_in_defpattern1889 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_NL_in_defpattern1892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_token_DOUBLE_COLON_in_defpattern1895 = new BitSet(new long[]{0x0000000000000000L,0x0000004C00000000L,0x000000AB4A000001L});
    public static final BitSet FOLLOW_NL_in_defpattern1897 = new BitSet(new long[]{0x0000000000000000L,0x0000004C00000000L,0x000000AB48000001L});
    public static final BitSet FOLLOW_primitive_pattern_in_defpattern1900 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_Constr_in_defpattern1918 = new BitSet(new long[]{0x0000000000000002L,0x0000004C00000000L,0x000000AB4C000001L});
    public static final BitSet FOLLOW_defpattern_in_defpattern1920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bracket_pattern_in_casepattern1939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_bracket_pattern1966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern1968 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_L_as_in_bracket_pattern1971 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern1973 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4C030001L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern1976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_bracket_pattern2005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002100000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_QUESTION_MARK_in_bracket_pattern2010 = new BitSet(new long[]{0x0000000000000002L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2013 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4C030001L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_bracket_pattern2048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002200000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_EXCLAMATION_MARK_in_bracket_pattern2053 = new BitSet(new long[]{0x0000000000000002L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2056 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4C030001L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_bracket_pattern2085 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4C030001L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_val_in_bracket_pattern2102 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2104 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_bracket_pattern2107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_for_in_bracket_pattern2126 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498F80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2128 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498F80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_bracket_pattern_in_bracket_pattern2132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000002040000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_bracket_pattern2139 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2141 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_bracket_pattern_in_bracket_pattern2144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000002040000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_bracket_pattern2154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_L_if_in_bracket_pattern2184 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2186 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_bracket_pattern2189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010002000000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLON_in_bracket_pattern2220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000020A000000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000020A000000L});
    public static final BitSet FOLLOW_typeannotation_in_bracket_pattern2225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_ARROW_in_arrow_or_assign2250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGN_in_arrow_or_assign2261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bracket_pattern_in_mselem_pattern2276 = new BitSet(new long[]{0x0000000200000002L,0x0000000000000000L,0x000000000200C000L});
    public static final BitSet FOLLOW_NL_in_mselem_pattern2279 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x000000000200C000L});
    public static final BitSet FOLLOW_arrow_or_assign_in_mselem_pattern2282 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_mselem_pattern2284 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_bracket_pattern_in_mselem_pattern2287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_primitive_pattern2316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNDERSCORE_in_primitive_pattern2321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_String_in_primitive_pattern2330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Num_in_primitive_pattern2335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_true_in_primitive_pattern2340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_false_in_primitive_pattern2345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_nil_in_primitive_pattern2350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_primitive_pattern2358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000042000000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_Num_in_primitive_pattern2363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_OPEN_in_primitive_pattern2376 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000BB6E430001L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2379 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000BB6C430001L});
    public static final BitSet FOLLOW_bracket_pattern_in_primitive_pattern2383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001002040000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000040000L});
    public static final BitSet FOLLOW_COMMA_in_primitive_pattern2390 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2392 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_bracket_pattern_in_primitive_pattern2395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001002040000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000040000L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_CLOSE_in_primitive_pattern2405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_primitive_pattern2425 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AF6E430001L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2428 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AF6C430001L});
    public static final BitSet FOLLOW_bracket_pattern_in_primitive_pattern2432 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000402040000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400040000L});
    public static final BitSet FOLLOW_COMMA_in_primitive_pattern2439 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2442 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_bracket_pattern_in_primitive_pattern2445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000402040000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400040000L});
    public static final BitSet FOLLOW_COMMA_in_primitive_pattern2453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000402000000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_primitive_pattern2462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_primitive_pattern2494 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000EB6E430001L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2497 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000EB6C430001L});
    public static final BitSet FOLLOW_mselem_pattern_in_primitive_pattern2501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004002040000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000040000L});
    public static final BitSet FOLLOW_COMMA_in_primitive_pattern2508 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2511 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_mselem_pattern_in_primitive_pattern2514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004002040000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000040000L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_primitive_pattern2524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_primitive_pattern2542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000200C000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_token_ARROW_in_primitive_pattern2547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004002000000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_primitive_pattern2552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_sep2568 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_sep_in_block2584 = new BitSet(new long[]{0x0000000000000000L,0x000D3E7FD2CD8E80L,0x00003EAB6C430001L});
    public static final BitSet FOLLOW_statement_in_block2587 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_sep_in_block2590 = new BitSet(new long[]{0x0000000000000000L,0x000D3E7FD2CD8E80L,0x00003EAB6C430001L});
    public static final BitSet FOLLOW_statement_in_block2592 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_sep_in_block2596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sep_in_block2612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_pure_block2629 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_sep_in_pure_block2632 = new BitSet(new long[]{0x0000000000000000L,0x000D3E7FD2CD8E80L,0x00003EAB6C430001L});
    public static final BitSet FOLLOW_statement_in_pure_block2634 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_st_typedef_in_statement2655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_val_in_statement2666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_def_in_statement2671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_yield_in_statement2676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_memoize_in_statement2681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_private_in_statement2686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_module_in_statement2691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_import_in_statement2696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_assign_in_statement2701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_PRINT_in_statement2707 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_statement2709 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_statement2712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_LOG_in_statement2726 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_statement2728 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_statement2731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_PROFILE_in_statement2745 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_statement2747 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_statement2750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_ASSERT_in_statement2764 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_statement2766 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_statement2769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_CATCH_in_statement2782 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_statement2784 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_casepattern_in_statement2787 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_statement2789 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_L_try_in_statement2792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010002000000L});
    public static final BitSet FOLLOW_NL_in_statement2794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLON_in_statement2797 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_statement2799 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_statement2802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_objelem_assign2822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_PERIOD_in_objelem_assign2824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Id_in_objelem_assign2826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_val_in_st_val2845 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_st_val2847 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4C030001L});
    public static final BitSet FOLLOW_pattern_in_st_val2851 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_objelem_assign_in_st_val2855 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_st_val2858 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_st_val2861 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_st_val2863 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_st_val2866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_def_in_st_def2890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_st_def2892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Id_in_st_def2895 = new BitSet(new long[]{0x0000000200000000L,0x0000004C00000000L,0x000001AB4E000001L});
    public static final BitSet FOLLOW_NL_in_st_def2897 = new BitSet(new long[]{0x0000000200000000L,0x0000004C00000000L,0x000001AB4C000001L});
    public static final BitSet FOLLOW_defpattern_in_st_def2901 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000010002000000L});
    public static final BitSet FOLLOW_NL_in_st_def2903 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLON_in_st_def2909 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_st_def2911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_typeid_in_st_def2914 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_st_def2916 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_st_def2921 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_st_def2923 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_st_def2926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_def_in_st_def2952 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_st_def2954 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_L_this_in_st_def2957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010002000000L});
    public static final BitSet FOLLOW_NL_in_st_def2959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLON_in_st_def2962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_st_def2964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_typeid_in_st_def2967 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_st_def2969 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_st_def2972 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_st_def2974 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_st_def2977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_typedef_in_st_typedef3000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_st_typedef3002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Id_in_st_typedef3005 = new BitSet(new long[]{0x0000000000000000L,0x0000004C00000000L,0x000000AB4E000001L});
    public static final BitSet FOLLOW_NL_in_st_typedef3007 = new BitSet(new long[]{0x0000000000000000L,0x0000004C00000000L,0x000000AB4E000001L});
    public static final BitSet FOLLOW_typedef_clause_in_st_typedef3010 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002040000L});
    public static final BitSet FOLLOW_NL_in_st_typedef3013 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_st_typedef3016 = new BitSet(new long[]{0x0000000000000000L,0x0000004C00000000L,0x000000AB4E000001L});
    public static final BitSet FOLLOW_NL_in_st_typedef3018 = new BitSet(new long[]{0x0000000000000000L,0x0000004C00000000L,0x000000AB4E000001L});
    public static final BitSet FOLLOW_typedef_clause_in_st_typedef3021 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002040000L});
    public static final BitSet FOLLOW_defpattern_in_typedef_clause3059 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_typedef_clause3061 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_typedef_clause3064 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_typedef_clause3066 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_typedef_clause3069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defpattern_in_typedef_clause3084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_yield_in_st_yield3103 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_st_yield3105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_memoize_in_st_memoize3126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000208000000L});
    public static final BitSet FOLLOW_memo_id_in_st_memoize3128 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002040000L});
    public static final BitSet FOLLOW_NL_in_st_memoize3131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_st_memoize3134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000020A000000L});
    public static final BitSet FOLLOW_NL_in_st_memoize3136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000208000000L});
    public static final BitSet FOLLOW_memo_id_in_st_memoize3139 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002040000L});
    public static final BitSet FOLLOW_Id_in_memo_id3168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_memo_id3181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Id_in_memo_id3183 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_memo_id3185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_private_in_st_private3202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_private_id_in_st_private3204 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002040000L});
    public static final BitSet FOLLOW_NL_in_st_private3207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_st_private3210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_st_private3212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_private_id_in_st_private3215 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002040000L});
    public static final BitSet FOLLOW_Id_in_private_id3241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_testid0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_moduleid3274 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_NL_in_moduleid3277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_PERIOD_in_moduleid3280 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_moduleid3282 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_testid_in_moduleid3285 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_L_module_in_st_module3308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_st_module3310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_moduleid_in_st_module3313 = new BitSet(new long[]{0x0000000000000000L,0x400D7E7FD2CD8F80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_block_in_st_module3315 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000100L});
    public static final BitSet FOLLOW_L_unittest_in_st_module3318 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8F80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_block_in_st_module3320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_st_module3324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_root_in_importprefix3351 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_testid_in_importprefix3355 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_NL_in_importprefix3359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_PERIOD_in_importprefix3362 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_importprefix3364 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_testid_in_importprefix3367 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_UNDERSCORE_in_importall3392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_testid_in_importsetclause3408 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_NL_in_importsetclause3411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_importsetclause3414 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_importsetclause3417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Id_in_importsetclause3420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_importsetclause3440 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_importsetclause3442 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_testid_in_importsetclause3445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importall_in_importsetclause3458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_importset3468 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000800A000001L});
    public static final BitSet FOLLOW_NL_in_importset3470 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000800A000001L});
    public static final BitSet FOLLOW_importsetclause_in_importset3473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004002040000L});
    public static final BitSet FOLLOW_NL_in_importset3476 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_importset3479 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000800A000001L});
    public static final BitSet FOLLOW_NL_in_importset3481 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000800A000001L});
    public static final BitSet FOLLOW_importsetclause_in_importset3484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004002040000L});
    public static final BitSet FOLLOW_NL_in_importset3488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_importset3491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_import_in_st_import3509 = new BitSet(new long[]{0x0000000000000000L,0x0004400000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_st_import3511 = new BitSet(new long[]{0x0000000000000000L,0x0004400000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_importprefix_in_st_import3514 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002083000L});
    public static final BitSet FOLLOW_NL_in_st_import3517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002083000L});
    public static final BitSet FOLLOW_PERIOD_in_st_import3521 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000800A000001L});
    public static final BitSet FOLLOW_NL_in_st_import3523 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000800A000001L});
    public static final BitSet FOLLOW_importall_in_st_import3526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERIOD_in_st_import3530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002002000000L});
    public static final BitSet FOLLOW_NL_in_st_import3532 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002002000000L});
    public static final BitSet FOLLOW_importset_in_st_import3535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_st_import3539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_st_import3541 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Id_in_st_import3544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_expr_or_assign3592 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_objelem_assign_in_expr_or_assign3596 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_expr_or_assign3599 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_expr_or_assign3602 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_expr_or_assign3604 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_expr_or_assign3607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_expr_or_assign3626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lop_expr_in_expr3637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_expr_in_control_expr3649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_do_expr_in_control_expr3654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_match_expr_in_control_expr3659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_expr_in_control_expr3664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_expr_in_control_expr3670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_begin_end_in_control_expr3675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_control_expr_in_with_control_expr3685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_with_in_with_control_expr3690 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_with_control_expr3692 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_protected_expr_in_with_control_expr3695 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_with_control_expr3697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_L_do_in_with_control_expr3700 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8F80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_block_in_with_control_expr3702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_with_control_expr3704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_lop_expr_in_protected_expr3729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_protected_expr_nc3742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_begin_in_begin_end3752 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8F80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_block_in_begin_end3754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_begin_end3756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_parents3774 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_primitive_expr_in_parents3776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMES_in_parents3789 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_primitive_expr_in_parents3791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_obj_in_obj_expr3819 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000002000002L});
    public static final BitSet FOLLOW_NL_in_obj_expr3821 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000002000002L});
    public static final BitSet FOLLOW_parents_in_obj_expr3824 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8F80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_block_in_obj_expr3826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_obj_expr3828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_obj_in_obj_expr3856 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8F80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_block_in_obj_expr3858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_obj_expr3860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_nobrackets_in_lop_expr3890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_expr_in_lop_expr3895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_nobrackets_in_p_lop_expr3913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_op_expr_in_p_lop_expr3918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_if_in_if_expr3928 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_if_expr3930 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_protected_expr_in_if_expr3933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_if_expr3935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_L_then_in_if_expr3938 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CDEF80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_block_in_if_expr3940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000006100L});
    public static final BitSet FOLLOW_L_elseif_in_if_expr3946 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_if_expr3948 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_protected_expr_in_if_expr3951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_if_expr3953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_L_then_in_if_expr3956 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CDEF80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_block_in_if_expr3958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000006100L});
    public static final BitSet FOLLOW_L_else_in_if_expr3966 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8F80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_block_in_if_expr3968 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_if_expr3972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_while_in_while_do_expr3996 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_while_do_expr3998 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_protected_expr_in_while_do_expr4001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_while_do_expr4003 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_L_do_in_while_do_expr4006 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8F80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_block_in_while_do_expr4008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_while_do_expr4010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_cases_in_cases4040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_cases4045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_NL_in_cases4047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_cases4050 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8E80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_block_in_cases4052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_expr_in_full_cases4075 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_L_case_in_case_expr4096 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_case_expr4098 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_casepattern_in_case_expr4101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_NL_in_case_expr4103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_case_expr4106 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8E80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_block_in_case_expr4108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_match_in_match_expr4129 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_match_expr4131 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_op_expr_in_match_expr4134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_match_expr4136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000002000000L});
    public static final BitSet FOLLOW_full_cases_in_match_expr4139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_match_expr4141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_try_in_try_expr4167 = new BitSet(new long[]{0x0000000000000000L,0x000D3E7FD2CD8E80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_NL_in_try_expr4169 = new BitSet(new long[]{0x0000000000000000L,0x000D3E7FD2CD8E80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_pure_block_in_try_expr4172 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_try_expr4174 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_L_catch_in_try_expr4177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_try_expr4179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000002000000L});
    public static final BitSet FOLLOW_full_cases_in_try_expr4182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_try_expr4184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_lambda_expr4208 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02100000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_lambda_expr4210 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02100000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_lambda_cases_in_lambda_expr4213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000402000000L});
    public static final BitSet FOLLOW_NL_in_lambda_expr4215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_lambda_expr4218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_cases_nobrackets_in_lambda_expr_nobrackets4237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_lambda_cases_nobrackets4255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_NL_in_lambda_cases_nobrackets4257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_lambda_cases_nobrackets4260 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_lambda_cases_nobrackets4262 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_lop_expr_in_lambda_cases_nobrackets4265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_case_in_lambda_case_expr4293 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_lambda_case_expr4295 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_casepattern_in_lambda_case_expr4298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_NL_in_lambda_case_expr4300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_lambda_case_expr4303 = new BitSet(new long[]{0x0000000000000000L,0x000D3E7FD2CD8E80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_NL_in_lambda_case_expr4305 = new BitSet(new long[]{0x0000000000000000L,0x000D3E7FD2CD8E80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_pure_block_in_lambda_case_expr4308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_lambda_cases4329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_NL_in_lambda_cases4331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_lambda_cases4334 = new BitSet(new long[]{0x0000000000000000L,0x000D3E7FD2CD8E80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_NL_in_lambda_cases4336 = new BitSet(new long[]{0x0000000000000000L,0x000D3E7FD2CD8E80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_pure_block_in_lambda_cases4339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_case_expr_in_lambda_cases4358 = new BitSet(new long[]{0x0000000000000002L,0x0000004C02100000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_lambda_cases4361 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02100000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_lambda_case_expr_in_lambda_cases4364 = new BitSet(new long[]{0x0000000000000002L,0x0000004C02100000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_L_for_in_for_expr4382 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_for_expr4384 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4C030001L});
    public static final BitSet FOLLOW_pattern_in_for_expr4387 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_for_expr4389 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_L_in_in_for_expr4392 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_for_expr4394 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_protected_expr_in_for_expr4397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_for_expr4399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_L_do_in_for_expr4402 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8F80L,0x00003EAB6E430001L});
    public static final BitSet FOLLOW_block_in_for_expr4404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_for_expr4406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtin_primitive_in_op_expr4435 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_op_expr_in_op_expr4438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bool_expr_in_op_expr4443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtin_primitive_in_p_op_expr4453 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_op_expr4456 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_op_expr_in_p_op_expr4460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_bool_expr_in_p_op_expr4465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_builtin_primitive0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bool_or_expr_in_bool_expr4496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_bool_or_expr_in_p_bool_expr4506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bool_and_expr_in_bool_or_expr4515 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_bool_or_expr4518 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_token_OR_in_bool_or_expr4522 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_bool_or_expr4525 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_bool_and_expr_in_bool_or_expr4529 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_p_bool_and_expr_in_p_bool_or_expr4541 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_p_bool_or_expr4544 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_token_OR_in_p_bool_or_expr4548 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_bool_or_expr4551 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_bool_and_expr_in_p_bool_or_expr4555 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_bool_not_expr_in_bool_and_expr4567 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_bool_and_expr4570 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_token_AND_in_bool_and_expr4574 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_bool_and_expr4577 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_bool_not_expr_in_bool_and_expr4581 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_p_bool_not_expr_in_p_bool_and_expr4593 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_p_bool_and_expr4596 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_token_AND_in_p_bool_and_expr4600 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_bool_and_expr4603 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_bool_not_expr_in_p_bool_and_expr4607 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_token_NOT_in_bool_not_expr4619 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_bool_not_expr4622 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_bool_not_expr_in_bool_not_expr4626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_expr_in_bool_not_expr4631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_NOT_in_p_bool_not_expr4642 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_bool_not_expr4645 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_bool_not_expr_in_p_bool_not_expr4649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_rel_expr_in_p_bool_not_expr4654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relate_expr_in_rel_expr4664 = new BitSet(new long[]{0x0000000000000002L,0x3FF0000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_rel_expr4667 = new BitSet(new long[]{0x0000000000000000L,0x3FF0000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_rel_op_in_rel_expr4670 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_rel_expr4672 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_relate_expr_in_rel_expr4675 = new BitSet(new long[]{0x0000000000000002L,0x3FF0000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_p_relate_expr_in_p_rel_expr4702 = new BitSet(new long[]{0x0000000000000002L,0x3FF0000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_p_rel_expr4705 = new BitSet(new long[]{0x0000000000000000L,0x3FF0000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_rel_op_in_p_rel_expr4708 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_rel_expr4710 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_relate_expr_in_p_rel_expr4713 = new BitSet(new long[]{0x0000000000000002L,0x3FF0000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_token_EQUAL_in_rel_op4739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_NOT_EQUAL_in_rel_op4743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_in_rel_op4747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_GREATER_EQ_in_rel_op4751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_in_rel_op4755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_LESS_EQ_in_rel_op4759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_convert_expr_in_relate_expr4768 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000010L});
    public static final BitSet FOLLOW_NL_in_relate_expr4771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_TOK_RELATE_in_relate_expr4774 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_relate_expr4776 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_convert_expr_in_relate_expr4779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_convert_expr_in_p_relate_expr4798 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000010L});
    public static final BitSet FOLLOW_NL_in_p_relate_expr4801 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_TOK_RELATE_in_p_relate_expr4804 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_relate_expr4806 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_convert_expr_in_p_relate_expr4809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_expr_in_convert_expr4830 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000020L});
    public static final BitSet FOLLOW_NL_in_convert_expr4833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_TOK_CONVERT_in_convert_expr4836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000020A000000L});
    public static final BitSet FOLLOW_NL_in_convert_expr4838 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000020A000000L});
    public static final BitSet FOLLOW_typeannotation_in_convert_expr4841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_term_expr_in_p_convert_expr4863 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000020L});
    public static final BitSet FOLLOW_NL_in_p_convert_expr4866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_TOK_CONVERT_in_p_convert_expr4869 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000020A000000L});
    public static final BitSet FOLLOW_NL_in_p_convert_expr4871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000020A000000L});
    public static final BitSet FOLLOW_typeannotation_in_p_convert_expr4874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtin_fun_in_term_expr4897 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_term_expr_in_term_expr4900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arith_expr_in_term_expr4905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtin_fun_in_p_term_expr4915 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_term_expr4918 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_term_expr_in_p_term_expr4922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_arith_expr_in_p_term_expr4927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_builtin_fun0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plusplus_expr_in_arith_expr4957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_plusplus_expr_in_p_arith_expr4966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timestimes_expr_in_plusplus_expr4976 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000C00L});
    public static final BitSet FOLLOW_NL_in_plusplus_expr4979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000C00L});
    public static final BitSet FOLLOW_PLUSPLUS_in_plusplus_expr4984 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_MINUSMINUS_in_plusplus_expr4987 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_plusplus_expr4991 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_timestimes_expr_in_plusplus_expr4995 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000C00L});
    public static final BitSet FOLLOW_p_timestimes_expr_in_p_plusplus_expr5007 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000C00L});
    public static final BitSet FOLLOW_NL_in_p_plusplus_expr5010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000C00L});
    public static final BitSet FOLLOW_PLUSPLUS_in_p_plusplus_expr5015 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_MINUSMINUS_in_p_plusplus_expr5018 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_plusplus_expr5022 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_timestimes_expr_in_p_plusplus_expr5026 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000C00L});
    public static final BitSet FOLLOW_simple_expr_in_timestimes_expr5038 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000300L});
    public static final BitSet FOLLOW_NL_in_timestimes_expr5041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000300L});
    public static final BitSet FOLLOW_TIMESTIMES_in_timestimes_expr5046 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_QUOTIENTQUOTIENT_in_timestimes_expr5049 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_timestimes_expr5053 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_simple_expr_in_timestimes_expr5057 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000300L});
    public static final BitSet FOLLOW_p_simple_expr_in_p_timestimes_expr5070 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000300L});
    public static final BitSet FOLLOW_NL_in_p_timestimes_expr5073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000300L});
    public static final BitSet FOLLOW_TIMESTIMES_in_p_timestimes_expr5078 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_QUOTIENTQUOTIENT_in_p_timestimes_expr5081 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_timestimes_expr5085 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_simple_expr_in_p_timestimes_expr5089 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000300L});
    public static final BitSet FOLLOW_cons_expr_in_simple_expr5100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_cons_expr_in_p_simple_expr5109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_expr_in_cons_expr5118 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_NL_in_cons_expr5121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_token_DOUBLE_COLON_in_cons_expr5124 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_cons_expr5126 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_to_expr_in_cons_expr5129 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_p_to_expr_in_p_cons_expr5149 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_NL_in_p_cons_expr5152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_token_DOUBLE_COLON_in_p_cons_expr5155 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_cons_expr5157 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_to_expr_in_p_cons_expr5160 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_arith_plus_expr_in_to_expr5180 = new BitSet(new long[]{0x0000000000000002L,0x000000000C000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_to_expr5183 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_L_to_in_to_expr5188 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_L_downto_in_to_expr5192 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_to_expr5196 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_arith_plus_expr_in_to_expr5200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_arith_plus_expr_in_p_to_expr5213 = new BitSet(new long[]{0x0000000000000002L,0x000000000C000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_p_to_expr5216 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_L_to_in_p_to_expr5221 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_L_downto_in_p_to_expr5225 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_to_expr5229 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_arith_plus_expr_in_p_to_expr5233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arith_uminus_expr_in_arith_plus_expr5245 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000002000001L});
    public static final BitSet FOLLOW_NL_in_arith_plus_expr5249 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_PLUS_in_arith_plus_expr5253 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_MINUS_in_arith_plus_expr5258 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_arith_plus_expr5262 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_arith_uminus_expr_in_arith_plus_expr5266 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000002000001L});
    public static final BitSet FOLLOW_p_arith_uminus_expr_in_p_arith_plus_expr5277 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000002000001L});
    public static final BitSet FOLLOW_NL_in_p_arith_plus_expr5280 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_set_in_p_arith_plus_expr5284 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_arith_plus_expr5293 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_arith_uminus_expr_in_p_arith_plus_expr5297 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000002000001L});
    public static final BitSet FOLLOW_MINUS_in_arith_uminus_expr5310 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_arith_uminus_expr5312 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_arith_mult_expr_in_arith_uminus_expr5315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arith_mult_expr_in_arith_uminus_expr5328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_p_arith_uminus_expr5339 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_arith_uminus_expr5341 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_arith_mult_expr_in_p_arith_uminus_expr5344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_arith_mult_expr_in_p_arith_uminus_expr5357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arith_pow_expr_in_arith_mult_expr5366 = new BitSet(new long[]{0x0000000000000002L,0x0000018000000000L,0x0000000002000006L});
    public static final BitSet FOLLOW_NL_in_arith_mult_expr5369 = new BitSet(new long[]{0x0000000000000000L,0x0000018000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_set_in_arith_mult_expr5373 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_arith_mult_expr5390 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_arith_pow_expr_in_arith_mult_expr5394 = new BitSet(new long[]{0x0000000000000002L,0x0000018000000000L,0x0000000002000006L});
    public static final BitSet FOLLOW_p_arith_pow_expr_in_p_arith_mult_expr5406 = new BitSet(new long[]{0x0000000000000002L,0x0000018000000000L,0x0000000002000006L});
    public static final BitSet FOLLOW_NL_in_p_arith_mult_expr5409 = new BitSet(new long[]{0x0000000000000000L,0x0000018000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_set_in_p_arith_mult_expr5413 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_arith_mult_expr5430 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_arith_pow_expr_in_p_arith_mult_expr5434 = new BitSet(new long[]{0x0000000000000002L,0x0000018000000000L,0x0000000002000006L});
    public static final BitSet FOLLOW_apply_expr_in_arith_pow_expr5445 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000008L});
    public static final BitSet FOLLOW_NL_in_arith_pow_expr5448 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_POW_tok_in_arith_pow_expr5451 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_arith_pow_expr5453 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_apply_expr_in_arith_pow_expr5456 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000008L});
    public static final BitSet FOLLOW_p_apply_expr_in_p_arith_pow_expr5477 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000008L});
    public static final BitSet FOLLOW_NL_in_p_arith_pow_expr5480 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_POW_tok_in_p_arith_pow_expr5483 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_arith_pow_expr5485 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_apply_expr_in_p_arith_pow_expr5488 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000008L});
    public static final BitSet FOLLOW_basic_expr_in_apply_expr5509 = new BitSet(new long[]{0x0000000000000002L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_basic_expr_in_p_apply_expr5527 = new BitSet(new long[]{0x0000000000000002L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_apply_expr5530 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_basic_expr_in_p_apply_expr5533 = new BitSet(new long[]{0x0000000000000002L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_message_send_expr_in_basic_expr5553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_message_send_expr_in_p_basic_expr5562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitive_expr_in_message_send_expr5571 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_NL_in_message_send_expr5574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_PERIOD_in_message_send_expr5577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_message_send_expr5579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Id_in_message_send_expr5582 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_OPEN_in_list_expr5622 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_list_expr5624 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5627 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_list_expr5629 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_SC_in_list_expr5632 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_list_expr5634 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001002000000L});
    public static final BitSet FOLLOW_NL_in_list_expr5639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_CLOSE_in_list_expr5642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_OPEN_in_list_expr5656 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000BB6E430001L});
    public static final BitSet FOLLOW_NL_in_list_expr5658 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000BB6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001002040000L});
    public static final BitSet FOLLOW_NL_in_list_expr5665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_list_expr5668 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_list_expr5670 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001002040000L});
    public static final BitSet FOLLOW_NL_in_list_expr5677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_CLOSE_in_list_expr5682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_list_expr5696 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AF6E430001L});
    public static final BitSet FOLLOW_NL_in_list_expr5698 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AF6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000402040000L});
    public static final BitSet FOLLOW_NL_in_list_expr5705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_list_expr5708 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_list_expr5710 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000402040000L});
    public static final BitSet FOLLOW_NL_in_list_expr5717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400040000L});
    public static final BitSet FOLLOW_COMMA_in_list_expr5721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000402000000L});
    public static final BitSet FOLLOW_NL_in_list_expr5723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_list_expr5730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_map_or_set_expr5759 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000EB6E430001L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr5761 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000EB6E430001L});
    public static final BitSet FOLLOW_map_or_set_elem_expr_in_map_or_set_expr5765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004002040000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr5767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000040000L});
    public static final BitSet FOLLOW_COMMA_in_map_or_set_expr5771 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr5773 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_map_or_set_elem_expr_in_map_or_set_expr5776 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004002040000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr5778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000040000L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_map_or_set_expr5785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_map_or_set_expr5805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000200C000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr5807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_token_ARROW_in_map_or_set_expr5810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004002000000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr5812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_map_or_set_expr5815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_nc_in_map_or_set_elem_expr5832 = new BitSet(new long[]{0x0000000200000002L,0x0000000000000000L,0x000000000200C000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_elem_expr5835 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x000000000200C000L});
    public static final BitSet FOLLOW_arrow_or_assign_in_map_or_set_elem_expr5838 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_map_or_set_elem_expr5840 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_map_or_set_elem_expr5843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_type_expr5870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010002000000L});
    public static final BitSet FOLLOW_NL_in_type_expr5872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLON_in_type_expr5875 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_type_expr5877 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_typeid_in_type_expr5880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000402000000L});
    public static final BitSet FOLLOW_NL_in_type_expr5882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_type_expr5885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Num_in_primitive_expr5903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Float_in_primitive_expr5908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_String_in_primitive_expr5913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_primitive_expr5918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Constr_in_primitive_expr5923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_true_in_primitive_expr5928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_false_in_primitive_expr5933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_this_in_primitive_expr5938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_nil_in_primitive_expr5944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_root_in_primitive_expr5949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_expr_in_primitive_expr5960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_in_primitive_expr5971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_obj_expr_in_primitive_expr5976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_list_expr_in_primitive_expr5982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_control_expr_in_primitive_expr5987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_or_set_expr_in_primitive_expr5992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_synpred1_babel171956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_synpred1_babel171958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_L_as_in_synpred1_babel171961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_synpred2_babel171992 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002100000L});
    public static final BitSet FOLLOW_NL_in_synpred2_babel171994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_QUESTION_MARK_in_synpred2_babel171997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_synpred3_babel172035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002200000L});
    public static final BitSet FOLLOW_NL_in_synpred3_babel172037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_EXCLAMATION_MARK_in_synpred3_babel172040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_synpred4_babel172078 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4C030001L});
    public static final BitSet FOLLOW_pattern_in_synpred4_babel172080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_synpred5_babel172169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_synpred5_babel172171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_L_if_in_synpred5_babel172174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_synpred6_babel172205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010002000000L});
    public static final BitSet FOLLOW_NL_in_synpred6_babel172207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLON_in_synpred6_babel172210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defpattern_in_synpred7_babel173049 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_synpred7_babel173051 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred7_babel173054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_synpred8_babel173576 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_objelem_assign_in_synpred8_babel173580 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_synpred8_babel173583 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred8_babel173586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_obj_in_synpred9_babel173809 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000002000002L});
    public static final BitSet FOLLOW_NL_in_synpred9_babel173811 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000002000002L});
    public static final BitSet FOLLOW_parents_in_synpred9_babel173814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_nobrackets_in_synpred10_babel173885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_nobrackets_in_synpred11_babel173908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_OPEN_in_synpred12_babel175607 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_synpred12_babel175609 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_synpred12_babel175612 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_synpred12_babel175614 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_SC_in_synpred12_babel175617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_expr_in_synpred13_babel175955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_in_synpred14_babel175966 = new BitSet(new long[]{0x0000000000000002L});

}