// $ANTLR 3.2 Sep 23, 2009 12:02:23 /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g 2011-06-02 17:52:24

package com.babel17.antlr;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class babel17Parser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "PROG", "NIL_TOKEN", "ANY", "LAMBDA", "SQUARE_LIST", "ROUND_LIST", "LIST_CONS", "COMPARE", "APPLY", "IF", "MAP_OR_SET_OR_OBJ", "EMPTY_MAP", "EXCEPTION", "MATCH", "TRY", "CASES", "OBJ", "FOR_EXPR", "WHILE_DO", "MESSAGE_SEND", "UMINUS", "POW", "PARENTS_PLUS", "PARENTS_MUL", "BLOCK", "BEGIN", "WITH", "VAL", "OBJELEM_ASSIGN", "ASSIGN", "ARROW", "DEF", "YIELD", "PRIVATE", "TYPEDEF", "TYPEDEF_CLAUSE", "GETTYPE", "MEMOIZE", "MEMOID_STRONG", "MEMOID_WEAK", "PRIVATEID", "IF_PATTERN", "TYPE_PATTERN", "INNERVALUE_PATTERN", "TYPEID", "TYPEVAL", "MODULEID", "TYPE_EXPR", "TYPEOF", "CONVERSION", "CONVERT", "RELATE", "INTERVAL", "IMPORT_PREFIX", "IMPORT_ALL", "IMPORT_SET", "IMPORT_PLUS", "IMPORT_MINUS", "Newline", "NotNewline", "COMMENT", "LINECOMMENT", "SmallLetter", "BigLetter", "Letter", "Digit", "Hex", "L_begin", "L_end", "L_obj", "L_with", "L_if", "L_then", "L_else", "L_elseif", "L_while", "L_for", "L_do", "L_yield", "L_match", "L_case", "L_as", "L_val", "L_def", "L_in", "L_exception", "L_to", "L_downto", "L_try", "L_catch", "L_concurrent", "L_choose", "L_lazy", "L_memoize", "L_true", "L_false", "L_this", "L_random", "L_nil", "L_div", "L_mod", "L_module", "L_typedef", "L_typeof", "L_private", "L_import", "L_unittest", "L_and", "L_not", "L_or", "L_root", "L_native", "A_EQUAL", "U_EQUAL", "A_NOT_EQUAL", "U_NOT_EQUAL", "LESS", "A_LESS_EQ", "U_LESS_EQ", "GREATER", "A_GREATER_EQ", "U_GREATER_EQ", "SC", "PLUS", "MINUS", "TIMES", "QUOTIENT", "POW_tok", "TOK_RELATE", "TOK_CONVERT", "A_DOUBLE_COLON", "U_DOUBLE_COLON", "TIMESTIMES", "QUOTIENTQUOTIENT", "PLUSPLUS", "MINUSMINUS", "A_DOUBLE_ARROW", "U_DOUBLE_ARROW", "A_ARROW", "U_ARROW", "A_ELLIPSIS", "U_ELLIPSIS", "COMMA", "PERIOD", "QUESTION_MARK", "EXCLAMATION_MARK", "L_force", "WsChar", "WS", "NL", "Constr", "Id", "Exponent", "Float", "Num", "Charcode", "String", "ROUND_BRACKET_OPEN", "ROUND_BRACKET_CLOSE", "SQUARE_BRACKET_OPEN", "SQUARE_BRACKET_CLOSE", "CURLY_BRACKET_OPEN", "CURLY_BRACKET_CLOSE", "UNDERSCORE", "COLON", "PRAGMA_LOG", "PRAGMA_PRINT", "PRAGMA_ASSERT", "PRAGMA_PROFILE"
    };
    public static final int L_end=72;
    public static final int U_NOT_EQUAL=119;
    public static final int TIMESTIMES=136;
    public static final int L_try=92;
    public static final int BigLetter=67;
    public static final int TOK_RELATE=132;
    public static final int ROUND_BRACKET_CLOSE=162;
    public static final int L_native=115;
    public static final int L_mod=104;
    public static final int MINUSMINUS=139;
    public static final int IMPORT_PREFIX=57;
    public static final int Newline=62;
    public static final int SQUARE_BRACKET_CLOSE=164;
    public static final int LINECOMMENT=65;
    public static final int MAP_OR_SET_OR_OBJ=14;
    public static final int EOF=-1;
    public static final int U_DOUBLE_ARROW=141;
    public static final int TYPEID=48;
    public static final int L_exception=89;
    public static final int Num=158;
    public static final int GREATER=123;
    public static final int EMPTY_MAP=15;
    public static final int POW=25;
    public static final int L_concurrent=94;
    public static final int L_catch=93;
    public static final int L_false=99;
    public static final int QUOTIENTQUOTIENT=137;
    public static final int L_nil=102;
    public static final int BEGIN=29;
    public static final int LIST_CONS=10;
    public static final int L_with=74;
    public static final int QUESTION_MARK=148;
    public static final int LESS=120;
    public static final int ROUND_BRACKET_OPEN=161;
    public static final int SQUARE_LIST=8;
    public static final int MODULEID=50;
    public static final int VAL=31;
    public static final int L_as=85;
    public static final int NL=153;
    public static final int MESSAGE_SEND=23;
    public static final int A_ARROW=142;
    public static final int A_DOUBLE_COLON=134;
    public static final int COMMENT=64;
    public static final int L_def=87;
    public static final int L_and=111;
    public static final int EXCEPTION=16;
    public static final int TYPE_EXPR=51;
    public static final int L_root=114;
    public static final int L_this=100;
    public static final int IMPORT_ALL=58;
    public static final int L_force=150;
    public static final int L_choose=95;
    public static final int PERIOD=147;
    public static final int PRIVATE=37;
    public static final int L_import=109;
    public static final int SmallLetter=66;
    public static final int NIL_TOKEN=5;
    public static final int PRAGMA_PRINT=170;
    public static final int CURLY_BRACKET_OPEN=165;
    public static final int L_typedef=106;
    public static final int UNDERSCORE=167;
    public static final int MATCH=17;
    public static final int U_LESS_EQ=122;
    public static final int TRY=18;
    public static final int L_to=90;
    public static final int Float=157;
    public static final int L_unittest=110;
    public static final int WS=152;
    public static final int IMPORT_MINUS=61;
    public static final int Charcode=159;
    public static final int TYPEOF=52;
    public static final int L_do=81;
    public static final int L_val=86;
    public static final int TOK_CONVERT=133;
    public static final int L_match=83;
    public static final int L_obj=73;
    public static final int WsChar=151;
    public static final int L_module=105;
    public static final int GETTYPE=40;
    public static final int Hex=70;
    public static final int L_private=108;
    public static final int TYPE_PATTERN=46;
    public static final int L_for=80;
    public static final int MEMOID_WEAK=43;
    public static final int RELATE=55;
    public static final int Letter=68;
    public static final int EXCLAMATION_MARK=149;
    public static final int PRAGMA_ASSERT=171;
    public static final int APPLY=12;
    public static final int U_ARROW=143;
    public static final int PRAGMA_LOG=169;
    public static final int A_EQUAL=116;
    public static final int PRIVATEID=44;
    public static final int L_else=77;
    public static final int DEF=35;
    public static final int L_typeof=107;
    public static final int L_begin=71;
    public static final int L_div=103;
    public static final int L_yield=82;
    public static final int PLUSPLUS=138;
    public static final int MEMOID_STRONG=42;
    public static final int L_while=79;
    public static final int CASES=19;
    public static final int POW_tok=131;
    public static final int Exponent=156;
    public static final int IF_PATTERN=45;
    public static final int A_ELLIPSIS=144;
    public static final int PARENTS_PLUS=26;
    public static final int A_DOUBLE_ARROW=140;
    public static final int INTERVAL=56;
    public static final int SQUARE_BRACKET_OPEN=163;
    public static final int IF=13;
    public static final int L_not=112;
    public static final int PROG=4;
    public static final int COMMA=146;
    public static final int OBJ=20;
    public static final int TYPEVAL=49;
    public static final int MEMOIZE=41;
    public static final int U_ELLIPSIS=145;
    public static final int TYPEDEF_CLAUSE=39;
    public static final int INNERVALUE_PATTERN=47;
    public static final int YIELD=36;
    public static final int COMPARE=11;
    public static final int U_GREATER_EQ=125;
    public static final int U_EQUAL=117;
    public static final int PLUS=127;
    public static final int String=160;
    public static final int LAMBDA=7;
    public static final int L_true=98;
    public static final int Id=155;
    public static final int L_or=113;
    public static final int WITH=30;
    public static final int L_in=88;
    public static final int CONVERT=54;
    public static final int L_lazy=96;
    public static final int NotNewline=63;
    public static final int L_then=76;
    public static final int QUOTIENT=130;
    public static final int TYPEDEF=38;
    public static final int L_if=75;
    public static final int IMPORT_SET=59;
    public static final int CURLY_BRACKET_CLOSE=166;
    public static final int UMINUS=24;
    public static final int FOR_EXPR=21;
    public static final int Constr=154;
    public static final int WHILE_DO=22;
    public static final int L_elseif=78;
    public static final int MINUS=128;
    public static final int Digit=69;
    public static final int L_memoize=97;
    public static final int CONVERSION=53;
    public static final int A_GREATER_EQ=124;
    public static final int ROUND_LIST=9;
    public static final int COLON=168;
    public static final int PRAGMA_PROFILE=172;
    public static final int SC=126;
    public static final int L_downto=91;
    public static final int ANY=6;
    public static final int L_random=101;
    public static final int A_NOT_EQUAL=118;
    public static final int BLOCK=28;
    public static final int ASSIGN=33;
    public static final int U_DOUBLE_COLON=135;
    public static final int OBJELEM_ASSIGN=32;
    public static final int ARROW=34;
    public static final int IMPORT_PLUS=60;
    public static final int L_case=84;
    public static final int TIMES=129;
    public static final int A_LESS_EQ=121;
    public static final int PARENTS_MUL=27;

    // delegates
    // delegators


        public babel17Parser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public babel17Parser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return babel17Parser.tokenNames; }
    public String getGrammarFileName() { return "/Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g"; }

     

    public boolean errorDuringParsing = false;
    public ArrayList<RecognitionException> parsingErrors = new ArrayList<RecognitionException>();


    @Override
    public void reportError(RecognitionException e) {
      errorDuringParsing = true;
      parsingErrors.add(e);
    }



    public static class prog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prog"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:133:1: prog : block EOF -> ^( PROG block ) ;
    public final babel17Parser.prog_return prog() throws RecognitionException {
        babel17Parser.prog_return retval = new babel17Parser.prog_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF2=null;
        babel17Parser.block_return block1 = null;


        CommonTree EOF2_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:133:7: ( block EOF -> ^( PROG block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:133:9: block EOF
            {
            pushFollow(FOLLOW_block_in_prog260);
            block1=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block1.getTree());
            EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_prog262); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF2);



            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 133:19: -> ^( PROG block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:133:22: ^( PROG block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROG, "PROG"), root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prog"

    public static class token_EQUAL_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_EQUAL"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:257:1: token_EQUAL : ( A_EQUAL | U_EQUAL );
    public final babel17Parser.token_EQUAL_return token_EQUAL() throws RecognitionException {
        babel17Parser.token_EQUAL_return retval = new babel17Parser.token_EQUAL_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set3=null;

        CommonTree set3_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:258:2: ( A_EQUAL | U_EQUAL )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set3=(Token)input.LT(1);
            if ( (input.LA(1)>=A_EQUAL && input.LA(1)<=U_EQUAL) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set3));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_EQUAL"

    public static class token_NOT_EQUAL_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_NOT_EQUAL"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:265:1: token_NOT_EQUAL : ( A_NOT_EQUAL | U_NOT_EQUAL );
    public final babel17Parser.token_NOT_EQUAL_return token_NOT_EQUAL() throws RecognitionException {
        babel17Parser.token_NOT_EQUAL_return retval = new babel17Parser.token_NOT_EQUAL_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set4=null;

        CommonTree set4_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:266:2: ( A_NOT_EQUAL | U_NOT_EQUAL )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set4=(Token)input.LT(1);
            if ( (input.LA(1)>=A_NOT_EQUAL && input.LA(1)<=U_NOT_EQUAL) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set4));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_NOT_EQUAL"

    public static class token_LESS_EQ_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_LESS_EQ"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:274:1: token_LESS_EQ : ( A_LESS_EQ | U_LESS_EQ );
    public final babel17Parser.token_LESS_EQ_return token_LESS_EQ() throws RecognitionException {
        babel17Parser.token_LESS_EQ_return retval = new babel17Parser.token_LESS_EQ_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set5=null;

        CommonTree set5_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:275:2: ( A_LESS_EQ | U_LESS_EQ )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set5=(Token)input.LT(1);
            if ( (input.LA(1)>=A_LESS_EQ && input.LA(1)<=U_LESS_EQ) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set5));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_LESS_EQ"

    public static class token_GREATER_EQ_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_GREATER_EQ"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:284:1: token_GREATER_EQ : ( A_GREATER_EQ | U_GREATER_EQ );
    public final babel17Parser.token_GREATER_EQ_return token_GREATER_EQ() throws RecognitionException {
        babel17Parser.token_GREATER_EQ_return retval = new babel17Parser.token_GREATER_EQ_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set6=null;

        CommonTree set6_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:285:2: ( A_GREATER_EQ | U_GREATER_EQ )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set6=(Token)input.LT(1);
            if ( (input.LA(1)>=A_GREATER_EQ && input.LA(1)<=U_GREATER_EQ) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set6));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_GREATER_EQ"

    public static class token_OR_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_OR"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:300:1: token_OR : L_or ;
    public final babel17Parser.token_OR_return token_OR() throws RecognitionException {
        babel17Parser.token_OR_return retval = new babel17Parser.token_OR_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_or7=null;

        CommonTree L_or7_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:300:9: ( L_or )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:300:11: L_or
            {
            root_0 = (CommonTree)adaptor.nil();

            L_or7=(Token)match(input,L_or,FOLLOW_L_or_in_token_OR1086); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_or7_tree = (CommonTree)adaptor.create(L_or7);
            adaptor.addChild(root_0, L_or7_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_OR"

    public static class token_AND_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_AND"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:301:1: token_AND : L_and ;
    public final babel17Parser.token_AND_return token_AND() throws RecognitionException {
        babel17Parser.token_AND_return retval = new babel17Parser.token_AND_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_and8=null;

        CommonTree L_and8_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:302:2: ( L_and )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:302:4: L_and
            {
            root_0 = (CommonTree)adaptor.nil();

            L_and8=(Token)match(input,L_and,FOLLOW_L_and_in_token_AND1094); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_and8_tree = (CommonTree)adaptor.create(L_and8);
            adaptor.addChild(root_0, L_and8_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_AND"

    public static class token_NOT_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_NOT"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:303:1: token_NOT : L_not ;
    public final babel17Parser.token_NOT_return token_NOT() throws RecognitionException {
        babel17Parser.token_NOT_return retval = new babel17Parser.token_NOT_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_not9=null;

        CommonTree L_not9_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:304:2: ( L_not )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:304:4: L_not
            {
            root_0 = (CommonTree)adaptor.nil();

            L_not9=(Token)match(input,L_not,FOLLOW_L_not_in_token_NOT1102); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            L_not9_tree = (CommonTree)adaptor.create(L_not9);
            adaptor.addChild(root_0, L_not9_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_NOT"

    public static class token_DOUBLE_COLON_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_DOUBLE_COLON"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:310:1: token_DOUBLE_COLON : ( A_DOUBLE_COLON | U_DOUBLE_COLON );
    public final babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON() throws RecognitionException {
        babel17Parser.token_DOUBLE_COLON_return retval = new babel17Parser.token_DOUBLE_COLON_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set10=null;

        CommonTree set10_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:311:2: ( A_DOUBLE_COLON | U_DOUBLE_COLON )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set10=(Token)input.LT(1);
            if ( (input.LA(1)>=A_DOUBLE_COLON && input.LA(1)<=U_DOUBLE_COLON) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set10));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_DOUBLE_COLON"

    public static class token_DOUBLE_ARROW_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_DOUBLE_ARROW"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:327:1: token_DOUBLE_ARROW : ( A_DOUBLE_ARROW | U_DOUBLE_ARROW );
    public final babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW() throws RecognitionException {
        babel17Parser.token_DOUBLE_ARROW_return retval = new babel17Parser.token_DOUBLE_ARROW_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set11=null;

        CommonTree set11_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:328:2: ( A_DOUBLE_ARROW | U_DOUBLE_ARROW )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set11=(Token)input.LT(1);
            if ( (input.LA(1)>=A_DOUBLE_ARROW && input.LA(1)<=U_DOUBLE_ARROW) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set11));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_DOUBLE_ARROW"

    public static class token_ARROW_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_ARROW"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:332:1: token_ARROW : ( A_ARROW | U_ARROW );
    public final babel17Parser.token_ARROW_return token_ARROW() throws RecognitionException {
        babel17Parser.token_ARROW_return retval = new babel17Parser.token_ARROW_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set12=null;

        CommonTree set12_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:333:2: ( A_ARROW | U_ARROW )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set12=(Token)input.LT(1);
            if ( (input.LA(1)>=A_ARROW && input.LA(1)<=U_ARROW) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set12));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_ARROW"

    public static class token_ELLIPSIS_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "token_ELLIPSIS"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:338:1: token_ELLIPSIS : ( A_ELLIPSIS | U_ELLIPSIS );
    public final babel17Parser.token_ELLIPSIS_return token_ELLIPSIS() throws RecognitionException {
        babel17Parser.token_ELLIPSIS_return retval = new babel17Parser.token_ELLIPSIS_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set13=null;

        CommonTree set13_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:339:2: ( A_ELLIPSIS | U_ELLIPSIS )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set13=(Token)input.LT(1);
            if ( (input.LA(1)>=A_ELLIPSIS && input.LA(1)<=U_ELLIPSIS) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set13));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "token_ELLIPSIS"

    public static class typeid_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeid"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:418:1: typeid : Id ( ( NL )? PERIOD ( NL )? Id )* -> ^( TYPEID ( Id )* ) ;
    public final babel17Parser.typeid_return typeid() throws RecognitionException {
        babel17Parser.typeid_return retval = new babel17Parser.typeid_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id14=null;
        Token NL15=null;
        Token PERIOD16=null;
        Token NL17=null;
        Token Id18=null;

        CommonTree Id14_tree=null;
        CommonTree NL15_tree=null;
        CommonTree PERIOD16_tree=null;
        CommonTree NL17_tree=null;
        CommonTree Id18_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:418:9: ( Id ( ( NL )? PERIOD ( NL )? Id )* -> ^( TYPEID ( Id )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:418:11: Id ( ( NL )? PERIOD ( NL )? Id )*
            {
            Id14=(Token)match(input,Id,FOLLOW_Id_in_typeid1742); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id14);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:418:14: ( ( NL )? PERIOD ( NL )? Id )*
            loop3:
            do {
                int alt3=2;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==NL) ) {
                    int LA3_1 = input.LA(2);

                    if ( (LA3_1==PERIOD) ) {
                        alt3=1;
                    }


                }
                else if ( (LA3_0==PERIOD) ) {
                    alt3=1;
                }


                switch (alt3) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:418:15: ( NL )? PERIOD ( NL )? Id
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:418:15: ( NL )?
            	    int alt1=2;
            	    int LA1_0 = input.LA(1);

            	    if ( (LA1_0==NL) ) {
            	        alt1=1;
            	    }
            	    switch (alt1) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:418:15: NL
            	            {
            	            NL15=(Token)match(input,NL,FOLLOW_NL_in_typeid1745); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL15);


            	            }
            	            break;

            	    }

            	    PERIOD16=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_typeid1748); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD16);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:418:26: ( NL )?
            	    int alt2=2;
            	    int LA2_0 = input.LA(1);

            	    if ( (LA2_0==NL) ) {
            	        alt2=1;
            	    }
            	    switch (alt2) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:418:26: NL
            	            {
            	            NL17=(Token)match(input,NL,FOLLOW_NL_in_typeid1750); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL17);


            	            }
            	            break;

            	    }

            	    Id18=(Token)match(input,Id,FOLLOW_Id_in_typeid1753); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_Id.add(Id18);


            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);



            // AST REWRITE
            // elements: Id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 418:35: -> ^( TYPEID ( Id )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:418:38: ^( TYPEID ( Id )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEID, "TYPEID"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:418:47: ( Id )*
                while ( stream_Id.hasNext() ) {
                    adaptor.addChild(root_1, stream_Id.nextNode());

                }
                stream_Id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeid"

    public static class typeannotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeannotation"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:420:1: typeannotation : ( typeid | '(' protected_expr ')' -> ^( TYPEVAL protected_expr ) );
    public final babel17Parser.typeannotation_return typeannotation() throws RecognitionException {
        babel17Parser.typeannotation_return retval = new babel17Parser.typeannotation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal20=null;
        Token char_literal22=null;
        babel17Parser.typeid_return typeid19 = null;

        babel17Parser.protected_expr_return protected_expr21 = null;


        CommonTree char_literal20_tree=null;
        CommonTree char_literal22_tree=null;
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:2: ( typeid | '(' protected_expr ')' -> ^( TYPEVAL protected_expr ) )
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==Id) ) {
                alt4=1;
            }
            else if ( (LA4_0==ROUND_BRACKET_OPEN) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:421:4: typeid
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeid_in_typeannotation1773);
                    typeid19=typeid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeid19.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:422:4: '(' protected_expr ')'
                    {
                    char_literal20=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_typeannotation1778); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal20);

                    pushFollow(FOLLOW_protected_expr_in_typeannotation1780);
                    protected_expr21=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr21.getTree());
                    char_literal22=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_typeannotation1782); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal22);



                    // AST REWRITE
                    // elements: protected_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 422:27: -> ^( TYPEVAL protected_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:422:30: ^( TYPEVAL protected_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEVAL, "TYPEVAL"), root_1);

                        adaptor.addChild(root_1, stream_protected_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeannotation"

    public static class pattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:425:1: pattern : ( Constr ( ( NL )? pattern )? -> ^( Constr ( pattern )? ) | primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )* -> ^( LIST_CONS ( primitive_pattern )* ) | L_exception ( NL )? pattern -> ^( L_exception pattern ) | token_ELLIPSIS );
    public final babel17Parser.pattern_return pattern() throws RecognitionException {
        babel17Parser.pattern_return retval = new babel17Parser.pattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Constr23=null;
        Token NL24=null;
        Token NL27=null;
        Token NL29=null;
        Token L_exception31=null;
        Token NL32=null;
        babel17Parser.pattern_return pattern25 = null;

        babel17Parser.primitive_pattern_return primitive_pattern26 = null;

        babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON28 = null;

        babel17Parser.primitive_pattern_return primitive_pattern30 = null;

        babel17Parser.pattern_return pattern33 = null;

        babel17Parser.token_ELLIPSIS_return token_ELLIPSIS34 = null;


        CommonTree Constr23_tree=null;
        CommonTree NL24_tree=null;
        CommonTree NL27_tree=null;
        CommonTree NL29_tree=null;
        CommonTree L_exception31_tree=null;
        CommonTree NL32_tree=null;
        RewriteRuleTokenStream stream_L_exception=new RewriteRuleTokenStream(adaptor,"token L_exception");
        RewriteRuleTokenStream stream_Constr=new RewriteRuleTokenStream(adaptor,"token Constr");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_primitive_pattern=new RewriteRuleSubtreeStream(adaptor,"rule primitive_pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_COLON=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_COLON");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:425:9: ( Constr ( ( NL )? pattern )? -> ^( Constr ( pattern )? ) | primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )* -> ^( LIST_CONS ( primitive_pattern )* ) | L_exception ( NL )? pattern -> ^( L_exception pattern ) | token_ELLIPSIS )
            int alt11=4;
            switch ( input.LA(1) ) {
            case Constr:
                {
                alt11=1;
                }
                break;
            case L_true:
            case L_false:
            case L_nil:
            case MINUS:
            case Id:
            case Num:
            case String:
            case ROUND_BRACKET_OPEN:
            case SQUARE_BRACKET_OPEN:
            case CURLY_BRACKET_OPEN:
            case UNDERSCORE:
                {
                alt11=2;
                }
                break;
            case L_exception:
                {
                alt11=3;
                }
                break;
            case A_ELLIPSIS:
            case U_ELLIPSIS:
                {
                alt11=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }

            switch (alt11) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:425:11: Constr ( ( NL )? pattern )?
                    {
                    Constr23=(Token)match(input,Constr,FOLLOW_Constr_in_pattern1799); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Constr.add(Constr23);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:425:18: ( ( NL )? pattern )?
                    int alt6=2;
                    int LA6_0 = input.LA(1);

                    if ( (LA6_0==NL) ) {
                        int LA6_1 = input.LA(2);

                        if ( (LA6_1==L_exception||(LA6_1>=L_true && LA6_1<=L_false)||LA6_1==L_nil||LA6_1==MINUS||(LA6_1>=A_ELLIPSIS && LA6_1<=U_ELLIPSIS)||(LA6_1>=Constr && LA6_1<=Id)||LA6_1==Num||(LA6_1>=String && LA6_1<=ROUND_BRACKET_OPEN)||LA6_1==SQUARE_BRACKET_OPEN||LA6_1==CURLY_BRACKET_OPEN||LA6_1==UNDERSCORE) ) {
                            alt6=1;
                        }
                    }
                    else if ( (LA6_0==L_exception||(LA6_0>=L_true && LA6_0<=L_false)||LA6_0==L_nil||LA6_0==MINUS||(LA6_0>=A_ELLIPSIS && LA6_0<=U_ELLIPSIS)||(LA6_0>=Constr && LA6_0<=Id)||LA6_0==Num||(LA6_0>=String && LA6_0<=ROUND_BRACKET_OPEN)||LA6_0==SQUARE_BRACKET_OPEN||LA6_0==CURLY_BRACKET_OPEN||LA6_0==UNDERSCORE) ) {
                        alt6=1;
                    }
                    switch (alt6) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:425:19: ( NL )? pattern
                            {
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:425:19: ( NL )?
                            int alt5=2;
                            int LA5_0 = input.LA(1);

                            if ( (LA5_0==NL) ) {
                                alt5=1;
                            }
                            switch (alt5) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:425:19: NL
                                    {
                                    NL24=(Token)match(input,NL,FOLLOW_NL_in_pattern1802); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL24);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_pattern_in_pattern1805);
                            pattern25=pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pattern.add(pattern25.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: Constr, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 425:33: -> ^( Constr ( pattern )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:425:36: ^( Constr ( pattern )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_Constr.nextNode(), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:425:45: ( pattern )?
                        if ( stream_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_pattern.nextTree());

                        }
                        stream_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:426:4: primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )*
                    {
                    pushFollow(FOLLOW_primitive_pattern_in_pattern1821);
                    primitive_pattern26=primitive_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitive_pattern.add(primitive_pattern26.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:426:22: ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )*
                    loop9:
                    do {
                        int alt9=2;
                        int LA9_0 = input.LA(1);

                        if ( (LA9_0==NL) ) {
                            int LA9_1 = input.LA(2);

                            if ( ((LA9_1>=A_DOUBLE_COLON && LA9_1<=U_DOUBLE_COLON)) ) {
                                alt9=1;
                            }


                        }
                        else if ( ((LA9_0>=A_DOUBLE_COLON && LA9_0<=U_DOUBLE_COLON)) ) {
                            alt9=1;
                        }


                        switch (alt9) {
                    	case 1 :
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:426:23: ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern
                    	    {
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:426:23: ( NL )?
                    	    int alt7=2;
                    	    int LA7_0 = input.LA(1);

                    	    if ( (LA7_0==NL) ) {
                    	        alt7=1;
                    	    }
                    	    switch (alt7) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:426:23: NL
                    	            {
                    	            NL27=(Token)match(input,NL,FOLLOW_NL_in_pattern1824); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL27);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_token_DOUBLE_COLON_in_pattern1827);
                    	    token_DOUBLE_COLON28=token_DOUBLE_COLON();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_token_DOUBLE_COLON.add(token_DOUBLE_COLON28.getTree());
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:426:46: ( NL )?
                    	    int alt8=2;
                    	    int LA8_0 = input.LA(1);

                    	    if ( (LA8_0==NL) ) {
                    	        alt8=1;
                    	    }
                    	    switch (alt8) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:426:46: NL
                    	            {
                    	            NL29=(Token)match(input,NL,FOLLOW_NL_in_pattern1829); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL29);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_primitive_pattern_in_pattern1832);
                    	    primitive_pattern30=primitive_pattern();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_primitive_pattern.add(primitive_pattern30.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop9;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: primitive_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 427:3: -> ^( LIST_CONS ( primitive_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:427:6: ^( LIST_CONS ( primitive_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST_CONS, "LIST_CONS"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:427:18: ( primitive_pattern )*
                        while ( stream_primitive_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_primitive_pattern.nextTree());

                        }
                        stream_primitive_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:4: L_exception ( NL )? pattern
                    {
                    L_exception31=(Token)match(input,L_exception,FOLLOW_L_exception_in_pattern1851); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_exception.add(L_exception31);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:16: ( NL )?
                    int alt10=2;
                    int LA10_0 = input.LA(1);

                    if ( (LA10_0==NL) ) {
                        alt10=1;
                    }
                    switch (alt10) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:16: NL
                            {
                            NL32=(Token)match(input,NL,FOLLOW_NL_in_pattern1853); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL32);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_pattern_in_pattern1856);
                    pattern33=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern33.getTree());


                    // AST REWRITE
                    // elements: L_exception, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 428:28: -> ^( L_exception pattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:428:31: ^( L_exception pattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_L_exception.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_pattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:429:4: token_ELLIPSIS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_ELLIPSIS_in_pattern1869);
                    token_ELLIPSIS34=token_ELLIPSIS();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_ELLIPSIS34.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pattern"

    public static class defpattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defpattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:431:1: defpattern : ( primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )* -> ^( LIST_CONS ( primitive_pattern )* ) | Constr ( defpattern )? -> ^( Constr ( defpattern )? ) );
    public final babel17Parser.defpattern_return defpattern() throws RecognitionException {
        babel17Parser.defpattern_return retval = new babel17Parser.defpattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL36=null;
        Token NL38=null;
        Token Constr40=null;
        babel17Parser.primitive_pattern_return primitive_pattern35 = null;

        babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON37 = null;

        babel17Parser.primitive_pattern_return primitive_pattern39 = null;

        babel17Parser.defpattern_return defpattern41 = null;


        CommonTree NL36_tree=null;
        CommonTree NL38_tree=null;
        CommonTree Constr40_tree=null;
        RewriteRuleTokenStream stream_Constr=new RewriteRuleTokenStream(adaptor,"token Constr");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_primitive_pattern=new RewriteRuleSubtreeStream(adaptor,"rule primitive_pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_COLON=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_COLON");
        RewriteRuleSubtreeStream stream_defpattern=new RewriteRuleSubtreeStream(adaptor,"rule defpattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:432:2: ( primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )* -> ^( LIST_CONS ( primitive_pattern )* ) | Constr ( defpattern )? -> ^( Constr ( defpattern )? ) )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( ((LA16_0>=L_true && LA16_0<=L_false)||LA16_0==L_nil||LA16_0==MINUS||LA16_0==Id||LA16_0==Num||(LA16_0>=String && LA16_0<=ROUND_BRACKET_OPEN)||LA16_0==SQUARE_BRACKET_OPEN||LA16_0==CURLY_BRACKET_OPEN||LA16_0==UNDERSCORE) ) {
                alt16=1;
            }
            else if ( (LA16_0==Constr) ) {
                alt16=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }
            switch (alt16) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:432:4: primitive_pattern ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )*
                    {
                    pushFollow(FOLLOW_primitive_pattern_in_defpattern1879);
                    primitive_pattern35=primitive_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitive_pattern.add(primitive_pattern35.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:432:22: ( ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern )*
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( (LA14_0==NL) ) {
                            int LA14_1 = input.LA(2);

                            if ( ((LA14_1>=A_DOUBLE_COLON && LA14_1<=U_DOUBLE_COLON)) ) {
                                alt14=1;
                            }


                        }
                        else if ( ((LA14_0>=A_DOUBLE_COLON && LA14_0<=U_DOUBLE_COLON)) ) {
                            alt14=1;
                        }


                        switch (alt14) {
                    	case 1 :
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:432:23: ( NL )? token_DOUBLE_COLON ( NL )? primitive_pattern
                    	    {
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:432:23: ( NL )?
                    	    int alt12=2;
                    	    int LA12_0 = input.LA(1);

                    	    if ( (LA12_0==NL) ) {
                    	        alt12=1;
                    	    }
                    	    switch (alt12) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:432:23: NL
                    	            {
                    	            NL36=(Token)match(input,NL,FOLLOW_NL_in_defpattern1882); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL36);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_token_DOUBLE_COLON_in_defpattern1885);
                    	    token_DOUBLE_COLON37=token_DOUBLE_COLON();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_token_DOUBLE_COLON.add(token_DOUBLE_COLON37.getTree());
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:432:46: ( NL )?
                    	    int alt13=2;
                    	    int LA13_0 = input.LA(1);

                    	    if ( (LA13_0==NL) ) {
                    	        alt13=1;
                    	    }
                    	    switch (alt13) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:432:46: NL
                    	            {
                    	            NL38=(Token)match(input,NL,FOLLOW_NL_in_defpattern1887); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL38);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_primitive_pattern_in_defpattern1890);
                    	    primitive_pattern39=primitive_pattern();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_primitive_pattern.add(primitive_pattern39.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: primitive_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 433:3: -> ^( LIST_CONS ( primitive_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:433:6: ^( LIST_CONS ( primitive_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST_CONS, "LIST_CONS"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:433:18: ( primitive_pattern )*
                        while ( stream_primitive_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_primitive_pattern.nextTree());

                        }
                        stream_primitive_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:434:4: Constr ( defpattern )?
                    {
                    Constr40=(Token)match(input,Constr,FOLLOW_Constr_in_defpattern1908); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Constr.add(Constr40);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:434:11: ( defpattern )?
                    int alt15=2;
                    int LA15_0 = input.LA(1);

                    if ( ((LA15_0>=L_true && LA15_0<=L_false)||LA15_0==L_nil||LA15_0==MINUS||(LA15_0>=Constr && LA15_0<=Id)||LA15_0==Num||(LA15_0>=String && LA15_0<=ROUND_BRACKET_OPEN)||LA15_0==SQUARE_BRACKET_OPEN||LA15_0==CURLY_BRACKET_OPEN||LA15_0==UNDERSCORE) ) {
                        alt15=1;
                    }
                    switch (alt15) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:434:11: defpattern
                            {
                            pushFollow(FOLLOW_defpattern_in_defpattern1910);
                            defpattern41=defpattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_defpattern.add(defpattern41.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: defpattern, Constr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 434:23: -> ^( Constr ( defpattern )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:434:26: ^( Constr ( defpattern )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_Constr.nextNode(), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:434:35: ( defpattern )?
                        if ( stream_defpattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_defpattern.nextTree());

                        }
                        stream_defpattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "defpattern"

    public static class casepattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "casepattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:436:1: casepattern : ( ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation -> ^( TYPE_PATTERN typeannotation pattern ) | pattern );
    public final babel17Parser.casepattern_return casepattern() throws RecognitionException {
        babel17Parser.casepattern_return retval = new babel17Parser.casepattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL43=null;
        Token char_literal44=null;
        Token NL45=null;
        babel17Parser.pattern_return pattern42 = null;

        babel17Parser.typeannotation_return typeannotation46 = null;

        babel17Parser.pattern_return pattern47 = null;


        CommonTree NL43_tree=null;
        CommonTree char_literal44_tree=null;
        CommonTree NL45_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_typeannotation=new RewriteRuleSubtreeStream(adaptor,"rule typeannotation");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:437:2: ( ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation -> ^( TYPE_PATTERN typeannotation pattern ) | pattern )
            int alt19=2;
            alt19 = dfa19.predict(input);
            switch (alt19) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:437:5: ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation
                    {
                    pushFollow(FOLLOW_pattern_in_casepattern1941);
                    pattern42=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern42.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:437:34: ( NL )?
                    int alt17=2;
                    int LA17_0 = input.LA(1);

                    if ( (LA17_0==NL) ) {
                        alt17=1;
                    }
                    switch (alt17) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:437:34: NL
                            {
                            NL43=(Token)match(input,NL,FOLLOW_NL_in_casepattern1943); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL43);


                            }
                            break;

                    }

                    char_literal44=(Token)match(input,COLON,FOLLOW_COLON_in_casepattern1946); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(char_literal44);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:437:42: ( NL )?
                    int alt18=2;
                    int LA18_0 = input.LA(1);

                    if ( (LA18_0==NL) ) {
                        alt18=1;
                    }
                    switch (alt18) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:437:42: NL
                            {
                            NL45=(Token)match(input,NL,FOLLOW_NL_in_casepattern1948); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL45);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeannotation_in_casepattern1951);
                    typeannotation46=typeannotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeannotation.add(typeannotation46.getTree());


                    // AST REWRITE
                    // elements: typeannotation, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 437:61: -> ^( TYPE_PATTERN typeannotation pattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:437:64: ^( TYPE_PATTERN typeannotation pattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_PATTERN, "TYPE_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_typeannotation.nextTree());
                        adaptor.addChild(root_1, stream_pattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:438:4: pattern
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pattern_in_casepattern1966);
                    pattern47=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pattern47.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "casepattern"

    public static class bracket_pattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracket_pattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:441:1: bracket_pattern : ( ( Id ( NL )? L_as )=> Id ( NL )? L_as ( NL )? pattern -> ^( L_as Id pattern ) | ( protected_expr ( NL )? QUESTION_MARK )=> protected_expr ( NL )? QUESTION_MARK ( ( NL )? pattern )? -> ^( QUESTION_MARK protected_expr ( pattern )? ) | ( protected_expr ( NL )? EXCLAMATION_MARK )=> protected_expr ( NL )? EXCLAMATION_MARK ( ( NL )? pattern )? -> ^( EXCLAMATION_MARK protected_expr ( pattern )? ) | ( Id pattern )=> Id pattern -> ^( INNERVALUE_PATTERN Id pattern ) | L_val ( NL )? protected_expr_nc -> ^( L_val protected_expr_nc ) | L_for ( NL )? ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )? L_end -> ^( L_for ( bracket_pattern )* ) | ( pattern ( NL )? L_if )=> pattern ( NL )? L_if ( NL )? protected_expr_nc -> ^( IF_PATTERN pattern protected_expr_nc ) | ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation -> ^( TYPE_PATTERN typeannotation pattern ) | pattern );
    public final babel17Parser.bracket_pattern_return bracket_pattern() throws RecognitionException {
        babel17Parser.bracket_pattern_return retval = new babel17Parser.bracket_pattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id48=null;
        Token NL49=null;
        Token L_as50=null;
        Token NL51=null;
        Token NL54=null;
        Token QUESTION_MARK55=null;
        Token NL56=null;
        Token NL59=null;
        Token EXCLAMATION_MARK60=null;
        Token NL61=null;
        Token Id63=null;
        Token L_val65=null;
        Token NL66=null;
        Token L_for68=null;
        Token NL69=null;
        Token NL71=null;
        Token COMMA72=null;
        Token NL73=null;
        Token NL75=null;
        Token L_end76=null;
        Token NL78=null;
        Token L_if79=null;
        Token NL80=null;
        Token NL83=null;
        Token char_literal84=null;
        Token NL85=null;
        babel17Parser.pattern_return pattern52 = null;

        babel17Parser.protected_expr_return protected_expr53 = null;

        babel17Parser.pattern_return pattern57 = null;

        babel17Parser.protected_expr_return protected_expr58 = null;

        babel17Parser.pattern_return pattern62 = null;

        babel17Parser.pattern_return pattern64 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc67 = null;

        babel17Parser.bracket_pattern_return bracket_pattern70 = null;

        babel17Parser.bracket_pattern_return bracket_pattern74 = null;

        babel17Parser.pattern_return pattern77 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc81 = null;

        babel17Parser.pattern_return pattern82 = null;

        babel17Parser.typeannotation_return typeannotation86 = null;

        babel17Parser.pattern_return pattern87 = null;


        CommonTree Id48_tree=null;
        CommonTree NL49_tree=null;
        CommonTree L_as50_tree=null;
        CommonTree NL51_tree=null;
        CommonTree NL54_tree=null;
        CommonTree QUESTION_MARK55_tree=null;
        CommonTree NL56_tree=null;
        CommonTree NL59_tree=null;
        CommonTree EXCLAMATION_MARK60_tree=null;
        CommonTree NL61_tree=null;
        CommonTree Id63_tree=null;
        CommonTree L_val65_tree=null;
        CommonTree NL66_tree=null;
        CommonTree L_for68_tree=null;
        CommonTree NL69_tree=null;
        CommonTree NL71_tree=null;
        CommonTree COMMA72_tree=null;
        CommonTree NL73_tree=null;
        CommonTree NL75_tree=null;
        CommonTree L_end76_tree=null;
        CommonTree NL78_tree=null;
        CommonTree L_if79_tree=null;
        CommonTree NL80_tree=null;
        CommonTree NL83_tree=null;
        CommonTree char_literal84_tree=null;
        CommonTree NL85_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_EXCLAMATION_MARK=new RewriteRuleTokenStream(adaptor,"token EXCLAMATION_MARK");
        RewriteRuleTokenStream stream_L_for=new RewriteRuleTokenStream(adaptor,"token L_for");
        RewriteRuleTokenStream stream_L_as=new RewriteRuleTokenStream(adaptor,"token L_as");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_L_val=new RewriteRuleTokenStream(adaptor,"token L_val");
        RewriteRuleTokenStream stream_L_if=new RewriteRuleTokenStream(adaptor,"token L_if");
        RewriteRuleTokenStream stream_QUESTION_MARK=new RewriteRuleTokenStream(adaptor,"token QUESTION_MARK");
        RewriteRuleSubtreeStream stream_typeannotation=new RewriteRuleSubtreeStream(adaptor,"rule typeannotation");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_protected_expr_nc=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr_nc");
        RewriteRuleSubtreeStream stream_bracket_pattern=new RewriteRuleSubtreeStream(adaptor,"rule bracket_pattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:442:2: ( ( Id ( NL )? L_as )=> Id ( NL )? L_as ( NL )? pattern -> ^( L_as Id pattern ) | ( protected_expr ( NL )? QUESTION_MARK )=> protected_expr ( NL )? QUESTION_MARK ( ( NL )? pattern )? -> ^( QUESTION_MARK protected_expr ( pattern )? ) | ( protected_expr ( NL )? EXCLAMATION_MARK )=> protected_expr ( NL )? EXCLAMATION_MARK ( ( NL )? pattern )? -> ^( EXCLAMATION_MARK protected_expr ( pattern )? ) | ( Id pattern )=> Id pattern -> ^( INNERVALUE_PATTERN Id pattern ) | L_val ( NL )? protected_expr_nc -> ^( L_val protected_expr_nc ) | L_for ( NL )? ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )? L_end -> ^( L_for ( bracket_pattern )* ) | ( pattern ( NL )? L_if )=> pattern ( NL )? L_if ( NL )? protected_expr_nc -> ^( IF_PATTERN pattern protected_expr_nc ) | ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation -> ^( TYPE_PATTERN typeannotation pattern ) | pattern )
            int alt39=9;
            alt39 = dfa39.predict(input);
            switch (alt39) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:442:10: ( Id ( NL )? L_as )=> Id ( NL )? L_as ( NL )? pattern
                    {
                    Id48=(Token)match(input,Id,FOLLOW_Id_in_bracket_pattern1994); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id48);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:442:30: ( NL )?
                    int alt20=2;
                    int LA20_0 = input.LA(1);

                    if ( (LA20_0==NL) ) {
                        alt20=1;
                    }
                    switch (alt20) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:442:30: NL
                            {
                            NL49=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern1996); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL49);


                            }
                            break;

                    }

                    L_as50=(Token)match(input,L_as,FOLLOW_L_as_in_bracket_pattern1999); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_as.add(L_as50);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:442:39: ( NL )?
                    int alt21=2;
                    int LA21_0 = input.LA(1);

                    if ( (LA21_0==NL) ) {
                        alt21=1;
                    }
                    switch (alt21) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:442:39: NL
                            {
                            NL51=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2001); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL51);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_pattern_in_bracket_pattern2004);
                    pattern52=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern52.getTree());


                    // AST REWRITE
                    // elements: Id, L_as, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 442:51: -> ^( L_as Id pattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:442:54: ^( L_as Id pattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_L_as.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());
                        adaptor.addChild(root_1, stream_pattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:443:4: ( protected_expr ( NL )? QUESTION_MARK )=> protected_expr ( NL )? QUESTION_MARK ( ( NL )? pattern )?
                    {
                    pushFollow(FOLLOW_protected_expr_in_bracket_pattern2033);
                    protected_expr53=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr53.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:444:18: ( NL )?
                    int alt22=2;
                    int LA22_0 = input.LA(1);

                    if ( (LA22_0==NL) ) {
                        alt22=1;
                    }
                    switch (alt22) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:444:18: NL
                            {
                            NL54=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2035); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL54);


                            }
                            break;

                    }

                    QUESTION_MARK55=(Token)match(input,QUESTION_MARK,FOLLOW_QUESTION_MARK_in_bracket_pattern2038); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION_MARK.add(QUESTION_MARK55);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:444:36: ( ( NL )? pattern )?
                    int alt24=2;
                    int LA24_0 = input.LA(1);

                    if ( (LA24_0==NL) ) {
                        int LA24_1 = input.LA(2);

                        if ( (LA24_1==L_exception||(LA24_1>=L_true && LA24_1<=L_false)||LA24_1==L_nil||LA24_1==MINUS||(LA24_1>=A_ELLIPSIS && LA24_1<=U_ELLIPSIS)||(LA24_1>=Constr && LA24_1<=Id)||LA24_1==Num||(LA24_1>=String && LA24_1<=ROUND_BRACKET_OPEN)||LA24_1==SQUARE_BRACKET_OPEN||LA24_1==CURLY_BRACKET_OPEN||LA24_1==UNDERSCORE) ) {
                            alt24=1;
                        }
                    }
                    else if ( (LA24_0==L_exception||(LA24_0>=L_true && LA24_0<=L_false)||LA24_0==L_nil||LA24_0==MINUS||(LA24_0>=A_ELLIPSIS && LA24_0<=U_ELLIPSIS)||(LA24_0>=Constr && LA24_0<=Id)||LA24_0==Num||(LA24_0>=String && LA24_0<=ROUND_BRACKET_OPEN)||LA24_0==SQUARE_BRACKET_OPEN||LA24_0==CURLY_BRACKET_OPEN||LA24_0==UNDERSCORE) ) {
                        alt24=1;
                    }
                    switch (alt24) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:444:37: ( NL )? pattern
                            {
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:444:37: ( NL )?
                            int alt23=2;
                            int LA23_0 = input.LA(1);

                            if ( (LA23_0==NL) ) {
                                alt23=1;
                            }
                            switch (alt23) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:444:37: NL
                                    {
                                    NL56=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2041); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL56);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_pattern_in_bracket_pattern2044);
                            pattern57=pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pattern.add(pattern57.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: pattern, QUESTION_MARK, protected_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 444:51: -> ^( QUESTION_MARK protected_expr ( pattern )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:444:54: ^( QUESTION_MARK protected_expr ( pattern )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_QUESTION_MARK.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_protected_expr.nextTree());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:444:85: ( pattern )?
                        if ( stream_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_pattern.nextTree());

                        }
                        stream_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:4: ( protected_expr ( NL )? EXCLAMATION_MARK )=> protected_expr ( NL )? EXCLAMATION_MARK ( ( NL )? pattern )?
                    {
                    pushFollow(FOLLOW_protected_expr_in_bracket_pattern2076);
                    protected_expr58=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr58.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:18: ( NL )?
                    int alt25=2;
                    int LA25_0 = input.LA(1);

                    if ( (LA25_0==NL) ) {
                        alt25=1;
                    }
                    switch (alt25) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:18: NL
                            {
                            NL59=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2078); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL59);


                            }
                            break;

                    }

                    EXCLAMATION_MARK60=(Token)match(input,EXCLAMATION_MARK,FOLLOW_EXCLAMATION_MARK_in_bracket_pattern2081); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EXCLAMATION_MARK.add(EXCLAMATION_MARK60);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:39: ( ( NL )? pattern )?
                    int alt27=2;
                    int LA27_0 = input.LA(1);

                    if ( (LA27_0==NL) ) {
                        int LA27_1 = input.LA(2);

                        if ( (LA27_1==L_exception||(LA27_1>=L_true && LA27_1<=L_false)||LA27_1==L_nil||LA27_1==MINUS||(LA27_1>=A_ELLIPSIS && LA27_1<=U_ELLIPSIS)||(LA27_1>=Constr && LA27_1<=Id)||LA27_1==Num||(LA27_1>=String && LA27_1<=ROUND_BRACKET_OPEN)||LA27_1==SQUARE_BRACKET_OPEN||LA27_1==CURLY_BRACKET_OPEN||LA27_1==UNDERSCORE) ) {
                            alt27=1;
                        }
                    }
                    else if ( (LA27_0==L_exception||(LA27_0>=L_true && LA27_0<=L_false)||LA27_0==L_nil||LA27_0==MINUS||(LA27_0>=A_ELLIPSIS && LA27_0<=U_ELLIPSIS)||(LA27_0>=Constr && LA27_0<=Id)||LA27_0==Num||(LA27_0>=String && LA27_0<=ROUND_BRACKET_OPEN)||LA27_0==SQUARE_BRACKET_OPEN||LA27_0==CURLY_BRACKET_OPEN||LA27_0==UNDERSCORE) ) {
                        alt27=1;
                    }
                    switch (alt27) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:40: ( NL )? pattern
                            {
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:40: ( NL )?
                            int alt26=2;
                            int LA26_0 = input.LA(1);

                            if ( (LA26_0==NL) ) {
                                alt26=1;
                            }
                            switch (alt26) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:40: NL
                                    {
                                    NL61=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2084); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL61);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_pattern_in_bracket_pattern2087);
                            pattern62=pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pattern.add(pattern62.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: pattern, EXCLAMATION_MARK, protected_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 446:54: -> ^( EXCLAMATION_MARK protected_expr ( pattern )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:57: ^( EXCLAMATION_MARK protected_expr ( pattern )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_EXCLAMATION_MARK.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_protected_expr.nextTree());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:446:91: ( pattern )?
                        if ( stream_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_pattern.nextTree());

                        }
                        stream_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:4: ( Id pattern )=> Id pattern
                    {
                    Id63=(Token)match(input,Id,FOLLOW_Id_in_bracket_pattern2113); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id63);

                    pushFollow(FOLLOW_pattern_in_bracket_pattern2115);
                    pattern64=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern64.getTree());


                    // AST REWRITE
                    // elements: pattern, Id
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 447:31: -> ^( INNERVALUE_PATTERN Id pattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:34: ^( INNERVALUE_PATTERN Id pattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERVALUE_PATTERN, "INNERVALUE_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());
                        adaptor.addChild(root_1, stream_pattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:448:4: L_val ( NL )? protected_expr_nc
                    {
                    L_val65=(Token)match(input,L_val,FOLLOW_L_val_in_bracket_pattern2130); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_val.add(L_val65);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:448:10: ( NL )?
                    int alt28=2;
                    int LA28_0 = input.LA(1);

                    if ( (LA28_0==NL) ) {
                        alt28=1;
                    }
                    switch (alt28) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:448:10: NL
                            {
                            NL66=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2132); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL66);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_bracket_pattern2135);
                    protected_expr_nc67=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc67.getTree());


                    // AST REWRITE
                    // elements: protected_expr_nc, L_val
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 448:32: -> ^( L_val protected_expr_nc )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:448:35: ^( L_val protected_expr_nc )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_L_val.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_protected_expr_nc.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:10: L_for ( NL )? ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )? L_end
                    {
                    L_for68=(Token)match(input,L_for,FOLLOW_L_for_in_bracket_pattern2154); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_for.add(L_for68);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:16: ( NL )?
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==NL) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:16: NL
                            {
                            NL69=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2156); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL69);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:20: ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )?
                    int alt34=2;
                    int LA34_0 = input.LA(1);

                    if ( (LA34_0==L_begin||(LA34_0>=L_obj && LA34_0<=L_if)||(LA34_0>=L_while && LA34_0<=L_for)||LA34_0==L_match||LA34_0==L_val||LA34_0==L_exception||LA34_0==L_try||(LA34_0>=L_concurrent && LA34_0<=L_lazy)||(LA34_0>=L_true && LA34_0<=L_nil)||LA34_0==L_typeof||LA34_0==L_not||(LA34_0>=L_root && LA34_0<=L_native)||LA34_0==MINUS||(LA34_0>=A_ELLIPSIS && LA34_0<=U_ELLIPSIS)||LA34_0==L_force||(LA34_0>=Constr && LA34_0<=Id)||(LA34_0>=Float && LA34_0<=Num)||(LA34_0>=String && LA34_0<=ROUND_BRACKET_OPEN)||LA34_0==SQUARE_BRACKET_OPEN||LA34_0==CURLY_BRACKET_OPEN||LA34_0==UNDERSCORE) ) {
                        alt34=1;
                    }
                    switch (alt34) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:21: bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )?
                            {
                            pushFollow(FOLLOW_bracket_pattern_in_bracket_pattern2160);
                            bracket_pattern70=bracket_pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern70.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:37: ( ( NL )? COMMA ( NL )? bracket_pattern )*
                            loop32:
                            do {
                                int alt32=2;
                                int LA32_0 = input.LA(1);

                                if ( (LA32_0==NL) ) {
                                    int LA32_1 = input.LA(2);

                                    if ( (LA32_1==COMMA) ) {
                                        alt32=1;
                                    }


                                }
                                else if ( (LA32_0==COMMA) ) {
                                    alt32=1;
                                }


                                switch (alt32) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:39: ( NL )? COMMA ( NL )? bracket_pattern
                            	    {
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:39: ( NL )?
                            	    int alt30=2;
                            	    int LA30_0 = input.LA(1);

                            	    if ( (LA30_0==NL) ) {
                            	        alt30=1;
                            	    }
                            	    switch (alt30) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:39: NL
                            	            {
                            	            NL71=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2164); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL71);


                            	            }
                            	            break;

                            	    }

                            	    COMMA72=(Token)match(input,COMMA,FOLLOW_COMMA_in_bracket_pattern2167); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA72);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:49: ( NL )?
                            	    int alt31=2;
                            	    int LA31_0 = input.LA(1);

                            	    if ( (LA31_0==NL) ) {
                            	        alt31=1;
                            	    }
                            	    switch (alt31) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:49: NL
                            	            {
                            	            NL73=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2169); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL73);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_bracket_pattern_in_bracket_pattern2172);
                            	    bracket_pattern74=bracket_pattern();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern74.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop32;
                                }
                            } while (true);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:72: ( NL )?
                            int alt33=2;
                            int LA33_0 = input.LA(1);

                            if ( (LA33_0==NL) ) {
                                alt33=1;
                            }
                            switch (alt33) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:72: NL
                                    {
                                    NL75=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2177); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL75);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    L_end76=(Token)match(input,L_end,FOLLOW_L_end_in_bracket_pattern2182); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_end.add(L_end76);



                    // AST REWRITE
                    // elements: L_for, bracket_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 449:84: -> ^( L_for ( bracket_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:87: ^( L_for ( bracket_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_L_for.nextNode(), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:449:95: ( bracket_pattern )*
                        while ( stream_bracket_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_bracket_pattern.nextTree());

                        }
                        stream_bracket_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:4: ( pattern ( NL )? L_if )=> pattern ( NL )? L_if ( NL )? protected_expr_nc
                    {
                    pushFollow(FOLLOW_pattern_in_bracket_pattern2207);
                    pattern77=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern77.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:34: ( NL )?
                    int alt35=2;
                    int LA35_0 = input.LA(1);

                    if ( (LA35_0==NL) ) {
                        alt35=1;
                    }
                    switch (alt35) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:34: NL
                            {
                            NL78=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2209); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL78);


                            }
                            break;

                    }

                    L_if79=(Token)match(input,L_if,FOLLOW_L_if_in_bracket_pattern2212); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_if.add(L_if79);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:43: ( NL )?
                    int alt36=2;
                    int LA36_0 = input.LA(1);

                    if ( (LA36_0==NL) ) {
                        alt36=1;
                    }
                    switch (alt36) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:43: NL
                            {
                            NL80=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2214); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL80);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_bracket_pattern2217);
                    protected_expr_nc81=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc81.getTree());


                    // AST REWRITE
                    // elements: pattern, protected_expr_nc
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 450:65: -> ^( IF_PATTERN pattern protected_expr_nc )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:68: ^( IF_PATTERN pattern protected_expr_nc )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IF_PATTERN, "IF_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_pattern.nextTree());
                        adaptor.addChild(root_1, stream_protected_expr_nc.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:451:4: ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation
                    {
                    pushFollow(FOLLOW_pattern_in_bracket_pattern2243);
                    pattern82=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern82.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:451:33: ( NL )?
                    int alt37=2;
                    int LA37_0 = input.LA(1);

                    if ( (LA37_0==NL) ) {
                        alt37=1;
                    }
                    switch (alt37) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:451:33: NL
                            {
                            NL83=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2245); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL83);


                            }
                            break;

                    }

                    char_literal84=(Token)match(input,COLON,FOLLOW_COLON_in_bracket_pattern2248); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(char_literal84);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:451:41: ( NL )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==NL) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:451:41: NL
                            {
                            NL85=(Token)match(input,NL,FOLLOW_NL_in_bracket_pattern2250); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL85);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeannotation_in_bracket_pattern2253);
                    typeannotation86=typeannotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeannotation.add(typeannotation86.getTree());


                    // AST REWRITE
                    // elements: typeannotation, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 451:60: -> ^( TYPE_PATTERN typeannotation pattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:451:63: ^( TYPE_PATTERN typeannotation pattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_PATTERN, "TYPE_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_typeannotation.nextTree());
                        adaptor.addChild(root_1, stream_pattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:452:4: pattern
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pattern_in_bracket_pattern2268);
                    pattern87=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pattern87.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bracket_pattern"

    public static class arrow_or_assign_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrow_or_assign"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:454:1: arrow_or_assign : ( token_ARROW -> ^( ARROW ) | ASSIGN -> ^( ASSIGN ) );
    public final babel17Parser.arrow_or_assign_return arrow_or_assign() throws RecognitionException {
        babel17Parser.arrow_or_assign_return retval = new babel17Parser.arrow_or_assign_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ASSIGN89=null;
        babel17Parser.token_ARROW_return token_ARROW88 = null;


        CommonTree ASSIGN89_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_token_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_ARROW");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:455:2: ( token_ARROW -> ^( ARROW ) | ASSIGN -> ^( ASSIGN ) )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( ((LA40_0>=A_ARROW && LA40_0<=U_ARROW)) ) {
                alt40=1;
            }
            else if ( (LA40_0==ASSIGN) ) {
                alt40=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:455:4: token_ARROW
                    {
                    pushFollow(FOLLOW_token_ARROW_in_arrow_or_assign2278);
                    token_ARROW88=token_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_ARROW.add(token_ARROW88.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 455:16: -> ^( ARROW )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:455:19: ^( ARROW )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARROW, "ARROW"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:456:4: ASSIGN
                    {
                    ASSIGN89=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_arrow_or_assign2289); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN89);



                    // AST REWRITE
                    // elements: ASSIGN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 456:11: -> ^( ASSIGN )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:456:14: ^( ASSIGN )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_ASSIGN.nextNode(), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrow_or_assign"

    public static class mselem_pattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mselem_pattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:458:1: mselem_pattern : bracket_pattern ( ( NL )? arrow_or_assign ( NL )? bracket_pattern )? -> ^( NIL_TOKEN ^( NIL_TOKEN ( bracket_pattern )* ) ( arrow_or_assign )* ) ;
    public final babel17Parser.mselem_pattern_return mselem_pattern() throws RecognitionException {
        babel17Parser.mselem_pattern_return retval = new babel17Parser.mselem_pattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL91=null;
        Token NL93=null;
        babel17Parser.bracket_pattern_return bracket_pattern90 = null;

        babel17Parser.arrow_or_assign_return arrow_or_assign92 = null;

        babel17Parser.bracket_pattern_return bracket_pattern94 = null;


        CommonTree NL91_tree=null;
        CommonTree NL93_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_arrow_or_assign=new RewriteRuleSubtreeStream(adaptor,"rule arrow_or_assign");
        RewriteRuleSubtreeStream stream_bracket_pattern=new RewriteRuleSubtreeStream(adaptor,"rule bracket_pattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:459:2: ( bracket_pattern ( ( NL )? arrow_or_assign ( NL )? bracket_pattern )? -> ^( NIL_TOKEN ^( NIL_TOKEN ( bracket_pattern )* ) ( arrow_or_assign )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:459:4: bracket_pattern ( ( NL )? arrow_or_assign ( NL )? bracket_pattern )?
            {
            pushFollow(FOLLOW_bracket_pattern_in_mselem_pattern2304);
            bracket_pattern90=bracket_pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern90.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:459:20: ( ( NL )? arrow_or_assign ( NL )? bracket_pattern )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==NL) ) {
                int LA43_1 = input.LA(2);

                if ( (LA43_1==ASSIGN||(LA43_1>=A_ARROW && LA43_1<=U_ARROW)) ) {
                    alt43=1;
                }
            }
            else if ( (LA43_0==ASSIGN||(LA43_0>=A_ARROW && LA43_0<=U_ARROW)) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:459:21: ( NL )? arrow_or_assign ( NL )? bracket_pattern
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:459:21: ( NL )?
                    int alt41=2;
                    int LA41_0 = input.LA(1);

                    if ( (LA41_0==NL) ) {
                        alt41=1;
                    }
                    switch (alt41) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:459:21: NL
                            {
                            NL91=(Token)match(input,NL,FOLLOW_NL_in_mselem_pattern2307); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL91);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_arrow_or_assign_in_mselem_pattern2310);
                    arrow_or_assign92=arrow_or_assign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrow_or_assign.add(arrow_or_assign92.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:459:41: ( NL )?
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==NL) ) {
                        alt42=1;
                    }
                    switch (alt42) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:459:41: NL
                            {
                            NL93=(Token)match(input,NL,FOLLOW_NL_in_mselem_pattern2312); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL93);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_bracket_pattern_in_mselem_pattern2315);
                    bracket_pattern94=bracket_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern94.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: bracket_pattern, arrow_or_assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 460:3: -> ^( NIL_TOKEN ^( NIL_TOKEN ( bracket_pattern )* ) ( arrow_or_assign )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:460:6: ^( NIL_TOKEN ^( NIL_TOKEN ( bracket_pattern )* ) ( arrow_or_assign )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:460:18: ^( NIL_TOKEN ( bracket_pattern )* )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:460:30: ( bracket_pattern )*
                while ( stream_bracket_pattern.hasNext() ) {
                    adaptor.addChild(root_2, stream_bracket_pattern.nextTree());

                }
                stream_bracket_pattern.reset();

                adaptor.addChild(root_1, root_2);
                }
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:460:48: ( arrow_or_assign )*
                while ( stream_arrow_or_assign.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrow_or_assign.nextTree());

                }
                stream_arrow_or_assign.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mselem_pattern"

    public static class primitive_pattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitive_pattern"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:462:1: primitive_pattern : ( Id | '_' -> ANY | String | Num | L_true | L_false | L_nil | '-' ( NL )? Num -> ^( UMINUS Num ) | '[' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )? ']' -> ^( SQUARE_LIST ( bracket_pattern )* ) | '(' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) ) | '{' ( NL )? ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) );
    public final babel17Parser.primitive_pattern_return primitive_pattern() throws RecognitionException {
        babel17Parser.primitive_pattern_return retval = new babel17Parser.primitive_pattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id95=null;
        Token char_literal96=null;
        Token String97=null;
        Token Num98=null;
        Token L_true99=null;
        Token L_false100=null;
        Token L_nil101=null;
        Token char_literal102=null;
        Token NL103=null;
        Token Num104=null;
        Token char_literal105=null;
        Token NL106=null;
        Token NL108=null;
        Token COMMA109=null;
        Token NL110=null;
        Token NL112=null;
        Token char_literal113=null;
        Token char_literal114=null;
        Token NL115=null;
        Token NL117=null;
        Token COMMA118=null;
        Token NL119=null;
        Token NL121=null;
        Token COMMA122=null;
        Token NL123=null;
        Token char_literal124=null;
        Token char_literal125=null;
        Token NL126=null;
        Token NL128=null;
        Token COMMA129=null;
        Token NL130=null;
        Token NL132=null;
        Token char_literal133=null;
        Token char_literal134=null;
        Token NL135=null;
        Token NL137=null;
        Token char_literal138=null;
        babel17Parser.bracket_pattern_return bracket_pattern107 = null;

        babel17Parser.bracket_pattern_return bracket_pattern111 = null;

        babel17Parser.bracket_pattern_return bracket_pattern116 = null;

        babel17Parser.bracket_pattern_return bracket_pattern120 = null;

        babel17Parser.mselem_pattern_return mselem_pattern127 = null;

        babel17Parser.mselem_pattern_return mselem_pattern131 = null;

        babel17Parser.token_ARROW_return token_ARROW136 = null;


        CommonTree Id95_tree=null;
        CommonTree char_literal96_tree=null;
        CommonTree String97_tree=null;
        CommonTree Num98_tree=null;
        CommonTree L_true99_tree=null;
        CommonTree L_false100_tree=null;
        CommonTree L_nil101_tree=null;
        CommonTree char_literal102_tree=null;
        CommonTree NL103_tree=null;
        CommonTree Num104_tree=null;
        CommonTree char_literal105_tree=null;
        CommonTree NL106_tree=null;
        CommonTree NL108_tree=null;
        CommonTree COMMA109_tree=null;
        CommonTree NL110_tree=null;
        CommonTree NL112_tree=null;
        CommonTree char_literal113_tree=null;
        CommonTree char_literal114_tree=null;
        CommonTree NL115_tree=null;
        CommonTree NL117_tree=null;
        CommonTree COMMA118_tree=null;
        CommonTree NL119_tree=null;
        CommonTree NL121_tree=null;
        CommonTree COMMA122_tree=null;
        CommonTree NL123_tree=null;
        CommonTree char_literal124_tree=null;
        CommonTree char_literal125_tree=null;
        CommonTree NL126_tree=null;
        CommonTree NL128_tree=null;
        CommonTree COMMA129_tree=null;
        CommonTree NL130_tree=null;
        CommonTree NL132_tree=null;
        CommonTree char_literal133_tree=null;
        CommonTree char_literal134_tree=null;
        CommonTree NL135_tree=null;
        CommonTree NL137_tree=null;
        CommonTree char_literal138_tree=null;
        RewriteRuleTokenStream stream_CURLY_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_OPEN");
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_CURLY_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_UNDERSCORE=new RewriteRuleTokenStream(adaptor,"token UNDERSCORE");
        RewriteRuleTokenStream stream_Num=new RewriteRuleTokenStream(adaptor,"token Num");
        RewriteRuleTokenStream stream_SQUARE_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token SQUARE_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_SQUARE_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token SQUARE_BRACKET_OPEN");
        RewriteRuleSubtreeStream stream_mselem_pattern=new RewriteRuleSubtreeStream(adaptor,"rule mselem_pattern");
        RewriteRuleSubtreeStream stream_token_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_ARROW");
        RewriteRuleSubtreeStream stream_bracket_pattern=new RewriteRuleSubtreeStream(adaptor,"rule bracket_pattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:463:2: ( Id | '_' -> ANY | String | Num | L_true | L_false | L_nil | '-' ( NL )? Num -> ^( UMINUS Num ) | '[' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )? ']' -> ^( SQUARE_LIST ( bracket_pattern )* ) | '(' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) ) | '{' ( NL )? ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) )
            int alt67=12;
            alt67 = dfa67.predict(input);
            switch (alt67) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:463:4: Id
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Id95=(Token)match(input,Id,FOLLOW_Id_in_primitive_pattern2344); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Id95_tree = (CommonTree)adaptor.create(Id95);
                    adaptor.addChild(root_0, Id95_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:464:4: '_'
                    {
                    char_literal96=(Token)match(input,UNDERSCORE,FOLLOW_UNDERSCORE_in_primitive_pattern2349); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNDERSCORE.add(char_literal96);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 464:8: -> ANY
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(ANY, "ANY"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:465:4: String
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    String97=(Token)match(input,String,FOLLOW_String_in_primitive_pattern2358); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    String97_tree = (CommonTree)adaptor.create(String97);
                    adaptor.addChild(root_0, String97_tree);
                    }

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:466:4: Num
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Num98=(Token)match(input,Num,FOLLOW_Num_in_primitive_pattern2363); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Num98_tree = (CommonTree)adaptor.create(Num98);
                    adaptor.addChild(root_0, Num98_tree);
                    }

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:467:4: L_true
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_true99=(Token)match(input,L_true,FOLLOW_L_true_in_primitive_pattern2368); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_true99_tree = (CommonTree)adaptor.create(L_true99);
                    adaptor.addChild(root_0, L_true99_tree);
                    }

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:468:4: L_false
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_false100=(Token)match(input,L_false,FOLLOW_L_false_in_primitive_pattern2373); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_false100_tree = (CommonTree)adaptor.create(L_false100);
                    adaptor.addChild(root_0, L_false100_tree);
                    }

                    }
                    break;
                case 7 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:469:4: L_nil
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_nil101=(Token)match(input,L_nil,FOLLOW_L_nil_in_primitive_pattern2378); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_nil101_tree = (CommonTree)adaptor.create(L_nil101);
                    adaptor.addChild(root_0, L_nil101_tree);
                    }

                    }
                    break;
                case 8 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:472:4: '-' ( NL )? Num
                    {
                    char_literal102=(Token)match(input,MINUS,FOLLOW_MINUS_in_primitive_pattern2386); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(char_literal102);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:472:8: ( NL )?
                    int alt44=2;
                    int LA44_0 = input.LA(1);

                    if ( (LA44_0==NL) ) {
                        alt44=1;
                    }
                    switch (alt44) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:472:8: NL
                            {
                            NL103=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2388); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL103);


                            }
                            break;

                    }

                    Num104=(Token)match(input,Num,FOLLOW_Num_in_primitive_pattern2391); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Num.add(Num104);



                    // AST REWRITE
                    // elements: Num
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 472:16: -> ^( UMINUS Num )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:472:19: ^( UMINUS Num )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UMINUS, "UMINUS"), root_1);

                        adaptor.addChild(root_1, stream_Num.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:4: '[' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )? ']'
                    {
                    char_literal105=(Token)match(input,SQUARE_BRACKET_OPEN,FOLLOW_SQUARE_BRACKET_OPEN_in_primitive_pattern2404); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_OPEN.add(char_literal105);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:9: ( NL )?
                    int alt45=2;
                    int LA45_0 = input.LA(1);

                    if ( (LA45_0==NL) ) {
                        alt45=1;
                    }
                    switch (alt45) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:9: NL
                            {
                            NL106=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2407); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL106);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:13: ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )?
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==L_begin||(LA50_0>=L_obj && LA50_0<=L_if)||(LA50_0>=L_while && LA50_0<=L_for)||LA50_0==L_match||LA50_0==L_val||LA50_0==L_exception||LA50_0==L_try||(LA50_0>=L_concurrent && LA50_0<=L_lazy)||(LA50_0>=L_true && LA50_0<=L_nil)||LA50_0==L_typeof||LA50_0==L_not||(LA50_0>=L_root && LA50_0<=L_native)||LA50_0==MINUS||(LA50_0>=A_ELLIPSIS && LA50_0<=U_ELLIPSIS)||LA50_0==L_force||(LA50_0>=Constr && LA50_0<=Id)||(LA50_0>=Float && LA50_0<=Num)||(LA50_0>=String && LA50_0<=ROUND_BRACKET_OPEN)||LA50_0==SQUARE_BRACKET_OPEN||LA50_0==CURLY_BRACKET_OPEN||LA50_0==UNDERSCORE) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:14: bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )*
                            {
                            pushFollow(FOLLOW_bracket_pattern_in_primitive_pattern2411);
                            bracket_pattern107=bracket_pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern107.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:30: ( NL )?
                            int alt46=2;
                            int LA46_0 = input.LA(1);

                            if ( (LA46_0==NL) ) {
                                alt46=1;
                            }
                            switch (alt46) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:30: NL
                                    {
                                    NL108=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2413); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL108);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:34: ( COMMA ( NL )? bracket_pattern ( NL )? )*
                            loop49:
                            do {
                                int alt49=2;
                                int LA49_0 = input.LA(1);

                                if ( (LA49_0==COMMA) ) {
                                    alt49=1;
                                }


                                switch (alt49) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:36: COMMA ( NL )? bracket_pattern ( NL )?
                            	    {
                            	    COMMA109=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitive_pattern2418); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA109);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:42: ( NL )?
                            	    int alt47=2;
                            	    int LA47_0 = input.LA(1);

                            	    if ( (LA47_0==NL) ) {
                            	        alt47=1;
                            	    }
                            	    switch (alt47) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:42: NL
                            	            {
                            	            NL110=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2420); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL110);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_bracket_pattern_in_primitive_pattern2423);
                            	    bracket_pattern111=bracket_pattern();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern111.getTree());
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:62: ( NL )?
                            	    int alt48=2;
                            	    int LA48_0 = input.LA(1);

                            	    if ( (LA48_0==NL) ) {
                            	        alt48=1;
                            	    }
                            	    switch (alt48) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:473:62: NL
                            	            {
                            	            NL112=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2425); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL112);


                            	            }
                            	            break;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop49;
                                }
                            } while (true);


                            }
                            break;

                    }

                    char_literal113=(Token)match(input,SQUARE_BRACKET_CLOSE,FOLLOW_SQUARE_BRACKET_CLOSE_in_primitive_pattern2433); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_CLOSE.add(char_literal113);



                    // AST REWRITE
                    // elements: bracket_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 474:6: -> ^( SQUARE_LIST ( bracket_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:474:9: ^( SQUARE_LIST ( bracket_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SQUARE_LIST, "SQUARE_LIST"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:474:23: ( bracket_pattern )*
                        while ( stream_bracket_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_bracket_pattern.nextTree());

                        }
                        stream_bracket_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:4: '(' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )? ')'
                    {
                    char_literal114=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_primitive_pattern2453); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal114);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:9: ( NL )?
                    int alt51=2;
                    int LA51_0 = input.LA(1);

                    if ( (LA51_0==NL) ) {
                        alt51=1;
                    }
                    switch (alt51) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:9: NL
                            {
                            NL115=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2456); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL115);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:13: ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )?
                    int alt58=2;
                    int LA58_0 = input.LA(1);

                    if ( (LA58_0==L_begin||(LA58_0>=L_obj && LA58_0<=L_if)||(LA58_0>=L_while && LA58_0<=L_for)||LA58_0==L_match||LA58_0==L_val||LA58_0==L_exception||LA58_0==L_try||(LA58_0>=L_concurrent && LA58_0<=L_lazy)||(LA58_0>=L_true && LA58_0<=L_nil)||LA58_0==L_typeof||LA58_0==L_not||(LA58_0>=L_root && LA58_0<=L_native)||LA58_0==MINUS||(LA58_0>=A_ELLIPSIS && LA58_0<=U_ELLIPSIS)||LA58_0==L_force||(LA58_0>=Constr && LA58_0<=Id)||(LA58_0>=Float && LA58_0<=Num)||(LA58_0>=String && LA58_0<=ROUND_BRACKET_OPEN)||LA58_0==SQUARE_BRACKET_OPEN||LA58_0==CURLY_BRACKET_OPEN||LA58_0==UNDERSCORE) ) {
                        alt58=1;
                    }
                    switch (alt58) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:14: bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )?
                            {
                            pushFollow(FOLLOW_bracket_pattern_in_primitive_pattern2460);
                            bracket_pattern116=bracket_pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern116.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:30: ( NL )?
                            int alt52=2;
                            int LA52_0 = input.LA(1);

                            if ( (LA52_0==NL) ) {
                                alt52=1;
                            }
                            switch (alt52) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:30: NL
                                    {
                                    NL117=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2462); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL117);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:34: ( COMMA ( NL )? bracket_pattern ( NL )? )*
                            loop55:
                            do {
                                int alt55=2;
                                int LA55_0 = input.LA(1);

                                if ( (LA55_0==COMMA) ) {
                                    int LA55_1 = input.LA(2);

                                    if ( (LA55_1==NL) ) {
                                        int LA55_3 = input.LA(3);

                                        if ( (LA55_3==L_begin||(LA55_3>=L_obj && LA55_3<=L_if)||(LA55_3>=L_while && LA55_3<=L_for)||LA55_3==L_match||LA55_3==L_val||LA55_3==L_exception||LA55_3==L_try||(LA55_3>=L_concurrent && LA55_3<=L_lazy)||(LA55_3>=L_true && LA55_3<=L_nil)||LA55_3==L_typeof||LA55_3==L_not||(LA55_3>=L_root && LA55_3<=L_native)||LA55_3==MINUS||(LA55_3>=A_ELLIPSIS && LA55_3<=U_ELLIPSIS)||LA55_3==L_force||(LA55_3>=Constr && LA55_3<=Id)||(LA55_3>=Float && LA55_3<=Num)||(LA55_3>=String && LA55_3<=ROUND_BRACKET_OPEN)||LA55_3==SQUARE_BRACKET_OPEN||LA55_3==CURLY_BRACKET_OPEN||LA55_3==UNDERSCORE) ) {
                                            alt55=1;
                                        }


                                    }
                                    else if ( (LA55_1==L_begin||(LA55_1>=L_obj && LA55_1<=L_if)||(LA55_1>=L_while && LA55_1<=L_for)||LA55_1==L_match||LA55_1==L_val||LA55_1==L_exception||LA55_1==L_try||(LA55_1>=L_concurrent && LA55_1<=L_lazy)||(LA55_1>=L_true && LA55_1<=L_nil)||LA55_1==L_typeof||LA55_1==L_not||(LA55_1>=L_root && LA55_1<=L_native)||LA55_1==MINUS||(LA55_1>=A_ELLIPSIS && LA55_1<=U_ELLIPSIS)||LA55_1==L_force||(LA55_1>=Constr && LA55_1<=Id)||(LA55_1>=Float && LA55_1<=Num)||(LA55_1>=String && LA55_1<=ROUND_BRACKET_OPEN)||LA55_1==SQUARE_BRACKET_OPEN||LA55_1==CURLY_BRACKET_OPEN||LA55_1==UNDERSCORE) ) {
                                        alt55=1;
                                    }


                                }


                                switch (alt55) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:36: COMMA ( NL )? bracket_pattern ( NL )?
                            	    {
                            	    COMMA118=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitive_pattern2467); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA118);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:43: ( NL )?
                            	    int alt53=2;
                            	    int LA53_0 = input.LA(1);

                            	    if ( (LA53_0==NL) ) {
                            	        alt53=1;
                            	    }
                            	    switch (alt53) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:43: NL
                            	            {
                            	            NL119=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2470); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL119);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_bracket_pattern_in_primitive_pattern2473);
                            	    bracket_pattern120=bracket_pattern();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_bracket_pattern.add(bracket_pattern120.getTree());
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:63: ( NL )?
                            	    int alt54=2;
                            	    int LA54_0 = input.LA(1);

                            	    if ( (LA54_0==NL) ) {
                            	        alt54=1;
                            	    }
                            	    switch (alt54) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:63: NL
                            	            {
                            	            NL121=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2475); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL121);


                            	            }
                            	            break;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop55;
                                }
                            } while (true);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:69: ( COMMA ( NL )? )?
                            int alt57=2;
                            int LA57_0 = input.LA(1);

                            if ( (LA57_0==COMMA) ) {
                                alt57=1;
                            }
                            switch (alt57) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:70: COMMA ( NL )?
                                    {
                                    COMMA122=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitive_pattern2481); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA122);

                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:76: ( NL )?
                                    int alt56=2;
                                    int LA56_0 = input.LA(1);

                                    if ( (LA56_0==NL) ) {
                                        alt56=1;
                                    }
                                    switch (alt56) {
                                        case 1 :
                                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:475:76: NL
                                            {
                                            NL123=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2483); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_NL.add(NL123);


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    char_literal124=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_primitive_pattern2490); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal124);



                    // AST REWRITE
                    // elements: bracket_pattern, COMMA
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 476:5: -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:8: ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROUND_LIST, "ROUND_LIST"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:21: ^( NIL_TOKEN ( COMMA )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:33: ( COMMA )*
                        while ( stream_COMMA.hasNext() ) {
                            adaptor.addChild(root_2, stream_COMMA.nextNode());

                        }
                        stream_COMMA.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:41: ^( NIL_TOKEN ( bracket_pattern )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:476:53: ( bracket_pattern )*
                        while ( stream_bracket_pattern.hasNext() ) {
                            adaptor.addChild(root_2, stream_bracket_pattern.nextTree());

                        }
                        stream_bracket_pattern.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:477:4: '{' ( NL )? ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )? '}'
                    {
                    char_literal125=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_primitive_pattern2522); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal125);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:477:9: ( NL )?
                    int alt59=2;
                    int LA59_0 = input.LA(1);

                    if ( (LA59_0==NL) ) {
                        alt59=1;
                    }
                    switch (alt59) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:477:9: NL
                            {
                            NL126=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2525); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL126);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:477:13: ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )?
                    int alt64=2;
                    int LA64_0 = input.LA(1);

                    if ( (LA64_0==L_begin||(LA64_0>=L_obj && LA64_0<=L_if)||(LA64_0>=L_while && LA64_0<=L_for)||LA64_0==L_match||LA64_0==L_val||LA64_0==L_exception||LA64_0==L_try||(LA64_0>=L_concurrent && LA64_0<=L_lazy)||(LA64_0>=L_true && LA64_0<=L_nil)||LA64_0==L_typeof||LA64_0==L_not||(LA64_0>=L_root && LA64_0<=L_native)||LA64_0==MINUS||(LA64_0>=A_ELLIPSIS && LA64_0<=U_ELLIPSIS)||LA64_0==L_force||(LA64_0>=Constr && LA64_0<=Id)||(LA64_0>=Float && LA64_0<=Num)||(LA64_0>=String && LA64_0<=ROUND_BRACKET_OPEN)||LA64_0==SQUARE_BRACKET_OPEN||LA64_0==CURLY_BRACKET_OPEN||LA64_0==UNDERSCORE) ) {
                        alt64=1;
                    }
                    switch (alt64) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:477:14: mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )*
                            {
                            pushFollow(FOLLOW_mselem_pattern_in_primitive_pattern2529);
                            mselem_pattern127=mselem_pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_mselem_pattern.add(mselem_pattern127.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:477:29: ( NL )?
                            int alt60=2;
                            int LA60_0 = input.LA(1);

                            if ( (LA60_0==NL) ) {
                                alt60=1;
                            }
                            switch (alt60) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:477:29: NL
                                    {
                                    NL128=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2531); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL128);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:477:33: ( COMMA ( NL )? mselem_pattern ( NL )? )*
                            loop63:
                            do {
                                int alt63=2;
                                int LA63_0 = input.LA(1);

                                if ( (LA63_0==COMMA) ) {
                                    alt63=1;
                                }


                                switch (alt63) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:477:35: COMMA ( NL )? mselem_pattern ( NL )?
                            	    {
                            	    COMMA129=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitive_pattern2536); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA129);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:477:42: ( NL )?
                            	    int alt61=2;
                            	    int LA61_0 = input.LA(1);

                            	    if ( (LA61_0==NL) ) {
                            	        alt61=1;
                            	    }
                            	    switch (alt61) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:477:42: NL
                            	            {
                            	            NL130=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2539); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL130);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_mselem_pattern_in_primitive_pattern2542);
                            	    mselem_pattern131=mselem_pattern();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_mselem_pattern.add(mselem_pattern131.getTree());
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:477:61: ( NL )?
                            	    int alt62=2;
                            	    int LA62_0 = input.LA(1);

                            	    if ( (LA62_0==NL) ) {
                            	        alt62=1;
                            	    }
                            	    switch (alt62) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:477:61: NL
                            	            {
                            	            NL132=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2544); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL132);


                            	            }
                            	            break;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop63;
                                }
                            } while (true);


                            }
                            break;

                    }

                    char_literal133=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_primitive_pattern2552); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal133);



                    // AST REWRITE
                    // elements: mselem_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 478:5: -> ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:8: ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MAP_OR_SET_OR_OBJ, "MAP_OR_SET_OR_OBJ"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:478:28: ( mselem_pattern )*
                        while ( stream_mselem_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_mselem_pattern.nextTree());

                        }
                        stream_mselem_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:479:4: '{' ( NL )? token_ARROW ( NL )? '}'
                    {
                    char_literal134=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_primitive_pattern2570); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal134);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:479:8: ( NL )?
                    int alt65=2;
                    int LA65_0 = input.LA(1);

                    if ( (LA65_0==NL) ) {
                        alt65=1;
                    }
                    switch (alt65) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:479:8: NL
                            {
                            NL135=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2572); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL135);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_token_ARROW_in_primitive_pattern2575);
                    token_ARROW136=token_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_ARROW.add(token_ARROW136.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:479:24: ( NL )?
                    int alt66=2;
                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==NL) ) {
                        alt66=1;
                    }
                    switch (alt66) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:479:24: NL
                            {
                            NL137=(Token)match(input,NL,FOLLOW_NL_in_primitive_pattern2577); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL137);


                            }
                            break;

                    }

                    char_literal138=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_primitive_pattern2580); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal138);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 479:32: -> ^( EMPTY_MAP )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:479:35: ^( EMPTY_MAP )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EMPTY_MAP, "EMPTY_MAP"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "primitive_pattern"

    public static class sep_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sep"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:482:1: sep : ( NL | SC )+ ;
    public final babel17Parser.sep_return sep() throws RecognitionException {
        babel17Parser.sep_return retval = new babel17Parser.sep_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set139=null;

        CommonTree set139_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:482:5: ( ( NL | SC )+ )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:482:7: ( NL | SC )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:482:7: ( NL | SC )+
            int cnt68=0;
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==SC||LA68_0==NL) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            	    {
            	    set139=(Token)input.LT(1);
            	    if ( input.LA(1)==SC||input.LA(1)==NL ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set139));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt68 >= 1 ) break loop68;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(68, input);
                        throw eee;
                }
                cnt68++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sep"

    public static class block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:484:1: block : ( ( sep )? statement ( sep statement )* ( sep )? -> ^( BLOCK ( statement )* ) | ( sep )? -> ^( BLOCK ) );
    public final babel17Parser.block_return block() throws RecognitionException {
        babel17Parser.block_return retval = new babel17Parser.block_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.sep_return sep140 = null;

        babel17Parser.statement_return statement141 = null;

        babel17Parser.sep_return sep142 = null;

        babel17Parser.statement_return statement143 = null;

        babel17Parser.sep_return sep144 = null;

        babel17Parser.sep_return sep145 = null;


        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_sep=new RewriteRuleSubtreeStream(adaptor,"rule sep");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:484:8: ( ( sep )? statement ( sep statement )* ( sep )? -> ^( BLOCK ( statement )* ) | ( sep )? -> ^( BLOCK ) )
            int alt73=2;
            alt73 = dfa73.predict(input);
            switch (alt73) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:484:10: ( sep )? statement ( sep statement )* ( sep )?
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:484:10: ( sep )?
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==SC||LA69_0==NL) ) {
                        alt69=1;
                    }
                    switch (alt69) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:484:10: sep
                            {
                            pushFollow(FOLLOW_sep_in_block2612);
                            sep140=sep();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_sep.add(sep140.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_statement_in_block2615);
                    statement141=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement141.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:484:25: ( sep statement )*
                    loop70:
                    do {
                        int alt70=2;
                        alt70 = dfa70.predict(input);
                        switch (alt70) {
                    	case 1 :
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:484:26: sep statement
                    	    {
                    	    pushFollow(FOLLOW_sep_in_block2618);
                    	    sep142=sep();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_sep.add(sep142.getTree());
                    	    pushFollow(FOLLOW_statement_in_block2620);
                    	    statement143=statement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_statement.add(statement143.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop70;
                        }
                    } while (true);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:484:42: ( sep )?
                    int alt71=2;
                    int LA71_0 = input.LA(1);

                    if ( (LA71_0==SC||LA71_0==NL) ) {
                        alt71=1;
                    }
                    switch (alt71) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:484:42: sep
                            {
                            pushFollow(FOLLOW_sep_in_block2624);
                            sep144=sep();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_sep.add(sep144.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 484:47: -> ^( BLOCK ( statement )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:484:50: ^( BLOCK ( statement )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK, "BLOCK"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:484:58: ( statement )*
                        while ( stream_statement.hasNext() ) {
                            adaptor.addChild(root_1, stream_statement.nextTree());

                        }
                        stream_statement.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:485:4: ( sep )?
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:485:4: ( sep )?
                    int alt72=2;
                    int LA72_0 = input.LA(1);

                    if ( (LA72_0==SC||LA72_0==NL) ) {
                        alt72=1;
                    }
                    switch (alt72) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:485:4: sep
                            {
                            pushFollow(FOLLOW_sep_in_block2640);
                            sep145=sep();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_sep.add(sep145.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 485:9: -> ^( BLOCK )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:485:12: ^( BLOCK )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK, "BLOCK"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class pure_block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pure_block"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:487:1: pure_block : statement ( sep statement )* -> ^( BLOCK ( statement )* ) ;
    public final babel17Parser.pure_block_return pure_block() throws RecognitionException {
        babel17Parser.pure_block_return retval = new babel17Parser.pure_block_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.statement_return statement146 = null;

        babel17Parser.sep_return sep147 = null;

        babel17Parser.statement_return statement148 = null;


        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_sep=new RewriteRuleSubtreeStream(adaptor,"rule sep");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:2: ( statement ( sep statement )* -> ^( BLOCK ( statement )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:4: statement ( sep statement )*
            {
            pushFollow(FOLLOW_statement_in_pure_block2657);
            statement146=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_statement.add(statement146.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:14: ( sep statement )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==NL) ) {
                    int LA74_1 = input.LA(2);

                    if ( (LA74_1==L_begin||(LA74_1>=L_obj && LA74_1<=L_if)||(LA74_1>=L_while && LA74_1<=L_for)||(LA74_1>=L_yield && LA74_1<=L_match)||(LA74_1>=L_val && LA74_1<=L_def)||LA74_1==L_exception||LA74_1==L_try||(LA74_1>=L_concurrent && LA74_1<=L_nil)||(LA74_1>=L_module && LA74_1<=L_import)||LA74_1==L_not||(LA74_1>=L_root && LA74_1<=L_native)||LA74_1==SC||LA74_1==MINUS||(LA74_1>=A_ELLIPSIS && LA74_1<=U_ELLIPSIS)||LA74_1==L_force||(LA74_1>=NL && LA74_1<=Id)||(LA74_1>=Float && LA74_1<=Num)||(LA74_1>=String && LA74_1<=ROUND_BRACKET_OPEN)||LA74_1==SQUARE_BRACKET_OPEN||LA74_1==CURLY_BRACKET_OPEN||LA74_1==UNDERSCORE||(LA74_1>=PRAGMA_LOG && LA74_1<=PRAGMA_PROFILE)) ) {
                        alt74=1;
                    }


                }
                else if ( (LA74_0==SC) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:15: sep statement
            	    {
            	    pushFollow(FOLLOW_sep_in_pure_block2660);
            	    sep147=sep();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sep.add(sep147.getTree());
            	    pushFollow(FOLLOW_statement_in_pure_block2662);
            	    statement148=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_statement.add(statement148.getTree());

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);



            // AST REWRITE
            // elements: statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 488:31: -> ^( BLOCK ( statement )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:34: ^( BLOCK ( statement )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK, "BLOCK"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:488:42: ( statement )*
                while ( stream_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_statement.nextTree());

                }
                stream_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pure_block"

    public static class statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:490:1: statement : ( st_typedef | st_val | st_def | st_yield | st_memoize | st_private | st_module | st_import | expr_or_assign | PRAGMA_PRINT expr -> ^( PRAGMA_PRINT expr ) | PRAGMA_LOG expr -> ^( PRAGMA_LOG expr ) | PRAGMA_PROFILE expr -> ^( PRAGMA_PROFILE expr ) | PRAGMA_ASSERT expr -> ^( PRAGMA_ASSERT expr ) );
    public final babel17Parser.statement_return statement() throws RecognitionException {
        babel17Parser.statement_return retval = new babel17Parser.statement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PRAGMA_PRINT158=null;
        Token PRAGMA_LOG160=null;
        Token PRAGMA_PROFILE162=null;
        Token PRAGMA_ASSERT164=null;
        babel17Parser.st_typedef_return st_typedef149 = null;

        babel17Parser.st_val_return st_val150 = null;

        babel17Parser.st_def_return st_def151 = null;

        babel17Parser.st_yield_return st_yield152 = null;

        babel17Parser.st_memoize_return st_memoize153 = null;

        babel17Parser.st_private_return st_private154 = null;

        babel17Parser.st_module_return st_module155 = null;

        babel17Parser.st_import_return st_import156 = null;

        babel17Parser.expr_or_assign_return expr_or_assign157 = null;

        babel17Parser.expr_return expr159 = null;

        babel17Parser.expr_return expr161 = null;

        babel17Parser.expr_return expr163 = null;

        babel17Parser.expr_return expr165 = null;


        CommonTree PRAGMA_PRINT158_tree=null;
        CommonTree PRAGMA_LOG160_tree=null;
        CommonTree PRAGMA_PROFILE162_tree=null;
        CommonTree PRAGMA_ASSERT164_tree=null;
        RewriteRuleTokenStream stream_PRAGMA_PROFILE=new RewriteRuleTokenStream(adaptor,"token PRAGMA_PROFILE");
        RewriteRuleTokenStream stream_PRAGMA_ASSERT=new RewriteRuleTokenStream(adaptor,"token PRAGMA_ASSERT");
        RewriteRuleTokenStream stream_PRAGMA_LOG=new RewriteRuleTokenStream(adaptor,"token PRAGMA_LOG");
        RewriteRuleTokenStream stream_PRAGMA_PRINT=new RewriteRuleTokenStream(adaptor,"token PRAGMA_PRINT");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:491:2: ( st_typedef | st_val | st_def | st_yield | st_memoize | st_private | st_module | st_import | expr_or_assign | PRAGMA_PRINT expr -> ^( PRAGMA_PRINT expr ) | PRAGMA_LOG expr -> ^( PRAGMA_LOG expr ) | PRAGMA_PROFILE expr -> ^( PRAGMA_PROFILE expr ) | PRAGMA_ASSERT expr -> ^( PRAGMA_ASSERT expr ) )
            int alt75=13;
            alt75 = dfa75.predict(input);
            switch (alt75) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:491:4: st_typedef
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_typedef_in_statement2683);
                    st_typedef149=st_typedef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_typedef149.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:492:10: st_val
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_val_in_statement2694);
                    st_val150=st_val();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_val150.getTree());

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:493:4: st_def
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_def_in_statement2699);
                    st_def151=st_def();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_def151.getTree());

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:494:4: st_yield
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_yield_in_statement2704);
                    st_yield152=st_yield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_yield152.getTree());

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:495:4: st_memoize
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_memoize_in_statement2709);
                    st_memoize153=st_memoize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_memoize153.getTree());

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:496:4: st_private
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_private_in_statement2714);
                    st_private154=st_private();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_private154.getTree());

                    }
                    break;
                case 7 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:497:4: st_module
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_module_in_statement2719);
                    st_module155=st_module();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_module155.getTree());

                    }
                    break;
                case 8 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:498:4: st_import
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_st_import_in_statement2724);
                    st_import156=st_import();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, st_import156.getTree());

                    }
                    break;
                case 9 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:499:4: expr_or_assign
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expr_or_assign_in_statement2729);
                    expr_or_assign157=expr_or_assign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_or_assign157.getTree());

                    }
                    break;
                case 10 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:500:5: PRAGMA_PRINT expr
                    {
                    PRAGMA_PRINT158=(Token)match(input,PRAGMA_PRINT,FOLLOW_PRAGMA_PRINT_in_statement2735); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRAGMA_PRINT.add(PRAGMA_PRINT158);

                    pushFollow(FOLLOW_expr_in_statement2737);
                    expr159=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr159.getTree());


                    // AST REWRITE
                    // elements: PRAGMA_PRINT, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 500:23: -> ^( PRAGMA_PRINT expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:500:26: ^( PRAGMA_PRINT expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PRAGMA_PRINT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:501:5: PRAGMA_LOG expr
                    {
                    PRAGMA_LOG160=(Token)match(input,PRAGMA_LOG,FOLLOW_PRAGMA_LOG_in_statement2751); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRAGMA_LOG.add(PRAGMA_LOG160);

                    pushFollow(FOLLOW_expr_in_statement2753);
                    expr161=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr161.getTree());


                    // AST REWRITE
                    // elements: PRAGMA_LOG, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 501:21: -> ^( PRAGMA_LOG expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:501:24: ^( PRAGMA_LOG expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PRAGMA_LOG.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:502:5: PRAGMA_PROFILE expr
                    {
                    PRAGMA_PROFILE162=(Token)match(input,PRAGMA_PROFILE,FOLLOW_PRAGMA_PROFILE_in_statement2767); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRAGMA_PROFILE.add(PRAGMA_PROFILE162);

                    pushFollow(FOLLOW_expr_in_statement2769);
                    expr163=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr163.getTree());


                    // AST REWRITE
                    // elements: PRAGMA_PROFILE, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 502:25: -> ^( PRAGMA_PROFILE expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:502:28: ^( PRAGMA_PROFILE expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PRAGMA_PROFILE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:503:5: PRAGMA_ASSERT expr
                    {
                    PRAGMA_ASSERT164=(Token)match(input,PRAGMA_ASSERT,FOLLOW_PRAGMA_ASSERT_in_statement2783); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRAGMA_ASSERT.add(PRAGMA_ASSERT164);

                    pushFollow(FOLLOW_expr_in_statement2785);
                    expr165=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr165.getTree());


                    // AST REWRITE
                    // elements: PRAGMA_ASSERT, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 503:24: -> ^( PRAGMA_ASSERT expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:503:27: ^( PRAGMA_ASSERT expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PRAGMA_ASSERT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class objelem_assign_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "objelem_assign"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:505:1: objelem_assign : Id PERIOD Id -> ^( OBJELEM_ASSIGN Id Id ) ;
    public final babel17Parser.objelem_assign_return objelem_assign() throws RecognitionException {
        babel17Parser.objelem_assign_return retval = new babel17Parser.objelem_assign_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id166=null;
        Token PERIOD167=null;
        Token Id168=null;

        CommonTree Id166_tree=null;
        CommonTree PERIOD167_tree=null;
        CommonTree Id168_tree=null;
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:2: ( Id PERIOD Id -> ^( OBJELEM_ASSIGN Id Id ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:4: Id PERIOD Id
            {
            Id166=(Token)match(input,Id,FOLLOW_Id_in_objelem_assign2803); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id166);

            PERIOD167=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_objelem_assign2805); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD167);

            Id168=(Token)match(input,Id,FOLLOW_Id_in_objelem_assign2807); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id168);



            // AST REWRITE
            // elements: Id, Id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 506:17: -> ^( OBJELEM_ASSIGN Id Id )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:506:20: ^( OBJELEM_ASSIGN Id Id )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJELEM_ASSIGN, "OBJELEM_ASSIGN"), root_1);

                adaptor.addChild(root_1, stream_Id.nextNode());
                adaptor.addChild(root_1, stream_Id.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "objelem_assign"

    public static class st_val_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_val"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:1: st_val : L_val ( NL )? ( pattern | objelem_assign ) ( NL )? '=' ( NL )? expr -> ^( VAL ( pattern )* ( objelem_assign )* expr ) ;
    public final babel17Parser.st_val_return st_val() throws RecognitionException {
        babel17Parser.st_val_return retval = new babel17Parser.st_val_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_val169=null;
        Token NL170=null;
        Token NL173=null;
        Token char_literal174=null;
        Token NL175=null;
        babel17Parser.pattern_return pattern171 = null;

        babel17Parser.objelem_assign_return objelem_assign172 = null;

        babel17Parser.expr_return expr176 = null;


        CommonTree L_val169_tree=null;
        CommonTree NL170_tree=null;
        CommonTree NL173_tree=null;
        CommonTree char_literal174_tree=null;
        CommonTree NL175_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_val=new RewriteRuleTokenStream(adaptor,"token L_val");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_objelem_assign=new RewriteRuleSubtreeStream(adaptor,"rule objelem_assign");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:8: ( L_val ( NL )? ( pattern | objelem_assign ) ( NL )? '=' ( NL )? expr -> ^( VAL ( pattern )* ( objelem_assign )* expr ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:10: L_val ( NL )? ( pattern | objelem_assign ) ( NL )? '=' ( NL )? expr
            {
            L_val169=(Token)match(input,L_val,FOLLOW_L_val_in_st_val2826); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_val.add(L_val169);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:16: ( NL )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==NL) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:16: NL
                    {
                    NL170=(Token)match(input,NL,FOLLOW_NL_in_st_val2828); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL170);


                    }
                    break;

            }

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:20: ( pattern | objelem_assign )
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==L_exception||(LA77_0>=L_true && LA77_0<=L_false)||LA77_0==L_nil||LA77_0==MINUS||(LA77_0>=A_ELLIPSIS && LA77_0<=U_ELLIPSIS)||LA77_0==Constr||LA77_0==Num||(LA77_0>=String && LA77_0<=ROUND_BRACKET_OPEN)||LA77_0==SQUARE_BRACKET_OPEN||LA77_0==CURLY_BRACKET_OPEN||LA77_0==UNDERSCORE) ) {
                alt77=1;
            }
            else if ( (LA77_0==Id) ) {
                int LA77_2 = input.LA(2);

                if ( (LA77_2==PERIOD) ) {
                    alt77=2;
                }
                else if ( (LA77_2==ASSIGN||(LA77_2>=A_DOUBLE_COLON && LA77_2<=U_DOUBLE_COLON)||LA77_2==NL) ) {
                    alt77=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 77, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;
            }
            switch (alt77) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:21: pattern
                    {
                    pushFollow(FOLLOW_pattern_in_st_val2832);
                    pattern171=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern171.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:31: objelem_assign
                    {
                    pushFollow(FOLLOW_objelem_assign_in_st_val2836);
                    objelem_assign172=objelem_assign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_objelem_assign.add(objelem_assign172.getTree());

                    }
                    break;

            }

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:47: ( NL )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==NL) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:47: NL
                    {
                    NL173=(Token)match(input,NL,FOLLOW_NL_in_st_val2839); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL173);


                    }
                    break;

            }

            char_literal174=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_st_val2842); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal174);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:55: ( NL )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==NL) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:55: NL
                    {
                    NL175=(Token)match(input,NL,FOLLOW_NL_in_st_val2844); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL175);


                    }
                    break;

            }

            pushFollow(FOLLOW_expr_in_st_val2847);
            expr176=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr176.getTree());


            // AST REWRITE
            // elements: pattern, objelem_assign, expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 508:64: -> ^( VAL ( pattern )* ( objelem_assign )* expr )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:67: ^( VAL ( pattern )* ( objelem_assign )* expr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAL, "VAL"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:73: ( pattern )*
                while ( stream_pattern.hasNext() ) {
                    adaptor.addChild(root_1, stream_pattern.nextTree());

                }
                stream_pattern.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:508:82: ( objelem_assign )*
                while ( stream_objelem_assign.hasNext() ) {
                    adaptor.addChild(root_1, stream_objelem_assign.nextTree());

                }
                stream_objelem_assign.reset();
                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_val"

    public static class st_def_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_def"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:1: st_def : ( L_def ( NL )? Id ( NL )? ( defpattern ( NL )? )? ( ':' ( NL )? typeid ( NL )? )? '=' ( NL )? expr -> ^( DEF Id ( typeid )? ( defpattern )? expr ) | L_def ( NL )? L_this ( NL )? ':' ( NL )? typeid ( NL )? '=' ( NL )? expr -> ^( CONVERSION typeid expr ) );
    public final babel17Parser.st_def_return st_def() throws RecognitionException {
        babel17Parser.st_def_return retval = new babel17Parser.st_def_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_def177=null;
        Token NL178=null;
        Token Id179=null;
        Token NL180=null;
        Token NL182=null;
        Token char_literal183=null;
        Token NL184=null;
        Token NL186=null;
        Token char_literal187=null;
        Token NL188=null;
        Token L_def190=null;
        Token NL191=null;
        Token L_this192=null;
        Token NL193=null;
        Token char_literal194=null;
        Token NL195=null;
        Token NL197=null;
        Token char_literal198=null;
        Token NL199=null;
        babel17Parser.defpattern_return defpattern181 = null;

        babel17Parser.typeid_return typeid185 = null;

        babel17Parser.expr_return expr189 = null;

        babel17Parser.typeid_return typeid196 = null;

        babel17Parser.expr_return expr200 = null;


        CommonTree L_def177_tree=null;
        CommonTree NL178_tree=null;
        CommonTree Id179_tree=null;
        CommonTree NL180_tree=null;
        CommonTree NL182_tree=null;
        CommonTree char_literal183_tree=null;
        CommonTree NL184_tree=null;
        CommonTree NL186_tree=null;
        CommonTree char_literal187_tree=null;
        CommonTree NL188_tree=null;
        CommonTree L_def190_tree=null;
        CommonTree NL191_tree=null;
        CommonTree L_this192_tree=null;
        CommonTree NL193_tree=null;
        CommonTree char_literal194_tree=null;
        CommonTree NL195_tree=null;
        CommonTree NL197_tree=null;
        CommonTree char_literal198_tree=null;
        CommonTree NL199_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_L_this=new RewriteRuleTokenStream(adaptor,"token L_this");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_L_def=new RewriteRuleTokenStream(adaptor,"token L_def");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_typeid=new RewriteRuleSubtreeStream(adaptor,"rule typeid");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_defpattern=new RewriteRuleSubtreeStream(adaptor,"rule defpattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:8: ( L_def ( NL )? Id ( NL )? ( defpattern ( NL )? )? ( ':' ( NL )? typeid ( NL )? )? '=' ( NL )? expr -> ^( DEF Id ( typeid )? ( defpattern )? expr ) | L_def ( NL )? L_this ( NL )? ':' ( NL )? typeid ( NL )? '=' ( NL )? expr -> ^( CONVERSION typeid expr ) )
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==L_def) ) {
                switch ( input.LA(2) ) {
                case NL:
                    {
                    int LA93_2 = input.LA(3);

                    if ( (LA93_2==Id) ) {
                        alt93=1;
                    }
                    else if ( (LA93_2==L_this) ) {
                        alt93=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 93, 2, input);

                        throw nvae;
                    }
                    }
                    break;
                case Id:
                    {
                    alt93=1;
                    }
                    break;
                case L_this:
                    {
                    alt93=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 1, input);

                    throw nvae;
                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;
            }
            switch (alt93) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:10: L_def ( NL )? Id ( NL )? ( defpattern ( NL )? )? ( ':' ( NL )? typeid ( NL )? )? '=' ( NL )? expr
                    {
                    L_def177=(Token)match(input,L_def,FOLLOW_L_def_in_st_def2871); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_def.add(L_def177);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:16: ( NL )?
                    int alt80=2;
                    int LA80_0 = input.LA(1);

                    if ( (LA80_0==NL) ) {
                        alt80=1;
                    }
                    switch (alt80) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:16: NL
                            {
                            NL178=(Token)match(input,NL,FOLLOW_NL_in_st_def2873); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL178);


                            }
                            break;

                    }

                    Id179=(Token)match(input,Id,FOLLOW_Id_in_st_def2876); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id179);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:23: ( NL )?
                    int alt81=2;
                    int LA81_0 = input.LA(1);

                    if ( (LA81_0==NL) ) {
                        alt81=1;
                    }
                    switch (alt81) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:23: NL
                            {
                            NL180=(Token)match(input,NL,FOLLOW_NL_in_st_def2878); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL180);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:27: ( defpattern ( NL )? )?
                    int alt83=2;
                    int LA83_0 = input.LA(1);

                    if ( ((LA83_0>=L_true && LA83_0<=L_false)||LA83_0==L_nil||LA83_0==MINUS||(LA83_0>=Constr && LA83_0<=Id)||LA83_0==Num||(LA83_0>=String && LA83_0<=ROUND_BRACKET_OPEN)||LA83_0==SQUARE_BRACKET_OPEN||LA83_0==CURLY_BRACKET_OPEN||LA83_0==UNDERSCORE) ) {
                        alt83=1;
                    }
                    switch (alt83) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:28: defpattern ( NL )?
                            {
                            pushFollow(FOLLOW_defpattern_in_st_def2882);
                            defpattern181=defpattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_defpattern.add(defpattern181.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:39: ( NL )?
                            int alt82=2;
                            int LA82_0 = input.LA(1);

                            if ( (LA82_0==NL) ) {
                                alt82=1;
                            }
                            switch (alt82) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:39: NL
                                    {
                                    NL182=(Token)match(input,NL,FOLLOW_NL_in_st_def2884); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL182);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:45: ( ':' ( NL )? typeid ( NL )? )?
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==COLON) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:46: ':' ( NL )? typeid ( NL )?
                            {
                            char_literal183=(Token)match(input,COLON,FOLLOW_COLON_in_st_def2890); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(char_literal183);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:50: ( NL )?
                            int alt84=2;
                            int LA84_0 = input.LA(1);

                            if ( (LA84_0==NL) ) {
                                alt84=1;
                            }
                            switch (alt84) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:50: NL
                                    {
                                    NL184=(Token)match(input,NL,FOLLOW_NL_in_st_def2892); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL184);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_typeid_in_st_def2895);
                            typeid185=typeid();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typeid.add(typeid185.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:61: ( NL )?
                            int alt85=2;
                            int LA85_0 = input.LA(1);

                            if ( (LA85_0==NL) ) {
                                alt85=1;
                            }
                            switch (alt85) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:61: NL
                                    {
                                    NL186=(Token)match(input,NL,FOLLOW_NL_in_st_def2897); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL186);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    char_literal187=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_st_def2902); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal187);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:71: ( NL )?
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==NL) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:510:71: NL
                            {
                            NL188=(Token)match(input,NL,FOLLOW_NL_in_st_def2904); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL188);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_st_def2907);
                    expr189=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr189.getTree());


                    // AST REWRITE
                    // elements: defpattern, Id, typeid, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 511:5: -> ^( DEF Id ( typeid )? ( defpattern )? expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:511:8: ^( DEF Id ( typeid )? ( defpattern )? expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DEF, "DEF"), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:511:17: ( typeid )?
                        if ( stream_typeid.hasNext() ) {
                            adaptor.addChild(root_1, stream_typeid.nextTree());

                        }
                        stream_typeid.reset();
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:511:25: ( defpattern )?
                        if ( stream_defpattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_defpattern.nextTree());

                        }
                        stream_defpattern.reset();
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:4: L_def ( NL )? L_this ( NL )? ':' ( NL )? typeid ( NL )? '=' ( NL )? expr
                    {
                    L_def190=(Token)match(input,L_def,FOLLOW_L_def_in_st_def2933); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_def.add(L_def190);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:10: ( NL )?
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==NL) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:10: NL
                            {
                            NL191=(Token)match(input,NL,FOLLOW_NL_in_st_def2935); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL191);


                            }
                            break;

                    }

                    L_this192=(Token)match(input,L_this,FOLLOW_L_this_in_st_def2938); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_this.add(L_this192);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:21: ( NL )?
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==NL) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:21: NL
                            {
                            NL193=(Token)match(input,NL,FOLLOW_NL_in_st_def2940); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL193);


                            }
                            break;

                    }

                    char_literal194=(Token)match(input,COLON,FOLLOW_COLON_in_st_def2943); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(char_literal194);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:29: ( NL )?
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==NL) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:29: NL
                            {
                            NL195=(Token)match(input,NL,FOLLOW_NL_in_st_def2945); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL195);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeid_in_st_def2948);
                    typeid196=typeid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeid.add(typeid196.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:40: ( NL )?
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==NL) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:40: NL
                            {
                            NL197=(Token)match(input,NL,FOLLOW_NL_in_st_def2950); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL197);


                            }
                            break;

                    }

                    char_literal198=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_st_def2953); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal198);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:48: ( NL )?
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( (LA92_0==NL) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:48: NL
                            {
                            NL199=(Token)match(input,NL,FOLLOW_NL_in_st_def2955); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL199);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_st_def2958);
                    expr200=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr200.getTree());


                    // AST REWRITE
                    // elements: expr, typeid
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 512:57: -> ^( CONVERSION typeid expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:512:60: ^( CONVERSION typeid expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONVERSION, "CONVERSION"), root_1);

                        adaptor.addChild(root_1, stream_typeid.nextTree());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_def"

    public static class st_typedef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_typedef"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:514:1: st_typedef : L_typedef ( NL )? Id ( NL )? typedef_clause ( ( NL )? COMMA ( NL )? typedef_clause )* -> ^( TYPEDEF Id ^( NIL_TOKEN ( typedef_clause )* ) ) ;
    public final babel17Parser.st_typedef_return st_typedef() throws RecognitionException {
        babel17Parser.st_typedef_return retval = new babel17Parser.st_typedef_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_typedef201=null;
        Token NL202=null;
        Token Id203=null;
        Token NL204=null;
        Token NL206=null;
        Token COMMA207=null;
        Token NL208=null;
        babel17Parser.typedef_clause_return typedef_clause205 = null;

        babel17Parser.typedef_clause_return typedef_clause209 = null;


        CommonTree L_typedef201_tree=null;
        CommonTree NL202_tree=null;
        CommonTree Id203_tree=null;
        CommonTree NL204_tree=null;
        CommonTree NL206_tree=null;
        CommonTree COMMA207_tree=null;
        CommonTree NL208_tree=null;
        RewriteRuleTokenStream stream_L_typedef=new RewriteRuleTokenStream(adaptor,"token L_typedef");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleSubtreeStream stream_typedef_clause=new RewriteRuleSubtreeStream(adaptor,"rule typedef_clause");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:515:2: ( L_typedef ( NL )? Id ( NL )? typedef_clause ( ( NL )? COMMA ( NL )? typedef_clause )* -> ^( TYPEDEF Id ^( NIL_TOKEN ( typedef_clause )* ) ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:515:4: L_typedef ( NL )? Id ( NL )? typedef_clause ( ( NL )? COMMA ( NL )? typedef_clause )*
            {
            L_typedef201=(Token)match(input,L_typedef,FOLLOW_L_typedef_in_st_typedef2981); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_typedef.add(L_typedef201);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:515:14: ( NL )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==NL) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:515:14: NL
                    {
                    NL202=(Token)match(input,NL,FOLLOW_NL_in_st_typedef2983); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL202);


                    }
                    break;

            }

            Id203=(Token)match(input,Id,FOLLOW_Id_in_st_typedef2986); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id203);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:515:21: ( NL )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==NL) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:515:21: NL
                    {
                    NL204=(Token)match(input,NL,FOLLOW_NL_in_st_typedef2988); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL204);


                    }
                    break;

            }

            pushFollow(FOLLOW_typedef_clause_in_st_typedef2991);
            typedef_clause205=typedef_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_clause.add(typedef_clause205.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:515:40: ( ( NL )? COMMA ( NL )? typedef_clause )*
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( (LA98_0==NL) ) {
                    int LA98_1 = input.LA(2);

                    if ( (LA98_1==COMMA) ) {
                        alt98=1;
                    }


                }
                else if ( (LA98_0==COMMA) ) {
                    alt98=1;
                }


                switch (alt98) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:515:41: ( NL )? COMMA ( NL )? typedef_clause
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:515:41: ( NL )?
            	    int alt96=2;
            	    int LA96_0 = input.LA(1);

            	    if ( (LA96_0==NL) ) {
            	        alt96=1;
            	    }
            	    switch (alt96) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:515:41: NL
            	            {
            	            NL206=(Token)match(input,NL,FOLLOW_NL_in_st_typedef2994); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL206);


            	            }
            	            break;

            	    }

            	    COMMA207=(Token)match(input,COMMA,FOLLOW_COMMA_in_st_typedef2997); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA207);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:515:51: ( NL )?
            	    int alt97=2;
            	    int LA97_0 = input.LA(1);

            	    if ( (LA97_0==NL) ) {
            	        alt97=1;
            	    }
            	    switch (alt97) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:515:51: NL
            	            {
            	            NL208=(Token)match(input,NL,FOLLOW_NL_in_st_typedef2999); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL208);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_typedef_clause_in_st_typedef3002);
            	    typedef_clause209=typedef_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typedef_clause.add(typedef_clause209.getTree());

            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);



            // AST REWRITE
            // elements: typedef_clause, Id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 515:72: -> ^( TYPEDEF Id ^( NIL_TOKEN ( typedef_clause )* ) )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:515:75: ^( TYPEDEF Id ^( NIL_TOKEN ( typedef_clause )* ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEDEF, "TYPEDEF"), root_1);

                adaptor.addChild(root_1, stream_Id.nextNode());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:515:88: ^( NIL_TOKEN ( typedef_clause )* )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:515:100: ( typedef_clause )*
                while ( stream_typedef_clause.hasNext() ) {
                    adaptor.addChild(root_2, stream_typedef_clause.nextTree());

                }
                stream_typedef_clause.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_typedef"

    public static class typedef_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typedef_clause"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:517:1: typedef_clause : ( ( defpattern ( NL )? '=' )=> defpattern ( NL )? '=' ( NL )? expr -> ^( TYPEDEF_CLAUSE defpattern expr ) | defpattern -> ^( TYPEDEF_CLAUSE defpattern ) );
    public final babel17Parser.typedef_clause_return typedef_clause() throws RecognitionException {
        babel17Parser.typedef_clause_return retval = new babel17Parser.typedef_clause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL211=null;
        Token char_literal212=null;
        Token NL213=null;
        babel17Parser.defpattern_return defpattern210 = null;

        babel17Parser.expr_return expr214 = null;

        babel17Parser.defpattern_return defpattern215 = null;


        CommonTree NL211_tree=null;
        CommonTree char_literal212_tree=null;
        CommonTree NL213_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_defpattern=new RewriteRuleSubtreeStream(adaptor,"rule defpattern");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:518:2: ( ( defpattern ( NL )? '=' )=> defpattern ( NL )? '=' ( NL )? expr -> ^( TYPEDEF_CLAUSE defpattern expr ) | defpattern -> ^( TYPEDEF_CLAUSE defpattern ) )
            int alt101=2;
            alt101 = dfa101.predict(input);
            switch (alt101) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:518:4: ( defpattern ( NL )? '=' )=> defpattern ( NL )? '=' ( NL )? expr
                    {
                    pushFollow(FOLLOW_defpattern_in_typedef_clause3040);
                    defpattern210=defpattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_defpattern.add(defpattern210.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:518:39: ( NL )?
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( (LA99_0==NL) ) {
                        alt99=1;
                    }
                    switch (alt99) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:518:39: NL
                            {
                            NL211=(Token)match(input,NL,FOLLOW_NL_in_typedef_clause3042); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL211);


                            }
                            break;

                    }

                    char_literal212=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_typedef_clause3045); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal212);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:518:47: ( NL )?
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==NL) ) {
                        alt100=1;
                    }
                    switch (alt100) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:518:47: NL
                            {
                            NL213=(Token)match(input,NL,FOLLOW_NL_in_typedef_clause3047); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL213);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_typedef_clause3050);
                    expr214=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr214.getTree());


                    // AST REWRITE
                    // elements: defpattern, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 518:56: -> ^( TYPEDEF_CLAUSE defpattern expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:518:59: ^( TYPEDEF_CLAUSE defpattern expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEDEF_CLAUSE, "TYPEDEF_CLAUSE"), root_1);

                        adaptor.addChild(root_1, stream_defpattern.nextTree());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:4: defpattern
                    {
                    pushFollow(FOLLOW_defpattern_in_typedef_clause3065);
                    defpattern215=defpattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_defpattern.add(defpattern215.getTree());


                    // AST REWRITE
                    // elements: defpattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 519:15: -> ^( TYPEDEF_CLAUSE defpattern )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:519:18: ^( TYPEDEF_CLAUSE defpattern )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEDEF_CLAUSE, "TYPEDEF_CLAUSE"), root_1);

                        adaptor.addChild(root_1, stream_defpattern.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "typedef_clause"

    public static class st_yield_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_yield"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:1: st_yield : L_yield expr -> ^( YIELD expr ) ;
    public final babel17Parser.st_yield_return st_yield() throws RecognitionException {
        babel17Parser.st_yield_return retval = new babel17Parser.st_yield_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_yield216=null;
        babel17Parser.expr_return expr217 = null;


        CommonTree L_yield216_tree=null;
        RewriteRuleTokenStream stream_L_yield=new RewriteRuleTokenStream(adaptor,"token L_yield");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:9: ( L_yield expr -> ^( YIELD expr ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:11: L_yield expr
            {
            L_yield216=(Token)match(input,L_yield,FOLLOW_L_yield_in_st_yield3084); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_yield.add(L_yield216);

            pushFollow(FOLLOW_expr_in_st_yield3086);
            expr217=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr217.getTree());


            // AST REWRITE
            // elements: expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 521:24: -> ^( YIELD expr )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:521:27: ^( YIELD expr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YIELD, "YIELD"), root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_yield"

    public static class st_memoize_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_memoize"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:523:1: st_memoize : L_memoize memo_id ( ( NL )? COMMA ( NL )? memo_id )* -> ^( MEMOIZE ( memo_id )* ) ;
    public final babel17Parser.st_memoize_return st_memoize() throws RecognitionException {
        babel17Parser.st_memoize_return retval = new babel17Parser.st_memoize_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_memoize218=null;
        Token NL220=null;
        Token COMMA221=null;
        Token NL222=null;
        babel17Parser.memo_id_return memo_id219 = null;

        babel17Parser.memo_id_return memo_id223 = null;


        CommonTree L_memoize218_tree=null;
        CommonTree NL220_tree=null;
        CommonTree COMMA221_tree=null;
        CommonTree NL222_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_memoize=new RewriteRuleTokenStream(adaptor,"token L_memoize");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_memo_id=new RewriteRuleSubtreeStream(adaptor,"rule memo_id");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:2: ( L_memoize memo_id ( ( NL )? COMMA ( NL )? memo_id )* -> ^( MEMOIZE ( memo_id )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:4: L_memoize memo_id ( ( NL )? COMMA ( NL )? memo_id )*
            {
            L_memoize218=(Token)match(input,L_memoize,FOLLOW_L_memoize_in_st_memoize3107); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_memoize.add(L_memoize218);

            pushFollow(FOLLOW_memo_id_in_st_memoize3109);
            memo_id219=memo_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_memo_id.add(memo_id219.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:22: ( ( NL )? COMMA ( NL )? memo_id )*
            loop104:
            do {
                int alt104=2;
                int LA104_0 = input.LA(1);

                if ( (LA104_0==NL) ) {
                    int LA104_1 = input.LA(2);

                    if ( (LA104_1==COMMA) ) {
                        alt104=1;
                    }


                }
                else if ( (LA104_0==COMMA) ) {
                    alt104=1;
                }


                switch (alt104) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:23: ( NL )? COMMA ( NL )? memo_id
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:23: ( NL )?
            	    int alt102=2;
            	    int LA102_0 = input.LA(1);

            	    if ( (LA102_0==NL) ) {
            	        alt102=1;
            	    }
            	    switch (alt102) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:23: NL
            	            {
            	            NL220=(Token)match(input,NL,FOLLOW_NL_in_st_memoize3112); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL220);


            	            }
            	            break;

            	    }

            	    COMMA221=(Token)match(input,COMMA,FOLLOW_COMMA_in_st_memoize3115); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA221);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:33: ( NL )?
            	    int alt103=2;
            	    int LA103_0 = input.LA(1);

            	    if ( (LA103_0==NL) ) {
            	        alt103=1;
            	    }
            	    switch (alt103) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:524:33: NL
            	            {
            	            NL222=(Token)match(input,NL,FOLLOW_NL_in_st_memoize3117); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL222);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_memo_id_in_st_memoize3120);
            	    memo_id223=memo_id();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_memo_id.add(memo_id223.getTree());

            	    }
            	    break;

            	default :
            	    break loop104;
                }
            } while (true);



            // AST REWRITE
            // elements: memo_id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 525:5: -> ^( MEMOIZE ( memo_id )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:525:8: ^( MEMOIZE ( memo_id )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MEMOIZE, "MEMOIZE"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:525:18: ( memo_id )*
                while ( stream_memo_id.hasNext() ) {
                    adaptor.addChild(root_1, stream_memo_id.nextTree());

                }
                stream_memo_id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_memoize"

    public static class memo_id_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "memo_id"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:1: memo_id : ( Id -> ^( MEMOID_STRONG Id ) | '(' Id ')' -> ^( MEMOID_WEAK Id ) );
    public final babel17Parser.memo_id_return memo_id() throws RecognitionException {
        babel17Parser.memo_id_return retval = new babel17Parser.memo_id_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id224=null;
        Token char_literal225=null;
        Token Id226=null;
        Token char_literal227=null;

        CommonTree Id224_tree=null;
        CommonTree char_literal225_tree=null;
        CommonTree Id226_tree=null;
        CommonTree char_literal227_tree=null;
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:9: ( Id -> ^( MEMOID_STRONG Id ) | '(' Id ')' -> ^( MEMOID_WEAK Id ) )
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==Id) ) {
                alt105=1;
            }
            else if ( (LA105_0==ROUND_BRACKET_OPEN) ) {
                alt105=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 105, 0, input);

                throw nvae;
            }
            switch (alt105) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:11: Id
                    {
                    Id224=(Token)match(input,Id,FOLLOW_Id_in_memo_id3149); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id224);



                    // AST REWRITE
                    // elements: Id
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 527:14: -> ^( MEMOID_STRONG Id )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:527:17: ^( MEMOID_STRONG Id )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MEMOID_STRONG, "MEMOID_STRONG"), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:528:4: '(' Id ')'
                    {
                    char_literal225=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_memo_id3162); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal225);

                    Id226=(Token)match(input,Id,FOLLOW_Id_in_memo_id3164); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Id.add(Id226);

                    char_literal227=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_memo_id3166); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal227);



                    // AST REWRITE
                    // elements: Id
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 528:15: -> ^( MEMOID_WEAK Id )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:528:18: ^( MEMOID_WEAK Id )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MEMOID_WEAK, "MEMOID_WEAK"), root_1);

                        adaptor.addChild(root_1, stream_Id.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "memo_id"

    public static class st_private_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_private"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:530:1: st_private : L_private private_id ( ( NL )? COMMA ( NL )? private_id )* -> ^( PRIVATE ( private_id )* ) ;
    public final babel17Parser.st_private_return st_private() throws RecognitionException {
        babel17Parser.st_private_return retval = new babel17Parser.st_private_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_private228=null;
        Token NL230=null;
        Token COMMA231=null;
        Token NL232=null;
        babel17Parser.private_id_return private_id229 = null;

        babel17Parser.private_id_return private_id233 = null;


        CommonTree L_private228_tree=null;
        CommonTree NL230_tree=null;
        CommonTree COMMA231_tree=null;
        CommonTree NL232_tree=null;
        RewriteRuleTokenStream stream_L_private=new RewriteRuleTokenStream(adaptor,"token L_private");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_private_id=new RewriteRuleSubtreeStream(adaptor,"rule private_id");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:531:2: ( L_private private_id ( ( NL )? COMMA ( NL )? private_id )* -> ^( PRIVATE ( private_id )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:531:4: L_private private_id ( ( NL )? COMMA ( NL )? private_id )*
            {
            L_private228=(Token)match(input,L_private,FOLLOW_L_private_in_st_private3183); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_private.add(L_private228);

            pushFollow(FOLLOW_private_id_in_st_private3185);
            private_id229=private_id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_private_id.add(private_id229.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:531:25: ( ( NL )? COMMA ( NL )? private_id )*
            loop108:
            do {
                int alt108=2;
                int LA108_0 = input.LA(1);

                if ( (LA108_0==NL) ) {
                    int LA108_1 = input.LA(2);

                    if ( (LA108_1==COMMA) ) {
                        alt108=1;
                    }


                }
                else if ( (LA108_0==COMMA) ) {
                    alt108=1;
                }


                switch (alt108) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:531:26: ( NL )? COMMA ( NL )? private_id
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:531:26: ( NL )?
            	    int alt106=2;
            	    int LA106_0 = input.LA(1);

            	    if ( (LA106_0==NL) ) {
            	        alt106=1;
            	    }
            	    switch (alt106) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:531:26: NL
            	            {
            	            NL230=(Token)match(input,NL,FOLLOW_NL_in_st_private3188); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL230);


            	            }
            	            break;

            	    }

            	    COMMA231=(Token)match(input,COMMA,FOLLOW_COMMA_in_st_private3191); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA231);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:531:36: ( NL )?
            	    int alt107=2;
            	    int LA107_0 = input.LA(1);

            	    if ( (LA107_0==NL) ) {
            	        alt107=1;
            	    }
            	    switch (alt107) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:531:36: NL
            	            {
            	            NL232=(Token)match(input,NL,FOLLOW_NL_in_st_private3193); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL232);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_private_id_in_st_private3196);
            	    private_id233=private_id();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_private_id.add(private_id233.getTree());

            	    }
            	    break;

            	default :
            	    break loop108;
                }
            } while (true);



            // AST REWRITE
            // elements: private_id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 532:5: -> ^( PRIVATE ( private_id )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:532:8: ^( PRIVATE ( private_id )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRIVATE, "PRIVATE"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:532:18: ( private_id )*
                while ( stream_private_id.hasNext() ) {
                    adaptor.addChild(root_1, stream_private_id.nextTree());

                }
                stream_private_id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_private"

    public static class private_id_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "private_id"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:534:1: private_id : Id -> ^( PRIVATEID Id ) ;
    public final babel17Parser.private_id_return private_id() throws RecognitionException {
        babel17Parser.private_id_return retval = new babel17Parser.private_id_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id234=null;

        CommonTree Id234_tree=null;
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:535:2: ( Id -> ^( PRIVATEID Id ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:535:4: Id
            {
            Id234=(Token)match(input,Id,FOLLOW_Id_in_private_id3222); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id234);



            // AST REWRITE
            // elements: Id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 535:7: -> ^( PRIVATEID Id )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:535:10: ^( PRIVATEID Id )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRIVATEID, "PRIVATEID"), root_1);

                adaptor.addChild(root_1, stream_Id.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "private_id"

    public static class testid_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "testid"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:537:1: testid : ( Id | L_unittest );
    public final babel17Parser.testid_return testid() throws RecognitionException {
        babel17Parser.testid_return retval = new babel17Parser.testid_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set235=null;

        CommonTree set235_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:537:8: ( Id | L_unittest )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set235=(Token)input.LT(1);
            if ( input.LA(1)==L_unittest||input.LA(1)==Id ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set235));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "testid"

    public static class moduleid_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moduleid"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:540:1: moduleid : Id ( ( NL )? PERIOD ( NL )? testid )* -> ^( MODULEID ( Id )? ( testid )* ) ;
    public final babel17Parser.moduleid_return moduleid() throws RecognitionException {
        babel17Parser.moduleid_return retval = new babel17Parser.moduleid_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Id236=null;
        Token NL237=null;
        Token PERIOD238=null;
        Token NL239=null;
        babel17Parser.testid_return testid240 = null;


        CommonTree Id236_tree=null;
        CommonTree NL237_tree=null;
        CommonTree PERIOD238_tree=null;
        CommonTree NL239_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_testid=new RewriteRuleSubtreeStream(adaptor,"rule testid");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:541:2: ( Id ( ( NL )? PERIOD ( NL )? testid )* -> ^( MODULEID ( Id )? ( testid )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:541:4: Id ( ( NL )? PERIOD ( NL )? testid )*
            {
            Id236=(Token)match(input,Id,FOLLOW_Id_in_moduleid3255); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Id.add(Id236);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:541:7: ( ( NL )? PERIOD ( NL )? testid )*
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( (LA111_0==NL) ) {
                    int LA111_1 = input.LA(2);

                    if ( (LA111_1==PERIOD) ) {
                        alt111=1;
                    }


                }
                else if ( (LA111_0==PERIOD) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:541:8: ( NL )? PERIOD ( NL )? testid
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:541:8: ( NL )?
            	    int alt109=2;
            	    int LA109_0 = input.LA(1);

            	    if ( (LA109_0==NL) ) {
            	        alt109=1;
            	    }
            	    switch (alt109) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:541:8: NL
            	            {
            	            NL237=(Token)match(input,NL,FOLLOW_NL_in_moduleid3258); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL237);


            	            }
            	            break;

            	    }

            	    PERIOD238=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_moduleid3261); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD238);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:541:19: ( NL )?
            	    int alt110=2;
            	    int LA110_0 = input.LA(1);

            	    if ( (LA110_0==NL) ) {
            	        alt110=1;
            	    }
            	    switch (alt110) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:541:19: NL
            	            {
            	            NL239=(Token)match(input,NL,FOLLOW_NL_in_moduleid3263); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL239);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_testid_in_moduleid3266);
            	    testid240=testid();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_testid.add(testid240.getTree());

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);



            // AST REWRITE
            // elements: testid, Id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 541:32: -> ^( MODULEID ( Id )? ( testid )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:541:35: ^( MODULEID ( Id )? ( testid )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MODULEID, "MODULEID"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:541:46: ( Id )?
                if ( stream_Id.hasNext() ) {
                    adaptor.addChild(root_1, stream_Id.nextNode());

                }
                stream_Id.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:541:50: ( testid )*
                while ( stream_testid.hasNext() ) {
                    adaptor.addChild(root_1, stream_testid.nextTree());

                }
                stream_testid.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moduleid"

    public static class st_module_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_module"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:543:1: st_module : L_module ( NL )? moduleid block ( L_unittest block )? L_end -> ^( L_module moduleid block ( L_unittest )? ( block )? ) ;
    public final babel17Parser.st_module_return st_module() throws RecognitionException {
        babel17Parser.st_module_return retval = new babel17Parser.st_module_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_module241=null;
        Token NL242=null;
        Token L_unittest245=null;
        Token L_end247=null;
        babel17Parser.moduleid_return moduleid243 = null;

        babel17Parser.block_return block244 = null;

        babel17Parser.block_return block246 = null;


        CommonTree L_module241_tree=null;
        CommonTree NL242_tree=null;
        CommonTree L_unittest245_tree=null;
        CommonTree L_end247_tree=null;
        RewriteRuleTokenStream stream_L_module=new RewriteRuleTokenStream(adaptor,"token L_module");
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_unittest=new RewriteRuleTokenStream(adaptor,"token L_unittest");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_moduleid=new RewriteRuleSubtreeStream(adaptor,"rule moduleid");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:544:2: ( L_module ( NL )? moduleid block ( L_unittest block )? L_end -> ^( L_module moduleid block ( L_unittest )? ( block )? ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:544:4: L_module ( NL )? moduleid block ( L_unittest block )? L_end
            {
            L_module241=(Token)match(input,L_module,FOLLOW_L_module_in_st_module3289); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_module.add(L_module241);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:544:13: ( NL )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==NL) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:544:13: NL
                    {
                    NL242=(Token)match(input,NL,FOLLOW_NL_in_st_module3291); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL242);


                    }
                    break;

            }

            pushFollow(FOLLOW_moduleid_in_st_module3294);
            moduleid243=moduleid();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moduleid.add(moduleid243.getTree());
            pushFollow(FOLLOW_block_in_st_module3296);
            block244=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block244.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:544:32: ( L_unittest block )?
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==L_unittest) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:544:33: L_unittest block
                    {
                    L_unittest245=(Token)match(input,L_unittest,FOLLOW_L_unittest_in_st_module3299); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_unittest.add(L_unittest245);

                    pushFollow(FOLLOW_block_in_st_module3301);
                    block246=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block246.getTree());

                    }
                    break;

            }

            L_end247=(Token)match(input,L_end,FOLLOW_L_end_in_st_module3305); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end247);



            // AST REWRITE
            // elements: L_module, block, block, moduleid, L_unittest
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 544:58: -> ^( L_module moduleid block ( L_unittest )? ( block )? )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:544:61: ^( L_module moduleid block ( L_unittest )? ( block )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_L_module.nextNode(), root_1);

                adaptor.addChild(root_1, stream_moduleid.nextTree());
                adaptor.addChild(root_1, stream_block.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:544:87: ( L_unittest )?
                if ( stream_L_unittest.hasNext() ) {
                    adaptor.addChild(root_1, stream_L_unittest.nextNode());

                }
                stream_L_unittest.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:544:99: ( block )?
                if ( stream_block.hasNext() ) {
                    adaptor.addChild(root_1, stream_block.nextTree());

                }
                stream_block.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_module"

    public static class importprefix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importprefix"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:546:1: importprefix : ( L_root | testid ) ( ( NL )? PERIOD ( NL )? testid )* -> ^( IMPORT_PREFIX ( L_root )? ( testid )* ) ;
    public final babel17Parser.importprefix_return importprefix() throws RecognitionException {
        babel17Parser.importprefix_return retval = new babel17Parser.importprefix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_root248=null;
        Token NL250=null;
        Token PERIOD251=null;
        Token NL252=null;
        babel17Parser.testid_return testid249 = null;

        babel17Parser.testid_return testid253 = null;


        CommonTree L_root248_tree=null;
        CommonTree NL250_tree=null;
        CommonTree PERIOD251_tree=null;
        CommonTree NL252_tree=null;
        RewriteRuleTokenStream stream_L_root=new RewriteRuleTokenStream(adaptor,"token L_root");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_testid=new RewriteRuleSubtreeStream(adaptor,"rule testid");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:547:2: ( ( L_root | testid ) ( ( NL )? PERIOD ( NL )? testid )* -> ^( IMPORT_PREFIX ( L_root )? ( testid )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:547:4: ( L_root | testid ) ( ( NL )? PERIOD ( NL )? testid )*
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:547:4: ( L_root | testid )
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==L_root) ) {
                alt114=1;
            }
            else if ( (LA114_0==L_unittest||LA114_0==Id) ) {
                alt114=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;
            }
            switch (alt114) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:547:5: L_root
                    {
                    L_root248=(Token)match(input,L_root,FOLLOW_L_root_in_importprefix3332); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_root.add(L_root248);


                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:547:14: testid
                    {
                    pushFollow(FOLLOW_testid_in_importprefix3336);
                    testid249=testid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_testid.add(testid249.getTree());

                    }
                    break;

            }

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:547:22: ( ( NL )? PERIOD ( NL )? testid )*
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);

                if ( (LA117_0==NL) ) {
                    int LA117_1 = input.LA(2);

                    if ( (LA117_1==PERIOD) ) {
                        int LA117_2 = input.LA(3);

                        if ( (LA117_2==NL) ) {
                            int LA117_4 = input.LA(4);

                            if ( (LA117_4==L_unittest||LA117_4==Id) ) {
                                alt117=1;
                            }


                        }
                        else if ( (LA117_2==L_unittest||LA117_2==Id) ) {
                            alt117=1;
                        }


                    }


                }
                else if ( (LA117_0==PERIOD) ) {
                    int LA117_2 = input.LA(2);

                    if ( (LA117_2==NL) ) {
                        int LA117_4 = input.LA(3);

                        if ( (LA117_4==L_unittest||LA117_4==Id) ) {
                            alt117=1;
                        }


                    }
                    else if ( (LA117_2==L_unittest||LA117_2==Id) ) {
                        alt117=1;
                    }


                }


                switch (alt117) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:547:23: ( NL )? PERIOD ( NL )? testid
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:547:23: ( NL )?
            	    int alt115=2;
            	    int LA115_0 = input.LA(1);

            	    if ( (LA115_0==NL) ) {
            	        alt115=1;
            	    }
            	    switch (alt115) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:547:23: NL
            	            {
            	            NL250=(Token)match(input,NL,FOLLOW_NL_in_importprefix3340); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL250);


            	            }
            	            break;

            	    }

            	    PERIOD251=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_importprefix3343); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD251);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:547:34: ( NL )?
            	    int alt116=2;
            	    int LA116_0 = input.LA(1);

            	    if ( (LA116_0==NL) ) {
            	        alt116=1;
            	    }
            	    switch (alt116) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:547:34: NL
            	            {
            	            NL252=(Token)match(input,NL,FOLLOW_NL_in_importprefix3345); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL252);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_testid_in_importprefix3348);
            	    testid253=testid();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_testid.add(testid253.getTree());

            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);



            // AST REWRITE
            // elements: testid, L_root
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 547:47: -> ^( IMPORT_PREFIX ( L_root )? ( testid )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:547:50: ^( IMPORT_PREFIX ( L_root )? ( testid )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_PREFIX, "IMPORT_PREFIX"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:547:66: ( L_root )?
                if ( stream_L_root.hasNext() ) {
                    adaptor.addChild(root_1, stream_L_root.nextNode());

                }
                stream_L_root.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:547:74: ( testid )*
                while ( stream_testid.hasNext() ) {
                    adaptor.addChild(root_1, stream_testid.nextTree());

                }
                stream_testid.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "importprefix"

    public static class importall_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importall"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:549:1: importall : UNDERSCORE -> ^( IMPORT_ALL ) ;
    public final babel17Parser.importall_return importall() throws RecognitionException {
        babel17Parser.importall_return retval = new babel17Parser.importall_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token UNDERSCORE254=null;

        CommonTree UNDERSCORE254_tree=null;
        RewriteRuleTokenStream stream_UNDERSCORE=new RewriteRuleTokenStream(adaptor,"token UNDERSCORE");

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:550:2: ( UNDERSCORE -> ^( IMPORT_ALL ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:550:4: UNDERSCORE
            {
            UNDERSCORE254=(Token)match(input,UNDERSCORE,FOLLOW_UNDERSCORE_in_importall3373); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UNDERSCORE.add(UNDERSCORE254);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 550:15: -> ^( IMPORT_ALL )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:550:18: ^( IMPORT_ALL )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_ALL, "IMPORT_ALL"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "importall"

    public static class importsetclause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importsetclause"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:552:1: importsetclause : ( testid ( ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )? )? -> ^( IMPORT_PLUS testid ( Id )? ) | '-' ( NL )? testid -> ^( IMPORT_MINUS testid ) | importall );
    public final babel17Parser.importsetclause_return importsetclause() throws RecognitionException {
        babel17Parser.importsetclause_return retval = new babel17Parser.importsetclause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL256=null;
        Token NL258=null;
        Token Id259=null;
        Token char_literal260=null;
        Token NL261=null;
        babel17Parser.testid_return testid255 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW257 = null;

        babel17Parser.testid_return testid262 = null;

        babel17Parser.importall_return importall263 = null;


        CommonTree NL256_tree=null;
        CommonTree NL258_tree=null;
        CommonTree Id259_tree=null;
        CommonTree char_literal260_tree=null;
        CommonTree NL261_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_testid=new RewriteRuleSubtreeStream(adaptor,"rule testid");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:2: ( testid ( ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )? )? -> ^( IMPORT_PLUS testid ( Id )? ) | '-' ( NL )? testid -> ^( IMPORT_MINUS testid ) | importall )
            int alt123=3;
            switch ( input.LA(1) ) {
            case L_unittest:
            case Id:
                {
                alt123=1;
                }
                break;
            case MINUS:
                {
                alt123=2;
                }
                break;
            case UNDERSCORE:
                {
                alt123=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;
            }

            switch (alt123) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:4: testid ( ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )? )?
                    {
                    pushFollow(FOLLOW_testid_in_importsetclause3389);
                    testid255=testid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_testid.add(testid255.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:11: ( ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )? )?
                    int alt121=2;
                    int LA121_0 = input.LA(1);

                    if ( (LA121_0==NL) ) {
                        int LA121_1 = input.LA(2);

                        if ( ((LA121_1>=A_DOUBLE_ARROW && LA121_1<=U_DOUBLE_ARROW)) ) {
                            alt121=1;
                        }
                    }
                    else if ( ((LA121_0>=A_DOUBLE_ARROW && LA121_0<=U_DOUBLE_ARROW)) ) {
                        alt121=1;
                    }
                    switch (alt121) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:12: ( NL )? token_DOUBLE_ARROW ( ( NL )? Id )?
                            {
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:12: ( NL )?
                            int alt118=2;
                            int LA118_0 = input.LA(1);

                            if ( (LA118_0==NL) ) {
                                alt118=1;
                            }
                            switch (alt118) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:12: NL
                                    {
                                    NL256=(Token)match(input,NL,FOLLOW_NL_in_importsetclause3392); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL256);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_importsetclause3395);
                            token_DOUBLE_ARROW257=token_DOUBLE_ARROW();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW257.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:35: ( ( NL )? Id )?
                            int alt120=2;
                            int LA120_0 = input.LA(1);

                            if ( (LA120_0==NL) ) {
                                int LA120_1 = input.LA(2);

                                if ( (LA120_1==Id) ) {
                                    alt120=1;
                                }
                            }
                            else if ( (LA120_0==Id) ) {
                                alt120=1;
                            }
                            switch (alt120) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:36: ( NL )? Id
                                    {
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:36: ( NL )?
                                    int alt119=2;
                                    int LA119_0 = input.LA(1);

                                    if ( (LA119_0==NL) ) {
                                        alt119=1;
                                    }
                                    switch (alt119) {
                                        case 1 :
                                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:36: NL
                                            {
                                            NL258=(Token)match(input,NL,FOLLOW_NL_in_importsetclause3398); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_NL.add(NL258);


                                            }
                                            break;

                                    }

                                    Id259=(Token)match(input,Id,FOLLOW_Id_in_importsetclause3401); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_Id.add(Id259);


                                    }
                                    break;

                            }


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: Id, testid
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 553:47: -> ^( IMPORT_PLUS testid ( Id )? )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:50: ^( IMPORT_PLUS testid ( Id )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_PLUS, "IMPORT_PLUS"), root_1);

                        adaptor.addChild(root_1, stream_testid.nextTree());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:553:71: ( Id )?
                        if ( stream_Id.hasNext() ) {
                            adaptor.addChild(root_1, stream_Id.nextNode());

                        }
                        stream_Id.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:554:4: '-' ( NL )? testid
                    {
                    char_literal260=(Token)match(input,MINUS,FOLLOW_MINUS_in_importsetclause3421); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(char_literal260);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:554:8: ( NL )?
                    int alt122=2;
                    int LA122_0 = input.LA(1);

                    if ( (LA122_0==NL) ) {
                        alt122=1;
                    }
                    switch (alt122) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:554:8: NL
                            {
                            NL261=(Token)match(input,NL,FOLLOW_NL_in_importsetclause3423); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL261);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_testid_in_importsetclause3426);
                    testid262=testid();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_testid.add(testid262.getTree());


                    // AST REWRITE
                    // elements: testid
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 554:19: -> ^( IMPORT_MINUS testid )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:554:22: ^( IMPORT_MINUS testid )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_MINUS, "IMPORT_MINUS"), root_1);

                        adaptor.addChild(root_1, stream_testid.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:555:4: importall
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_importall_in_importsetclause3439);
                    importall263=importall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, importall263.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "importsetclause"

    public static class importset_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importset"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:557:1: importset : '{' ( NL )? importsetclause ( ( NL )? ',' ( NL )? importsetclause )* ( NL )? '}' -> ^( IMPORT_SET ( importsetclause )* ) ;
    public final babel17Parser.importset_return importset() throws RecognitionException {
        babel17Parser.importset_return retval = new babel17Parser.importset_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal264=null;
        Token NL265=null;
        Token NL267=null;
        Token char_literal268=null;
        Token NL269=null;
        Token NL271=null;
        Token char_literal272=null;
        babel17Parser.importsetclause_return importsetclause266 = null;

        babel17Parser.importsetclause_return importsetclause270 = null;


        CommonTree char_literal264_tree=null;
        CommonTree NL265_tree=null;
        CommonTree NL267_tree=null;
        CommonTree char_literal268_tree=null;
        CommonTree NL269_tree=null;
        CommonTree NL271_tree=null;
        CommonTree char_literal272_tree=null;
        RewriteRuleTokenStream stream_CURLY_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_OPEN");
        RewriteRuleTokenStream stream_CURLY_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_importsetclause=new RewriteRuleSubtreeStream(adaptor,"rule importsetclause");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:2: ( '{' ( NL )? importsetclause ( ( NL )? ',' ( NL )? importsetclause )* ( NL )? '}' -> ^( IMPORT_SET ( importsetclause )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:4: '{' ( NL )? importsetclause ( ( NL )? ',' ( NL )? importsetclause )* ( NL )? '}'
            {
            char_literal264=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_importset3449); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal264);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:8: ( NL )?
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==NL) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:8: NL
                    {
                    NL265=(Token)match(input,NL,FOLLOW_NL_in_importset3451); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL265);


                    }
                    break;

            }

            pushFollow(FOLLOW_importsetclause_in_importset3454);
            importsetclause266=importsetclause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importsetclause.add(importsetclause266.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:28: ( ( NL )? ',' ( NL )? importsetclause )*
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( (LA127_0==NL) ) {
                    int LA127_1 = input.LA(2);

                    if ( (LA127_1==COMMA) ) {
                        alt127=1;
                    }


                }
                else if ( (LA127_0==COMMA) ) {
                    alt127=1;
                }


                switch (alt127) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:29: ( NL )? ',' ( NL )? importsetclause
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:29: ( NL )?
            	    int alt125=2;
            	    int LA125_0 = input.LA(1);

            	    if ( (LA125_0==NL) ) {
            	        alt125=1;
            	    }
            	    switch (alt125) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:29: NL
            	            {
            	            NL267=(Token)match(input,NL,FOLLOW_NL_in_importset3457); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL267);


            	            }
            	            break;

            	    }

            	    char_literal268=(Token)match(input,COMMA,FOLLOW_COMMA_in_importset3460); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal268);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:37: ( NL )?
            	    int alt126=2;
            	    int LA126_0 = input.LA(1);

            	    if ( (LA126_0==NL) ) {
            	        alt126=1;
            	    }
            	    switch (alt126) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:37: NL
            	            {
            	            NL269=(Token)match(input,NL,FOLLOW_NL_in_importset3462); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL269);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_importsetclause_in_importset3465);
            	    importsetclause270=importsetclause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_importsetclause.add(importsetclause270.getTree());

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:59: ( NL )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==NL) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:59: NL
                    {
                    NL271=(Token)match(input,NL,FOLLOW_NL_in_importset3469); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL271);


                    }
                    break;

            }

            char_literal272=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_importset3472); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal272);



            // AST REWRITE
            // elements: importsetclause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 558:67: -> ^( IMPORT_SET ( importsetclause )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:70: ^( IMPORT_SET ( importsetclause )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT_SET, "IMPORT_SET"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:558:83: ( importsetclause )*
                while ( stream_importsetclause.hasNext() ) {
                    adaptor.addChild(root_1, stream_importsetclause.nextTree());

                }
                stream_importsetclause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "importset"

    public static class st_import_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "st_import"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:560:1: st_import : L_import ( NL )? importprefix ( ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id ) )? -> ^( L_import importprefix ( importall )? ( importset )? ( Id )? ) ;
    public final babel17Parser.st_import_return st_import() throws RecognitionException {
        babel17Parser.st_import_return retval = new babel17Parser.st_import_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_import273=null;
        Token NL274=null;
        Token NL276=null;
        Token PERIOD277=null;
        Token NL278=null;
        Token PERIOD280=null;
        Token NL281=null;
        Token NL284=null;
        Token Id285=null;
        babel17Parser.importprefix_return importprefix275 = null;

        babel17Parser.importall_return importall279 = null;

        babel17Parser.importset_return importset282 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW283 = null;


        CommonTree L_import273_tree=null;
        CommonTree NL274_tree=null;
        CommonTree NL276_tree=null;
        CommonTree PERIOD277_tree=null;
        CommonTree NL278_tree=null;
        CommonTree PERIOD280_tree=null;
        CommonTree NL281_tree=null;
        CommonTree NL284_tree=null;
        CommonTree Id285_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleTokenStream stream_L_import=new RewriteRuleTokenStream(adaptor,"token L_import");
        RewriteRuleSubtreeStream stream_importprefix=new RewriteRuleSubtreeStream(adaptor,"rule importprefix");
        RewriteRuleSubtreeStream stream_importset=new RewriteRuleSubtreeStream(adaptor,"rule importset");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_importall=new RewriteRuleSubtreeStream(adaptor,"rule importall");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:2: ( L_import ( NL )? importprefix ( ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id ) )? -> ^( L_import importprefix ( importall )? ( importset )? ( Id )? ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:4: L_import ( NL )? importprefix ( ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id ) )?
            {
            L_import273=(Token)match(input,L_import,FOLLOW_L_import_in_st_import3490); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_import.add(L_import273);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:13: ( NL )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==NL) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:13: NL
                    {
                    NL274=(Token)match(input,NL,FOLLOW_NL_in_st_import3492); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL274);


                    }
                    break;

            }

            pushFollow(FOLLOW_importprefix_in_st_import3495);
            importprefix275=importprefix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importprefix.add(importprefix275.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:30: ( ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id ) )?
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==NL) ) {
                int LA135_1 = input.LA(2);

                if ( ((LA135_1>=A_DOUBLE_ARROW && LA135_1<=U_DOUBLE_ARROW)||LA135_1==PERIOD) ) {
                    alt135=1;
                }
            }
            else if ( ((LA135_0>=A_DOUBLE_ARROW && LA135_0<=U_DOUBLE_ARROW)||LA135_0==PERIOD) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:31: ( NL )? ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id )
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:31: ( NL )?
                    int alt130=2;
                    int LA130_0 = input.LA(1);

                    if ( (LA130_0==NL) ) {
                        alt130=1;
                    }
                    switch (alt130) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:31: NL
                            {
                            NL276=(Token)match(input,NL,FOLLOW_NL_in_st_import3498); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL276);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:35: ( PERIOD ( NL )? importall | PERIOD ( NL )? importset | token_DOUBLE_ARROW ( NL )? Id )
                    int alt134=3;
                    int LA134_0 = input.LA(1);

                    if ( (LA134_0==PERIOD) ) {
                        switch ( input.LA(2) ) {
                        case NL:
                            {
                            int LA134_3 = input.LA(3);

                            if ( (LA134_3==CURLY_BRACKET_OPEN) ) {
                                alt134=2;
                            }
                            else if ( (LA134_3==UNDERSCORE) ) {
                                alt134=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 134, 3, input);

                                throw nvae;
                            }
                            }
                            break;
                        case CURLY_BRACKET_OPEN:
                            {
                            alt134=2;
                            }
                            break;
                        case UNDERSCORE:
                            {
                            alt134=1;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 134, 1, input);

                            throw nvae;
                        }

                    }
                    else if ( ((LA134_0>=A_DOUBLE_ARROW && LA134_0<=U_DOUBLE_ARROW)) ) {
                        alt134=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 134, 0, input);

                        throw nvae;
                    }
                    switch (alt134) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:36: PERIOD ( NL )? importall
                            {
                            PERIOD277=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_st_import3502); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD277);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:43: ( NL )?
                            int alt131=2;
                            int LA131_0 = input.LA(1);

                            if ( (LA131_0==NL) ) {
                                alt131=1;
                            }
                            switch (alt131) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:43: NL
                                    {
                                    NL278=(Token)match(input,NL,FOLLOW_NL_in_st_import3504); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL278);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_importall_in_st_import3507);
                            importall279=importall();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_importall.add(importall279.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:59: PERIOD ( NL )? importset
                            {
                            PERIOD280=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_st_import3511); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD280);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:66: ( NL )?
                            int alt132=2;
                            int LA132_0 = input.LA(1);

                            if ( (LA132_0==NL) ) {
                                alt132=1;
                            }
                            switch (alt132) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:66: NL
                                    {
                                    NL281=(Token)match(input,NL,FOLLOW_NL_in_st_import3513); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL281);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_importset_in_st_import3516);
                            importset282=importset();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_importset.add(importset282.getTree());

                            }
                            break;
                        case 3 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:82: token_DOUBLE_ARROW ( NL )? Id
                            {
                            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_st_import3520);
                            token_DOUBLE_ARROW283=token_DOUBLE_ARROW();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW283.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:101: ( NL )?
                            int alt133=2;
                            int LA133_0 = input.LA(1);

                            if ( (LA133_0==NL) ) {
                                alt133=1;
                            }
                            switch (alt133) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:101: NL
                                    {
                                    NL284=(Token)match(input,NL,FOLLOW_NL_in_st_import3522); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL284);


                                    }
                                    break;

                            }

                            Id285=(Token)match(input,Id,FOLLOW_Id_in_st_import3525); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Id.add(Id285);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: Id, importset, importall, importprefix, L_import
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 561:111: -> ^( L_import importprefix ( importall )? ( importset )? ( Id )? )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:114: ^( L_import importprefix ( importall )? ( importset )? ( Id )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_L_import.nextNode(), root_1);

                adaptor.addChild(root_1, stream_importprefix.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:138: ( importall )?
                if ( stream_importall.hasNext() ) {
                    adaptor.addChild(root_1, stream_importall.nextTree());

                }
                stream_importall.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:149: ( importset )?
                if ( stream_importset.hasNext() ) {
                    adaptor.addChild(root_1, stream_importset.nextTree());

                }
                stream_importset.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:561:160: ( Id )?
                if ( stream_Id.hasNext() ) {
                    adaptor.addChild(root_1, stream_Id.nextNode());

                }
                stream_Id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "st_import"

    public static class expr_or_assign_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_or_assign"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:563:1: expr_or_assign : ( ( ( pattern | objelem_assign ) ( NL )? '=' )=> ( pattern | objelem_assign ) ( NL )? '=' ( NL )? expr -> ^( ASSIGN ( pattern )* ( objelem_assign )* expr ) | expr );
    public final babel17Parser.expr_or_assign_return expr_or_assign() throws RecognitionException {
        babel17Parser.expr_or_assign_return retval = new babel17Parser.expr_or_assign_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL288=null;
        Token char_literal289=null;
        Token NL290=null;
        babel17Parser.pattern_return pattern286 = null;

        babel17Parser.objelem_assign_return objelem_assign287 = null;

        babel17Parser.expr_return expr291 = null;

        babel17Parser.expr_return expr292 = null;


        CommonTree NL288_tree=null;
        CommonTree char_literal289_tree=null;
        CommonTree NL290_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_objelem_assign=new RewriteRuleSubtreeStream(adaptor,"rule objelem_assign");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:2: ( ( ( pattern | objelem_assign ) ( NL )? '=' )=> ( pattern | objelem_assign ) ( NL )? '=' ( NL )? expr -> ^( ASSIGN ( pattern )* ( objelem_assign )* expr ) | expr )
            int alt139=2;
            alt139 = dfa139.predict(input);
            switch (alt139) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:4: ( ( pattern | objelem_assign ) ( NL )? '=' )=> ( pattern | objelem_assign ) ( NL )? '=' ( NL )? expr
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:44: ( pattern | objelem_assign )
                    int alt136=2;
                    int LA136_0 = input.LA(1);

                    if ( (LA136_0==L_exception||(LA136_0>=L_true && LA136_0<=L_false)||LA136_0==L_nil||LA136_0==MINUS||(LA136_0>=A_ELLIPSIS && LA136_0<=U_ELLIPSIS)||LA136_0==Constr||LA136_0==Num||(LA136_0>=String && LA136_0<=ROUND_BRACKET_OPEN)||LA136_0==SQUARE_BRACKET_OPEN||LA136_0==CURLY_BRACKET_OPEN||LA136_0==UNDERSCORE) ) {
                        alt136=1;
                    }
                    else if ( (LA136_0==Id) ) {
                        int LA136_2 = input.LA(2);

                        if ( (LA136_2==PERIOD) ) {
                            alt136=2;
                        }
                        else if ( (LA136_2==ASSIGN||(LA136_2>=A_DOUBLE_COLON && LA136_2<=U_DOUBLE_COLON)||LA136_2==NL) ) {
                            alt136=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 136, 2, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 136, 0, input);

                        throw nvae;
                    }
                    switch (alt136) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:45: pattern
                            {
                            pushFollow(FOLLOW_pattern_in_expr_or_assign3573);
                            pattern286=pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pattern.add(pattern286.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:55: objelem_assign
                            {
                            pushFollow(FOLLOW_objelem_assign_in_expr_or_assign3577);
                            objelem_assign287=objelem_assign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_objelem_assign.add(objelem_assign287.getTree());

                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:71: ( NL )?
                    int alt137=2;
                    int LA137_0 = input.LA(1);

                    if ( (LA137_0==NL) ) {
                        alt137=1;
                    }
                    switch (alt137) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:71: NL
                            {
                            NL288=(Token)match(input,NL,FOLLOW_NL_in_expr_or_assign3580); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL288);


                            }
                            break;

                    }

                    char_literal289=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_expr_or_assign3583); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(char_literal289);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:79: ( NL )?
                    int alt138=2;
                    int LA138_0 = input.LA(1);

                    if ( (LA138_0==NL) ) {
                        alt138=1;
                    }
                    switch (alt138) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:79: NL
                            {
                            NL290=(Token)match(input,NL,FOLLOW_NL_in_expr_or_assign3585); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL290);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expr_in_expr_or_assign3588);
                    expr291=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr291.getTree());


                    // AST REWRITE
                    // elements: expr, pattern, objelem_assign
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 564:88: -> ^( ASSIGN ( pattern )* ( objelem_assign )* expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:91: ^( ASSIGN ( pattern )* ( objelem_assign )* expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:100: ( pattern )*
                        while ( stream_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_pattern.nextTree());

                        }
                        stream_pattern.reset();
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:109: ( objelem_assign )*
                        while ( stream_objelem_assign.hasNext() ) {
                            adaptor.addChild(root_1, stream_objelem_assign.nextTree());

                        }
                        stream_objelem_assign.reset();
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:565:4: expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expr_in_expr_or_assign3607);
                    expr292=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr292.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expr_or_assign"

    public static class expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:567:1: expr : ( lop_expr | obj_expr );
    public final babel17Parser.expr_return expr() throws RecognitionException {
        babel17Parser.expr_return retval = new babel17Parser.expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.lop_expr_return lop_expr293 = null;

        babel17Parser.obj_expr_return obj_expr294 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:568:2: ( lop_expr | obj_expr )
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==L_begin||(LA140_0>=L_with && LA140_0<=L_if)||(LA140_0>=L_while && LA140_0<=L_for)||LA140_0==L_match||LA140_0==L_exception||LA140_0==L_try||(LA140_0>=L_concurrent && LA140_0<=L_lazy)||(LA140_0>=L_true && LA140_0<=L_nil)||LA140_0==L_typeof||LA140_0==L_not||(LA140_0>=L_root && LA140_0<=L_native)||LA140_0==MINUS||(LA140_0>=A_ELLIPSIS && LA140_0<=U_ELLIPSIS)||LA140_0==L_force||(LA140_0>=Constr && LA140_0<=Id)||(LA140_0>=Float && LA140_0<=Num)||(LA140_0>=String && LA140_0<=ROUND_BRACKET_OPEN)||LA140_0==SQUARE_BRACKET_OPEN||LA140_0==CURLY_BRACKET_OPEN||LA140_0==UNDERSCORE) ) {
                alt140=1;
            }
            else if ( (LA140_0==L_obj) ) {
                alt140=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                throw nvae;
            }
            switch (alt140) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:568:4: lop_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lop_expr_in_expr3618);
                    lop_expr293=lop_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lop_expr293.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:569:4: obj_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_obj_expr_in_expr3623);
                    obj_expr294=obj_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, obj_expr294.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expr"

    public static class control_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "control_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:571:1: control_expr : ( if_expr | while_do_expr | match_expr | for_expr | try_expr | begin_end );
    public final babel17Parser.control_expr_return control_expr() throws RecognitionException {
        babel17Parser.control_expr_return retval = new babel17Parser.control_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.if_expr_return if_expr295 = null;

        babel17Parser.while_do_expr_return while_do_expr296 = null;

        babel17Parser.match_expr_return match_expr297 = null;

        babel17Parser.for_expr_return for_expr298 = null;

        babel17Parser.try_expr_return try_expr299 = null;

        babel17Parser.begin_end_return begin_end300 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:572:2: ( if_expr | while_do_expr | match_expr | for_expr | try_expr | begin_end )
            int alt141=6;
            switch ( input.LA(1) ) {
            case L_if:
                {
                alt141=1;
                }
                break;
            case L_while:
                {
                alt141=2;
                }
                break;
            case L_match:
                {
                alt141=3;
                }
                break;
            case L_for:
                {
                alt141=4;
                }
                break;
            case L_try:
                {
                alt141=5;
                }
                break;
            case L_begin:
                {
                alt141=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;
            }

            switch (alt141) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:572:4: if_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_if_expr_in_control_expr3633);
                    if_expr295=if_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_expr295.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:573:4: while_do_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_while_do_expr_in_control_expr3638);
                    while_do_expr296=while_do_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_do_expr296.getTree());

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:574:4: match_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_match_expr_in_control_expr3643);
                    match_expr297=match_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, match_expr297.getTree());

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:575:4: for_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_for_expr_in_control_expr3648);
                    for_expr298=for_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_expr298.getTree());

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:576:5: try_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_try_expr_in_control_expr3654);
                    try_expr299=try_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, try_expr299.getTree());

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:577:4: begin_end
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_begin_end_in_control_expr3659);
                    begin_end300=begin_end();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, begin_end300.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "control_expr"

    public static class with_control_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "with_control_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:579:1: with_control_expr : ( control_expr | L_with ( NL )? protected_expr ( NL )? L_do block L_end -> ^( WITH protected_expr ^( BEGIN block ) ) );
    public final babel17Parser.with_control_expr_return with_control_expr() throws RecognitionException {
        babel17Parser.with_control_expr_return retval = new babel17Parser.with_control_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_with302=null;
        Token NL303=null;
        Token NL305=null;
        Token L_do306=null;
        Token L_end308=null;
        babel17Parser.control_expr_return control_expr301 = null;

        babel17Parser.protected_expr_return protected_expr304 = null;

        babel17Parser.block_return block307 = null;


        CommonTree L_with302_tree=null;
        CommonTree NL303_tree=null;
        CommonTree NL305_tree=null;
        CommonTree L_do306_tree=null;
        CommonTree L_end308_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_do=new RewriteRuleTokenStream(adaptor,"token L_do");
        RewriteRuleTokenStream stream_L_with=new RewriteRuleTokenStream(adaptor,"token L_with");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:580:2: ( control_expr | L_with ( NL )? protected_expr ( NL )? L_do block L_end -> ^( WITH protected_expr ^( BEGIN block ) ) )
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==L_begin||LA144_0==L_if||(LA144_0>=L_while && LA144_0<=L_for)||LA144_0==L_match||LA144_0==L_try) ) {
                alt144=1;
            }
            else if ( (LA144_0==L_with) ) {
                alt144=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;
            }
            switch (alt144) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:580:4: control_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_control_expr_in_with_control_expr3669);
                    control_expr301=control_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, control_expr301.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:581:4: L_with ( NL )? protected_expr ( NL )? L_do block L_end
                    {
                    L_with302=(Token)match(input,L_with,FOLLOW_L_with_in_with_control_expr3674); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_with.add(L_with302);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:581:11: ( NL )?
                    int alt142=2;
                    int LA142_0 = input.LA(1);

                    if ( (LA142_0==NL) ) {
                        alt142=1;
                    }
                    switch (alt142) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:581:11: NL
                            {
                            NL303=(Token)match(input,NL,FOLLOW_NL_in_with_control_expr3676); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL303);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_in_with_control_expr3679);
                    protected_expr304=protected_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr304.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:581:30: ( NL )?
                    int alt143=2;
                    int LA143_0 = input.LA(1);

                    if ( (LA143_0==NL) ) {
                        alt143=1;
                    }
                    switch (alt143) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:581:30: NL
                            {
                            NL305=(Token)match(input,NL,FOLLOW_NL_in_with_control_expr3681); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL305);


                            }
                            break;

                    }

                    L_do306=(Token)match(input,L_do,FOLLOW_L_do_in_with_control_expr3684); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_do.add(L_do306);

                    pushFollow(FOLLOW_block_in_with_control_expr3686);
                    block307=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block307.getTree());
                    L_end308=(Token)match(input,L_end,FOLLOW_L_end_in_with_control_expr3688); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_end.add(L_end308);



                    // AST REWRITE
                    // elements: block, protected_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 581:51: -> ^( WITH protected_expr ^( BEGIN block ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:581:54: ^( WITH protected_expr ^( BEGIN block ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WITH, "WITH"), root_1);

                        adaptor.addChild(root_1, stream_protected_expr.nextTree());
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:581:76: ^( BEGIN block )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BEGIN, "BEGIN"), root_2);

                        adaptor.addChild(root_2, stream_block.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "with_control_expr"

    public static class protected_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "protected_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:584:1: protected_expr : ( p_lop_expr | obj_expr );
    public final babel17Parser.protected_expr_return protected_expr() throws RecognitionException {
        babel17Parser.protected_expr_return retval = new babel17Parser.protected_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.p_lop_expr_return p_lop_expr309 = null;

        babel17Parser.obj_expr_return obj_expr310 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:585:2: ( p_lop_expr | obj_expr )
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==L_begin||(LA145_0>=L_with && LA145_0<=L_if)||(LA145_0>=L_while && LA145_0<=L_for)||LA145_0==L_match||LA145_0==L_exception||LA145_0==L_try||(LA145_0>=L_concurrent && LA145_0<=L_lazy)||(LA145_0>=L_true && LA145_0<=L_nil)||LA145_0==L_typeof||LA145_0==L_not||(LA145_0>=L_root && LA145_0<=L_native)||LA145_0==MINUS||(LA145_0>=A_ELLIPSIS && LA145_0<=U_ELLIPSIS)||LA145_0==L_force||(LA145_0>=Constr && LA145_0<=Id)||(LA145_0>=Float && LA145_0<=Num)||(LA145_0>=String && LA145_0<=ROUND_BRACKET_OPEN)||LA145_0==SQUARE_BRACKET_OPEN||LA145_0==CURLY_BRACKET_OPEN||LA145_0==UNDERSCORE) ) {
                alt145=1;
            }
            else if ( (LA145_0==L_obj) ) {
                alt145=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);

                throw nvae;
            }
            switch (alt145) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:585:4: p_lop_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_lop_expr_in_protected_expr3713);
                    p_lop_expr309=p_lop_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_lop_expr309.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:586:4: obj_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_obj_expr_in_protected_expr3718);
                    obj_expr310=obj_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, obj_expr310.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "protected_expr"

    public static class protected_expr_nc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "protected_expr_nc"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:588:1: protected_expr_nc : protected_expr ;
    public final babel17Parser.protected_expr_nc_return protected_expr_nc() throws RecognitionException {
        babel17Parser.protected_expr_nc_return retval = new babel17Parser.protected_expr_nc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.protected_expr_return protected_expr311 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:589:2: ( protected_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:589:4: protected_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_protected_expr_in_protected_expr_nc3729);
            protected_expr311=protected_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, protected_expr311.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "protected_expr_nc"

    public static class begin_end_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "begin_end"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:591:1: begin_end : L_begin block L_end -> ^( BEGIN block ) ;
    public final babel17Parser.begin_end_return begin_end() throws RecognitionException {
        babel17Parser.begin_end_return retval = new babel17Parser.begin_end_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_begin312=null;
        Token L_end314=null;
        babel17Parser.block_return block313 = null;


        CommonTree L_begin312_tree=null;
        CommonTree L_end314_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_begin=new RewriteRuleTokenStream(adaptor,"token L_begin");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:592:2: ( L_begin block L_end -> ^( BEGIN block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:592:4: L_begin block L_end
            {
            L_begin312=(Token)match(input,L_begin,FOLLOW_L_begin_in_begin_end3739); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_begin.add(L_begin312);

            pushFollow(FOLLOW_block_in_begin_end3741);
            block313=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block313.getTree());
            L_end314=(Token)match(input,L_end,FOLLOW_L_end_in_begin_end3743); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end314);



            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 592:24: -> ^( BEGIN block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:592:27: ^( BEGIN block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BEGIN, "BEGIN"), root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "begin_end"

    public static class parents_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parents"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:595:1: parents : ( '+' primitive_expr -> ^( PARENTS_PLUS primitive_expr ) | '*' primitive_expr -> ^( PARENTS_MUL primitive_expr ) );
    public final babel17Parser.parents_return parents() throws RecognitionException {
        babel17Parser.parents_return retval = new babel17Parser.parents_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal315=null;
        Token char_literal317=null;
        babel17Parser.primitive_expr_return primitive_expr316 = null;

        babel17Parser.primitive_expr_return primitive_expr318 = null;


        CommonTree char_literal315_tree=null;
        CommonTree char_literal317_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_TIMES=new RewriteRuleTokenStream(adaptor,"token TIMES");
        RewriteRuleSubtreeStream stream_primitive_expr=new RewriteRuleSubtreeStream(adaptor,"rule primitive_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:595:9: ( '+' primitive_expr -> ^( PARENTS_PLUS primitive_expr ) | '*' primitive_expr -> ^( PARENTS_MUL primitive_expr ) )
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==PLUS) ) {
                alt146=1;
            }
            else if ( (LA146_0==TIMES) ) {
                alt146=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);

                throw nvae;
            }
            switch (alt146) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:595:11: '+' primitive_expr
                    {
                    char_literal315=(Token)match(input,PLUS,FOLLOW_PLUS_in_parents3761); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(char_literal315);

                    pushFollow(FOLLOW_primitive_expr_in_parents3763);
                    primitive_expr316=primitive_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitive_expr.add(primitive_expr316.getTree());


                    // AST REWRITE
                    // elements: primitive_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 595:30: -> ^( PARENTS_PLUS primitive_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:595:33: ^( PARENTS_PLUS primitive_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARENTS_PLUS, "PARENTS_PLUS"), root_1);

                        adaptor.addChild(root_1, stream_primitive_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:596:4: '*' primitive_expr
                    {
                    char_literal317=(Token)match(input,TIMES,FOLLOW_TIMES_in_parents3776); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMES.add(char_literal317);

                    pushFollow(FOLLOW_primitive_expr_in_parents3778);
                    primitive_expr318=primitive_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitive_expr.add(primitive_expr318.getTree());


                    // AST REWRITE
                    // elements: primitive_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 596:23: -> ^( PARENTS_MUL primitive_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:596:26: ^( PARENTS_MUL primitive_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARENTS_MUL, "PARENTS_MUL"), root_1);

                        adaptor.addChild(root_1, stream_primitive_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parents"

    public static class obj_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "obj_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:1: obj_expr : ( ( L_obj ( NL )? parents )=> L_obj ( NL )? parents block L_end -> ^( OBJ block parents ) | L_obj block L_end -> ^( OBJ block ) );
    public final babel17Parser.obj_expr_return obj_expr() throws RecognitionException {
        babel17Parser.obj_expr_return retval = new babel17Parser.obj_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_obj319=null;
        Token NL320=null;
        Token L_end323=null;
        Token L_obj324=null;
        Token L_end326=null;
        babel17Parser.parents_return parents321 = null;

        babel17Parser.block_return block322 = null;

        babel17Parser.block_return block325 = null;


        CommonTree L_obj319_tree=null;
        CommonTree NL320_tree=null;
        CommonTree L_end323_tree=null;
        CommonTree L_obj324_tree=null;
        CommonTree L_end326_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_obj=new RewriteRuleTokenStream(adaptor,"token L_obj");
        RewriteRuleSubtreeStream stream_parents=new RewriteRuleSubtreeStream(adaptor,"rule parents");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:9: ( ( L_obj ( NL )? parents )=> L_obj ( NL )? parents block L_end -> ^( OBJ block parents ) | L_obj block L_end -> ^( OBJ block ) )
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==L_obj) ) {
                int LA148_1 = input.LA(2);

                if ( (LA148_1==NL) ) {
                    int LA148_2 = input.LA(3);

                    if ( ((LA148_2>=L_begin && LA148_2<=L_if)||(LA148_2>=L_while && LA148_2<=L_for)||(LA148_2>=L_yield && LA148_2<=L_match)||(LA148_2>=L_val && LA148_2<=L_def)||LA148_2==L_exception||LA148_2==L_try||(LA148_2>=L_concurrent && LA148_2<=L_nil)||(LA148_2>=L_module && LA148_2<=L_import)||LA148_2==L_not||(LA148_2>=L_root && LA148_2<=L_native)||LA148_2==SC||LA148_2==MINUS||(LA148_2>=A_ELLIPSIS && LA148_2<=U_ELLIPSIS)||LA148_2==L_force||(LA148_2>=NL && LA148_2<=Id)||(LA148_2>=Float && LA148_2<=Num)||(LA148_2>=String && LA148_2<=ROUND_BRACKET_OPEN)||LA148_2==SQUARE_BRACKET_OPEN||LA148_2==CURLY_BRACKET_OPEN||LA148_2==UNDERSCORE||(LA148_2>=PRAGMA_LOG && LA148_2<=PRAGMA_PROFILE)) ) {
                        alt148=2;
                    }
                    else if ( (LA148_2==PLUS) && (synpred10_babel17())) {
                        alt148=1;
                    }
                    else if ( (LA148_2==TIMES) && (synpred10_babel17())) {
                        alt148=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 148, 2, input);

                        throw nvae;
                    }
                }
                else if ( ((LA148_1>=L_begin && LA148_1<=L_if)||(LA148_1>=L_while && LA148_1<=L_for)||(LA148_1>=L_yield && LA148_1<=L_match)||(LA148_1>=L_val && LA148_1<=L_def)||LA148_1==L_exception||LA148_1==L_try||(LA148_1>=L_concurrent && LA148_1<=L_nil)||(LA148_1>=L_module && LA148_1<=L_import)||LA148_1==L_not||(LA148_1>=L_root && LA148_1<=L_native)||LA148_1==SC||LA148_1==MINUS||(LA148_1>=A_ELLIPSIS && LA148_1<=U_ELLIPSIS)||LA148_1==L_force||(LA148_1>=Constr && LA148_1<=Id)||(LA148_1>=Float && LA148_1<=Num)||(LA148_1>=String && LA148_1<=ROUND_BRACKET_OPEN)||LA148_1==SQUARE_BRACKET_OPEN||LA148_1==CURLY_BRACKET_OPEN||LA148_1==UNDERSCORE||(LA148_1>=PRAGMA_LOG && LA148_1<=PRAGMA_PROFILE)) ) {
                    alt148=2;
                }
                else if ( (LA148_1==PLUS) && (synpred10_babel17())) {
                    alt148=1;
                }
                else if ( (LA148_1==TIMES) && (synpred10_babel17())) {
                    alt148=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 148, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);

                throw nvae;
            }
            switch (alt148) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:11: ( L_obj ( NL )? parents )=> L_obj ( NL )? parents block L_end
                    {
                    L_obj319=(Token)match(input,L_obj,FOLLOW_L_obj_in_obj_expr3806); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_obj.add(L_obj319);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:40: ( NL )?
                    int alt147=2;
                    int LA147_0 = input.LA(1);

                    if ( (LA147_0==NL) ) {
                        alt147=1;
                    }
                    switch (alt147) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:40: NL
                            {
                            NL320=(Token)match(input,NL,FOLLOW_NL_in_obj_expr3808); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL320);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_parents_in_obj_expr3811);
                    parents321=parents();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parents.add(parents321.getTree());
                    pushFollow(FOLLOW_block_in_obj_expr3813);
                    block322=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block322.getTree());
                    L_end323=(Token)match(input,L_end,FOLLOW_L_end_in_obj_expr3815); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_end.add(L_end323);



                    // AST REWRITE
                    // elements: block, parents
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 599:64: -> ^( OBJ block parents )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:67: ^( OBJ block parents )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJ, "OBJ"), root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());
                        adaptor.addChild(root_1, stream_parents.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:600:17: L_obj block L_end
                    {
                    L_obj324=(Token)match(input,L_obj,FOLLOW_L_obj_in_obj_expr3843); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_obj.add(L_obj324);

                    pushFollow(FOLLOW_block_in_obj_expr3845);
                    block325=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block325.getTree());
                    L_end326=(Token)match(input,L_end,FOLLOW_L_end_in_obj_expr3847); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_end.add(L_end326);



                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 600:35: -> ^( OBJ block )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:600:38: ^( OBJ block )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJ, "OBJ"), root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "obj_expr"

    public static class lop_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lop_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:602:1: lop_expr : ( ( lambda_expr )=> lambda_expr | ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | op_expr );
    public final babel17Parser.lop_expr_return lop_expr() throws RecognitionException {
        babel17Parser.lop_expr_return retval = new babel17Parser.lop_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.lambda_expr_return lambda_expr327 = null;

        babel17Parser.lambda_expr_nobrackets_return lambda_expr_nobrackets328 = null;

        babel17Parser.op_expr_return op_expr329 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:603:2: ( ( lambda_expr )=> lambda_expr | ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | op_expr )
            int alt149=3;
            alt149 = dfa149.predict(input);
            switch (alt149) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:603:4: ( lambda_expr )=> lambda_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lambda_expr_in_lop_expr3875);
                    lambda_expr327=lambda_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lambda_expr327.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:604:4: ( lambda_expr_nobrackets )=> lambda_expr_nobrackets
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lambda_expr_nobrackets_in_lop_expr3886);
                    lambda_expr_nobrackets328=lambda_expr_nobrackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lambda_expr_nobrackets328.getTree());

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:605:4: op_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_op_expr_in_lop_expr3891);
                    op_expr329=op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op_expr329.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lop_expr"

    public static class p_lop_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_lop_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:607:1: p_lop_expr : ( ( lambda_expr )=> lambda_expr | ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | p_op_expr );
    public final babel17Parser.p_lop_expr_return p_lop_expr() throws RecognitionException {
        babel17Parser.p_lop_expr_return retval = new babel17Parser.p_lop_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.lambda_expr_return lambda_expr330 = null;

        babel17Parser.lambda_expr_nobrackets_return lambda_expr_nobrackets331 = null;

        babel17Parser.p_op_expr_return p_op_expr332 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:608:2: ( ( lambda_expr )=> lambda_expr | ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | p_op_expr )
            int alt150=3;
            alt150 = dfa150.predict(input);
            switch (alt150) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:608:4: ( lambda_expr )=> lambda_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lambda_expr_in_p_lop_expr3907);
                    lambda_expr330=lambda_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lambda_expr330.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:609:4: ( lambda_expr_nobrackets )=> lambda_expr_nobrackets
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lambda_expr_nobrackets_in_p_lop_expr3918);
                    lambda_expr_nobrackets331=lambda_expr_nobrackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lambda_expr_nobrackets331.getTree());

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:610:4: p_op_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_op_expr_in_p_lop_expr3923);
                    p_op_expr332=p_op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_op_expr332.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_lop_expr"

    public static class if_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "if_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:612:1: if_expr : L_if ( NL )? protected_expr ( NL )? L_then block ( L_elseif ( NL )? protected_expr ( NL )? L_then block )* ( L_else block )? L_end -> ^( IF ( protected_expr )* ( block )* ) ;
    public final babel17Parser.if_expr_return if_expr() throws RecognitionException {
        babel17Parser.if_expr_return retval = new babel17Parser.if_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_if333=null;
        Token NL334=null;
        Token NL336=null;
        Token L_then337=null;
        Token L_elseif339=null;
        Token NL340=null;
        Token NL342=null;
        Token L_then343=null;
        Token L_else345=null;
        Token L_end347=null;
        babel17Parser.protected_expr_return protected_expr335 = null;

        babel17Parser.block_return block338 = null;

        babel17Parser.protected_expr_return protected_expr341 = null;

        babel17Parser.block_return block344 = null;

        babel17Parser.block_return block346 = null;


        CommonTree L_if333_tree=null;
        CommonTree NL334_tree=null;
        CommonTree NL336_tree=null;
        CommonTree L_then337_tree=null;
        CommonTree L_elseif339_tree=null;
        CommonTree NL340_tree=null;
        CommonTree NL342_tree=null;
        CommonTree L_then343_tree=null;
        CommonTree L_else345_tree=null;
        CommonTree L_end347_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_else=new RewriteRuleTokenStream(adaptor,"token L_else");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_elseif=new RewriteRuleTokenStream(adaptor,"token L_elseif");
        RewriteRuleTokenStream stream_L_then=new RewriteRuleTokenStream(adaptor,"token L_then");
        RewriteRuleTokenStream stream_L_if=new RewriteRuleTokenStream(adaptor,"token L_if");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:612:9: ( L_if ( NL )? protected_expr ( NL )? L_then block ( L_elseif ( NL )? protected_expr ( NL )? L_then block )* ( L_else block )? L_end -> ^( IF ( protected_expr )* ( block )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:612:11: L_if ( NL )? protected_expr ( NL )? L_then block ( L_elseif ( NL )? protected_expr ( NL )? L_then block )* ( L_else block )? L_end
            {
            L_if333=(Token)match(input,L_if,FOLLOW_L_if_in_if_expr3933); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_if.add(L_if333);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:612:16: ( NL )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==NL) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:612:16: NL
                    {
                    NL334=(Token)match(input,NL,FOLLOW_NL_in_if_expr3935); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL334);


                    }
                    break;

            }

            pushFollow(FOLLOW_protected_expr_in_if_expr3938);
            protected_expr335=protected_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr335.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:612:35: ( NL )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==NL) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:612:35: NL
                    {
                    NL336=(Token)match(input,NL,FOLLOW_NL_in_if_expr3940); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL336);


                    }
                    break;

            }

            L_then337=(Token)match(input,L_then,FOLLOW_L_then_in_if_expr3943); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_then.add(L_then337);

            pushFollow(FOLLOW_block_in_if_expr3945);
            block338=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block338.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:3: ( L_elseif ( NL )? protected_expr ( NL )? L_then block )*
            loop155:
            do {
                int alt155=2;
                int LA155_0 = input.LA(1);

                if ( (LA155_0==L_elseif) ) {
                    alt155=1;
                }


                switch (alt155) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:4: L_elseif ( NL )? protected_expr ( NL )? L_then block
            	    {
            	    L_elseif339=(Token)match(input,L_elseif,FOLLOW_L_elseif_in_if_expr3951); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_L_elseif.add(L_elseif339);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:13: ( NL )?
            	    int alt153=2;
            	    int LA153_0 = input.LA(1);

            	    if ( (LA153_0==NL) ) {
            	        alt153=1;
            	    }
            	    switch (alt153) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:13: NL
            	            {
            	            NL340=(Token)match(input,NL,FOLLOW_NL_in_if_expr3953); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL340);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_protected_expr_in_if_expr3956);
            	    protected_expr341=protected_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr341.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:32: ( NL )?
            	    int alt154=2;
            	    int LA154_0 = input.LA(1);

            	    if ( (LA154_0==NL) ) {
            	        alt154=1;
            	    }
            	    switch (alt154) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:613:32: NL
            	            {
            	            NL342=(Token)match(input,NL,FOLLOW_NL_in_if_expr3958); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL342);


            	            }
            	            break;

            	    }

            	    L_then343=(Token)match(input,L_then,FOLLOW_L_then_in_if_expr3961); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_L_then.add(L_then343);

            	    pushFollow(FOLLOW_block_in_if_expr3963);
            	    block344=block();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_block.add(block344.getTree());

            	    }
            	    break;

            	default :
            	    break loop155;
                }
            } while (true);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:614:3: ( L_else block )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==L_else) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:614:4: L_else block
                    {
                    L_else345=(Token)match(input,L_else,FOLLOW_L_else_in_if_expr3971); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_L_else.add(L_else345);

                    pushFollow(FOLLOW_block_in_if_expr3973);
                    block346=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block346.getTree());

                    }
                    break;

            }

            L_end347=(Token)match(input,L_end,FOLLOW_L_end_in_if_expr3977); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end347);



            // AST REWRITE
            // elements: protected_expr, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 614:26: -> ^( IF ( protected_expr )* ( block )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:614:29: ^( IF ( protected_expr )* ( block )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IF, "IF"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:614:34: ( protected_expr )*
                while ( stream_protected_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_protected_expr.nextTree());

                }
                stream_protected_expr.reset();
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:614:50: ( block )*
                while ( stream_block.hasNext() ) {
                    adaptor.addChild(root_1, stream_block.nextTree());

                }
                stream_block.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "if_expr"

    public static class while_do_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "while_do_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:616:1: while_do_expr : L_while ( NL )? protected_expr ( NL )? L_do block L_end -> ^( WHILE_DO protected_expr block ) ;
    public final babel17Parser.while_do_expr_return while_do_expr() throws RecognitionException {
        babel17Parser.while_do_expr_return retval = new babel17Parser.while_do_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_while348=null;
        Token NL349=null;
        Token NL351=null;
        Token L_do352=null;
        Token L_end354=null;
        babel17Parser.protected_expr_return protected_expr350 = null;

        babel17Parser.block_return block353 = null;


        CommonTree L_while348_tree=null;
        CommonTree NL349_tree=null;
        CommonTree NL351_tree=null;
        CommonTree L_do352_tree=null;
        CommonTree L_end354_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_do=new RewriteRuleTokenStream(adaptor,"token L_do");
        RewriteRuleTokenStream stream_L_while=new RewriteRuleTokenStream(adaptor,"token L_while");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:617:2: ( L_while ( NL )? protected_expr ( NL )? L_do block L_end -> ^( WHILE_DO protected_expr block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:617:4: L_while ( NL )? protected_expr ( NL )? L_do block L_end
            {
            L_while348=(Token)match(input,L_while,FOLLOW_L_while_in_while_do_expr4001); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_while.add(L_while348);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:617:12: ( NL )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==NL) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:617:12: NL
                    {
                    NL349=(Token)match(input,NL,FOLLOW_NL_in_while_do_expr4003); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL349);


                    }
                    break;

            }

            pushFollow(FOLLOW_protected_expr_in_while_do_expr4006);
            protected_expr350=protected_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr350.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:617:31: ( NL )?
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==NL) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:617:31: NL
                    {
                    NL351=(Token)match(input,NL,FOLLOW_NL_in_while_do_expr4008); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL351);


                    }
                    break;

            }

            L_do352=(Token)match(input,L_do,FOLLOW_L_do_in_while_do_expr4011); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_do.add(L_do352);

            pushFollow(FOLLOW_block_in_while_do_expr4013);
            block353=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block353.getTree());
            L_end354=(Token)match(input,L_end,FOLLOW_L_end_in_while_do_expr4015); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end354);



            // AST REWRITE
            // elements: protected_expr, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 618:5: -> ^( WHILE_DO protected_expr block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:618:8: ^( WHILE_DO protected_expr block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHILE_DO, "WHILE_DO"), root_1);

                adaptor.addChild(root_1, stream_protected_expr.nextTree());
                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "while_do_expr"

    public static class cases_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cases"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:620:1: cases : ( full_cases | pattern ( NL )? token_DOUBLE_ARROW block -> ^( CASES ^( NIL_TOKEN pattern block ) ) );
    public final babel17Parser.cases_return cases() throws RecognitionException {
        babel17Parser.cases_return retval = new babel17Parser.cases_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL357=null;
        babel17Parser.full_cases_return full_cases355 = null;

        babel17Parser.pattern_return pattern356 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW358 = null;

        babel17Parser.block_return block359 = null;


        CommonTree NL357_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:621:2: ( full_cases | pattern ( NL )? token_DOUBLE_ARROW block -> ^( CASES ^( NIL_TOKEN pattern block ) ) )
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==L_case) ) {
                alt160=1;
            }
            else if ( (LA160_0==L_exception||(LA160_0>=L_true && LA160_0<=L_false)||LA160_0==L_nil||LA160_0==MINUS||(LA160_0>=A_ELLIPSIS && LA160_0<=U_ELLIPSIS)||(LA160_0>=Constr && LA160_0<=Id)||LA160_0==Num||(LA160_0>=String && LA160_0<=ROUND_BRACKET_OPEN)||LA160_0==SQUARE_BRACKET_OPEN||LA160_0==CURLY_BRACKET_OPEN||LA160_0==UNDERSCORE) ) {
                alt160=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);

                throw nvae;
            }
            switch (alt160) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:621:4: full_cases
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_full_cases_in_cases4045);
                    full_cases355=full_cases();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, full_cases355.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:622:4: pattern ( NL )? token_DOUBLE_ARROW block
                    {
                    pushFollow(FOLLOW_pattern_in_cases4050);
                    pattern356=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern356.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:622:12: ( NL )?
                    int alt159=2;
                    int LA159_0 = input.LA(1);

                    if ( (LA159_0==NL) ) {
                        alt159=1;
                    }
                    switch (alt159) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:622:12: NL
                            {
                            NL357=(Token)match(input,NL,FOLLOW_NL_in_cases4052); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL357);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_token_DOUBLE_ARROW_in_cases4055);
                    token_DOUBLE_ARROW358=token_DOUBLE_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW358.getTree());
                    pushFollow(FOLLOW_block_in_cases4057);
                    block359=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block359.getTree());


                    // AST REWRITE
                    // elements: pattern, block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 622:41: -> ^( CASES ^( NIL_TOKEN pattern block ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:622:44: ^( CASES ^( NIL_TOKEN pattern block ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:622:52: ^( NIL_TOKEN pattern block )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        adaptor.addChild(root_2, stream_pattern.nextTree());
                        adaptor.addChild(root_2, stream_block.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cases"

    public static class full_cases_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "full_cases"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:624:1: full_cases : ( case_expr )+ -> ^( CASES ( case_expr )+ ) ;
    public final babel17Parser.full_cases_return full_cases() throws RecognitionException {
        babel17Parser.full_cases_return retval = new babel17Parser.full_cases_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.case_expr_return case_expr360 = null;


        RewriteRuleSubtreeStream stream_case_expr=new RewriteRuleSubtreeStream(adaptor,"rule case_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:625:2: ( ( case_expr )+ -> ^( CASES ( case_expr )+ ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:625:4: ( case_expr )+
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:625:4: ( case_expr )+
            int cnt161=0;
            loop161:
            do {
                int alt161=2;
                int LA161_0 = input.LA(1);

                if ( (LA161_0==L_case) ) {
                    alt161=1;
                }


                switch (alt161) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:625:4: case_expr
            	    {
            	    pushFollow(FOLLOW_case_expr_in_full_cases4080);
            	    case_expr360=case_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_case_expr.add(case_expr360.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt161 >= 1 ) break loop161;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(161, input);
                        throw eee;
                }
                cnt161++;
            } while (true);



            // AST REWRITE
            // elements: case_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 625:15: -> ^( CASES ( case_expr )+ )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:625:18: ^( CASES ( case_expr )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                if ( !(stream_case_expr.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_case_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_case_expr.nextTree());

                }
                stream_case_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "full_cases"

    public static class case_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "case_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:627:1: case_expr : ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block ) -> ^( NIL_TOKEN casepattern block ) ;
    public final babel17Parser.case_expr_return case_expr() throws RecognitionException {
        babel17Parser.case_expr_return retval = new babel17Parser.case_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_case361=null;
        Token NL362=null;
        Token NL364=null;
        babel17Parser.casepattern_return casepattern363 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW365 = null;

        babel17Parser.block_return block366 = null;


        CommonTree L_case361_tree=null;
        CommonTree NL362_tree=null;
        CommonTree NL364_tree=null;
        RewriteRuleTokenStream stream_L_case=new RewriteRuleTokenStream(adaptor,"token L_case");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_casepattern=new RewriteRuleSubtreeStream(adaptor,"rule casepattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:628:2: ( ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block ) -> ^( NIL_TOKEN casepattern block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:628:4: ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block )
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:628:4: ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:628:5: L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW block
            {
            L_case361=(Token)match(input,L_case,FOLLOW_L_case_in_case_expr4101); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_case.add(L_case361);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:628:12: ( NL )?
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==NL) ) {
                alt162=1;
            }
            switch (alt162) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:628:12: NL
                    {
                    NL362=(Token)match(input,NL,FOLLOW_NL_in_case_expr4103); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL362);


                    }
                    break;

            }

            pushFollow(FOLLOW_casepattern_in_case_expr4106);
            casepattern363=casepattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_casepattern.add(casepattern363.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:628:28: ( NL )?
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==NL) ) {
                alt163=1;
            }
            switch (alt163) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:628:28: NL
                    {
                    NL364=(Token)match(input,NL,FOLLOW_NL_in_case_expr4108); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL364);


                    }
                    break;

            }

            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_case_expr4111);
            token_DOUBLE_ARROW365=token_DOUBLE_ARROW();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW365.getTree());
            pushFollow(FOLLOW_block_in_case_expr4113);
            block366=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block366.getTree());

            }



            // AST REWRITE
            // elements: casepattern, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 628:58: -> ^( NIL_TOKEN casepattern block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:628:61: ^( NIL_TOKEN casepattern block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_1);

                adaptor.addChild(root_1, stream_casepattern.nextTree());
                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "case_expr"

    public static class match_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "match_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:630:1: match_expr : L_match ( NL )? p_op_expr ( NL )? full_cases L_end -> ^( MATCH p_op_expr full_cases ) ;
    public final babel17Parser.match_expr_return match_expr() throws RecognitionException {
        babel17Parser.match_expr_return retval = new babel17Parser.match_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_match367=null;
        Token NL368=null;
        Token NL370=null;
        Token L_end372=null;
        babel17Parser.p_op_expr_return p_op_expr369 = null;

        babel17Parser.full_cases_return full_cases371 = null;


        CommonTree L_match367_tree=null;
        CommonTree NL368_tree=null;
        CommonTree NL370_tree=null;
        CommonTree L_end372_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_match=new RewriteRuleTokenStream(adaptor,"token L_match");
        RewriteRuleSubtreeStream stream_full_cases=new RewriteRuleSubtreeStream(adaptor,"rule full_cases");
        RewriteRuleSubtreeStream stream_p_op_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_op_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:631:2: ( L_match ( NL )? p_op_expr ( NL )? full_cases L_end -> ^( MATCH p_op_expr full_cases ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:631:4: L_match ( NL )? p_op_expr ( NL )? full_cases L_end
            {
            L_match367=(Token)match(input,L_match,FOLLOW_L_match_in_match_expr4134); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_match.add(L_match367);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:631:12: ( NL )?
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==NL) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:631:12: NL
                    {
                    NL368=(Token)match(input,NL,FOLLOW_NL_in_match_expr4136); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL368);


                    }
                    break;

            }

            pushFollow(FOLLOW_p_op_expr_in_match_expr4139);
            p_op_expr369=p_op_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_op_expr.add(p_op_expr369.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:631:26: ( NL )?
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==NL) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:631:26: NL
                    {
                    NL370=(Token)match(input,NL,FOLLOW_NL_in_match_expr4141); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL370);


                    }
                    break;

            }

            pushFollow(FOLLOW_full_cases_in_match_expr4144);
            full_cases371=full_cases();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_full_cases.add(full_cases371.getTree());
            L_end372=(Token)match(input,L_end,FOLLOW_L_end_in_match_expr4146); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end372);



            // AST REWRITE
            // elements: full_cases, p_op_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 632:5: -> ^( MATCH p_op_expr full_cases )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:632:8: ^( MATCH p_op_expr full_cases )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH, "MATCH"), root_1);

                adaptor.addChild(root_1, stream_p_op_expr.nextTree());
                adaptor.addChild(root_1, stream_full_cases.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "match_expr"

    public static class try_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "try_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:634:1: try_expr : L_try ( NL )? pure_block ( NL )? L_catch ( NL )? full_cases L_end -> ^( TRY pure_block full_cases ) ;
    public final babel17Parser.try_expr_return try_expr() throws RecognitionException {
        babel17Parser.try_expr_return retval = new babel17Parser.try_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_try373=null;
        Token NL374=null;
        Token NL376=null;
        Token L_catch377=null;
        Token NL378=null;
        Token L_end380=null;
        babel17Parser.pure_block_return pure_block375 = null;

        babel17Parser.full_cases_return full_cases379 = null;


        CommonTree L_try373_tree=null;
        CommonTree NL374_tree=null;
        CommonTree NL376_tree=null;
        CommonTree L_catch377_tree=null;
        CommonTree NL378_tree=null;
        CommonTree L_end380_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_try=new RewriteRuleTokenStream(adaptor,"token L_try");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_catch=new RewriteRuleTokenStream(adaptor,"token L_catch");
        RewriteRuleSubtreeStream stream_full_cases=new RewriteRuleSubtreeStream(adaptor,"rule full_cases");
        RewriteRuleSubtreeStream stream_pure_block=new RewriteRuleSubtreeStream(adaptor,"rule pure_block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:634:9: ( L_try ( NL )? pure_block ( NL )? L_catch ( NL )? full_cases L_end -> ^( TRY pure_block full_cases ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:634:11: L_try ( NL )? pure_block ( NL )? L_catch ( NL )? full_cases L_end
            {
            L_try373=(Token)match(input,L_try,FOLLOW_L_try_in_try_expr4172); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_try.add(L_try373);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:634:17: ( NL )?
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==NL) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:634:17: NL
                    {
                    NL374=(Token)match(input,NL,FOLLOW_NL_in_try_expr4174); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL374);


                    }
                    break;

            }

            pushFollow(FOLLOW_pure_block_in_try_expr4177);
            pure_block375=pure_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pure_block.add(pure_block375.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:634:32: ( NL )?
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==NL) ) {
                alt167=1;
            }
            switch (alt167) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:634:32: NL
                    {
                    NL376=(Token)match(input,NL,FOLLOW_NL_in_try_expr4179); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL376);


                    }
                    break;

            }

            L_catch377=(Token)match(input,L_catch,FOLLOW_L_catch_in_try_expr4182); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_catch.add(L_catch377);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:634:44: ( NL )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==NL) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:634:44: NL
                    {
                    NL378=(Token)match(input,NL,FOLLOW_NL_in_try_expr4184); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL378);


                    }
                    break;

            }

            pushFollow(FOLLOW_full_cases_in_try_expr4187);
            full_cases379=full_cases();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_full_cases.add(full_cases379.getTree());
            L_end380=(Token)match(input,L_end,FOLLOW_L_end_in_try_expr4189); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end380);



            // AST REWRITE
            // elements: full_cases, pure_block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 635:5: -> ^( TRY pure_block full_cases )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:635:8: ^( TRY pure_block full_cases )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TRY, "TRY"), root_1);

                adaptor.addChild(root_1, stream_pure_block.nextTree());
                adaptor.addChild(root_1, stream_full_cases.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "try_expr"

    public static class lambda_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:637:1: lambda_expr : '(' ( NL )? lambda_cases ( NL )? ')' -> ^( LAMBDA lambda_cases ) ;
    public final babel17Parser.lambda_expr_return lambda_expr() throws RecognitionException {
        babel17Parser.lambda_expr_return retval = new babel17Parser.lambda_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal381=null;
        Token NL382=null;
        Token NL384=null;
        Token char_literal385=null;
        babel17Parser.lambda_cases_return lambda_cases383 = null;


        CommonTree char_literal381_tree=null;
        CommonTree NL382_tree=null;
        CommonTree NL384_tree=null;
        CommonTree char_literal385_tree=null;
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleSubtreeStream stream_lambda_cases=new RewriteRuleSubtreeStream(adaptor,"rule lambda_cases");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:638:2: ( '(' ( NL )? lambda_cases ( NL )? ')' -> ^( LAMBDA lambda_cases ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:638:4: '(' ( NL )? lambda_cases ( NL )? ')'
            {
            char_literal381=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_lambda_expr4213); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal381);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:638:8: ( NL )?
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==NL) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:638:8: NL
                    {
                    NL382=(Token)match(input,NL,FOLLOW_NL_in_lambda_expr4215); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL382);


                    }
                    break;

            }

            pushFollow(FOLLOW_lambda_cases_in_lambda_expr4218);
            lambda_cases383=lambda_cases();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lambda_cases.add(lambda_cases383.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:638:25: ( NL )?
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==NL) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:638:25: NL
                    {
                    NL384=(Token)match(input,NL,FOLLOW_NL_in_lambda_expr4220); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL384);


                    }
                    break;

            }

            char_literal385=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_lambda_expr4223); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal385);



            // AST REWRITE
            // elements: lambda_cases
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 638:33: -> ^( LAMBDA lambda_cases )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:638:36: ^( LAMBDA lambda_cases )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAMBDA, "LAMBDA"), root_1);

                adaptor.addChild(root_1, stream_lambda_cases.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_expr"

    public static class lambda_expr_nobrackets_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_expr_nobrackets"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:640:1: lambda_expr_nobrackets : lambda_cases_nobrackets -> ^( LAMBDA lambda_cases_nobrackets ) ;
    public final babel17Parser.lambda_expr_nobrackets_return lambda_expr_nobrackets() throws RecognitionException {
        babel17Parser.lambda_expr_nobrackets_return retval = new babel17Parser.lambda_expr_nobrackets_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.lambda_cases_nobrackets_return lambda_cases_nobrackets386 = null;


        RewriteRuleSubtreeStream stream_lambda_cases_nobrackets=new RewriteRuleSubtreeStream(adaptor,"rule lambda_cases_nobrackets");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:641:2: ( lambda_cases_nobrackets -> ^( LAMBDA lambda_cases_nobrackets ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:641:4: lambda_cases_nobrackets
            {
            pushFollow(FOLLOW_lambda_cases_nobrackets_in_lambda_expr_nobrackets4242);
            lambda_cases_nobrackets386=lambda_cases_nobrackets();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lambda_cases_nobrackets.add(lambda_cases_nobrackets386.getTree());


            // AST REWRITE
            // elements: lambda_cases_nobrackets
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 641:28: -> ^( LAMBDA lambda_cases_nobrackets )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:641:31: ^( LAMBDA lambda_cases_nobrackets )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAMBDA, "LAMBDA"), root_1);

                adaptor.addChild(root_1, stream_lambda_cases_nobrackets.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_expr_nobrackets"

    public static class lambda_cases_nobrackets_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_cases_nobrackets"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:643:1: lambda_cases_nobrackets : pattern ( NL )? token_DOUBLE_ARROW ( NL )? lop_expr -> ^( CASES ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) ) ) ;
    public final babel17Parser.lambda_cases_nobrackets_return lambda_cases_nobrackets() throws RecognitionException {
        babel17Parser.lambda_cases_nobrackets_return retval = new babel17Parser.lambda_cases_nobrackets_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL388=null;
        Token NL390=null;
        babel17Parser.pattern_return pattern387 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW389 = null;

        babel17Parser.lop_expr_return lop_expr391 = null;


        CommonTree NL388_tree=null;
        CommonTree NL390_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_lop_expr=new RewriteRuleSubtreeStream(adaptor,"rule lop_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:644:2: ( pattern ( NL )? token_DOUBLE_ARROW ( NL )? lop_expr -> ^( CASES ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) ) ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:644:4: pattern ( NL )? token_DOUBLE_ARROW ( NL )? lop_expr
            {
            pushFollow(FOLLOW_pattern_in_lambda_cases_nobrackets4260);
            pattern387=pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pattern.add(pattern387.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:644:12: ( NL )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==NL) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:644:12: NL
                    {
                    NL388=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases_nobrackets4262); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL388);


                    }
                    break;

            }

            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_lambda_cases_nobrackets4265);
            token_DOUBLE_ARROW389=token_DOUBLE_ARROW();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW389.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:644:35: ( NL )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==NL) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:644:35: NL
                    {
                    NL390=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases_nobrackets4267); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL390);


                    }
                    break;

            }

            pushFollow(FOLLOW_lop_expr_in_lambda_cases_nobrackets4270);
            lop_expr391=lop_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lop_expr.add(lop_expr391.getTree());


            // AST REWRITE
            // elements: pattern, lop_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 644:48: -> ^( CASES ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) ) )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:644:51: ^( CASES ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:644:59: ^( NIL_TOKEN pattern ^( BLOCK lop_expr ) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                adaptor.addChild(root_2, stream_pattern.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:644:79: ^( BLOCK lop_expr )
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BLOCK, "BLOCK"), root_3);

                adaptor.addChild(root_3, stream_lop_expr.nextTree());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_cases_nobrackets"

    public static class lambda_case_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_case_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:646:1: lambda_case_expr : ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block ) -> ^( NIL_TOKEN casepattern pure_block ) ;
    public final babel17Parser.lambda_case_expr_return lambda_case_expr() throws RecognitionException {
        babel17Parser.lambda_case_expr_return retval = new babel17Parser.lambda_case_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_case392=null;
        Token NL393=null;
        Token NL395=null;
        Token NL397=null;
        babel17Parser.casepattern_return casepattern394 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW396 = null;

        babel17Parser.pure_block_return pure_block398 = null;


        CommonTree L_case392_tree=null;
        CommonTree NL393_tree=null;
        CommonTree NL395_tree=null;
        CommonTree NL397_tree=null;
        RewriteRuleTokenStream stream_L_case=new RewriteRuleTokenStream(adaptor,"token L_case");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_casepattern=new RewriteRuleSubtreeStream(adaptor,"rule casepattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_pure_block=new RewriteRuleSubtreeStream(adaptor,"rule pure_block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:647:2: ( ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block ) -> ^( NIL_TOKEN casepattern pure_block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:647:4: ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block )
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:647:4: ( L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:647:5: L_case ( NL )? casepattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block
            {
            L_case392=(Token)match(input,L_case,FOLLOW_L_case_in_lambda_case_expr4298); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_case.add(L_case392);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:647:12: ( NL )?
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==NL) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:647:12: NL
                    {
                    NL393=(Token)match(input,NL,FOLLOW_NL_in_lambda_case_expr4300); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL393);


                    }
                    break;

            }

            pushFollow(FOLLOW_casepattern_in_lambda_case_expr4303);
            casepattern394=casepattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_casepattern.add(casepattern394.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:647:28: ( NL )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==NL) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:647:28: NL
                    {
                    NL395=(Token)match(input,NL,FOLLOW_NL_in_lambda_case_expr4305); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL395);


                    }
                    break;

            }

            pushFollow(FOLLOW_token_DOUBLE_ARROW_in_lambda_case_expr4308);
            token_DOUBLE_ARROW396=token_DOUBLE_ARROW();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW396.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:647:51: ( NL )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==NL) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:647:51: NL
                    {
                    NL397=(Token)match(input,NL,FOLLOW_NL_in_lambda_case_expr4310); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL397);


                    }
                    break;

            }

            pushFollow(FOLLOW_pure_block_in_lambda_case_expr4313);
            pure_block398=pure_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pure_block.add(pure_block398.getTree());

            }



            // AST REWRITE
            // elements: casepattern, pure_block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 647:67: -> ^( NIL_TOKEN casepattern pure_block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:647:70: ^( NIL_TOKEN casepattern pure_block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_1);

                adaptor.addChild(root_1, stream_casepattern.nextTree());
                adaptor.addChild(root_1, stream_pure_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_case_expr"

    public static class lambda_cases_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_cases"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:649:1: lambda_cases : ( pattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block -> ^( CASES ^( NIL_TOKEN pattern pure_block ) ) | lambda_case_expr ( ( NL )? lambda_case_expr )* -> ^( CASES ( lambda_case_expr )+ ) );
    public final babel17Parser.lambda_cases_return lambda_cases() throws RecognitionException {
        babel17Parser.lambda_cases_return retval = new babel17Parser.lambda_cases_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL400=null;
        Token NL402=null;
        Token NL405=null;
        babel17Parser.pattern_return pattern399 = null;

        babel17Parser.token_DOUBLE_ARROW_return token_DOUBLE_ARROW401 = null;

        babel17Parser.pure_block_return pure_block403 = null;

        babel17Parser.lambda_case_expr_return lambda_case_expr404 = null;

        babel17Parser.lambda_case_expr_return lambda_case_expr406 = null;


        CommonTree NL400_tree=null;
        CommonTree NL402_tree=null;
        CommonTree NL405_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_token_DOUBLE_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_ARROW");
        RewriteRuleSubtreeStream stream_lambda_case_expr=new RewriteRuleSubtreeStream(adaptor,"rule lambda_case_expr");
        RewriteRuleSubtreeStream stream_pure_block=new RewriteRuleSubtreeStream(adaptor,"rule pure_block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:650:2: ( pattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block -> ^( CASES ^( NIL_TOKEN pattern pure_block ) ) | lambda_case_expr ( ( NL )? lambda_case_expr )* -> ^( CASES ( lambda_case_expr )+ ) )
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==L_exception||(LA180_0>=L_true && LA180_0<=L_false)||LA180_0==L_nil||LA180_0==MINUS||(LA180_0>=A_ELLIPSIS && LA180_0<=U_ELLIPSIS)||(LA180_0>=Constr && LA180_0<=Id)||LA180_0==Num||(LA180_0>=String && LA180_0<=ROUND_BRACKET_OPEN)||LA180_0==SQUARE_BRACKET_OPEN||LA180_0==CURLY_BRACKET_OPEN||LA180_0==UNDERSCORE) ) {
                alt180=1;
            }
            else if ( (LA180_0==L_case) ) {
                alt180=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 180, 0, input);

                throw nvae;
            }
            switch (alt180) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:650:4: pattern ( NL )? token_DOUBLE_ARROW ( NL )? pure_block
                    {
                    pushFollow(FOLLOW_pattern_in_lambda_cases4334);
                    pattern399=pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern.add(pattern399.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:650:12: ( NL )?
                    int alt176=2;
                    int LA176_0 = input.LA(1);

                    if ( (LA176_0==NL) ) {
                        alt176=1;
                    }
                    switch (alt176) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:650:12: NL
                            {
                            NL400=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases4336); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL400);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_token_DOUBLE_ARROW_in_lambda_cases4339);
                    token_DOUBLE_ARROW401=token_DOUBLE_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_DOUBLE_ARROW.add(token_DOUBLE_ARROW401.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:650:35: ( NL )?
                    int alt177=2;
                    int LA177_0 = input.LA(1);

                    if ( (LA177_0==NL) ) {
                        alt177=1;
                    }
                    switch (alt177) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:650:35: NL
                            {
                            NL402=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases4341); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL402);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_pure_block_in_lambda_cases4344);
                    pure_block403=pure_block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pure_block.add(pure_block403.getTree());


                    // AST REWRITE
                    // elements: pure_block, pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 650:50: -> ^( CASES ^( NIL_TOKEN pattern pure_block ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:650:53: ^( CASES ^( NIL_TOKEN pattern pure_block ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:650:61: ^( NIL_TOKEN pattern pure_block )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        adaptor.addChild(root_2, stream_pattern.nextTree());
                        adaptor.addChild(root_2, stream_pure_block.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:651:4: lambda_case_expr ( ( NL )? lambda_case_expr )*
                    {
                    pushFollow(FOLLOW_lambda_case_expr_in_lambda_cases4363);
                    lambda_case_expr404=lambda_case_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lambda_case_expr.add(lambda_case_expr404.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:651:21: ( ( NL )? lambda_case_expr )*
                    loop179:
                    do {
                        int alt179=2;
                        int LA179_0 = input.LA(1);

                        if ( (LA179_0==NL) ) {
                            int LA179_1 = input.LA(2);

                            if ( (LA179_1==L_case) ) {
                                alt179=1;
                            }


                        }
                        else if ( (LA179_0==L_case) ) {
                            alt179=1;
                        }


                        switch (alt179) {
                    	case 1 :
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:651:22: ( NL )? lambda_case_expr
                    	    {
                    	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:651:22: ( NL )?
                    	    int alt178=2;
                    	    int LA178_0 = input.LA(1);

                    	    if ( (LA178_0==NL) ) {
                    	        alt178=1;
                    	    }
                    	    switch (alt178) {
                    	        case 1 :
                    	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:651:22: NL
                    	            {
                    	            NL405=(Token)match(input,NL,FOLLOW_NL_in_lambda_cases4366); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_NL.add(NL405);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_lambda_case_expr_in_lambda_cases4369);
                    	    lambda_case_expr406=lambda_case_expr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_lambda_case_expr.add(lambda_case_expr406.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop179;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: lambda_case_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 651:45: -> ^( CASES ( lambda_case_expr )+ )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:651:48: ^( CASES ( lambda_case_expr )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASES, "CASES"), root_1);

                        if ( !(stream_lambda_case_expr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_lambda_case_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_lambda_case_expr.nextTree());

                        }
                        stream_lambda_case_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_cases"

    public static class for_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:653:1: for_expr : L_for ( NL )? pattern ( NL )? L_in ( NL )? protected_expr ( NL )? L_do block L_end -> ^( FOR_EXPR pattern protected_expr block ) ;
    public final babel17Parser.for_expr_return for_expr() throws RecognitionException {
        babel17Parser.for_expr_return retval = new babel17Parser.for_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token L_for407=null;
        Token NL408=null;
        Token NL410=null;
        Token L_in411=null;
        Token NL412=null;
        Token NL414=null;
        Token L_do415=null;
        Token L_end417=null;
        babel17Parser.pattern_return pattern409 = null;

        babel17Parser.protected_expr_return protected_expr413 = null;

        babel17Parser.block_return block416 = null;


        CommonTree L_for407_tree=null;
        CommonTree NL408_tree=null;
        CommonTree NL410_tree=null;
        CommonTree L_in411_tree=null;
        CommonTree NL412_tree=null;
        CommonTree NL414_tree=null;
        CommonTree L_do415_tree=null;
        CommonTree L_end417_tree=null;
        RewriteRuleTokenStream stream_L_end=new RewriteRuleTokenStream(adaptor,"token L_end");
        RewriteRuleTokenStream stream_L_for=new RewriteRuleTokenStream(adaptor,"token L_for");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_L_in=new RewriteRuleTokenStream(adaptor,"token L_in");
        RewriteRuleTokenStream stream_L_do=new RewriteRuleTokenStream(adaptor,"token L_do");
        RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
        RewriteRuleSubtreeStream stream_protected_expr=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:653:9: ( L_for ( NL )? pattern ( NL )? L_in ( NL )? protected_expr ( NL )? L_do block L_end -> ^( FOR_EXPR pattern protected_expr block ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:653:11: L_for ( NL )? pattern ( NL )? L_in ( NL )? protected_expr ( NL )? L_do block L_end
            {
            L_for407=(Token)match(input,L_for,FOLLOW_L_for_in_for_expr4387); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_for.add(L_for407);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:653:17: ( NL )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==NL) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:653:17: NL
                    {
                    NL408=(Token)match(input,NL,FOLLOW_NL_in_for_expr4389); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL408);


                    }
                    break;

            }

            pushFollow(FOLLOW_pattern_in_for_expr4392);
            pattern409=pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pattern.add(pattern409.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:653:29: ( NL )?
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==NL) ) {
                alt182=1;
            }
            switch (alt182) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:653:29: NL
                    {
                    NL410=(Token)match(input,NL,FOLLOW_NL_in_for_expr4394); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL410);


                    }
                    break;

            }

            L_in411=(Token)match(input,L_in,FOLLOW_L_in_in_for_expr4397); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_in.add(L_in411);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:653:38: ( NL )?
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==NL) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:653:38: NL
                    {
                    NL412=(Token)match(input,NL,FOLLOW_NL_in_for_expr4399); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL412);


                    }
                    break;

            }

            pushFollow(FOLLOW_protected_expr_in_for_expr4402);
            protected_expr413=protected_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protected_expr.add(protected_expr413.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:653:57: ( NL )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==NL) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:653:57: NL
                    {
                    NL414=(Token)match(input,NL,FOLLOW_NL_in_for_expr4404); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL414);


                    }
                    break;

            }

            L_do415=(Token)match(input,L_do,FOLLOW_L_do_in_for_expr4407); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_do.add(L_do415);

            pushFollow(FOLLOW_block_in_for_expr4409);
            block416=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block416.getTree());
            L_end417=(Token)match(input,L_end,FOLLOW_L_end_in_for_expr4411); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_end.add(L_end417);



            // AST REWRITE
            // elements: block, protected_expr, pattern
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 654:5: -> ^( FOR_EXPR pattern protected_expr block )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:654:8: ^( FOR_EXPR pattern protected_expr block )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_EXPR, "FOR_EXPR"), root_1);

                adaptor.addChild(root_1, stream_pattern.nextTree());
                adaptor.addChild(root_1, stream_protected_expr.nextTree());
                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "for_expr"

    public static class op_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "op_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:657:1: op_expr : ( builtin_primitive op_expr | bool_expr );
    public final babel17Parser.op_expr_return op_expr() throws RecognitionException {
        babel17Parser.op_expr_return retval = new babel17Parser.op_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.builtin_primitive_return builtin_primitive418 = null;

        babel17Parser.op_expr_return op_expr419 = null;

        babel17Parser.bool_expr_return bool_expr420 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:658:2: ( builtin_primitive op_expr | bool_expr )
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==L_exception||LA185_0==L_concurrent||LA185_0==L_lazy||LA185_0==L_force) ) {
                alt185=1;
            }
            else if ( (LA185_0==L_begin||(LA185_0>=L_with && LA185_0<=L_if)||(LA185_0>=L_while && LA185_0<=L_for)||LA185_0==L_match||LA185_0==L_try||LA185_0==L_choose||(LA185_0>=L_true && LA185_0<=L_nil)||LA185_0==L_typeof||LA185_0==L_not||(LA185_0>=L_root && LA185_0<=L_native)||LA185_0==MINUS||(LA185_0>=Constr && LA185_0<=Id)||(LA185_0>=Float && LA185_0<=Num)||(LA185_0>=String && LA185_0<=ROUND_BRACKET_OPEN)||LA185_0==SQUARE_BRACKET_OPEN||LA185_0==CURLY_BRACKET_OPEN) ) {
                alt185=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 185, 0, input);

                throw nvae;
            }
            switch (alt185) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:658:4: builtin_primitive op_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_builtin_primitive_in_op_expr4440);
                    builtin_primitive418=builtin_primitive();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(builtin_primitive418.getTree(), root_0);
                    pushFollow(FOLLOW_op_expr_in_op_expr4443);
                    op_expr419=op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op_expr419.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:659:4: bool_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_bool_expr_in_op_expr4448);
                    bool_expr420=bool_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_expr420.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "op_expr"

    public static class p_op_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_op_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:661:1: p_op_expr : ( builtin_primitive ( NL )? p_op_expr | p_bool_expr );
    public final babel17Parser.p_op_expr_return p_op_expr() throws RecognitionException {
        babel17Parser.p_op_expr_return retval = new babel17Parser.p_op_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL422=null;
        babel17Parser.builtin_primitive_return builtin_primitive421 = null;

        babel17Parser.p_op_expr_return p_op_expr423 = null;

        babel17Parser.p_bool_expr_return p_bool_expr424 = null;


        CommonTree NL422_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:662:2: ( builtin_primitive ( NL )? p_op_expr | p_bool_expr )
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==L_exception||LA187_0==L_concurrent||LA187_0==L_lazy||LA187_0==L_force) ) {
                alt187=1;
            }
            else if ( (LA187_0==L_begin||(LA187_0>=L_with && LA187_0<=L_if)||(LA187_0>=L_while && LA187_0<=L_for)||LA187_0==L_match||LA187_0==L_try||LA187_0==L_choose||(LA187_0>=L_true && LA187_0<=L_nil)||LA187_0==L_typeof||LA187_0==L_not||(LA187_0>=L_root && LA187_0<=L_native)||LA187_0==MINUS||(LA187_0>=Constr && LA187_0<=Id)||(LA187_0>=Float && LA187_0<=Num)||(LA187_0>=String && LA187_0<=ROUND_BRACKET_OPEN)||LA187_0==SQUARE_BRACKET_OPEN||LA187_0==CURLY_BRACKET_OPEN) ) {
                alt187=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 187, 0, input);

                throw nvae;
            }
            switch (alt187) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:662:4: builtin_primitive ( NL )? p_op_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_builtin_primitive_in_p_op_expr4458);
                    builtin_primitive421=builtin_primitive();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(builtin_primitive421.getTree(), root_0);
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:662:25: ( NL )?
                    int alt186=2;
                    int LA186_0 = input.LA(1);

                    if ( (LA186_0==NL) ) {
                        alt186=1;
                    }
                    switch (alt186) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:662:25: NL
                            {
                            NL422=(Token)match(input,NL,FOLLOW_NL_in_p_op_expr4461); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_op_expr_in_p_op_expr4465);
                    p_op_expr423=p_op_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_op_expr423.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:663:4: p_bool_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_bool_expr_in_p_op_expr4470);
                    p_bool_expr424=p_bool_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_expr424.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_op_expr"

    public static class builtin_primitive_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtin_primitive"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:665:1: builtin_primitive : ( L_exception | L_lazy | L_concurrent | L_force );
    public final babel17Parser.builtin_primitive_return builtin_primitive() throws RecognitionException {
        babel17Parser.builtin_primitive_return retval = new babel17Parser.builtin_primitive_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set425=null;

        CommonTree set425_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:666:2: ( L_exception | L_lazy | L_concurrent | L_force )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set425=(Token)input.LT(1);
            if ( input.LA(1)==L_exception||input.LA(1)==L_concurrent||input.LA(1)==L_lazy||input.LA(1)==L_force ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set425));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtin_primitive"

    public static class bool_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bool_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:668:1: bool_expr : bool_or_expr ;
    public final babel17Parser.bool_expr_return bool_expr() throws RecognitionException {
        babel17Parser.bool_expr_return retval = new babel17Parser.bool_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.bool_or_expr_return bool_or_expr426 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:669:2: ( bool_or_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:669:4: bool_or_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_bool_or_expr_in_bool_expr4501);
            bool_or_expr426=bool_or_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_or_expr426.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bool_expr"

    public static class p_bool_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_bool_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:671:1: p_bool_expr : p_bool_or_expr ;
    public final babel17Parser.p_bool_expr_return p_bool_expr() throws RecognitionException {
        babel17Parser.p_bool_expr_return retval = new babel17Parser.p_bool_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.p_bool_or_expr_return p_bool_or_expr427 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:672:2: ( p_bool_or_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:672:4: p_bool_or_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_bool_or_expr_in_p_bool_expr4511);
            p_bool_or_expr427=p_bool_or_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_or_expr427.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_bool_expr"

    public static class bool_or_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bool_or_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:674:1: bool_or_expr : bool_and_expr ( ( NL )? token_OR ( NL )? bool_and_expr )* ;
    public final babel17Parser.bool_or_expr_return bool_or_expr() throws RecognitionException {
        babel17Parser.bool_or_expr_return retval = new babel17Parser.bool_or_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL429=null;
        Token NL431=null;
        babel17Parser.bool_and_expr_return bool_and_expr428 = null;

        babel17Parser.token_OR_return token_OR430 = null;

        babel17Parser.bool_and_expr_return bool_and_expr432 = null;


        CommonTree NL429_tree=null;
        CommonTree NL431_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:675:2: ( bool_and_expr ( ( NL )? token_OR ( NL )? bool_and_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:675:4: bool_and_expr ( ( NL )? token_OR ( NL )? bool_and_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_bool_and_expr_in_bool_or_expr4520);
            bool_and_expr428=bool_and_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_and_expr428.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:675:18: ( ( NL )? token_OR ( NL )? bool_and_expr )*
            loop190:
            do {
                int alt190=2;
                int LA190_0 = input.LA(1);

                if ( (LA190_0==NL) ) {
                    int LA190_1 = input.LA(2);

                    if ( (LA190_1==L_or) ) {
                        alt190=1;
                    }


                }
                else if ( (LA190_0==L_or) ) {
                    alt190=1;
                }


                switch (alt190) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:675:19: ( NL )? token_OR ( NL )? bool_and_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:675:21: ( NL )?
            	    int alt188=2;
            	    int LA188_0 = input.LA(1);

            	    if ( (LA188_0==NL) ) {
            	        alt188=1;
            	    }
            	    switch (alt188) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:675:21: NL
            	            {
            	            NL429=(Token)match(input,NL,FOLLOW_NL_in_bool_or_expr4523); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_OR_in_bool_or_expr4527);
            	    token_OR430=token_OR();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_OR430.getTree(), root_0);
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:675:36: ( NL )?
            	    int alt189=2;
            	    int LA189_0 = input.LA(1);

            	    if ( (LA189_0==NL) ) {
            	        alt189=1;
            	    }
            	    switch (alt189) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:675:36: NL
            	            {
            	            NL431=(Token)match(input,NL,FOLLOW_NL_in_bool_or_expr4530); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_bool_and_expr_in_bool_or_expr4534);
            	    bool_and_expr432=bool_and_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_and_expr432.getTree());

            	    }
            	    break;

            	default :
            	    break loop190;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bool_or_expr"

    public static class p_bool_or_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_bool_or_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:677:1: p_bool_or_expr : p_bool_and_expr ( ( NL )? token_OR ( NL )? p_bool_and_expr )* ;
    public final babel17Parser.p_bool_or_expr_return p_bool_or_expr() throws RecognitionException {
        babel17Parser.p_bool_or_expr_return retval = new babel17Parser.p_bool_or_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL434=null;
        Token NL436=null;
        babel17Parser.p_bool_and_expr_return p_bool_and_expr433 = null;

        babel17Parser.token_OR_return token_OR435 = null;

        babel17Parser.p_bool_and_expr_return p_bool_and_expr437 = null;


        CommonTree NL434_tree=null;
        CommonTree NL436_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:678:2: ( p_bool_and_expr ( ( NL )? token_OR ( NL )? p_bool_and_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:678:4: p_bool_and_expr ( ( NL )? token_OR ( NL )? p_bool_and_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_bool_and_expr_in_p_bool_or_expr4546);
            p_bool_and_expr433=p_bool_and_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_and_expr433.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:678:20: ( ( NL )? token_OR ( NL )? p_bool_and_expr )*
            loop193:
            do {
                int alt193=2;
                int LA193_0 = input.LA(1);

                if ( (LA193_0==NL) ) {
                    int LA193_2 = input.LA(2);

                    if ( (LA193_2==L_or) ) {
                        alt193=1;
                    }


                }
                else if ( (LA193_0==L_or) ) {
                    alt193=1;
                }


                switch (alt193) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:678:21: ( NL )? token_OR ( NL )? p_bool_and_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:678:23: ( NL )?
            	    int alt191=2;
            	    int LA191_0 = input.LA(1);

            	    if ( (LA191_0==NL) ) {
            	        alt191=1;
            	    }
            	    switch (alt191) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:678:23: NL
            	            {
            	            NL434=(Token)match(input,NL,FOLLOW_NL_in_p_bool_or_expr4549); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_OR_in_p_bool_or_expr4553);
            	    token_OR435=token_OR();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_OR435.getTree(), root_0);
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:678:38: ( NL )?
            	    int alt192=2;
            	    int LA192_0 = input.LA(1);

            	    if ( (LA192_0==NL) ) {
            	        alt192=1;
            	    }
            	    switch (alt192) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:678:38: NL
            	            {
            	            NL436=(Token)match(input,NL,FOLLOW_NL_in_p_bool_or_expr4556); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_bool_and_expr_in_p_bool_or_expr4560);
            	    p_bool_and_expr437=p_bool_and_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_and_expr437.getTree());

            	    }
            	    break;

            	default :
            	    break loop193;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_bool_or_expr"

    public static class bool_and_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bool_and_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:680:1: bool_and_expr : bool_not_expr ( ( NL )? token_AND ( NL )? bool_not_expr )* ;
    public final babel17Parser.bool_and_expr_return bool_and_expr() throws RecognitionException {
        babel17Parser.bool_and_expr_return retval = new babel17Parser.bool_and_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL439=null;
        Token NL441=null;
        babel17Parser.bool_not_expr_return bool_not_expr438 = null;

        babel17Parser.token_AND_return token_AND440 = null;

        babel17Parser.bool_not_expr_return bool_not_expr442 = null;


        CommonTree NL439_tree=null;
        CommonTree NL441_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:681:2: ( bool_not_expr ( ( NL )? token_AND ( NL )? bool_not_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:681:4: bool_not_expr ( ( NL )? token_AND ( NL )? bool_not_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_bool_not_expr_in_bool_and_expr4572);
            bool_not_expr438=bool_not_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_not_expr438.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:681:18: ( ( NL )? token_AND ( NL )? bool_not_expr )*
            loop196:
            do {
                int alt196=2;
                int LA196_0 = input.LA(1);

                if ( (LA196_0==NL) ) {
                    int LA196_1 = input.LA(2);

                    if ( (LA196_1==L_and) ) {
                        alt196=1;
                    }


                }
                else if ( (LA196_0==L_and) ) {
                    alt196=1;
                }


                switch (alt196) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:681:19: ( NL )? token_AND ( NL )? bool_not_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:681:21: ( NL )?
            	    int alt194=2;
            	    int LA194_0 = input.LA(1);

            	    if ( (LA194_0==NL) ) {
            	        alt194=1;
            	    }
            	    switch (alt194) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:681:21: NL
            	            {
            	            NL439=(Token)match(input,NL,FOLLOW_NL_in_bool_and_expr4575); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_AND_in_bool_and_expr4579);
            	    token_AND440=token_AND();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_AND440.getTree(), root_0);
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:681:37: ( NL )?
            	    int alt195=2;
            	    int LA195_0 = input.LA(1);

            	    if ( (LA195_0==NL) ) {
            	        alt195=1;
            	    }
            	    switch (alt195) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:681:37: NL
            	            {
            	            NL441=(Token)match(input,NL,FOLLOW_NL_in_bool_and_expr4582); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_bool_not_expr_in_bool_and_expr4586);
            	    bool_not_expr442=bool_not_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_not_expr442.getTree());

            	    }
            	    break;

            	default :
            	    break loop196;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bool_and_expr"

    public static class p_bool_and_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_bool_and_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:683:1: p_bool_and_expr : p_bool_not_expr ( ( NL )? token_AND ( NL )? p_bool_not_expr )* ;
    public final babel17Parser.p_bool_and_expr_return p_bool_and_expr() throws RecognitionException {
        babel17Parser.p_bool_and_expr_return retval = new babel17Parser.p_bool_and_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL444=null;
        Token NL446=null;
        babel17Parser.p_bool_not_expr_return p_bool_not_expr443 = null;

        babel17Parser.token_AND_return token_AND445 = null;

        babel17Parser.p_bool_not_expr_return p_bool_not_expr447 = null;


        CommonTree NL444_tree=null;
        CommonTree NL446_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:684:2: ( p_bool_not_expr ( ( NL )? token_AND ( NL )? p_bool_not_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:684:4: p_bool_not_expr ( ( NL )? token_AND ( NL )? p_bool_not_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_bool_not_expr_in_p_bool_and_expr4598);
            p_bool_not_expr443=p_bool_not_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_not_expr443.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:684:20: ( ( NL )? token_AND ( NL )? p_bool_not_expr )*
            loop199:
            do {
                int alt199=2;
                int LA199_0 = input.LA(1);

                if ( (LA199_0==NL) ) {
                    int LA199_1 = input.LA(2);

                    if ( (LA199_1==L_and) ) {
                        alt199=1;
                    }


                }
                else if ( (LA199_0==L_and) ) {
                    alt199=1;
                }


                switch (alt199) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:684:21: ( NL )? token_AND ( NL )? p_bool_not_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:684:23: ( NL )?
            	    int alt197=2;
            	    int LA197_0 = input.LA(1);

            	    if ( (LA197_0==NL) ) {
            	        alt197=1;
            	    }
            	    switch (alt197) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:684:23: NL
            	            {
            	            NL444=(Token)match(input,NL,FOLLOW_NL_in_p_bool_and_expr4601); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_AND_in_p_bool_and_expr4605);
            	    token_AND445=token_AND();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_AND445.getTree(), root_0);
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:684:39: ( NL )?
            	    int alt198=2;
            	    int LA198_0 = input.LA(1);

            	    if ( (LA198_0==NL) ) {
            	        alt198=1;
            	    }
            	    switch (alt198) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:684:39: NL
            	            {
            	            NL446=(Token)match(input,NL,FOLLOW_NL_in_p_bool_and_expr4608); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_bool_not_expr_in_p_bool_and_expr4612);
            	    p_bool_not_expr447=p_bool_not_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_not_expr447.getTree());

            	    }
            	    break;

            	default :
            	    break loop199;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_bool_and_expr"

    public static class bool_not_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bool_not_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:687:1: bool_not_expr : ( token_NOT ( NL )? bool_not_expr | rel_expr );
    public final babel17Parser.bool_not_expr_return bool_not_expr() throws RecognitionException {
        babel17Parser.bool_not_expr_return retval = new babel17Parser.bool_not_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL449=null;
        babel17Parser.token_NOT_return token_NOT448 = null;

        babel17Parser.bool_not_expr_return bool_not_expr450 = null;

        babel17Parser.rel_expr_return rel_expr451 = null;


        CommonTree NL449_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:688:2: ( token_NOT ( NL )? bool_not_expr | rel_expr )
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==L_not) ) {
                alt201=1;
            }
            else if ( (LA201_0==L_begin||(LA201_0>=L_with && LA201_0<=L_if)||(LA201_0>=L_while && LA201_0<=L_for)||LA201_0==L_match||LA201_0==L_try||LA201_0==L_choose||(LA201_0>=L_true && LA201_0<=L_nil)||LA201_0==L_typeof||(LA201_0>=L_root && LA201_0<=L_native)||LA201_0==MINUS||(LA201_0>=Constr && LA201_0<=Id)||(LA201_0>=Float && LA201_0<=Num)||(LA201_0>=String && LA201_0<=ROUND_BRACKET_OPEN)||LA201_0==SQUARE_BRACKET_OPEN||LA201_0==CURLY_BRACKET_OPEN) ) {
                alt201=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 201, 0, input);

                throw nvae;
            }
            switch (alt201) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:688:4: token_NOT ( NL )? bool_not_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_NOT_in_bool_not_expr4624);
                    token_NOT448=token_NOT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_NOT448.getTree(), root_0);
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:688:17: ( NL )?
                    int alt200=2;
                    int LA200_0 = input.LA(1);

                    if ( (LA200_0==NL) ) {
                        alt200=1;
                    }
                    switch (alt200) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:688:17: NL
                            {
                            NL449=(Token)match(input,NL,FOLLOW_NL_in_bool_not_expr4627); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_bool_not_expr_in_bool_not_expr4631);
                    bool_not_expr450=bool_not_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_not_expr450.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:689:4: rel_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rel_expr_in_bool_not_expr4636);
                    rel_expr451=rel_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_expr451.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bool_not_expr"

    public static class p_bool_not_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_bool_not_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:691:1: p_bool_not_expr : ( token_NOT ( NL )? p_bool_not_expr | p_rel_expr );
    public final babel17Parser.p_bool_not_expr_return p_bool_not_expr() throws RecognitionException {
        babel17Parser.p_bool_not_expr_return retval = new babel17Parser.p_bool_not_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL453=null;
        babel17Parser.token_NOT_return token_NOT452 = null;

        babel17Parser.p_bool_not_expr_return p_bool_not_expr454 = null;

        babel17Parser.p_rel_expr_return p_rel_expr455 = null;


        CommonTree NL453_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:692:2: ( token_NOT ( NL )? p_bool_not_expr | p_rel_expr )
            int alt203=2;
            int LA203_0 = input.LA(1);

            if ( (LA203_0==L_not) ) {
                alt203=1;
            }
            else if ( (LA203_0==L_begin||(LA203_0>=L_with && LA203_0<=L_if)||(LA203_0>=L_while && LA203_0<=L_for)||LA203_0==L_match||LA203_0==L_try||LA203_0==L_choose||(LA203_0>=L_true && LA203_0<=L_nil)||LA203_0==L_typeof||(LA203_0>=L_root && LA203_0<=L_native)||LA203_0==MINUS||(LA203_0>=Constr && LA203_0<=Id)||(LA203_0>=Float && LA203_0<=Num)||(LA203_0>=String && LA203_0<=ROUND_BRACKET_OPEN)||LA203_0==SQUARE_BRACKET_OPEN||LA203_0==CURLY_BRACKET_OPEN) ) {
                alt203=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 203, 0, input);

                throw nvae;
            }
            switch (alt203) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:692:4: token_NOT ( NL )? p_bool_not_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_NOT_in_p_bool_not_expr4647);
                    token_NOT452=token_NOT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(token_NOT452.getTree(), root_0);
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:692:17: ( NL )?
                    int alt202=2;
                    int LA202_0 = input.LA(1);

                    if ( (LA202_0==NL) ) {
                        alt202=1;
                    }
                    switch (alt202) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:692:17: NL
                            {
                            NL453=(Token)match(input,NL,FOLLOW_NL_in_p_bool_not_expr4650); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_bool_not_expr_in_p_bool_not_expr4654);
                    p_bool_not_expr454=p_bool_not_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_bool_not_expr454.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:693:4: p_rel_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_rel_expr_in_p_bool_not_expr4659);
                    p_rel_expr455=p_rel_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_rel_expr455.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_bool_not_expr"

    public static class rel_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rel_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:696:1: rel_expr : relate_expr ( ( NL )? rel_op ( NL )? relate_expr )* -> ^( COMPARE relate_expr ( rel_op relate_expr )* ) ;
    public final babel17Parser.rel_expr_return rel_expr() throws RecognitionException {
        babel17Parser.rel_expr_return retval = new babel17Parser.rel_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL457=null;
        Token NL459=null;
        babel17Parser.relate_expr_return relate_expr456 = null;

        babel17Parser.rel_op_return rel_op458 = null;

        babel17Parser.relate_expr_return relate_expr460 = null;


        CommonTree NL457_tree=null;
        CommonTree NL459_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_relate_expr=new RewriteRuleSubtreeStream(adaptor,"rule relate_expr");
        RewriteRuleSubtreeStream stream_rel_op=new RewriteRuleSubtreeStream(adaptor,"rule rel_op");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:697:2: ( relate_expr ( ( NL )? rel_op ( NL )? relate_expr )* -> ^( COMPARE relate_expr ( rel_op relate_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:697:4: relate_expr ( ( NL )? rel_op ( NL )? relate_expr )*
            {
            pushFollow(FOLLOW_relate_expr_in_rel_expr4669);
            relate_expr456=relate_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_relate_expr.add(relate_expr456.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:697:16: ( ( NL )? rel_op ( NL )? relate_expr )*
            loop206:
            do {
                int alt206=2;
                int LA206_0 = input.LA(1);

                if ( (LA206_0==NL) ) {
                    int LA206_1 = input.LA(2);

                    if ( ((LA206_1>=A_EQUAL && LA206_1<=U_GREATER_EQ)) ) {
                        alt206=1;
                    }


                }
                else if ( ((LA206_0>=A_EQUAL && LA206_0<=U_GREATER_EQ)) ) {
                    alt206=1;
                }


                switch (alt206) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:697:17: ( NL )? rel_op ( NL )? relate_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:697:17: ( NL )?
            	    int alt204=2;
            	    int LA204_0 = input.LA(1);

            	    if ( (LA204_0==NL) ) {
            	        alt204=1;
            	    }
            	    switch (alt204) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:697:17: NL
            	            {
            	            NL457=(Token)match(input,NL,FOLLOW_NL_in_rel_expr4672); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL457);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_rel_op_in_rel_expr4675);
            	    rel_op458=rel_op();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_rel_op.add(rel_op458.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:697:28: ( NL )?
            	    int alt205=2;
            	    int LA205_0 = input.LA(1);

            	    if ( (LA205_0==NL) ) {
            	        alt205=1;
            	    }
            	    switch (alt205) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:697:28: NL
            	            {
            	            NL459=(Token)match(input,NL,FOLLOW_NL_in_rel_expr4677); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL459);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_relate_expr_in_rel_expr4680);
            	    relate_expr460=relate_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_relate_expr.add(relate_expr460.getTree());

            	    }
            	    break;

            	default :
            	    break loop206;
                }
            } while (true);



            // AST REWRITE
            // elements: rel_op, relate_expr, relate_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 697:46: -> ^( COMPARE relate_expr ( rel_op relate_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:697:49: ^( COMPARE relate_expr ( rel_op relate_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPARE, "COMPARE"), root_1);

                adaptor.addChild(root_1, stream_relate_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:697:71: ( rel_op relate_expr )*
                while ( stream_rel_op.hasNext()||stream_relate_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_rel_op.nextTree());
                    adaptor.addChild(root_1, stream_relate_expr.nextTree());

                }
                stream_rel_op.reset();
                stream_relate_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rel_expr"

    public static class p_rel_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_rel_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:699:1: p_rel_expr : p_relate_expr ( ( NL )? rel_op ( NL )? p_relate_expr )* -> ^( COMPARE p_relate_expr ( rel_op p_relate_expr )* ) ;
    public final babel17Parser.p_rel_expr_return p_rel_expr() throws RecognitionException {
        babel17Parser.p_rel_expr_return retval = new babel17Parser.p_rel_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL462=null;
        Token NL464=null;
        babel17Parser.p_relate_expr_return p_relate_expr461 = null;

        babel17Parser.rel_op_return rel_op463 = null;

        babel17Parser.p_relate_expr_return p_relate_expr465 = null;


        CommonTree NL462_tree=null;
        CommonTree NL464_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_p_relate_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_relate_expr");
        RewriteRuleSubtreeStream stream_rel_op=new RewriteRuleSubtreeStream(adaptor,"rule rel_op");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:700:2: ( p_relate_expr ( ( NL )? rel_op ( NL )? p_relate_expr )* -> ^( COMPARE p_relate_expr ( rel_op p_relate_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:700:4: p_relate_expr ( ( NL )? rel_op ( NL )? p_relate_expr )*
            {
            pushFollow(FOLLOW_p_relate_expr_in_p_rel_expr4707);
            p_relate_expr461=p_relate_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_relate_expr.add(p_relate_expr461.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:700:18: ( ( NL )? rel_op ( NL )? p_relate_expr )*
            loop209:
            do {
                int alt209=2;
                int LA209_0 = input.LA(1);

                if ( (LA209_0==NL) ) {
                    int LA209_1 = input.LA(2);

                    if ( ((LA209_1>=A_EQUAL && LA209_1<=U_GREATER_EQ)) ) {
                        alt209=1;
                    }


                }
                else if ( ((LA209_0>=A_EQUAL && LA209_0<=U_GREATER_EQ)) ) {
                    alt209=1;
                }


                switch (alt209) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:700:19: ( NL )? rel_op ( NL )? p_relate_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:700:19: ( NL )?
            	    int alt207=2;
            	    int LA207_0 = input.LA(1);

            	    if ( (LA207_0==NL) ) {
            	        alt207=1;
            	    }
            	    switch (alt207) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:700:19: NL
            	            {
            	            NL462=(Token)match(input,NL,FOLLOW_NL_in_p_rel_expr4710); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL462);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_rel_op_in_p_rel_expr4713);
            	    rel_op463=rel_op();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_rel_op.add(rel_op463.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:700:30: ( NL )?
            	    int alt208=2;
            	    int LA208_0 = input.LA(1);

            	    if ( (LA208_0==NL) ) {
            	        alt208=1;
            	    }
            	    switch (alt208) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:700:30: NL
            	            {
            	            NL464=(Token)match(input,NL,FOLLOW_NL_in_p_rel_expr4715); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL464);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_relate_expr_in_p_rel_expr4718);
            	    p_relate_expr465=p_relate_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_relate_expr.add(p_relate_expr465.getTree());

            	    }
            	    break;

            	default :
            	    break loop209;
                }
            } while (true);



            // AST REWRITE
            // elements: p_relate_expr, rel_op, p_relate_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 700:50: -> ^( COMPARE p_relate_expr ( rel_op p_relate_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:700:53: ^( COMPARE p_relate_expr ( rel_op p_relate_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPARE, "COMPARE"), root_1);

                adaptor.addChild(root_1, stream_p_relate_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:700:77: ( rel_op p_relate_expr )*
                while ( stream_p_relate_expr.hasNext()||stream_rel_op.hasNext() ) {
                    adaptor.addChild(root_1, stream_rel_op.nextTree());
                    adaptor.addChild(root_1, stream_p_relate_expr.nextTree());

                }
                stream_p_relate_expr.reset();
                stream_rel_op.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_rel_expr"

    public static class rel_op_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rel_op"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:703:1: rel_op : ( token_EQUAL | token_NOT_EQUAL | GREATER | token_GREATER_EQ | LESS | token_LESS_EQ );
    public final babel17Parser.rel_op_return rel_op() throws RecognitionException {
        babel17Parser.rel_op_return retval = new babel17Parser.rel_op_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token GREATER468=null;
        Token LESS470=null;
        babel17Parser.token_EQUAL_return token_EQUAL466 = null;

        babel17Parser.token_NOT_EQUAL_return token_NOT_EQUAL467 = null;

        babel17Parser.token_GREATER_EQ_return token_GREATER_EQ469 = null;

        babel17Parser.token_LESS_EQ_return token_LESS_EQ471 = null;


        CommonTree GREATER468_tree=null;
        CommonTree LESS470_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:703:8: ( token_EQUAL | token_NOT_EQUAL | GREATER | token_GREATER_EQ | LESS | token_LESS_EQ )
            int alt210=6;
            switch ( input.LA(1) ) {
            case A_EQUAL:
            case U_EQUAL:
                {
                alt210=1;
                }
                break;
            case A_NOT_EQUAL:
            case U_NOT_EQUAL:
                {
                alt210=2;
                }
                break;
            case GREATER:
                {
                alt210=3;
                }
                break;
            case A_GREATER_EQ:
            case U_GREATER_EQ:
                {
                alt210=4;
                }
                break;
            case LESS:
                {
                alt210=5;
                }
                break;
            case A_LESS_EQ:
            case U_LESS_EQ:
                {
                alt210=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 210, 0, input);

                throw nvae;
            }

            switch (alt210) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:703:10: token_EQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_EQUAL_in_rel_op4744);
                    token_EQUAL466=token_EQUAL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_EQUAL466.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:703:24: token_NOT_EQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_NOT_EQUAL_in_rel_op4748);
                    token_NOT_EQUAL467=token_NOT_EQUAL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_NOT_EQUAL467.getTree());

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:703:42: GREATER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    GREATER468=(Token)match(input,GREATER,FOLLOW_GREATER_in_rel_op4752); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER468_tree = (CommonTree)adaptor.create(GREATER468);
                    adaptor.addChild(root_0, GREATER468_tree);
                    }

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:703:52: token_GREATER_EQ
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_GREATER_EQ_in_rel_op4756);
                    token_GREATER_EQ469=token_GREATER_EQ();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_GREATER_EQ469.getTree());

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:703:71: LESS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LESS470=(Token)match(input,LESS,FOLLOW_LESS_in_rel_op4760); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LESS470_tree = (CommonTree)adaptor.create(LESS470);
                    adaptor.addChild(root_0, LESS470_tree);
                    }

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:703:78: token_LESS_EQ
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_token_LESS_EQ_in_rel_op4764);
                    token_LESS_EQ471=token_LESS_EQ();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, token_LESS_EQ471.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rel_op"

    public static class relate_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relate_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:1: relate_expr : convert_expr ( ( NL )? TOK_RELATE ( NL )? convert_expr )? -> ^( RELATE ( convert_expr )* ) ;
    public final babel17Parser.relate_expr_return relate_expr() throws RecognitionException {
        babel17Parser.relate_expr_return retval = new babel17Parser.relate_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL473=null;
        Token TOK_RELATE474=null;
        Token NL475=null;
        babel17Parser.convert_expr_return convert_expr472 = null;

        babel17Parser.convert_expr_return convert_expr476 = null;


        CommonTree NL473_tree=null;
        CommonTree TOK_RELATE474_tree=null;
        CommonTree NL475_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_TOK_RELATE=new RewriteRuleTokenStream(adaptor,"token TOK_RELATE");
        RewriteRuleSubtreeStream stream_convert_expr=new RewriteRuleSubtreeStream(adaptor,"rule convert_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:12: ( convert_expr ( ( NL )? TOK_RELATE ( NL )? convert_expr )? -> ^( RELATE ( convert_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:14: convert_expr ( ( NL )? TOK_RELATE ( NL )? convert_expr )?
            {
            pushFollow(FOLLOW_convert_expr_in_relate_expr4773);
            convert_expr472=convert_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_convert_expr.add(convert_expr472.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:27: ( ( NL )? TOK_RELATE ( NL )? convert_expr )?
            int alt213=2;
            int LA213_0 = input.LA(1);

            if ( (LA213_0==NL) ) {
                int LA213_1 = input.LA(2);

                if ( (LA213_1==TOK_RELATE) ) {
                    alt213=1;
                }
            }
            else if ( (LA213_0==TOK_RELATE) ) {
                alt213=1;
            }
            switch (alt213) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:28: ( NL )? TOK_RELATE ( NL )? convert_expr
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:28: ( NL )?
                    int alt211=2;
                    int LA211_0 = input.LA(1);

                    if ( (LA211_0==NL) ) {
                        alt211=1;
                    }
                    switch (alt211) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:28: NL
                            {
                            NL473=(Token)match(input,NL,FOLLOW_NL_in_relate_expr4776); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL473);


                            }
                            break;

                    }

                    TOK_RELATE474=(Token)match(input,TOK_RELATE,FOLLOW_TOK_RELATE_in_relate_expr4779); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TOK_RELATE.add(TOK_RELATE474);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:43: ( NL )?
                    int alt212=2;
                    int LA212_0 = input.LA(1);

                    if ( (LA212_0==NL) ) {
                        alt212=1;
                    }
                    switch (alt212) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:43: NL
                            {
                            NL475=(Token)match(input,NL,FOLLOW_NL_in_relate_expr4781); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL475);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_convert_expr_in_relate_expr4784);
                    convert_expr476=convert_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_convert_expr.add(convert_expr476.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: convert_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 705:62: -> ^( RELATE ( convert_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:65: ^( RELATE ( convert_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RELATE, "RELATE"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:705:74: ( convert_expr )*
                while ( stream_convert_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_convert_expr.nextTree());

                }
                stream_convert_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "relate_expr"

    public static class p_relate_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_relate_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:1: p_relate_expr : p_convert_expr ( ( NL )? TOK_RELATE ( NL )? p_convert_expr )? -> ^( RELATE ( p_convert_expr )* ) ;
    public final babel17Parser.p_relate_expr_return p_relate_expr() throws RecognitionException {
        babel17Parser.p_relate_expr_return retval = new babel17Parser.p_relate_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL478=null;
        Token TOK_RELATE479=null;
        Token NL480=null;
        babel17Parser.p_convert_expr_return p_convert_expr477 = null;

        babel17Parser.p_convert_expr_return p_convert_expr481 = null;


        CommonTree NL478_tree=null;
        CommonTree TOK_RELATE479_tree=null;
        CommonTree NL480_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_TOK_RELATE=new RewriteRuleTokenStream(adaptor,"token TOK_RELATE");
        RewriteRuleSubtreeStream stream_p_convert_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_convert_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:14: ( p_convert_expr ( ( NL )? TOK_RELATE ( NL )? p_convert_expr )? -> ^( RELATE ( p_convert_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:16: p_convert_expr ( ( NL )? TOK_RELATE ( NL )? p_convert_expr )?
            {
            pushFollow(FOLLOW_p_convert_expr_in_p_relate_expr4803);
            p_convert_expr477=p_convert_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_convert_expr.add(p_convert_expr477.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:31: ( ( NL )? TOK_RELATE ( NL )? p_convert_expr )?
            int alt216=2;
            int LA216_0 = input.LA(1);

            if ( (LA216_0==NL) ) {
                int LA216_1 = input.LA(2);

                if ( (LA216_1==TOK_RELATE) ) {
                    alt216=1;
                }
            }
            else if ( (LA216_0==TOK_RELATE) ) {
                alt216=1;
            }
            switch (alt216) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:32: ( NL )? TOK_RELATE ( NL )? p_convert_expr
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:32: ( NL )?
                    int alt214=2;
                    int LA214_0 = input.LA(1);

                    if ( (LA214_0==NL) ) {
                        alt214=1;
                    }
                    switch (alt214) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:32: NL
                            {
                            NL478=(Token)match(input,NL,FOLLOW_NL_in_p_relate_expr4806); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL478);


                            }
                            break;

                    }

                    TOK_RELATE479=(Token)match(input,TOK_RELATE,FOLLOW_TOK_RELATE_in_p_relate_expr4809); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TOK_RELATE.add(TOK_RELATE479);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:47: ( NL )?
                    int alt215=2;
                    int LA215_0 = input.LA(1);

                    if ( (LA215_0==NL) ) {
                        alt215=1;
                    }
                    switch (alt215) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:47: NL
                            {
                            NL480=(Token)match(input,NL,FOLLOW_NL_in_p_relate_expr4811); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL480);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_convert_expr_in_p_relate_expr4814);
                    p_convert_expr481=p_convert_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_convert_expr.add(p_convert_expr481.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: p_convert_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 707:68: -> ^( RELATE ( p_convert_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:71: ^( RELATE ( p_convert_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RELATE, "RELATE"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:707:80: ( p_convert_expr )*
                while ( stream_p_convert_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_convert_expr.nextTree());

                }
                stream_p_convert_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_relate_expr"

    public static class convert_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "convert_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:709:1: convert_expr : term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )? -> ^( CONVERT term_expr ( typeannotation )? ) ;
    public final babel17Parser.convert_expr_return convert_expr() throws RecognitionException {
        babel17Parser.convert_expr_return retval = new babel17Parser.convert_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL483=null;
        Token TOK_CONVERT484=null;
        Token NL485=null;
        babel17Parser.term_expr_return term_expr482 = null;

        babel17Parser.typeannotation_return typeannotation486 = null;


        CommonTree NL483_tree=null;
        CommonTree TOK_CONVERT484_tree=null;
        CommonTree NL485_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_TOK_CONVERT=new RewriteRuleTokenStream(adaptor,"token TOK_CONVERT");
        RewriteRuleSubtreeStream stream_typeannotation=new RewriteRuleSubtreeStream(adaptor,"rule typeannotation");
        RewriteRuleSubtreeStream stream_term_expr=new RewriteRuleSubtreeStream(adaptor,"rule term_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:710:2: ( term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )? -> ^( CONVERT term_expr ( typeannotation )? ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:710:4: term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )?
            {
            pushFollow(FOLLOW_term_expr_in_convert_expr4835);
            term_expr482=term_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_term_expr.add(term_expr482.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:710:14: ( ( NL )? TOK_CONVERT ( NL )? typeannotation )?
            int alt219=2;
            int LA219_0 = input.LA(1);

            if ( (LA219_0==NL) ) {
                int LA219_1 = input.LA(2);

                if ( (LA219_1==TOK_CONVERT) ) {
                    alt219=1;
                }
            }
            else if ( (LA219_0==TOK_CONVERT) ) {
                alt219=1;
            }
            switch (alt219) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:710:15: ( NL )? TOK_CONVERT ( NL )? typeannotation
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:710:15: ( NL )?
                    int alt217=2;
                    int LA217_0 = input.LA(1);

                    if ( (LA217_0==NL) ) {
                        alt217=1;
                    }
                    switch (alt217) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:710:15: NL
                            {
                            NL483=(Token)match(input,NL,FOLLOW_NL_in_convert_expr4838); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL483);


                            }
                            break;

                    }

                    TOK_CONVERT484=(Token)match(input,TOK_CONVERT,FOLLOW_TOK_CONVERT_in_convert_expr4841); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TOK_CONVERT.add(TOK_CONVERT484);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:710:31: ( NL )?
                    int alt218=2;
                    int LA218_0 = input.LA(1);

                    if ( (LA218_0==NL) ) {
                        alt218=1;
                    }
                    switch (alt218) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:710:31: NL
                            {
                            NL485=(Token)match(input,NL,FOLLOW_NL_in_convert_expr4843); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL485);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeannotation_in_convert_expr4846);
                    typeannotation486=typeannotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeannotation.add(typeannotation486.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: typeannotation, term_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 710:52: -> ^( CONVERT term_expr ( typeannotation )? )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:710:55: ^( CONVERT term_expr ( typeannotation )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONVERT, "CONVERT"), root_1);

                adaptor.addChild(root_1, stream_term_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:710:75: ( typeannotation )?
                if ( stream_typeannotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeannotation.nextTree());

                }
                stream_typeannotation.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "convert_expr"

    public static class p_convert_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_convert_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:712:1: p_convert_expr : p_term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )? -> ^( CONVERT p_term_expr ( typeannotation )? ) ;
    public final babel17Parser.p_convert_expr_return p_convert_expr() throws RecognitionException {
        babel17Parser.p_convert_expr_return retval = new babel17Parser.p_convert_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL488=null;
        Token TOK_CONVERT489=null;
        Token NL490=null;
        babel17Parser.p_term_expr_return p_term_expr487 = null;

        babel17Parser.typeannotation_return typeannotation491 = null;


        CommonTree NL488_tree=null;
        CommonTree TOK_CONVERT489_tree=null;
        CommonTree NL490_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_TOK_CONVERT=new RewriteRuleTokenStream(adaptor,"token TOK_CONVERT");
        RewriteRuleSubtreeStream stream_typeannotation=new RewriteRuleSubtreeStream(adaptor,"rule typeannotation");
        RewriteRuleSubtreeStream stream_p_term_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_term_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:713:2: ( p_term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )? -> ^( CONVERT p_term_expr ( typeannotation )? ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:713:4: p_term_expr ( ( NL )? TOK_CONVERT ( NL )? typeannotation )?
            {
            pushFollow(FOLLOW_p_term_expr_in_p_convert_expr4868);
            p_term_expr487=p_term_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_term_expr.add(p_term_expr487.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:713:16: ( ( NL )? TOK_CONVERT ( NL )? typeannotation )?
            int alt222=2;
            int LA222_0 = input.LA(1);

            if ( (LA222_0==NL) ) {
                int LA222_1 = input.LA(2);

                if ( (LA222_1==TOK_CONVERT) ) {
                    alt222=1;
                }
            }
            else if ( (LA222_0==TOK_CONVERT) ) {
                alt222=1;
            }
            switch (alt222) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:713:17: ( NL )? TOK_CONVERT ( NL )? typeannotation
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:713:17: ( NL )?
                    int alt220=2;
                    int LA220_0 = input.LA(1);

                    if ( (LA220_0==NL) ) {
                        alt220=1;
                    }
                    switch (alt220) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:713:17: NL
                            {
                            NL488=(Token)match(input,NL,FOLLOW_NL_in_p_convert_expr4871); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL488);


                            }
                            break;

                    }

                    TOK_CONVERT489=(Token)match(input,TOK_CONVERT,FOLLOW_TOK_CONVERT_in_p_convert_expr4874); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TOK_CONVERT.add(TOK_CONVERT489);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:713:33: ( NL )?
                    int alt221=2;
                    int LA221_0 = input.LA(1);

                    if ( (LA221_0==NL) ) {
                        alt221=1;
                    }
                    switch (alt221) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:713:33: NL
                            {
                            NL490=(Token)match(input,NL,FOLLOW_NL_in_p_convert_expr4876); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL490);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_typeannotation_in_p_convert_expr4879);
                    typeannotation491=typeannotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeannotation.add(typeannotation491.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: typeannotation, p_term_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 713:54: -> ^( CONVERT p_term_expr ( typeannotation )? )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:713:57: ^( CONVERT p_term_expr ( typeannotation )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONVERT, "CONVERT"), root_1);

                adaptor.addChild(root_1, stream_p_term_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:713:79: ( typeannotation )?
                if ( stream_typeannotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeannotation.nextTree());

                }
                stream_typeannotation.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_convert_expr"

    public static class term_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "term_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:715:1: term_expr : ( builtin_fun term_expr | arith_expr );
    public final babel17Parser.term_expr_return term_expr() throws RecognitionException {
        babel17Parser.term_expr_return retval = new babel17Parser.term_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.builtin_fun_return builtin_fun492 = null;

        babel17Parser.term_expr_return term_expr493 = null;

        babel17Parser.arith_expr_return arith_expr494 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:716:2: ( builtin_fun term_expr | arith_expr )
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==L_choose||LA223_0==L_random||LA223_0==L_typeof||LA223_0==L_native) ) {
                alt223=1;
            }
            else if ( (LA223_0==L_begin||(LA223_0>=L_with && LA223_0<=L_if)||(LA223_0>=L_while && LA223_0<=L_for)||LA223_0==L_match||LA223_0==L_try||(LA223_0>=L_true && LA223_0<=L_this)||LA223_0==L_nil||LA223_0==L_root||LA223_0==MINUS||(LA223_0>=Constr && LA223_0<=Id)||(LA223_0>=Float && LA223_0<=Num)||(LA223_0>=String && LA223_0<=ROUND_BRACKET_OPEN)||LA223_0==SQUARE_BRACKET_OPEN||LA223_0==CURLY_BRACKET_OPEN) ) {
                alt223=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 223, 0, input);

                throw nvae;
            }
            switch (alt223) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:716:4: builtin_fun term_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_builtin_fun_in_term_expr4902);
                    builtin_fun492=builtin_fun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(builtin_fun492.getTree(), root_0);
                    pushFollow(FOLLOW_term_expr_in_term_expr4905);
                    term_expr493=term_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, term_expr493.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:717:4: arith_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arith_expr_in_term_expr4910);
                    arith_expr494=arith_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_expr494.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "term_expr"

    public static class p_term_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_term_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:719:1: p_term_expr : ( builtin_fun ( NL )? p_term_expr | p_arith_expr );
    public final babel17Parser.p_term_expr_return p_term_expr() throws RecognitionException {
        babel17Parser.p_term_expr_return retval = new babel17Parser.p_term_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL496=null;
        babel17Parser.builtin_fun_return builtin_fun495 = null;

        babel17Parser.p_term_expr_return p_term_expr497 = null;

        babel17Parser.p_arith_expr_return p_arith_expr498 = null;


        CommonTree NL496_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:720:2: ( builtin_fun ( NL )? p_term_expr | p_arith_expr )
            int alt225=2;
            int LA225_0 = input.LA(1);

            if ( (LA225_0==L_choose||LA225_0==L_random||LA225_0==L_typeof||LA225_0==L_native) ) {
                alt225=1;
            }
            else if ( (LA225_0==L_begin||(LA225_0>=L_with && LA225_0<=L_if)||(LA225_0>=L_while && LA225_0<=L_for)||LA225_0==L_match||LA225_0==L_try||(LA225_0>=L_true && LA225_0<=L_this)||LA225_0==L_nil||LA225_0==L_root||LA225_0==MINUS||(LA225_0>=Constr && LA225_0<=Id)||(LA225_0>=Float && LA225_0<=Num)||(LA225_0>=String && LA225_0<=ROUND_BRACKET_OPEN)||LA225_0==SQUARE_BRACKET_OPEN||LA225_0==CURLY_BRACKET_OPEN) ) {
                alt225=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 225, 0, input);

                throw nvae;
            }
            switch (alt225) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:720:4: builtin_fun ( NL )? p_term_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_builtin_fun_in_p_term_expr4920);
                    builtin_fun495=builtin_fun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(builtin_fun495.getTree(), root_0);
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:720:19: ( NL )?
                    int alt224=2;
                    int LA224_0 = input.LA(1);

                    if ( (LA224_0==NL) ) {
                        alt224=1;
                    }
                    switch (alt224) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:720:19: NL
                            {
                            NL496=(Token)match(input,NL,FOLLOW_NL_in_p_term_expr4923); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_term_expr_in_p_term_expr4927);
                    p_term_expr497=p_term_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_term_expr497.getTree());

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:721:4: p_arith_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_arith_expr_in_p_term_expr4932);
                    p_arith_expr498=p_arith_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_expr498.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_term_expr"

    public static class builtin_fun_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtin_fun"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:723:1: builtin_fun : ( L_random | L_choose | L_typeof | L_native );
    public final babel17Parser.builtin_fun_return builtin_fun() throws RecognitionException {
        babel17Parser.builtin_fun_return retval = new babel17Parser.builtin_fun_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set499=null;

        CommonTree set499_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:724:2: ( L_random | L_choose | L_typeof | L_native )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set499=(Token)input.LT(1);
            if ( input.LA(1)==L_choose||input.LA(1)==L_random||input.LA(1)==L_typeof||input.LA(1)==L_native ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set499));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtin_fun"

    public static class arith_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:726:1: arith_expr : plusplus_expr ;
    public final babel17Parser.arith_expr_return arith_expr() throws RecognitionException {
        babel17Parser.arith_expr_return retval = new babel17Parser.arith_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.plusplus_expr_return plusplus_expr500 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:727:2: ( plusplus_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:727:4: plusplus_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_plusplus_expr_in_arith_expr4962);
            plusplus_expr500=plusplus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, plusplus_expr500.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_expr"

    public static class p_arith_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:729:1: p_arith_expr : p_plusplus_expr ;
    public final babel17Parser.p_arith_expr_return p_arith_expr() throws RecognitionException {
        babel17Parser.p_arith_expr_return retval = new babel17Parser.p_arith_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.p_plusplus_expr_return p_plusplus_expr501 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:730:2: ( p_plusplus_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:730:4: p_plusplus_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_plusplus_expr_in_p_arith_expr4971);
            p_plusplus_expr501=p_plusplus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_plusplus_expr501.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_expr"

    public static class plusplus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "plusplus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:732:1: plusplus_expr : timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr )* ;
    public final babel17Parser.plusplus_expr_return plusplus_expr() throws RecognitionException {
        babel17Parser.plusplus_expr_return retval = new babel17Parser.plusplus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL503=null;
        Token PLUSPLUS504=null;
        Token MINUSMINUS505=null;
        Token NL506=null;
        babel17Parser.timestimes_expr_return timestimes_expr502 = null;

        babel17Parser.timestimes_expr_return timestimes_expr507 = null;


        CommonTree NL503_tree=null;
        CommonTree PLUSPLUS504_tree=null;
        CommonTree MINUSMINUS505_tree=null;
        CommonTree NL506_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:733:2: ( timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:733:4: timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_timestimes_expr_in_plusplus_expr4981);
            timestimes_expr502=timestimes_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, timestimes_expr502.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:733:20: ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr )*
            loop229:
            do {
                int alt229=2;
                int LA229_0 = input.LA(1);

                if ( (LA229_0==NL) ) {
                    int LA229_1 = input.LA(2);

                    if ( ((LA229_1>=PLUSPLUS && LA229_1<=MINUSMINUS)) ) {
                        alt229=1;
                    }


                }
                else if ( ((LA229_0>=PLUSPLUS && LA229_0<=MINUSMINUS)) ) {
                    alt229=1;
                }


                switch (alt229) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:733:21: ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? timestimes_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:733:23: ( NL )?
            	    int alt226=2;
            	    int LA226_0 = input.LA(1);

            	    if ( (LA226_0==NL) ) {
            	        alt226=1;
            	    }
            	    switch (alt226) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:733:23: NL
            	            {
            	            NL503=(Token)match(input,NL,FOLLOW_NL_in_plusplus_expr4984); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:733:26: ( PLUSPLUS | MINUSMINUS )
            	    int alt227=2;
            	    int LA227_0 = input.LA(1);

            	    if ( (LA227_0==PLUSPLUS) ) {
            	        alt227=1;
            	    }
            	    else if ( (LA227_0==MINUSMINUS) ) {
            	        alt227=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 227, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt227) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:733:27: PLUSPLUS
            	            {
            	            PLUSPLUS504=(Token)match(input,PLUSPLUS,FOLLOW_PLUSPLUS_in_plusplus_expr4989); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUSPLUS504_tree = (CommonTree)adaptor.create(PLUSPLUS504);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUSPLUS504_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:733:37: MINUSMINUS
            	            {
            	            MINUSMINUS505=(Token)match(input,MINUSMINUS,FOLLOW_MINUSMINUS_in_plusplus_expr4992); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUSMINUS505_tree = (CommonTree)adaptor.create(MINUSMINUS505);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUSMINUS505_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:733:52: ( NL )?
            	    int alt228=2;
            	    int LA228_0 = input.LA(1);

            	    if ( (LA228_0==NL) ) {
            	        alt228=1;
            	    }
            	    switch (alt228) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:733:52: NL
            	            {
            	            NL506=(Token)match(input,NL,FOLLOW_NL_in_plusplus_expr4996); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_timestimes_expr_in_plusplus_expr5000);
            	    timestimes_expr507=timestimes_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, timestimes_expr507.getTree());

            	    }
            	    break;

            	default :
            	    break loop229;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "plusplus_expr"

    public static class p_plusplus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_plusplus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:735:1: p_plusplus_expr : p_timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr )* ;
    public final babel17Parser.p_plusplus_expr_return p_plusplus_expr() throws RecognitionException {
        babel17Parser.p_plusplus_expr_return retval = new babel17Parser.p_plusplus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL509=null;
        Token PLUSPLUS510=null;
        Token MINUSMINUS511=null;
        Token NL512=null;
        babel17Parser.p_timestimes_expr_return p_timestimes_expr508 = null;

        babel17Parser.p_timestimes_expr_return p_timestimes_expr513 = null;


        CommonTree NL509_tree=null;
        CommonTree PLUSPLUS510_tree=null;
        CommonTree MINUSMINUS511_tree=null;
        CommonTree NL512_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:2: ( p_timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:4: p_timestimes_expr ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_timestimes_expr_in_p_plusplus_expr5012);
            p_timestimes_expr508=p_timestimes_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_timestimes_expr508.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:22: ( ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr )*
            loop233:
            do {
                int alt233=2;
                int LA233_0 = input.LA(1);

                if ( (LA233_0==NL) ) {
                    int LA233_1 = input.LA(2);

                    if ( ((LA233_1>=PLUSPLUS && LA233_1<=MINUSMINUS)) ) {
                        alt233=1;
                    }


                }
                else if ( ((LA233_0>=PLUSPLUS && LA233_0<=MINUSMINUS)) ) {
                    alt233=1;
                }


                switch (alt233) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:23: ( NL )? ( PLUSPLUS | MINUSMINUS ) ( NL )? p_timestimes_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:25: ( NL )?
            	    int alt230=2;
            	    int LA230_0 = input.LA(1);

            	    if ( (LA230_0==NL) ) {
            	        alt230=1;
            	    }
            	    switch (alt230) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:25: NL
            	            {
            	            NL509=(Token)match(input,NL,FOLLOW_NL_in_p_plusplus_expr5015); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:28: ( PLUSPLUS | MINUSMINUS )
            	    int alt231=2;
            	    int LA231_0 = input.LA(1);

            	    if ( (LA231_0==PLUSPLUS) ) {
            	        alt231=1;
            	    }
            	    else if ( (LA231_0==MINUSMINUS) ) {
            	        alt231=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 231, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt231) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:29: PLUSPLUS
            	            {
            	            PLUSPLUS510=(Token)match(input,PLUSPLUS,FOLLOW_PLUSPLUS_in_p_plusplus_expr5020); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUSPLUS510_tree = (CommonTree)adaptor.create(PLUSPLUS510);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUSPLUS510_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:39: MINUSMINUS
            	            {
            	            MINUSMINUS511=(Token)match(input,MINUSMINUS,FOLLOW_MINUSMINUS_in_p_plusplus_expr5023); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUSMINUS511_tree = (CommonTree)adaptor.create(MINUSMINUS511);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUSMINUS511_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:54: ( NL )?
            	    int alt232=2;
            	    int LA232_0 = input.LA(1);

            	    if ( (LA232_0==NL) ) {
            	        alt232=1;
            	    }
            	    switch (alt232) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:736:54: NL
            	            {
            	            NL512=(Token)match(input,NL,FOLLOW_NL_in_p_plusplus_expr5027); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_timestimes_expr_in_p_plusplus_expr5031);
            	    p_timestimes_expr513=p_timestimes_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_timestimes_expr513.getTree());

            	    }
            	    break;

            	default :
            	    break loop233;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_plusplus_expr"

    public static class timestimes_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timestimes_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:739:1: timestimes_expr : simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr )* ;
    public final babel17Parser.timestimes_expr_return timestimes_expr() throws RecognitionException {
        babel17Parser.timestimes_expr_return retval = new babel17Parser.timestimes_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL515=null;
        Token TIMESTIMES516=null;
        Token QUOTIENTQUOTIENT517=null;
        Token NL518=null;
        babel17Parser.simple_expr_return simple_expr514 = null;

        babel17Parser.simple_expr_return simple_expr519 = null;


        CommonTree NL515_tree=null;
        CommonTree TIMESTIMES516_tree=null;
        CommonTree QUOTIENTQUOTIENT517_tree=null;
        CommonTree NL518_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:2: ( simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:4: simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_simple_expr_in_timestimes_expr5043);
            simple_expr514=simple_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expr514.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:16: ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr )*
            loop237:
            do {
                int alt237=2;
                int LA237_0 = input.LA(1);

                if ( (LA237_0==NL) ) {
                    int LA237_1 = input.LA(2);

                    if ( ((LA237_1>=TIMESTIMES && LA237_1<=QUOTIENTQUOTIENT)) ) {
                        alt237=1;
                    }


                }
                else if ( ((LA237_0>=TIMESTIMES && LA237_0<=QUOTIENTQUOTIENT)) ) {
                    alt237=1;
                }


                switch (alt237) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:17: ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? simple_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:19: ( NL )?
            	    int alt234=2;
            	    int LA234_0 = input.LA(1);

            	    if ( (LA234_0==NL) ) {
            	        alt234=1;
            	    }
            	    switch (alt234) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:19: NL
            	            {
            	            NL515=(Token)match(input,NL,FOLLOW_NL_in_timestimes_expr5046); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:22: ( TIMESTIMES | QUOTIENTQUOTIENT )
            	    int alt235=2;
            	    int LA235_0 = input.LA(1);

            	    if ( (LA235_0==TIMESTIMES) ) {
            	        alt235=1;
            	    }
            	    else if ( (LA235_0==QUOTIENTQUOTIENT) ) {
            	        alt235=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 235, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt235) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:23: TIMESTIMES
            	            {
            	            TIMESTIMES516=(Token)match(input,TIMESTIMES,FOLLOW_TIMESTIMES_in_timestimes_expr5051); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            TIMESTIMES516_tree = (CommonTree)adaptor.create(TIMESTIMES516);
            	            root_0 = (CommonTree)adaptor.becomeRoot(TIMESTIMES516_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:35: QUOTIENTQUOTIENT
            	            {
            	            QUOTIENTQUOTIENT517=(Token)match(input,QUOTIENTQUOTIENT,FOLLOW_QUOTIENTQUOTIENT_in_timestimes_expr5054); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            QUOTIENTQUOTIENT517_tree = (CommonTree)adaptor.create(QUOTIENTQUOTIENT517);
            	            root_0 = (CommonTree)adaptor.becomeRoot(QUOTIENTQUOTIENT517_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:56: ( NL )?
            	    int alt236=2;
            	    int LA236_0 = input.LA(1);

            	    if ( (LA236_0==NL) ) {
            	        alt236=1;
            	    }
            	    switch (alt236) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:740:56: NL
            	            {
            	            NL518=(Token)match(input,NL,FOLLOW_NL_in_timestimes_expr5058); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_simple_expr_in_timestimes_expr5062);
            	    simple_expr519=simple_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expr519.getTree());

            	    }
            	    break;

            	default :
            	    break loop237;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timestimes_expr"

    public static class p_timestimes_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_timestimes_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:742:1: p_timestimes_expr : p_simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr )* ;
    public final babel17Parser.p_timestimes_expr_return p_timestimes_expr() throws RecognitionException {
        babel17Parser.p_timestimes_expr_return retval = new babel17Parser.p_timestimes_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL521=null;
        Token TIMESTIMES522=null;
        Token QUOTIENTQUOTIENT523=null;
        Token NL524=null;
        babel17Parser.p_simple_expr_return p_simple_expr520 = null;

        babel17Parser.p_simple_expr_return p_simple_expr525 = null;


        CommonTree NL521_tree=null;
        CommonTree TIMESTIMES522_tree=null;
        CommonTree QUOTIENTQUOTIENT523_tree=null;
        CommonTree NL524_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:743:2: ( p_simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:743:4: p_simple_expr ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_simple_expr_in_p_timestimes_expr5075);
            p_simple_expr520=p_simple_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_simple_expr520.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:743:18: ( ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr )*
            loop241:
            do {
                int alt241=2;
                int LA241_0 = input.LA(1);

                if ( (LA241_0==NL) ) {
                    int LA241_1 = input.LA(2);

                    if ( ((LA241_1>=TIMESTIMES && LA241_1<=QUOTIENTQUOTIENT)) ) {
                        alt241=1;
                    }


                }
                else if ( ((LA241_0>=TIMESTIMES && LA241_0<=QUOTIENTQUOTIENT)) ) {
                    alt241=1;
                }


                switch (alt241) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:743:19: ( NL )? ( TIMESTIMES | QUOTIENTQUOTIENT ) ( NL )? p_simple_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:743:21: ( NL )?
            	    int alt238=2;
            	    int LA238_0 = input.LA(1);

            	    if ( (LA238_0==NL) ) {
            	        alt238=1;
            	    }
            	    switch (alt238) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:743:21: NL
            	            {
            	            NL521=(Token)match(input,NL,FOLLOW_NL_in_p_timestimes_expr5078); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:743:24: ( TIMESTIMES | QUOTIENTQUOTIENT )
            	    int alt239=2;
            	    int LA239_0 = input.LA(1);

            	    if ( (LA239_0==TIMESTIMES) ) {
            	        alt239=1;
            	    }
            	    else if ( (LA239_0==QUOTIENTQUOTIENT) ) {
            	        alt239=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 239, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt239) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:743:25: TIMESTIMES
            	            {
            	            TIMESTIMES522=(Token)match(input,TIMESTIMES,FOLLOW_TIMESTIMES_in_p_timestimes_expr5083); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            TIMESTIMES522_tree = (CommonTree)adaptor.create(TIMESTIMES522);
            	            root_0 = (CommonTree)adaptor.becomeRoot(TIMESTIMES522_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:743:37: QUOTIENTQUOTIENT
            	            {
            	            QUOTIENTQUOTIENT523=(Token)match(input,QUOTIENTQUOTIENT,FOLLOW_QUOTIENTQUOTIENT_in_p_timestimes_expr5086); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            QUOTIENTQUOTIENT523_tree = (CommonTree)adaptor.create(QUOTIENTQUOTIENT523);
            	            root_0 = (CommonTree)adaptor.becomeRoot(QUOTIENTQUOTIENT523_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:743:58: ( NL )?
            	    int alt240=2;
            	    int LA240_0 = input.LA(1);

            	    if ( (LA240_0==NL) ) {
            	        alt240=1;
            	    }
            	    switch (alt240) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:743:58: NL
            	            {
            	            NL524=(Token)match(input,NL,FOLLOW_NL_in_p_timestimes_expr5090); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_simple_expr_in_p_timestimes_expr5094);
            	    p_simple_expr525=p_simple_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_simple_expr525.getTree());

            	    }
            	    break;

            	default :
            	    break loop241;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_timestimes_expr"

    public static class simple_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:745:1: simple_expr : cons_expr ;
    public final babel17Parser.simple_expr_return simple_expr() throws RecognitionException {
        babel17Parser.simple_expr_return retval = new babel17Parser.simple_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.cons_expr_return cons_expr526 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:746:2: ( cons_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:746:4: cons_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_cons_expr_in_simple_expr5105);
            cons_expr526=cons_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cons_expr526.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "simple_expr"

    public static class p_simple_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_simple_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:748:1: p_simple_expr : p_cons_expr ;
    public final babel17Parser.p_simple_expr_return p_simple_expr() throws RecognitionException {
        babel17Parser.p_simple_expr_return retval = new babel17Parser.p_simple_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.p_cons_expr_return p_cons_expr527 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:749:2: ( p_cons_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:749:4: p_cons_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_cons_expr_in_p_simple_expr5114);
            p_cons_expr527=p_cons_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_cons_expr527.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_simple_expr"

    public static class cons_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cons_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:751:1: cons_expr : to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? to_expr )* -> ^( LIST_CONS ( to_expr )* ) ;
    public final babel17Parser.cons_expr_return cons_expr() throws RecognitionException {
        babel17Parser.cons_expr_return retval = new babel17Parser.cons_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL529=null;
        Token NL531=null;
        babel17Parser.to_expr_return to_expr528 = null;

        babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON530 = null;

        babel17Parser.to_expr_return to_expr532 = null;


        CommonTree NL529_tree=null;
        CommonTree NL531_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_token_DOUBLE_COLON=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_COLON");
        RewriteRuleSubtreeStream stream_to_expr=new RewriteRuleSubtreeStream(adaptor,"rule to_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:752:2: ( to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? to_expr )* -> ^( LIST_CONS ( to_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:752:4: to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? to_expr )*
            {
            pushFollow(FOLLOW_to_expr_in_cons_expr5123);
            to_expr528=to_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_to_expr.add(to_expr528.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:752:12: ( ( NL )? token_DOUBLE_COLON ( NL )? to_expr )*
            loop244:
            do {
                int alt244=2;
                int LA244_0 = input.LA(1);

                if ( (LA244_0==NL) ) {
                    int LA244_1 = input.LA(2);

                    if ( ((LA244_1>=A_DOUBLE_COLON && LA244_1<=U_DOUBLE_COLON)) ) {
                        alt244=1;
                    }


                }
                else if ( ((LA244_0>=A_DOUBLE_COLON && LA244_0<=U_DOUBLE_COLON)) ) {
                    alt244=1;
                }


                switch (alt244) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:752:13: ( NL )? token_DOUBLE_COLON ( NL )? to_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:752:13: ( NL )?
            	    int alt242=2;
            	    int LA242_0 = input.LA(1);

            	    if ( (LA242_0==NL) ) {
            	        alt242=1;
            	    }
            	    switch (alt242) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:752:13: NL
            	            {
            	            NL529=(Token)match(input,NL,FOLLOW_NL_in_cons_expr5126); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL529);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_DOUBLE_COLON_in_cons_expr5129);
            	    token_DOUBLE_COLON530=token_DOUBLE_COLON();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_token_DOUBLE_COLON.add(token_DOUBLE_COLON530.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:752:36: ( NL )?
            	    int alt243=2;
            	    int LA243_0 = input.LA(1);

            	    if ( (LA243_0==NL) ) {
            	        alt243=1;
            	    }
            	    switch (alt243) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:752:36: NL
            	            {
            	            NL531=(Token)match(input,NL,FOLLOW_NL_in_cons_expr5131); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL531);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_to_expr_in_cons_expr5134);
            	    to_expr532=to_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_to_expr.add(to_expr532.getTree());

            	    }
            	    break;

            	default :
            	    break loop244;
                }
            } while (true);



            // AST REWRITE
            // elements: to_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 752:50: -> ^( LIST_CONS ( to_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:752:53: ^( LIST_CONS ( to_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST_CONS, "LIST_CONS"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:752:65: ( to_expr )*
                while ( stream_to_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_to_expr.nextTree());

                }
                stream_to_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cons_expr"

    public static class p_cons_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_cons_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:754:1: p_cons_expr : p_to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr )* -> ^( LIST_CONS ( p_to_expr )* ) ;
    public final babel17Parser.p_cons_expr_return p_cons_expr() throws RecognitionException {
        babel17Parser.p_cons_expr_return retval = new babel17Parser.p_cons_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL534=null;
        Token NL536=null;
        babel17Parser.p_to_expr_return p_to_expr533 = null;

        babel17Parser.token_DOUBLE_COLON_return token_DOUBLE_COLON535 = null;

        babel17Parser.p_to_expr_return p_to_expr537 = null;


        CommonTree NL534_tree=null;
        CommonTree NL536_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_p_to_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_to_expr");
        RewriteRuleSubtreeStream stream_token_DOUBLE_COLON=new RewriteRuleSubtreeStream(adaptor,"rule token_DOUBLE_COLON");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:755:2: ( p_to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr )* -> ^( LIST_CONS ( p_to_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:755:4: p_to_expr ( ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr )*
            {
            pushFollow(FOLLOW_p_to_expr_in_p_cons_expr5154);
            p_to_expr533=p_to_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_to_expr.add(p_to_expr533.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:755:14: ( ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr )*
            loop247:
            do {
                int alt247=2;
                int LA247_0 = input.LA(1);

                if ( (LA247_0==NL) ) {
                    int LA247_1 = input.LA(2);

                    if ( ((LA247_1>=A_DOUBLE_COLON && LA247_1<=U_DOUBLE_COLON)) ) {
                        alt247=1;
                    }


                }
                else if ( ((LA247_0>=A_DOUBLE_COLON && LA247_0<=U_DOUBLE_COLON)) ) {
                    alt247=1;
                }


                switch (alt247) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:755:15: ( NL )? token_DOUBLE_COLON ( NL )? p_to_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:755:15: ( NL )?
            	    int alt245=2;
            	    int LA245_0 = input.LA(1);

            	    if ( (LA245_0==NL) ) {
            	        alt245=1;
            	    }
            	    switch (alt245) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:755:15: NL
            	            {
            	            NL534=(Token)match(input,NL,FOLLOW_NL_in_p_cons_expr5157); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL534);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_token_DOUBLE_COLON_in_p_cons_expr5160);
            	    token_DOUBLE_COLON535=token_DOUBLE_COLON();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_token_DOUBLE_COLON.add(token_DOUBLE_COLON535.getTree());
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:755:38: ( NL )?
            	    int alt246=2;
            	    int LA246_0 = input.LA(1);

            	    if ( (LA246_0==NL) ) {
            	        alt246=1;
            	    }
            	    switch (alt246) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:755:38: NL
            	            {
            	            NL536=(Token)match(input,NL,FOLLOW_NL_in_p_cons_expr5162); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL536);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_to_expr_in_p_cons_expr5165);
            	    p_to_expr537=p_to_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_to_expr.add(p_to_expr537.getTree());

            	    }
            	    break;

            	default :
            	    break loop247;
                }
            } while (true);



            // AST REWRITE
            // elements: p_to_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 755:54: -> ^( LIST_CONS ( p_to_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:755:57: ^( LIST_CONS ( p_to_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST_CONS, "LIST_CONS"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:755:69: ( p_to_expr )*
                while ( stream_p_to_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_to_expr.nextTree());

                }
                stream_p_to_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_cons_expr"

    public static class to_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:758:1: to_expr : arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr )? ;
    public final babel17Parser.to_expr_return to_expr() throws RecognitionException {
        babel17Parser.to_expr_return retval = new babel17Parser.to_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL539=null;
        Token L_to540=null;
        Token L_downto541=null;
        Token NL542=null;
        babel17Parser.arith_plus_expr_return arith_plus_expr538 = null;

        babel17Parser.arith_plus_expr_return arith_plus_expr543 = null;


        CommonTree NL539_tree=null;
        CommonTree L_to540_tree=null;
        CommonTree L_downto541_tree=null;
        CommonTree NL542_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:758:9: ( arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr )? )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:758:11: arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_arith_plus_expr_in_to_expr5185);
            arith_plus_expr538=arith_plus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_plus_expr538.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:758:27: ( ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr )?
            int alt251=2;
            int LA251_0 = input.LA(1);

            if ( (LA251_0==NL) ) {
                int LA251_1 = input.LA(2);

                if ( ((LA251_1>=L_to && LA251_1<=L_downto)) ) {
                    alt251=1;
                }
            }
            else if ( ((LA251_0>=L_to && LA251_0<=L_downto)) ) {
                alt251=1;
            }
            switch (alt251) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:758:28: ( NL )? ( L_to | L_downto ) ( NL )? arith_plus_expr
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:758:30: ( NL )?
                    int alt248=2;
                    int LA248_0 = input.LA(1);

                    if ( (LA248_0==NL) ) {
                        alt248=1;
                    }
                    switch (alt248) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:758:30: NL
                            {
                            NL539=(Token)match(input,NL,FOLLOW_NL_in_to_expr5188); if (state.failed) return retval;

                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:758:33: ( L_to | L_downto )
                    int alt249=2;
                    int LA249_0 = input.LA(1);

                    if ( (LA249_0==L_to) ) {
                        alt249=1;
                    }
                    else if ( (LA249_0==L_downto) ) {
                        alt249=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 249, 0, input);

                        throw nvae;
                    }
                    switch (alt249) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:758:34: L_to
                            {
                            L_to540=(Token)match(input,L_to,FOLLOW_L_to_in_to_expr5193); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            L_to540_tree = (CommonTree)adaptor.create(L_to540);
                            root_0 = (CommonTree)adaptor.becomeRoot(L_to540_tree, root_0);
                            }

                            }
                            break;
                        case 2 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:758:41: L_downto
                            {
                            L_downto541=(Token)match(input,L_downto,FOLLOW_L_downto_in_to_expr5197); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            L_downto541_tree = (CommonTree)adaptor.create(L_downto541);
                            root_0 = (CommonTree)adaptor.becomeRoot(L_downto541_tree, root_0);
                            }

                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:758:54: ( NL )?
                    int alt250=2;
                    int LA250_0 = input.LA(1);

                    if ( (LA250_0==NL) ) {
                        alt250=1;
                    }
                    switch (alt250) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:758:54: NL
                            {
                            NL542=(Token)match(input,NL,FOLLOW_NL_in_to_expr5201); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_arith_plus_expr_in_to_expr5205);
                    arith_plus_expr543=arith_plus_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_plus_expr543.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "to_expr"

    public static class p_to_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_to_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:760:1: p_to_expr : p_arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr )? ;
    public final babel17Parser.p_to_expr_return p_to_expr() throws RecognitionException {
        babel17Parser.p_to_expr_return retval = new babel17Parser.p_to_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL545=null;
        Token L_to546=null;
        Token L_downto547=null;
        Token NL548=null;
        babel17Parser.p_arith_plus_expr_return p_arith_plus_expr544 = null;

        babel17Parser.p_arith_plus_expr_return p_arith_plus_expr549 = null;


        CommonTree NL545_tree=null;
        CommonTree L_to546_tree=null;
        CommonTree L_downto547_tree=null;
        CommonTree NL548_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:761:2: ( p_arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr )? )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:761:4: p_arith_plus_expr ( ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_arith_plus_expr_in_p_to_expr5218);
            p_arith_plus_expr544=p_arith_plus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_plus_expr544.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:761:22: ( ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr )?
            int alt255=2;
            int LA255_0 = input.LA(1);

            if ( (LA255_0==NL) ) {
                int LA255_1 = input.LA(2);

                if ( ((LA255_1>=L_to && LA255_1<=L_downto)) ) {
                    alt255=1;
                }
            }
            else if ( ((LA255_0>=L_to && LA255_0<=L_downto)) ) {
                alt255=1;
            }
            switch (alt255) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:761:23: ( NL )? ( L_to | L_downto ) ( NL )? p_arith_plus_expr
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:761:25: ( NL )?
                    int alt252=2;
                    int LA252_0 = input.LA(1);

                    if ( (LA252_0==NL) ) {
                        alt252=1;
                    }
                    switch (alt252) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:761:25: NL
                            {
                            NL545=(Token)match(input,NL,FOLLOW_NL_in_p_to_expr5221); if (state.failed) return retval;

                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:761:28: ( L_to | L_downto )
                    int alt253=2;
                    int LA253_0 = input.LA(1);

                    if ( (LA253_0==L_to) ) {
                        alt253=1;
                    }
                    else if ( (LA253_0==L_downto) ) {
                        alt253=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 253, 0, input);

                        throw nvae;
                    }
                    switch (alt253) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:761:29: L_to
                            {
                            L_to546=(Token)match(input,L_to,FOLLOW_L_to_in_p_to_expr5226); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            L_to546_tree = (CommonTree)adaptor.create(L_to546);
                            root_0 = (CommonTree)adaptor.becomeRoot(L_to546_tree, root_0);
                            }

                            }
                            break;
                        case 2 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:761:36: L_downto
                            {
                            L_downto547=(Token)match(input,L_downto,FOLLOW_L_downto_in_p_to_expr5230); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            L_downto547_tree = (CommonTree)adaptor.create(L_downto547);
                            root_0 = (CommonTree)adaptor.becomeRoot(L_downto547_tree, root_0);
                            }

                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:761:49: ( NL )?
                    int alt254=2;
                    int LA254_0 = input.LA(1);

                    if ( (LA254_0==NL) ) {
                        alt254=1;
                    }
                    switch (alt254) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:761:49: NL
                            {
                            NL548=(Token)match(input,NL,FOLLOW_NL_in_p_to_expr5234); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_arith_plus_expr_in_p_to_expr5238);
                    p_arith_plus_expr549=p_arith_plus_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_plus_expr549.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_to_expr"

    public static class arith_plus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_plus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:763:1: arith_plus_expr : arith_uminus_expr ( ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr )* ;
    public final babel17Parser.arith_plus_expr_return arith_plus_expr() throws RecognitionException {
        babel17Parser.arith_plus_expr_return retval = new babel17Parser.arith_plus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL551=null;
        Token PLUS552=null;
        Token MINUS553=null;
        Token NL554=null;
        babel17Parser.arith_uminus_expr_return arith_uminus_expr550 = null;

        babel17Parser.arith_uminus_expr_return arith_uminus_expr555 = null;


        CommonTree NL551_tree=null;
        CommonTree PLUS552_tree=null;
        CommonTree MINUS553_tree=null;
        CommonTree NL554_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:764:2: ( arith_uminus_expr ( ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:764:4: arith_uminus_expr ( ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_arith_uminus_expr_in_arith_plus_expr5250);
            arith_uminus_expr550=arith_uminus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_uminus_expr550.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:764:22: ( ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr )*
            loop259:
            do {
                int alt259=2;
                int LA259_0 = input.LA(1);

                if ( (LA259_0==NL) ) {
                    int LA259_1 = input.LA(2);

                    if ( (LA259_1==PLUS) ) {
                        alt259=1;
                    }


                }
                else if ( ((LA259_0>=PLUS && LA259_0<=MINUS)) ) {
                    alt259=1;
                }


                switch (alt259) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:764:23: ( ( NL )? PLUS | MINUS ) ( NL )? arith_uminus_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:764:23: ( ( NL )? PLUS | MINUS )
            	    int alt257=2;
            	    int LA257_0 = input.LA(1);

            	    if ( (LA257_0==PLUS||LA257_0==NL) ) {
            	        alt257=1;
            	    }
            	    else if ( (LA257_0==MINUS) ) {
            	        alt257=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 257, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt257) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:764:24: ( NL )? PLUS
            	            {
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:764:26: ( NL )?
            	            int alt256=2;
            	            int LA256_0 = input.LA(1);

            	            if ( (LA256_0==NL) ) {
            	                alt256=1;
            	            }
            	            switch (alt256) {
            	                case 1 :
            	                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:764:26: NL
            	                    {
            	                    NL551=(Token)match(input,NL,FOLLOW_NL_in_arith_plus_expr5254); if (state.failed) return retval;

            	                    }
            	                    break;

            	            }

            	            PLUS552=(Token)match(input,PLUS,FOLLOW_PLUS_in_arith_plus_expr5258); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS552_tree = (CommonTree)adaptor.create(PLUS552);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS552_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:764:37: MINUS
            	            {
            	            MINUS553=(Token)match(input,MINUS,FOLLOW_MINUS_in_arith_plus_expr5263); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS553_tree = (CommonTree)adaptor.create(MINUS553);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS553_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:764:47: ( NL )?
            	    int alt258=2;
            	    int LA258_0 = input.LA(1);

            	    if ( (LA258_0==NL) ) {
            	        alt258=1;
            	    }
            	    switch (alt258) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:764:47: NL
            	            {
            	            NL554=(Token)match(input,NL,FOLLOW_NL_in_arith_plus_expr5267); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_arith_uminus_expr_in_arith_plus_expr5271);
            	    arith_uminus_expr555=arith_uminus_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_uminus_expr555.getTree());

            	    }
            	    break;

            	default :
            	    break loop259;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_plus_expr"

    public static class p_arith_plus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_plus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:766:1: p_arith_plus_expr : p_arith_uminus_expr ( ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr )* ;
    public final babel17Parser.p_arith_plus_expr_return p_arith_plus_expr() throws RecognitionException {
        babel17Parser.p_arith_plus_expr_return retval = new babel17Parser.p_arith_plus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL557=null;
        Token set558=null;
        Token NL559=null;
        babel17Parser.p_arith_uminus_expr_return p_arith_uminus_expr556 = null;

        babel17Parser.p_arith_uminus_expr_return p_arith_uminus_expr560 = null;


        CommonTree NL557_tree=null;
        CommonTree set558_tree=null;
        CommonTree NL559_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:767:2: ( p_arith_uminus_expr ( ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:767:4: p_arith_uminus_expr ( ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_arith_uminus_expr_in_p_arith_plus_expr5282);
            p_arith_uminus_expr556=p_arith_uminus_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_uminus_expr556.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:767:24: ( ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr )*
            loop262:
            do {
                int alt262=2;
                int LA262_0 = input.LA(1);

                if ( (LA262_0==NL) ) {
                    int LA262_1 = input.LA(2);

                    if ( ((LA262_1>=PLUS && LA262_1<=MINUS)) ) {
                        alt262=1;
                    }


                }
                else if ( ((LA262_0>=PLUS && LA262_0<=MINUS)) ) {
                    alt262=1;
                }


                switch (alt262) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:767:25: ( NL )? ( PLUS | MINUS ) ( NL )? p_arith_uminus_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:767:27: ( NL )?
            	    int alt260=2;
            	    int LA260_0 = input.LA(1);

            	    if ( (LA260_0==NL) ) {
            	        alt260=1;
            	    }
            	    switch (alt260) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:767:27: NL
            	            {
            	            NL557=(Token)match(input,NL,FOLLOW_NL_in_p_arith_plus_expr5285); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    set558=(Token)input.LT(1);
            	    set558=(Token)input.LT(1);
            	    if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set558), root_0);
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:767:48: ( NL )?
            	    int alt261=2;
            	    int LA261_0 = input.LA(1);

            	    if ( (LA261_0==NL) ) {
            	        alt261=1;
            	    }
            	    switch (alt261) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:767:48: NL
            	            {
            	            NL559=(Token)match(input,NL,FOLLOW_NL_in_p_arith_plus_expr5298); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_arith_uminus_expr_in_p_arith_plus_expr5302);
            	    p_arith_uminus_expr560=p_arith_uminus_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_uminus_expr560.getTree());

            	    }
            	    break;

            	default :
            	    break loop262;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_plus_expr"

    public static class arith_uminus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_uminus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:769:1: arith_uminus_expr : ( MINUS ( NL )? arith_mult_expr -> ^( UMINUS arith_mult_expr ) | arith_mult_expr );
    public final babel17Parser.arith_uminus_expr_return arith_uminus_expr() throws RecognitionException {
        babel17Parser.arith_uminus_expr_return retval = new babel17Parser.arith_uminus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS561=null;
        Token NL562=null;
        babel17Parser.arith_mult_expr_return arith_mult_expr563 = null;

        babel17Parser.arith_mult_expr_return arith_mult_expr564 = null;


        CommonTree MINUS561_tree=null;
        CommonTree NL562_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_arith_mult_expr=new RewriteRuleSubtreeStream(adaptor,"rule arith_mult_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:770:2: ( MINUS ( NL )? arith_mult_expr -> ^( UMINUS arith_mult_expr ) | arith_mult_expr )
            int alt264=2;
            int LA264_0 = input.LA(1);

            if ( (LA264_0==MINUS) ) {
                alt264=1;
            }
            else if ( (LA264_0==L_begin||(LA264_0>=L_with && LA264_0<=L_if)||(LA264_0>=L_while && LA264_0<=L_for)||LA264_0==L_match||LA264_0==L_try||(LA264_0>=L_true && LA264_0<=L_this)||LA264_0==L_nil||LA264_0==L_root||(LA264_0>=Constr && LA264_0<=Id)||(LA264_0>=Float && LA264_0<=Num)||(LA264_0>=String && LA264_0<=ROUND_BRACKET_OPEN)||LA264_0==SQUARE_BRACKET_OPEN||LA264_0==CURLY_BRACKET_OPEN) ) {
                alt264=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 264, 0, input);

                throw nvae;
            }
            switch (alt264) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:770:4: MINUS ( NL )? arith_mult_expr
                    {
                    MINUS561=(Token)match(input,MINUS,FOLLOW_MINUS_in_arith_uminus_expr5315); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS561);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:770:10: ( NL )?
                    int alt263=2;
                    int LA263_0 = input.LA(1);

                    if ( (LA263_0==NL) ) {
                        alt263=1;
                    }
                    switch (alt263) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:770:10: NL
                            {
                            NL562=(Token)match(input,NL,FOLLOW_NL_in_arith_uminus_expr5317); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL562);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_arith_mult_expr_in_arith_uminus_expr5320);
                    arith_mult_expr563=arith_mult_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arith_mult_expr.add(arith_mult_expr563.getTree());


                    // AST REWRITE
                    // elements: arith_mult_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 770:30: -> ^( UMINUS arith_mult_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:770:33: ^( UMINUS arith_mult_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UMINUS, "UMINUS"), root_1);

                        adaptor.addChild(root_1, stream_arith_mult_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:771:4: arith_mult_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arith_mult_expr_in_arith_uminus_expr5333);
                    arith_mult_expr564=arith_mult_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_mult_expr564.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_uminus_expr"

    public static class p_arith_uminus_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_uminus_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:773:1: p_arith_uminus_expr : ( MINUS ( NL )? p_arith_mult_expr -> ^( UMINUS p_arith_mult_expr ) | p_arith_mult_expr );
    public final babel17Parser.p_arith_uminus_expr_return p_arith_uminus_expr() throws RecognitionException {
        babel17Parser.p_arith_uminus_expr_return retval = new babel17Parser.p_arith_uminus_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS565=null;
        Token NL566=null;
        babel17Parser.p_arith_mult_expr_return p_arith_mult_expr567 = null;

        babel17Parser.p_arith_mult_expr_return p_arith_mult_expr568 = null;


        CommonTree MINUS565_tree=null;
        CommonTree NL566_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_p_arith_mult_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_arith_mult_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:774:2: ( MINUS ( NL )? p_arith_mult_expr -> ^( UMINUS p_arith_mult_expr ) | p_arith_mult_expr )
            int alt266=2;
            int LA266_0 = input.LA(1);

            if ( (LA266_0==MINUS) ) {
                alt266=1;
            }
            else if ( (LA266_0==L_begin||(LA266_0>=L_with && LA266_0<=L_if)||(LA266_0>=L_while && LA266_0<=L_for)||LA266_0==L_match||LA266_0==L_try||(LA266_0>=L_true && LA266_0<=L_this)||LA266_0==L_nil||LA266_0==L_root||(LA266_0>=Constr && LA266_0<=Id)||(LA266_0>=Float && LA266_0<=Num)||(LA266_0>=String && LA266_0<=ROUND_BRACKET_OPEN)||LA266_0==SQUARE_BRACKET_OPEN||LA266_0==CURLY_BRACKET_OPEN) ) {
                alt266=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 266, 0, input);

                throw nvae;
            }
            switch (alt266) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:774:4: MINUS ( NL )? p_arith_mult_expr
                    {
                    MINUS565=(Token)match(input,MINUS,FOLLOW_MINUS_in_p_arith_uminus_expr5344); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS565);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:774:10: ( NL )?
                    int alt265=2;
                    int LA265_0 = input.LA(1);

                    if ( (LA265_0==NL) ) {
                        alt265=1;
                    }
                    switch (alt265) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:774:10: NL
                            {
                            NL566=(Token)match(input,NL,FOLLOW_NL_in_p_arith_uminus_expr5346); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL566);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_arith_mult_expr_in_p_arith_uminus_expr5349);
                    p_arith_mult_expr567=p_arith_mult_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_arith_mult_expr.add(p_arith_mult_expr567.getTree());


                    // AST REWRITE
                    // elements: p_arith_mult_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 774:32: -> ^( UMINUS p_arith_mult_expr )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:774:35: ^( UMINUS p_arith_mult_expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UMINUS, "UMINUS"), root_1);

                        adaptor.addChild(root_1, stream_p_arith_mult_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:775:4: p_arith_mult_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_arith_mult_expr_in_p_arith_uminus_expr5362);
                    p_arith_mult_expr568=p_arith_mult_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_mult_expr568.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_uminus_expr"

    public static class arith_mult_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_mult_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:777:1: arith_mult_expr : arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr )* ;
    public final babel17Parser.arith_mult_expr_return arith_mult_expr() throws RecognitionException {
        babel17Parser.arith_mult_expr_return retval = new babel17Parser.arith_mult_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL570=null;
        Token set571=null;
        Token NL572=null;
        babel17Parser.arith_pow_expr_return arith_pow_expr569 = null;

        babel17Parser.arith_pow_expr_return arith_pow_expr573 = null;


        CommonTree NL570_tree=null;
        CommonTree set571_tree=null;
        CommonTree NL572_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:778:2: ( arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:778:4: arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_arith_pow_expr_in_arith_mult_expr5371);
            arith_pow_expr569=arith_pow_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_pow_expr569.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:778:19: ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr )*
            loop269:
            do {
                int alt269=2;
                int LA269_0 = input.LA(1);

                if ( (LA269_0==NL) ) {
                    int LA269_1 = input.LA(2);

                    if ( ((LA269_1>=L_div && LA269_1<=L_mod)||(LA269_1>=TIMES && LA269_1<=QUOTIENT)) ) {
                        alt269=1;
                    }


                }
                else if ( ((LA269_0>=L_div && LA269_0<=L_mod)||(LA269_0>=TIMES && LA269_0<=QUOTIENT)) ) {
                    alt269=1;
                }


                switch (alt269) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:778:20: ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? arith_pow_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:778:22: ( NL )?
            	    int alt267=2;
            	    int LA267_0 = input.LA(1);

            	    if ( (LA267_0==NL) ) {
            	        alt267=1;
            	    }
            	    switch (alt267) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:778:22: NL
            	            {
            	            NL570=(Token)match(input,NL,FOLLOW_NL_in_arith_mult_expr5374); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    set571=(Token)input.LT(1);
            	    set571=(Token)input.LT(1);
            	    if ( (input.LA(1)>=L_div && input.LA(1)<=L_mod)||(input.LA(1)>=TIMES && input.LA(1)<=QUOTIENT) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set571), root_0);
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:778:63: ( NL )?
            	    int alt268=2;
            	    int LA268_0 = input.LA(1);

            	    if ( (LA268_0==NL) ) {
            	        alt268=1;
            	    }
            	    switch (alt268) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:778:63: NL
            	            {
            	            NL572=(Token)match(input,NL,FOLLOW_NL_in_arith_mult_expr5395); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_arith_pow_expr_in_arith_mult_expr5399);
            	    arith_pow_expr573=arith_pow_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_pow_expr573.getTree());

            	    }
            	    break;

            	default :
            	    break loop269;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_mult_expr"

    public static class p_arith_mult_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_mult_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:780:1: p_arith_mult_expr : p_arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr )* ;
    public final babel17Parser.p_arith_mult_expr_return p_arith_mult_expr() throws RecognitionException {
        babel17Parser.p_arith_mult_expr_return retval = new babel17Parser.p_arith_mult_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL575=null;
        Token set576=null;
        Token NL577=null;
        babel17Parser.p_arith_pow_expr_return p_arith_pow_expr574 = null;

        babel17Parser.p_arith_pow_expr_return p_arith_pow_expr578 = null;


        CommonTree NL575_tree=null;
        CommonTree set576_tree=null;
        CommonTree NL577_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:781:2: ( p_arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr )* )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:781:4: p_arith_pow_expr ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_arith_pow_expr_in_p_arith_mult_expr5411);
            p_arith_pow_expr574=p_arith_pow_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_pow_expr574.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:781:21: ( ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr )*
            loop272:
            do {
                int alt272=2;
                int LA272_0 = input.LA(1);

                if ( (LA272_0==NL) ) {
                    int LA272_1 = input.LA(2);

                    if ( ((LA272_1>=L_div && LA272_1<=L_mod)||(LA272_1>=TIMES && LA272_1<=QUOTIENT)) ) {
                        alt272=1;
                    }


                }
                else if ( ((LA272_0>=L_div && LA272_0<=L_mod)||(LA272_0>=TIMES && LA272_0<=QUOTIENT)) ) {
                    alt272=1;
                }


                switch (alt272) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:781:22: ( NL )? ( TIMES | QUOTIENT | L_div | L_mod ) ( NL )? p_arith_pow_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:781:24: ( NL )?
            	    int alt270=2;
            	    int LA270_0 = input.LA(1);

            	    if ( (LA270_0==NL) ) {
            	        alt270=1;
            	    }
            	    switch (alt270) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:781:24: NL
            	            {
            	            NL575=(Token)match(input,NL,FOLLOW_NL_in_p_arith_mult_expr5414); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    set576=(Token)input.LT(1);
            	    set576=(Token)input.LT(1);
            	    if ( (input.LA(1)>=L_div && input.LA(1)<=L_mod)||(input.LA(1)>=TIMES && input.LA(1)<=QUOTIENT) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set576), root_0);
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:781:65: ( NL )?
            	    int alt271=2;
            	    int LA271_0 = input.LA(1);

            	    if ( (LA271_0==NL) ) {
            	        alt271=1;
            	    }
            	    switch (alt271) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:781:65: NL
            	            {
            	            NL577=(Token)match(input,NL,FOLLOW_NL_in_p_arith_mult_expr5435); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_arith_pow_expr_in_p_arith_mult_expr5439);
            	    p_arith_pow_expr578=p_arith_pow_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_arith_pow_expr578.getTree());

            	    }
            	    break;

            	default :
            	    break loop272;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_mult_expr"

    public static class arith_pow_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_pow_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:783:1: arith_pow_expr : apply_expr ( ( NL )? POW_tok ( NL )? apply_expr )* -> ^( POW ( apply_expr )* ) ;
    public final babel17Parser.arith_pow_expr_return arith_pow_expr() throws RecognitionException {
        babel17Parser.arith_pow_expr_return retval = new babel17Parser.arith_pow_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL580=null;
        Token POW_tok581=null;
        Token NL582=null;
        babel17Parser.apply_expr_return apply_expr579 = null;

        babel17Parser.apply_expr_return apply_expr583 = null;


        CommonTree NL580_tree=null;
        CommonTree POW_tok581_tree=null;
        CommonTree NL582_tree=null;
        RewriteRuleTokenStream stream_POW_tok=new RewriteRuleTokenStream(adaptor,"token POW_tok");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_apply_expr=new RewriteRuleSubtreeStream(adaptor,"rule apply_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:784:2: ( apply_expr ( ( NL )? POW_tok ( NL )? apply_expr )* -> ^( POW ( apply_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:784:4: apply_expr ( ( NL )? POW_tok ( NL )? apply_expr )*
            {
            pushFollow(FOLLOW_apply_expr_in_arith_pow_expr5450);
            apply_expr579=apply_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_apply_expr.add(apply_expr579.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:784:15: ( ( NL )? POW_tok ( NL )? apply_expr )*
            loop275:
            do {
                int alt275=2;
                int LA275_0 = input.LA(1);

                if ( (LA275_0==NL) ) {
                    int LA275_1 = input.LA(2);

                    if ( (LA275_1==POW_tok) ) {
                        alt275=1;
                    }


                }
                else if ( (LA275_0==POW_tok) ) {
                    alt275=1;
                }


                switch (alt275) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:784:16: ( NL )? POW_tok ( NL )? apply_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:784:16: ( NL )?
            	    int alt273=2;
            	    int LA273_0 = input.LA(1);

            	    if ( (LA273_0==NL) ) {
            	        alt273=1;
            	    }
            	    switch (alt273) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:784:16: NL
            	            {
            	            NL580=(Token)match(input,NL,FOLLOW_NL_in_arith_pow_expr5453); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL580);


            	            }
            	            break;

            	    }

            	    POW_tok581=(Token)match(input,POW_tok,FOLLOW_POW_tok_in_arith_pow_expr5456); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_POW_tok.add(POW_tok581);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:784:28: ( NL )?
            	    int alt274=2;
            	    int LA274_0 = input.LA(1);

            	    if ( (LA274_0==NL) ) {
            	        alt274=1;
            	    }
            	    switch (alt274) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:784:28: NL
            	            {
            	            NL582=(Token)match(input,NL,FOLLOW_NL_in_arith_pow_expr5458); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL582);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_apply_expr_in_arith_pow_expr5461);
            	    apply_expr583=apply_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_apply_expr.add(apply_expr583.getTree());

            	    }
            	    break;

            	default :
            	    break loop275;
                }
            } while (true);



            // AST REWRITE
            // elements: apply_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 784:45: -> ^( POW ( apply_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:784:48: ^( POW ( apply_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(POW, "POW"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:784:54: ( apply_expr )*
                while ( stream_apply_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_apply_expr.nextTree());

                }
                stream_apply_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_pow_expr"

    public static class p_arith_pow_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_arith_pow_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:786:1: p_arith_pow_expr : p_apply_expr ( ( NL )? POW_tok ( NL )? p_apply_expr )* -> ^( POW ( p_apply_expr )* ) ;
    public final babel17Parser.p_arith_pow_expr_return p_arith_pow_expr() throws RecognitionException {
        babel17Parser.p_arith_pow_expr_return retval = new babel17Parser.p_arith_pow_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL585=null;
        Token POW_tok586=null;
        Token NL587=null;
        babel17Parser.p_apply_expr_return p_apply_expr584 = null;

        babel17Parser.p_apply_expr_return p_apply_expr588 = null;


        CommonTree NL585_tree=null;
        CommonTree POW_tok586_tree=null;
        CommonTree NL587_tree=null;
        RewriteRuleTokenStream stream_POW_tok=new RewriteRuleTokenStream(adaptor,"token POW_tok");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_p_apply_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_apply_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:787:2: ( p_apply_expr ( ( NL )? POW_tok ( NL )? p_apply_expr )* -> ^( POW ( p_apply_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:787:4: p_apply_expr ( ( NL )? POW_tok ( NL )? p_apply_expr )*
            {
            pushFollow(FOLLOW_p_apply_expr_in_p_arith_pow_expr5482);
            p_apply_expr584=p_apply_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_apply_expr.add(p_apply_expr584.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:787:17: ( ( NL )? POW_tok ( NL )? p_apply_expr )*
            loop278:
            do {
                int alt278=2;
                int LA278_0 = input.LA(1);

                if ( (LA278_0==NL) ) {
                    int LA278_1 = input.LA(2);

                    if ( (LA278_1==POW_tok) ) {
                        alt278=1;
                    }


                }
                else if ( (LA278_0==POW_tok) ) {
                    alt278=1;
                }


                switch (alt278) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:787:18: ( NL )? POW_tok ( NL )? p_apply_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:787:18: ( NL )?
            	    int alt276=2;
            	    int LA276_0 = input.LA(1);

            	    if ( (LA276_0==NL) ) {
            	        alt276=1;
            	    }
            	    switch (alt276) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:787:18: NL
            	            {
            	            NL585=(Token)match(input,NL,FOLLOW_NL_in_p_arith_pow_expr5485); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL585);


            	            }
            	            break;

            	    }

            	    POW_tok586=(Token)match(input,POW_tok,FOLLOW_POW_tok_in_p_arith_pow_expr5488); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_POW_tok.add(POW_tok586);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:787:30: ( NL )?
            	    int alt277=2;
            	    int LA277_0 = input.LA(1);

            	    if ( (LA277_0==NL) ) {
            	        alt277=1;
            	    }
            	    switch (alt277) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:787:30: NL
            	            {
            	            NL587=(Token)match(input,NL,FOLLOW_NL_in_p_arith_pow_expr5490); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL587);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_apply_expr_in_p_arith_pow_expr5493);
            	    p_apply_expr588=p_apply_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_apply_expr.add(p_apply_expr588.getTree());

            	    }
            	    break;

            	default :
            	    break loop278;
                }
            } while (true);



            // AST REWRITE
            // elements: p_apply_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 787:49: -> ^( POW ( p_apply_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:787:52: ^( POW ( p_apply_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(POW, "POW"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:787:58: ( p_apply_expr )*
                while ( stream_p_apply_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_apply_expr.nextTree());

                }
                stream_p_apply_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_arith_pow_expr"

    public static class apply_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apply_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:789:1: apply_expr : ( basic_expr )+ -> ^( APPLY ( basic_expr )* ) ;
    public final babel17Parser.apply_expr_return apply_expr() throws RecognitionException {
        babel17Parser.apply_expr_return retval = new babel17Parser.apply_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.basic_expr_return basic_expr589 = null;


        RewriteRuleSubtreeStream stream_basic_expr=new RewriteRuleSubtreeStream(adaptor,"rule basic_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:790:2: ( ( basic_expr )+ -> ^( APPLY ( basic_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:790:4: ( basic_expr )+
            {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:790:4: ( basic_expr )+
            int cnt279=0;
            loop279:
            do {
                int alt279=2;
                int LA279_0 = input.LA(1);

                if ( (LA279_0==L_begin||(LA279_0>=L_with && LA279_0<=L_if)||(LA279_0>=L_while && LA279_0<=L_for)||LA279_0==L_match||LA279_0==L_try||(LA279_0>=L_true && LA279_0<=L_this)||LA279_0==L_nil||LA279_0==L_root||(LA279_0>=Constr && LA279_0<=Id)||(LA279_0>=Float && LA279_0<=Num)||(LA279_0>=String && LA279_0<=ROUND_BRACKET_OPEN)||LA279_0==SQUARE_BRACKET_OPEN||LA279_0==CURLY_BRACKET_OPEN) ) {
                    alt279=1;
                }


                switch (alt279) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:790:4: basic_expr
            	    {
            	    pushFollow(FOLLOW_basic_expr_in_apply_expr5514);
            	    basic_expr589=basic_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_basic_expr.add(basic_expr589.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt279 >= 1 ) break loop279;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(279, input);
                        throw eee;
                }
                cnt279++;
            } while (true);



            // AST REWRITE
            // elements: basic_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 790:16: -> ^( APPLY ( basic_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:790:19: ^( APPLY ( basic_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(APPLY, "APPLY"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:790:27: ( basic_expr )*
                while ( stream_basic_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_basic_expr.nextTree());

                }
                stream_basic_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "apply_expr"

    public static class p_apply_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_apply_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:791:1: p_apply_expr : p_basic_expr ( ( NL )? p_basic_expr )* -> ^( APPLY ( p_basic_expr )* ) ;
    public final babel17Parser.p_apply_expr_return p_apply_expr() throws RecognitionException {
        babel17Parser.p_apply_expr_return retval = new babel17Parser.p_apply_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL591=null;
        babel17Parser.p_basic_expr_return p_basic_expr590 = null;

        babel17Parser.p_basic_expr_return p_basic_expr592 = null;


        CommonTree NL591_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_p_basic_expr=new RewriteRuleSubtreeStream(adaptor,"rule p_basic_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:792:2: ( p_basic_expr ( ( NL )? p_basic_expr )* -> ^( APPLY ( p_basic_expr )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:792:4: p_basic_expr ( ( NL )? p_basic_expr )*
            {
            pushFollow(FOLLOW_p_basic_expr_in_p_apply_expr5532);
            p_basic_expr590=p_basic_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_basic_expr.add(p_basic_expr590.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:792:17: ( ( NL )? p_basic_expr )*
            loop281:
            do {
                int alt281=2;
                int LA281_0 = input.LA(1);

                if ( (LA281_0==NL) ) {
                    int LA281_1 = input.LA(2);

                    if ( (LA281_1==L_begin||(LA281_1>=L_with && LA281_1<=L_if)||(LA281_1>=L_while && LA281_1<=L_for)||LA281_1==L_match||LA281_1==L_try||(LA281_1>=L_true && LA281_1<=L_this)||LA281_1==L_nil||LA281_1==L_root||(LA281_1>=Constr && LA281_1<=Id)||(LA281_1>=Float && LA281_1<=Num)||(LA281_1>=String && LA281_1<=ROUND_BRACKET_OPEN)||LA281_1==SQUARE_BRACKET_OPEN||LA281_1==CURLY_BRACKET_OPEN) ) {
                        alt281=1;
                    }


                }
                else if ( (LA281_0==L_begin||(LA281_0>=L_with && LA281_0<=L_if)||(LA281_0>=L_while && LA281_0<=L_for)||LA281_0==L_match||LA281_0==L_try||(LA281_0>=L_true && LA281_0<=L_this)||LA281_0==L_nil||LA281_0==L_root||(LA281_0>=Constr && LA281_0<=Id)||(LA281_0>=Float && LA281_0<=Num)||(LA281_0>=String && LA281_0<=ROUND_BRACKET_OPEN)||LA281_0==SQUARE_BRACKET_OPEN||LA281_0==CURLY_BRACKET_OPEN) ) {
                    alt281=1;
                }


                switch (alt281) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:792:18: ( NL )? p_basic_expr
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:792:18: ( NL )?
            	    int alt280=2;
            	    int LA280_0 = input.LA(1);

            	    if ( (LA280_0==NL) ) {
            	        alt280=1;
            	    }
            	    switch (alt280) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:792:18: NL
            	            {
            	            NL591=(Token)match(input,NL,FOLLOW_NL_in_p_apply_expr5535); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL591);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_basic_expr_in_p_apply_expr5538);
            	    p_basic_expr592=p_basic_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_basic_expr.add(p_basic_expr592.getTree());

            	    }
            	    break;

            	default :
            	    break loop281;
                }
            } while (true);



            // AST REWRITE
            // elements: p_basic_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 792:37: -> ^( APPLY ( p_basic_expr )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:792:40: ^( APPLY ( p_basic_expr )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(APPLY, "APPLY"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:792:48: ( p_basic_expr )*
                while ( stream_p_basic_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_basic_expr.nextTree());

                }
                stream_p_basic_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_apply_expr"

    public static class basic_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "basic_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:794:1: basic_expr : message_send_expr ;
    public final babel17Parser.basic_expr_return basic_expr() throws RecognitionException {
        babel17Parser.basic_expr_return retval = new babel17Parser.basic_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.message_send_expr_return message_send_expr593 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:795:2: ( message_send_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:795:4: message_send_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_message_send_expr_in_basic_expr5558);
            message_send_expr593=message_send_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, message_send_expr593.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "basic_expr"

    public static class p_basic_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_basic_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:797:1: p_basic_expr : message_send_expr ;
    public final babel17Parser.p_basic_expr_return p_basic_expr() throws RecognitionException {
        babel17Parser.p_basic_expr_return retval = new babel17Parser.p_basic_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        babel17Parser.message_send_expr_return message_send_expr594 = null;



        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:798:2: ( message_send_expr )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:798:4: message_send_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_message_send_expr_in_p_basic_expr5567);
            message_send_expr594=message_send_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, message_send_expr594.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_basic_expr"

    public static class message_send_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "message_send_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:800:1: message_send_expr : primitive_expr ( ( NL )? PERIOD ( NL )? Id )* -> ^( MESSAGE_SEND primitive_expr ( Id )* ) ;
    public final babel17Parser.message_send_expr_return message_send_expr() throws RecognitionException {
        babel17Parser.message_send_expr_return retval = new babel17Parser.message_send_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL596=null;
        Token PERIOD597=null;
        Token NL598=null;
        Token Id599=null;
        babel17Parser.primitive_expr_return primitive_expr595 = null;


        CommonTree NL596_tree=null;
        CommonTree PERIOD597_tree=null;
        CommonTree NL598_tree=null;
        CommonTree Id599_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleTokenStream stream_Id=new RewriteRuleTokenStream(adaptor,"token Id");
        RewriteRuleSubtreeStream stream_primitive_expr=new RewriteRuleSubtreeStream(adaptor,"rule primitive_expr");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:801:2: ( primitive_expr ( ( NL )? PERIOD ( NL )? Id )* -> ^( MESSAGE_SEND primitive_expr ( Id )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:801:4: primitive_expr ( ( NL )? PERIOD ( NL )? Id )*
            {
            pushFollow(FOLLOW_primitive_expr_in_message_send_expr5576);
            primitive_expr595=primitive_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_primitive_expr.add(primitive_expr595.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:801:19: ( ( NL )? PERIOD ( NL )? Id )*
            loop284:
            do {
                int alt284=2;
                int LA284_0 = input.LA(1);

                if ( (LA284_0==NL) ) {
                    int LA284_1 = input.LA(2);

                    if ( (LA284_1==PERIOD) ) {
                        alt284=1;
                    }


                }
                else if ( (LA284_0==PERIOD) ) {
                    alt284=1;
                }


                switch (alt284) {
            	case 1 :
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:801:20: ( NL )? PERIOD ( NL )? Id
            	    {
            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:801:20: ( NL )?
            	    int alt282=2;
            	    int LA282_0 = input.LA(1);

            	    if ( (LA282_0==NL) ) {
            	        alt282=1;
            	    }
            	    switch (alt282) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:801:20: NL
            	            {
            	            NL596=(Token)match(input,NL,FOLLOW_NL_in_message_send_expr5579); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL596);


            	            }
            	            break;

            	    }

            	    PERIOD597=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_message_send_expr5582); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD597);

            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:801:31: ( NL )?
            	    int alt283=2;
            	    int LA283_0 = input.LA(1);

            	    if ( (LA283_0==NL) ) {
            	        alt283=1;
            	    }
            	    switch (alt283) {
            	        case 1 :
            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:801:31: NL
            	            {
            	            NL598=(Token)match(input,NL,FOLLOW_NL_in_message_send_expr5584); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NL.add(NL598);


            	            }
            	            break;

            	    }

            	    Id599=(Token)match(input,Id,FOLLOW_Id_in_message_send_expr5587); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_Id.add(Id599);


            	    }
            	    break;

            	default :
            	    break loop284;
                }
            } while (true);



            // AST REWRITE
            // elements: primitive_expr, Id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 801:40: -> ^( MESSAGE_SEND primitive_expr ( Id )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:801:43: ^( MESSAGE_SEND primitive_expr ( Id )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MESSAGE_SEND, "MESSAGE_SEND"), root_1);

                adaptor.addChild(root_1, stream_primitive_expr.nextTree());
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:801:73: ( Id )*
                while ( stream_Id.hasNext() ) {
                    adaptor.addChild(root_1, stream_Id.nextNode());

                }
                stream_Id.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "message_send_expr"

    public static class list_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "list_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:803:1: list_expr : ( ( '[' ( NL )? protected_expr_nc ( NL )? ';' )=> '[' ( NL )? protected_expr_nc ( NL )? ';' ( NL )? protected_expr_nc ( NL )? ']' -> ^( INTERVAL ( protected_expr_nc )* ) | '[' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? )? ']' -> ^( SQUARE_LIST ( protected_expr_nc )* ) | '(' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( protected_expr_nc )* ) ) );
    public final babel17Parser.list_expr_return list_expr() throws RecognitionException {
        babel17Parser.list_expr_return retval = new babel17Parser.list_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal600=null;
        Token NL601=null;
        Token NL603=null;
        Token char_literal604=null;
        Token NL605=null;
        Token NL607=null;
        Token char_literal608=null;
        Token char_literal609=null;
        Token NL610=null;
        Token NL612=null;
        Token COMMA613=null;
        Token NL614=null;
        Token NL616=null;
        Token char_literal617=null;
        Token char_literal618=null;
        Token NL619=null;
        Token NL621=null;
        Token COMMA622=null;
        Token NL623=null;
        Token NL625=null;
        Token COMMA626=null;
        Token NL627=null;
        Token char_literal628=null;
        babel17Parser.protected_expr_nc_return protected_expr_nc602 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc606 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc611 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc615 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc620 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc624 = null;


        CommonTree char_literal600_tree=null;
        CommonTree NL601_tree=null;
        CommonTree NL603_tree=null;
        CommonTree char_literal604_tree=null;
        CommonTree NL605_tree=null;
        CommonTree NL607_tree=null;
        CommonTree char_literal608_tree=null;
        CommonTree char_literal609_tree=null;
        CommonTree NL610_tree=null;
        CommonTree NL612_tree=null;
        CommonTree COMMA613_tree=null;
        CommonTree NL614_tree=null;
        CommonTree NL616_tree=null;
        CommonTree char_literal617_tree=null;
        CommonTree char_literal618_tree=null;
        CommonTree NL619_tree=null;
        CommonTree NL621_tree=null;
        CommonTree COMMA622_tree=null;
        CommonTree NL623_tree=null;
        CommonTree NL625_tree=null;
        CommonTree COMMA626_tree=null;
        CommonTree NL627_tree=null;
        CommonTree char_literal628_tree=null;
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_SC=new RewriteRuleTokenStream(adaptor,"token SC");
        RewriteRuleTokenStream stream_SQUARE_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token SQUARE_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_SQUARE_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token SQUARE_BRACKET_OPEN");
        RewriteRuleSubtreeStream stream_protected_expr_nc=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr_nc");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:804:2: ( ( '[' ( NL )? protected_expr_nc ( NL )? ';' )=> '[' ( NL )? protected_expr_nc ( NL )? ';' ( NL )? protected_expr_nc ( NL )? ']' -> ^( INTERVAL ( protected_expr_nc )* ) | '[' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? )? ']' -> ^( SQUARE_LIST ( protected_expr_nc )* ) | '(' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( protected_expr_nc )* ) ) )
            int alt303=3;
            int LA303_0 = input.LA(1);

            if ( (LA303_0==SQUARE_BRACKET_OPEN) ) {
                int LA303_1 = input.LA(2);

                if ( (synpred15_babel17()) ) {
                    alt303=1;
                }
                else if ( (true) ) {
                    alt303=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 303, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA303_0==ROUND_BRACKET_OPEN) ) {
                alt303=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 303, 0, input);

                throw nvae;
            }
            switch (alt303) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:804:4: ( '[' ( NL )? protected_expr_nc ( NL )? ';' )=> '[' ( NL )? protected_expr_nc ( NL )? ';' ( NL )? protected_expr_nc ( NL )? ']'
                    {
                    char_literal600=(Token)match(input,SQUARE_BRACKET_OPEN,FOLLOW_SQUARE_BRACKET_OPEN_in_list_expr5627); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_OPEN.add(char_literal600);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:804:47: ( NL )?
                    int alt285=2;
                    int LA285_0 = input.LA(1);

                    if ( (LA285_0==NL) ) {
                        alt285=1;
                    }
                    switch (alt285) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:804:47: NL
                            {
                            NL601=(Token)match(input,NL,FOLLOW_NL_in_list_expr5629); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL601);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_list_expr5632);
                    protected_expr_nc602=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc602.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:804:69: ( NL )?
                    int alt286=2;
                    int LA286_0 = input.LA(1);

                    if ( (LA286_0==NL) ) {
                        alt286=1;
                    }
                    switch (alt286) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:804:69: NL
                            {
                            NL603=(Token)match(input,NL,FOLLOW_NL_in_list_expr5634); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL603);


                            }
                            break;

                    }

                    char_literal604=(Token)match(input,SC,FOLLOW_SC_in_list_expr5637); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SC.add(char_literal604);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:804:77: ( NL )?
                    int alt287=2;
                    int LA287_0 = input.LA(1);

                    if ( (LA287_0==NL) ) {
                        alt287=1;
                    }
                    switch (alt287) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:804:77: NL
                            {
                            NL605=(Token)match(input,NL,FOLLOW_NL_in_list_expr5639); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL605);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_list_expr5642);
                    protected_expr_nc606=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc606.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:804:99: ( NL )?
                    int alt288=2;
                    int LA288_0 = input.LA(1);

                    if ( (LA288_0==NL) ) {
                        alt288=1;
                    }
                    switch (alt288) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:804:99: NL
                            {
                            NL607=(Token)match(input,NL,FOLLOW_NL_in_list_expr5644); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL607);


                            }
                            break;

                    }

                    char_literal608=(Token)match(input,SQUARE_BRACKET_CLOSE,FOLLOW_SQUARE_BRACKET_CLOSE_in_list_expr5647); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_CLOSE.add(char_literal608);



                    // AST REWRITE
                    // elements: protected_expr_nc
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 804:107: -> ^( INTERVAL ( protected_expr_nc )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:804:110: ^( INTERVAL ( protected_expr_nc )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTERVAL, "INTERVAL"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:804:121: ( protected_expr_nc )*
                        while ( stream_protected_expr_nc.hasNext() ) {
                            adaptor.addChild(root_1, stream_protected_expr_nc.nextTree());

                        }
                        stream_protected_expr_nc.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:4: '[' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? )? ']'
                    {
                    char_literal609=(Token)match(input,SQUARE_BRACKET_OPEN,FOLLOW_SQUARE_BRACKET_OPEN_in_list_expr5661); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_OPEN.add(char_literal609);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:8: ( NL )?
                    int alt289=2;
                    int LA289_0 = input.LA(1);

                    if ( (LA289_0==NL) ) {
                        alt289=1;
                    }
                    switch (alt289) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:8: NL
                            {
                            NL610=(Token)match(input,NL,FOLLOW_NL_in_list_expr5663); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL610);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:12: ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? )?
                    int alt294=2;
                    int LA294_0 = input.LA(1);

                    if ( (LA294_0==L_begin||(LA294_0>=L_obj && LA294_0<=L_if)||(LA294_0>=L_while && LA294_0<=L_for)||LA294_0==L_match||LA294_0==L_exception||LA294_0==L_try||(LA294_0>=L_concurrent && LA294_0<=L_lazy)||(LA294_0>=L_true && LA294_0<=L_nil)||LA294_0==L_typeof||LA294_0==L_not||(LA294_0>=L_root && LA294_0<=L_native)||LA294_0==MINUS||(LA294_0>=A_ELLIPSIS && LA294_0<=U_ELLIPSIS)||LA294_0==L_force||(LA294_0>=Constr && LA294_0<=Id)||(LA294_0>=Float && LA294_0<=Num)||(LA294_0>=String && LA294_0<=ROUND_BRACKET_OPEN)||LA294_0==SQUARE_BRACKET_OPEN||LA294_0==CURLY_BRACKET_OPEN||LA294_0==UNDERSCORE) ) {
                        alt294=1;
                    }
                    switch (alt294) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:13: protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )?
                            {
                            pushFollow(FOLLOW_protected_expr_nc_in_list_expr5667);
                            protected_expr_nc611=protected_expr_nc();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc611.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:31: ( ( NL )? COMMA ( NL )? protected_expr_nc )*
                            loop292:
                            do {
                                int alt292=2;
                                int LA292_0 = input.LA(1);

                                if ( (LA292_0==NL) ) {
                                    int LA292_1 = input.LA(2);

                                    if ( (LA292_1==COMMA) ) {
                                        alt292=1;
                                    }


                                }
                                else if ( (LA292_0==COMMA) ) {
                                    alt292=1;
                                }


                                switch (alt292) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:32: ( NL )? COMMA ( NL )? protected_expr_nc
                            	    {
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:32: ( NL )?
                            	    int alt290=2;
                            	    int LA290_0 = input.LA(1);

                            	    if ( (LA290_0==NL) ) {
                            	        alt290=1;
                            	    }
                            	    switch (alt290) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:32: NL
                            	            {
                            	            NL612=(Token)match(input,NL,FOLLOW_NL_in_list_expr5670); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL612);


                            	            }
                            	            break;

                            	    }

                            	    COMMA613=(Token)match(input,COMMA,FOLLOW_COMMA_in_list_expr5673); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA613);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:42: ( NL )?
                            	    int alt291=2;
                            	    int LA291_0 = input.LA(1);

                            	    if ( (LA291_0==NL) ) {
                            	        alt291=1;
                            	    }
                            	    switch (alt291) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:42: NL
                            	            {
                            	            NL614=(Token)match(input,NL,FOLLOW_NL_in_list_expr5675); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL614);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_protected_expr_nc_in_list_expr5678);
                            	    protected_expr_nc615=protected_expr_nc();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc615.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop292;
                                }
                            } while (true);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:66: ( NL )?
                            int alt293=2;
                            int LA293_0 = input.LA(1);

                            if ( (LA293_0==NL) ) {
                                alt293=1;
                            }
                            switch (alt293) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:66: NL
                                    {
                                    NL616=(Token)match(input,NL,FOLLOW_NL_in_list_expr5682); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL616);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    char_literal617=(Token)match(input,SQUARE_BRACKET_CLOSE,FOLLOW_SQUARE_BRACKET_CLOSE_in_list_expr5687); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQUARE_BRACKET_CLOSE.add(char_literal617);



                    // AST REWRITE
                    // elements: protected_expr_nc
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 805:76: -> ^( SQUARE_LIST ( protected_expr_nc )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:79: ^( SQUARE_LIST ( protected_expr_nc )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SQUARE_LIST, "SQUARE_LIST"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:805:93: ( protected_expr_nc )*
                        while ( stream_protected_expr_nc.hasNext() ) {
                            adaptor.addChild(root_1, stream_protected_expr_nc.nextTree());

                        }
                        stream_protected_expr_nc.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:4: '(' ( NL )? ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )? )? ')'
                    {
                    char_literal618=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_list_expr5701); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal618);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:8: ( NL )?
                    int alt295=2;
                    int LA295_0 = input.LA(1);

                    if ( (LA295_0==NL) ) {
                        alt295=1;
                    }
                    switch (alt295) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:8: NL
                            {
                            NL619=(Token)match(input,NL,FOLLOW_NL_in_list_expr5703); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL619);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:12: ( protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )? )?
                    int alt302=2;
                    int LA302_0 = input.LA(1);

                    if ( (LA302_0==L_begin||(LA302_0>=L_obj && LA302_0<=L_if)||(LA302_0>=L_while && LA302_0<=L_for)||LA302_0==L_match||LA302_0==L_exception||LA302_0==L_try||(LA302_0>=L_concurrent && LA302_0<=L_lazy)||(LA302_0>=L_true && LA302_0<=L_nil)||LA302_0==L_typeof||LA302_0==L_not||(LA302_0>=L_root && LA302_0<=L_native)||LA302_0==MINUS||(LA302_0>=A_ELLIPSIS && LA302_0<=U_ELLIPSIS)||LA302_0==L_force||(LA302_0>=Constr && LA302_0<=Id)||(LA302_0>=Float && LA302_0<=Num)||(LA302_0>=String && LA302_0<=ROUND_BRACKET_OPEN)||LA302_0==SQUARE_BRACKET_OPEN||LA302_0==CURLY_BRACKET_OPEN||LA302_0==UNDERSCORE) ) {
                        alt302=1;
                    }
                    switch (alt302) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:13: protected_expr_nc ( ( NL )? COMMA ( NL )? protected_expr_nc )* ( NL )? ( COMMA ( NL )? )?
                            {
                            pushFollow(FOLLOW_protected_expr_nc_in_list_expr5707);
                            protected_expr_nc620=protected_expr_nc();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc620.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:31: ( ( NL )? COMMA ( NL )? protected_expr_nc )*
                            loop298:
                            do {
                                int alt298=2;
                                int LA298_0 = input.LA(1);

                                if ( (LA298_0==NL) ) {
                                    int LA298_1 = input.LA(2);

                                    if ( (LA298_1==COMMA) ) {
                                        int LA298_2 = input.LA(3);

                                        if ( (LA298_2==NL) ) {
                                            int LA298_4 = input.LA(4);

                                            if ( (LA298_4==L_begin||(LA298_4>=L_obj && LA298_4<=L_if)||(LA298_4>=L_while && LA298_4<=L_for)||LA298_4==L_match||LA298_4==L_exception||LA298_4==L_try||(LA298_4>=L_concurrent && LA298_4<=L_lazy)||(LA298_4>=L_true && LA298_4<=L_nil)||LA298_4==L_typeof||LA298_4==L_not||(LA298_4>=L_root && LA298_4<=L_native)||LA298_4==MINUS||(LA298_4>=A_ELLIPSIS && LA298_4<=U_ELLIPSIS)||LA298_4==L_force||(LA298_4>=Constr && LA298_4<=Id)||(LA298_4>=Float && LA298_4<=Num)||(LA298_4>=String && LA298_4<=ROUND_BRACKET_OPEN)||LA298_4==SQUARE_BRACKET_OPEN||LA298_4==CURLY_BRACKET_OPEN||LA298_4==UNDERSCORE) ) {
                                                alt298=1;
                                            }


                                        }
                                        else if ( (LA298_2==L_begin||(LA298_2>=L_obj && LA298_2<=L_if)||(LA298_2>=L_while && LA298_2<=L_for)||LA298_2==L_match||LA298_2==L_exception||LA298_2==L_try||(LA298_2>=L_concurrent && LA298_2<=L_lazy)||(LA298_2>=L_true && LA298_2<=L_nil)||LA298_2==L_typeof||LA298_2==L_not||(LA298_2>=L_root && LA298_2<=L_native)||LA298_2==MINUS||(LA298_2>=A_ELLIPSIS && LA298_2<=U_ELLIPSIS)||LA298_2==L_force||(LA298_2>=Constr && LA298_2<=Id)||(LA298_2>=Float && LA298_2<=Num)||(LA298_2>=String && LA298_2<=ROUND_BRACKET_OPEN)||LA298_2==SQUARE_BRACKET_OPEN||LA298_2==CURLY_BRACKET_OPEN||LA298_2==UNDERSCORE) ) {
                                            alt298=1;
                                        }


                                    }


                                }
                                else if ( (LA298_0==COMMA) ) {
                                    int LA298_2 = input.LA(2);

                                    if ( (LA298_2==NL) ) {
                                        int LA298_4 = input.LA(3);

                                        if ( (LA298_4==L_begin||(LA298_4>=L_obj && LA298_4<=L_if)||(LA298_4>=L_while && LA298_4<=L_for)||LA298_4==L_match||LA298_4==L_exception||LA298_4==L_try||(LA298_4>=L_concurrent && LA298_4<=L_lazy)||(LA298_4>=L_true && LA298_4<=L_nil)||LA298_4==L_typeof||LA298_4==L_not||(LA298_4>=L_root && LA298_4<=L_native)||LA298_4==MINUS||(LA298_4>=A_ELLIPSIS && LA298_4<=U_ELLIPSIS)||LA298_4==L_force||(LA298_4>=Constr && LA298_4<=Id)||(LA298_4>=Float && LA298_4<=Num)||(LA298_4>=String && LA298_4<=ROUND_BRACKET_OPEN)||LA298_4==SQUARE_BRACKET_OPEN||LA298_4==CURLY_BRACKET_OPEN||LA298_4==UNDERSCORE) ) {
                                            alt298=1;
                                        }


                                    }
                                    else if ( (LA298_2==L_begin||(LA298_2>=L_obj && LA298_2<=L_if)||(LA298_2>=L_while && LA298_2<=L_for)||LA298_2==L_match||LA298_2==L_exception||LA298_2==L_try||(LA298_2>=L_concurrent && LA298_2<=L_lazy)||(LA298_2>=L_true && LA298_2<=L_nil)||LA298_2==L_typeof||LA298_2==L_not||(LA298_2>=L_root && LA298_2<=L_native)||LA298_2==MINUS||(LA298_2>=A_ELLIPSIS && LA298_2<=U_ELLIPSIS)||LA298_2==L_force||(LA298_2>=Constr && LA298_2<=Id)||(LA298_2>=Float && LA298_2<=Num)||(LA298_2>=String && LA298_2<=ROUND_BRACKET_OPEN)||LA298_2==SQUARE_BRACKET_OPEN||LA298_2==CURLY_BRACKET_OPEN||LA298_2==UNDERSCORE) ) {
                                        alt298=1;
                                    }


                                }


                                switch (alt298) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:32: ( NL )? COMMA ( NL )? protected_expr_nc
                            	    {
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:32: ( NL )?
                            	    int alt296=2;
                            	    int LA296_0 = input.LA(1);

                            	    if ( (LA296_0==NL) ) {
                            	        alt296=1;
                            	    }
                            	    switch (alt296) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:32: NL
                            	            {
                            	            NL621=(Token)match(input,NL,FOLLOW_NL_in_list_expr5710); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL621);


                            	            }
                            	            break;

                            	    }

                            	    COMMA622=(Token)match(input,COMMA,FOLLOW_COMMA_in_list_expr5713); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA622);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:42: ( NL )?
                            	    int alt297=2;
                            	    int LA297_0 = input.LA(1);

                            	    if ( (LA297_0==NL) ) {
                            	        alt297=1;
                            	    }
                            	    switch (alt297) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:42: NL
                            	            {
                            	            NL623=(Token)match(input,NL,FOLLOW_NL_in_list_expr5715); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL623);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_protected_expr_nc_in_list_expr5718);
                            	    protected_expr_nc624=protected_expr_nc();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc624.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop298;
                                }
                            } while (true);

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:66: ( NL )?
                            int alt299=2;
                            int LA299_0 = input.LA(1);

                            if ( (LA299_0==NL) ) {
                                alt299=1;
                            }
                            switch (alt299) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:66: NL
                                    {
                                    NL625=(Token)match(input,NL,FOLLOW_NL_in_list_expr5722); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL625);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:70: ( COMMA ( NL )? )?
                            int alt301=2;
                            int LA301_0 = input.LA(1);

                            if ( (LA301_0==COMMA) ) {
                                alt301=1;
                            }
                            switch (alt301) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:71: COMMA ( NL )?
                                    {
                                    COMMA626=(Token)match(input,COMMA,FOLLOW_COMMA_in_list_expr5726); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA626);

                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:77: ( NL )?
                                    int alt300=2;
                                    int LA300_0 = input.LA(1);

                                    if ( (LA300_0==NL) ) {
                                        alt300=1;
                                    }
                                    switch (alt300) {
                                        case 1 :
                                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:77: NL
                                            {
                                            NL627=(Token)match(input,NL,FOLLOW_NL_in_list_expr5728); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_NL.add(NL627);


                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    char_literal628=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_list_expr5735); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal628);



                    // AST REWRITE
                    // elements: protected_expr_nc, COMMA
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 806:89: -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( protected_expr_nc )* ) )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:92: ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( protected_expr_nc )* ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROUND_LIST, "ROUND_LIST"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:105: ^( NIL_TOKEN ( COMMA )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:117: ( COMMA )*
                        while ( stream_COMMA.hasNext() ) {
                            adaptor.addChild(root_2, stream_COMMA.nextNode());

                        }
                        stream_COMMA.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:125: ^( NIL_TOKEN ( protected_expr_nc )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:806:137: ( protected_expr_nc )*
                        while ( stream_protected_expr_nc.hasNext() ) {
                            adaptor.addChild(root_2, stream_protected_expr_nc.nextTree());

                        }
                        stream_protected_expr_nc.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "list_expr"

    public static class map_or_set_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "map_or_set_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:808:1: map_or_set_expr : ( '{' ( NL )? ( map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( map_or_set_elem_expr )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) );
    public final babel17Parser.map_or_set_expr_return map_or_set_expr() throws RecognitionException {
        babel17Parser.map_or_set_expr_return retval = new babel17Parser.map_or_set_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal629=null;
        Token NL630=null;
        Token NL632=null;
        Token COMMA633=null;
        Token NL634=null;
        Token NL636=null;
        Token char_literal637=null;
        Token char_literal638=null;
        Token NL639=null;
        Token NL641=null;
        Token char_literal642=null;
        babel17Parser.map_or_set_elem_expr_return map_or_set_elem_expr631 = null;

        babel17Parser.map_or_set_elem_expr_return map_or_set_elem_expr635 = null;

        babel17Parser.token_ARROW_return token_ARROW640 = null;


        CommonTree char_literal629_tree=null;
        CommonTree NL630_tree=null;
        CommonTree NL632_tree=null;
        CommonTree COMMA633_tree=null;
        CommonTree NL634_tree=null;
        CommonTree NL636_tree=null;
        CommonTree char_literal637_tree=null;
        CommonTree char_literal638_tree=null;
        CommonTree NL639_tree=null;
        CommonTree NL641_tree=null;
        CommonTree char_literal642_tree=null;
        RewriteRuleTokenStream stream_CURLY_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_OPEN");
        RewriteRuleTokenStream stream_CURLY_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token CURLY_BRACKET_CLOSE");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_map_or_set_elem_expr=new RewriteRuleSubtreeStream(adaptor,"rule map_or_set_elem_expr");
        RewriteRuleSubtreeStream stream_token_ARROW=new RewriteRuleSubtreeStream(adaptor,"rule token_ARROW");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:2: ( '{' ( NL )? ( map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( map_or_set_elem_expr )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) )
            int alt312=2;
            int LA312_0 = input.LA(1);

            if ( (LA312_0==CURLY_BRACKET_OPEN) ) {
                switch ( input.LA(2) ) {
                case NL:
                    {
                    int LA312_2 = input.LA(3);

                    if ( ((LA312_2>=A_ARROW && LA312_2<=U_ARROW)) ) {
                        alt312=2;
                    }
                    else if ( (LA312_2==L_begin||(LA312_2>=L_obj && LA312_2<=L_if)||(LA312_2>=L_while && LA312_2<=L_for)||LA312_2==L_match||LA312_2==L_exception||LA312_2==L_try||(LA312_2>=L_concurrent && LA312_2<=L_lazy)||(LA312_2>=L_true && LA312_2<=L_nil)||LA312_2==L_typeof||LA312_2==L_not||(LA312_2>=L_root && LA312_2<=L_native)||LA312_2==MINUS||(LA312_2>=A_ELLIPSIS && LA312_2<=U_ELLIPSIS)||LA312_2==L_force||(LA312_2>=Constr && LA312_2<=Id)||(LA312_2>=Float && LA312_2<=Num)||(LA312_2>=String && LA312_2<=ROUND_BRACKET_OPEN)||LA312_2==SQUARE_BRACKET_OPEN||(LA312_2>=CURLY_BRACKET_OPEN && LA312_2<=UNDERSCORE)) ) {
                        alt312=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 2, input);

                        throw nvae;
                    }
                    }
                    break;
                case A_ARROW:
                case U_ARROW:
                    {
                    alt312=2;
                    }
                    break;
                case L_begin:
                case L_obj:
                case L_with:
                case L_if:
                case L_while:
                case L_for:
                case L_match:
                case L_exception:
                case L_try:
                case L_concurrent:
                case L_choose:
                case L_lazy:
                case L_true:
                case L_false:
                case L_this:
                case L_random:
                case L_nil:
                case L_typeof:
                case L_not:
                case L_root:
                case L_native:
                case MINUS:
                case A_ELLIPSIS:
                case U_ELLIPSIS:
                case L_force:
                case Constr:
                case Id:
                case Float:
                case Num:
                case String:
                case ROUND_BRACKET_OPEN:
                case SQUARE_BRACKET_OPEN:
                case CURLY_BRACKET_OPEN:
                case CURLY_BRACKET_CLOSE:
                case UNDERSCORE:
                    {
                    alt312=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 312, 1, input);

                    throw nvae;
                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 312, 0, input);

                throw nvae;
            }
            switch (alt312) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:4: '{' ( NL )? ( map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )* )? '}'
                    {
                    char_literal629=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_map_or_set_expr5764); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal629);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:8: ( NL )?
                    int alt304=2;
                    int LA304_0 = input.LA(1);

                    if ( (LA304_0==NL) ) {
                        alt304=1;
                    }
                    switch (alt304) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:8: NL
                            {
                            NL630=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr5766); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL630);


                            }
                            break;

                    }

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:12: ( map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )* )?
                    int alt309=2;
                    int LA309_0 = input.LA(1);

                    if ( (LA309_0==L_begin||(LA309_0>=L_obj && LA309_0<=L_if)||(LA309_0>=L_while && LA309_0<=L_for)||LA309_0==L_match||LA309_0==L_exception||LA309_0==L_try||(LA309_0>=L_concurrent && LA309_0<=L_lazy)||(LA309_0>=L_true && LA309_0<=L_nil)||LA309_0==L_typeof||LA309_0==L_not||(LA309_0>=L_root && LA309_0<=L_native)||LA309_0==MINUS||(LA309_0>=A_ELLIPSIS && LA309_0<=U_ELLIPSIS)||LA309_0==L_force||(LA309_0>=Constr && LA309_0<=Id)||(LA309_0>=Float && LA309_0<=Num)||(LA309_0>=String && LA309_0<=ROUND_BRACKET_OPEN)||LA309_0==SQUARE_BRACKET_OPEN||LA309_0==CURLY_BRACKET_OPEN||LA309_0==UNDERSCORE) ) {
                        alt309=1;
                    }
                    switch (alt309) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:13: map_or_set_elem_expr ( NL )? ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )*
                            {
                            pushFollow(FOLLOW_map_or_set_elem_expr_in_map_or_set_expr5770);
                            map_or_set_elem_expr631=map_or_set_elem_expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_map_or_set_elem_expr.add(map_or_set_elem_expr631.getTree());
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:34: ( NL )?
                            int alt305=2;
                            int LA305_0 = input.LA(1);

                            if ( (LA305_0==NL) ) {
                                alt305=1;
                            }
                            switch (alt305) {
                                case 1 :
                                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:34: NL
                                    {
                                    NL632=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr5772); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NL.add(NL632);


                                    }
                                    break;

                            }

                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:38: ( COMMA ( NL )? map_or_set_elem_expr ( NL )? )*
                            loop308:
                            do {
                                int alt308=2;
                                int LA308_0 = input.LA(1);

                                if ( (LA308_0==COMMA) ) {
                                    alt308=1;
                                }


                                switch (alt308) {
                            	case 1 :
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:39: COMMA ( NL )? map_or_set_elem_expr ( NL )?
                            	    {
                            	    COMMA633=(Token)match(input,COMMA,FOLLOW_COMMA_in_map_or_set_expr5776); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA633);

                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:45: ( NL )?
                            	    int alt306=2;
                            	    int LA306_0 = input.LA(1);

                            	    if ( (LA306_0==NL) ) {
                            	        alt306=1;
                            	    }
                            	    switch (alt306) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:45: NL
                            	            {
                            	            NL634=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr5778); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL634);


                            	            }
                            	            break;

                            	    }

                            	    pushFollow(FOLLOW_map_or_set_elem_expr_in_map_or_set_expr5781);
                            	    map_or_set_elem_expr635=map_or_set_elem_expr();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_map_or_set_elem_expr.add(map_or_set_elem_expr635.getTree());
                            	    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:70: ( NL )?
                            	    int alt307=2;
                            	    int LA307_0 = input.LA(1);

                            	    if ( (LA307_0==NL) ) {
                            	        alt307=1;
                            	    }
                            	    switch (alt307) {
                            	        case 1 :
                            	            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:70: NL
                            	            {
                            	            NL636=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr5783); if (state.failed) return retval; 
                            	            if ( state.backtracking==0 ) stream_NL.add(NL636);


                            	            }
                            	            break;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop308;
                                }
                            } while (true);


                            }
                            break;

                    }

                    char_literal637=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_map_or_set_expr5790); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal637);



                    // AST REWRITE
                    // elements: map_or_set_elem_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 809:82: -> ^( MAP_OR_SET_OR_OBJ ( map_or_set_elem_expr )* )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:85: ^( MAP_OR_SET_OR_OBJ ( map_or_set_elem_expr )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MAP_OR_SET_OR_OBJ, "MAP_OR_SET_OR_OBJ"), root_1);

                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:809:105: ( map_or_set_elem_expr )*
                        while ( stream_map_or_set_elem_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_map_or_set_elem_expr.nextTree());

                        }
                        stream_map_or_set_elem_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:10: '{' ( NL )? token_ARROW ( NL )? '}'
                    {
                    char_literal638=(Token)match(input,CURLY_BRACKET_OPEN,FOLLOW_CURLY_BRACKET_OPEN_in_map_or_set_expr5810); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_OPEN.add(char_literal638);

                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:14: ( NL )?
                    int alt310=2;
                    int LA310_0 = input.LA(1);

                    if ( (LA310_0==NL) ) {
                        alt310=1;
                    }
                    switch (alt310) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:14: NL
                            {
                            NL639=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr5812); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL639);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_token_ARROW_in_map_or_set_expr5815);
                    token_ARROW640=token_ARROW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_token_ARROW.add(token_ARROW640.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:30: ( NL )?
                    int alt311=2;
                    int LA311_0 = input.LA(1);

                    if ( (LA311_0==NL) ) {
                        alt311=1;
                    }
                    switch (alt311) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:30: NL
                            {
                            NL641=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_expr5817); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL641);


                            }
                            break;

                    }

                    char_literal642=(Token)match(input,CURLY_BRACKET_CLOSE,FOLLOW_CURLY_BRACKET_CLOSE_in_map_or_set_expr5820); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURLY_BRACKET_CLOSE.add(char_literal642);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 810:38: -> ^( EMPTY_MAP )
                    {
                        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:810:41: ^( EMPTY_MAP )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EMPTY_MAP, "EMPTY_MAP"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "map_or_set_expr"

    public static class map_or_set_elem_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "map_or_set_elem_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:812:1: map_or_set_elem_expr : protected_expr_nc ( ( NL )? arrow_or_assign ( NL )? protected_expr_nc )? -> ^( NIL_TOKEN ^( NIL_TOKEN ( protected_expr_nc )* ) ( arrow_or_assign )* ) ;
    public final babel17Parser.map_or_set_elem_expr_return map_or_set_elem_expr() throws RecognitionException {
        babel17Parser.map_or_set_elem_expr_return retval = new babel17Parser.map_or_set_elem_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL644=null;
        Token NL646=null;
        babel17Parser.protected_expr_nc_return protected_expr_nc643 = null;

        babel17Parser.arrow_or_assign_return arrow_or_assign645 = null;

        babel17Parser.protected_expr_nc_return protected_expr_nc647 = null;


        CommonTree NL644_tree=null;
        CommonTree NL646_tree=null;
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleSubtreeStream stream_arrow_or_assign=new RewriteRuleSubtreeStream(adaptor,"rule arrow_or_assign");
        RewriteRuleSubtreeStream stream_protected_expr_nc=new RewriteRuleSubtreeStream(adaptor,"rule protected_expr_nc");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:2: ( protected_expr_nc ( ( NL )? arrow_or_assign ( NL )? protected_expr_nc )? -> ^( NIL_TOKEN ^( NIL_TOKEN ( protected_expr_nc )* ) ( arrow_or_assign )* ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:4: protected_expr_nc ( ( NL )? arrow_or_assign ( NL )? protected_expr_nc )?
            {
            pushFollow(FOLLOW_protected_expr_nc_in_map_or_set_elem_expr5837);
            protected_expr_nc643=protected_expr_nc();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc643.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:22: ( ( NL )? arrow_or_assign ( NL )? protected_expr_nc )?
            int alt315=2;
            int LA315_0 = input.LA(1);

            if ( (LA315_0==NL) ) {
                int LA315_1 = input.LA(2);

                if ( (LA315_1==ASSIGN||(LA315_1>=A_ARROW && LA315_1<=U_ARROW)) ) {
                    alt315=1;
                }
            }
            else if ( (LA315_0==ASSIGN||(LA315_0>=A_ARROW && LA315_0<=U_ARROW)) ) {
                alt315=1;
            }
            switch (alt315) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:23: ( NL )? arrow_or_assign ( NL )? protected_expr_nc
                    {
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:23: ( NL )?
                    int alt313=2;
                    int LA313_0 = input.LA(1);

                    if ( (LA313_0==NL) ) {
                        alt313=1;
                    }
                    switch (alt313) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:23: NL
                            {
                            NL644=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_elem_expr5840); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL644);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_arrow_or_assign_in_map_or_set_elem_expr5843);
                    arrow_or_assign645=arrow_or_assign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrow_or_assign.add(arrow_or_assign645.getTree());
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:43: ( NL )?
                    int alt314=2;
                    int LA314_0 = input.LA(1);

                    if ( (LA314_0==NL) ) {
                        alt314=1;
                    }
                    switch (alt314) {
                        case 1 :
                            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:43: NL
                            {
                            NL646=(Token)match(input,NL,FOLLOW_NL_in_map_or_set_elem_expr5845); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NL.add(NL646);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_protected_expr_nc_in_map_or_set_elem_expr5848);
                    protected_expr_nc647=protected_expr_nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protected_expr_nc.add(protected_expr_nc647.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: arrow_or_assign, protected_expr_nc
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 813:67: -> ^( NIL_TOKEN ^( NIL_TOKEN ( protected_expr_nc )* ) ( arrow_or_assign )* )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:70: ^( NIL_TOKEN ^( NIL_TOKEN ( protected_expr_nc )* ) ( arrow_or_assign )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_1);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:82: ^( NIL_TOKEN ( protected_expr_nc )* )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NIL_TOKEN, "NIL_TOKEN"), root_2);

                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:94: ( protected_expr_nc )*
                while ( stream_protected_expr_nc.hasNext() ) {
                    adaptor.addChild(root_2, stream_protected_expr_nc.nextTree());

                }
                stream_protected_expr_nc.reset();

                adaptor.addChild(root_1, root_2);
                }
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:813:114: ( arrow_or_assign )*
                while ( stream_arrow_or_assign.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrow_or_assign.nextTree());

                }
                stream_arrow_or_assign.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "map_or_set_elem_expr"

    public static class type_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:815:1: type_expr : '(' ( NL )? ':' ( NL )? typeid ( NL )? ')' -> ^( TYPE_EXPR typeid ) ;
    public final babel17Parser.type_expr_return type_expr() throws RecognitionException {
        babel17Parser.type_expr_return retval = new babel17Parser.type_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal648=null;
        Token NL649=null;
        Token char_literal650=null;
        Token NL651=null;
        Token NL653=null;
        Token char_literal654=null;
        babel17Parser.typeid_return typeid652 = null;


        CommonTree char_literal648_tree=null;
        CommonTree NL649_tree=null;
        CommonTree char_literal650_tree=null;
        CommonTree NL651_tree=null;
        CommonTree NL653_tree=null;
        CommonTree char_literal654_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ROUND_BRACKET_OPEN=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_OPEN");
        RewriteRuleTokenStream stream_NL=new RewriteRuleTokenStream(adaptor,"token NL");
        RewriteRuleTokenStream stream_ROUND_BRACKET_CLOSE=new RewriteRuleTokenStream(adaptor,"token ROUND_BRACKET_CLOSE");
        RewriteRuleSubtreeStream stream_typeid=new RewriteRuleSubtreeStream(adaptor,"rule typeid");
        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:2: ( '(' ( NL )? ':' ( NL )? typeid ( NL )? ')' -> ^( TYPE_EXPR typeid ) )
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:4: '(' ( NL )? ':' ( NL )? typeid ( NL )? ')'
            {
            char_literal648=(Token)match(input,ROUND_BRACKET_OPEN,FOLLOW_ROUND_BRACKET_OPEN_in_type_expr5875); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ROUND_BRACKET_OPEN.add(char_literal648);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:8: ( NL )?
            int alt316=2;
            int LA316_0 = input.LA(1);

            if ( (LA316_0==NL) ) {
                alt316=1;
            }
            switch (alt316) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:8: NL
                    {
                    NL649=(Token)match(input,NL,FOLLOW_NL_in_type_expr5877); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL649);


                    }
                    break;

            }

            char_literal650=(Token)match(input,COLON,FOLLOW_COLON_in_type_expr5880); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(char_literal650);

            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:16: ( NL )?
            int alt317=2;
            int LA317_0 = input.LA(1);

            if ( (LA317_0==NL) ) {
                alt317=1;
            }
            switch (alt317) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:16: NL
                    {
                    NL651=(Token)match(input,NL,FOLLOW_NL_in_type_expr5882); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL651);


                    }
                    break;

            }

            pushFollow(FOLLOW_typeid_in_type_expr5885);
            typeid652=typeid();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeid.add(typeid652.getTree());
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:27: ( NL )?
            int alt318=2;
            int LA318_0 = input.LA(1);

            if ( (LA318_0==NL) ) {
                alt318=1;
            }
            switch (alt318) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:27: NL
                    {
                    NL653=(Token)match(input,NL,FOLLOW_NL_in_type_expr5887); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NL.add(NL653);


                    }
                    break;

            }

            char_literal654=(Token)match(input,ROUND_BRACKET_CLOSE,FOLLOW_ROUND_BRACKET_CLOSE_in_type_expr5890); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ROUND_BRACKET_CLOSE.add(char_literal654);



            // AST REWRITE
            // elements: typeid
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 816:35: -> ^( TYPE_EXPR typeid )
            {
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:816:38: ^( TYPE_EXPR typeid )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_EXPR, "TYPE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_typeid.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_expr"

    public static class primitive_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitive_expr"
    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:818:1: primitive_expr : ( Num | Float | String | Id | Constr | L_true | L_false | L_this | L_nil | L_root | type_expr | list_expr | with_control_expr | map_or_set_expr );
    public final babel17Parser.primitive_expr_return primitive_expr() throws RecognitionException {
        babel17Parser.primitive_expr_return retval = new babel17Parser.primitive_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Num655=null;
        Token Float656=null;
        Token String657=null;
        Token Id658=null;
        Token Constr659=null;
        Token L_true660=null;
        Token L_false661=null;
        Token L_this662=null;
        Token L_nil663=null;
        Token L_root664=null;
        babel17Parser.type_expr_return type_expr665 = null;

        babel17Parser.list_expr_return list_expr666 = null;

        babel17Parser.with_control_expr_return with_control_expr667 = null;

        babel17Parser.map_or_set_expr_return map_or_set_expr668 = null;


        CommonTree Num655_tree=null;
        CommonTree Float656_tree=null;
        CommonTree String657_tree=null;
        CommonTree Id658_tree=null;
        CommonTree Constr659_tree=null;
        CommonTree L_true660_tree=null;
        CommonTree L_false661_tree=null;
        CommonTree L_this662_tree=null;
        CommonTree L_nil663_tree=null;
        CommonTree L_root664_tree=null;

        try {
            // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:819:2: ( Num | Float | String | Id | Constr | L_true | L_false | L_this | L_nil | L_root | type_expr | list_expr | with_control_expr | map_or_set_expr )
            int alt319=14;
            alt319 = dfa319.predict(input);
            switch (alt319) {
                case 1 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:819:4: Num
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Num655=(Token)match(input,Num,FOLLOW_Num_in_primitive_expr5908); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Num655_tree = (CommonTree)adaptor.create(Num655);
                    adaptor.addChild(root_0, Num655_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:820:4: Float
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Float656=(Token)match(input,Float,FOLLOW_Float_in_primitive_expr5913); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Float656_tree = (CommonTree)adaptor.create(Float656);
                    adaptor.addChild(root_0, Float656_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:821:4: String
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    String657=(Token)match(input,String,FOLLOW_String_in_primitive_expr5918); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    String657_tree = (CommonTree)adaptor.create(String657);
                    adaptor.addChild(root_0, String657_tree);
                    }

                    }
                    break;
                case 4 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:822:4: Id
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Id658=(Token)match(input,Id,FOLLOW_Id_in_primitive_expr5923); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Id658_tree = (CommonTree)adaptor.create(Id658);
                    adaptor.addChild(root_0, Id658_tree);
                    }

                    }
                    break;
                case 5 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:823:4: Constr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Constr659=(Token)match(input,Constr,FOLLOW_Constr_in_primitive_expr5928); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Constr659_tree = (CommonTree)adaptor.create(Constr659);
                    adaptor.addChild(root_0, Constr659_tree);
                    }

                    }
                    break;
                case 6 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:824:4: L_true
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_true660=(Token)match(input,L_true,FOLLOW_L_true_in_primitive_expr5933); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_true660_tree = (CommonTree)adaptor.create(L_true660);
                    adaptor.addChild(root_0, L_true660_tree);
                    }

                    }
                    break;
                case 7 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:825:4: L_false
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_false661=(Token)match(input,L_false,FOLLOW_L_false_in_primitive_expr5938); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_false661_tree = (CommonTree)adaptor.create(L_false661);
                    adaptor.addChild(root_0, L_false661_tree);
                    }

                    }
                    break;
                case 8 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:826:4: L_this
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_this662=(Token)match(input,L_this,FOLLOW_L_this_in_primitive_expr5943); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_this662_tree = (CommonTree)adaptor.create(L_this662);
                    adaptor.addChild(root_0, L_this662_tree);
                    }

                    }
                    break;
                case 9 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:827:4: L_nil
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_nil663=(Token)match(input,L_nil,FOLLOW_L_nil_in_primitive_expr5949); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_nil663_tree = (CommonTree)adaptor.create(L_nil663);
                    adaptor.addChild(root_0, L_nil663_tree);
                    }

                    }
                    break;
                case 10 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:828:4: L_root
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    L_root664=(Token)match(input,L_root,FOLLOW_L_root_in_primitive_expr5954); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_root664_tree = (CommonTree)adaptor.create(L_root664);
                    adaptor.addChild(root_0, L_root664_tree);
                    }

                    }
                    break;
                case 11 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:829:4: type_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_type_expr_in_primitive_expr5959);
                    type_expr665=type_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_expr665.getTree());

                    }
                    break;
                case 12 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:830:5: list_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_list_expr_in_primitive_expr5965);
                    list_expr666=list_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, list_expr666.getTree());

                    }
                    break;
                case 13 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:831:4: with_control_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_with_control_expr_in_primitive_expr5970);
                    with_control_expr667=with_control_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, with_control_expr667.getTree());

                    }
                    break;
                case 14 :
                    // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:832:4: map_or_set_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_map_or_set_expr_in_primitive_expr5975);
                    map_or_set_expr668=map_or_set_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, map_or_set_expr668.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "primitive_expr"

    // $ANTLR start synpred1_babel17
    public final void synpred1_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:437:5: ( pattern ( NL )? ':' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:437:6: pattern ( NL )? ':'
        {
        pushFollow(FOLLOW_pattern_in_synpred1_babel171931);
        pattern();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:437:14: ( NL )?
        int alt320=2;
        int LA320_0 = input.LA(1);

        if ( (LA320_0==NL) ) {
            alt320=1;
        }
        switch (alt320) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:437:14: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred1_babel171933); if (state.failed) return ;

                }
                break;

        }

        match(input,COLON,FOLLOW_COLON_in_synpred1_babel171936); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_babel17

    // $ANTLR start synpred2_babel17
    public final void synpred2_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:442:10: ( Id ( NL )? L_as )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:442:11: Id ( NL )? L_as
        {
        match(input,Id,FOLLOW_Id_in_synpred2_babel171984); if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:442:14: ( NL )?
        int alt321=2;
        int LA321_0 = input.LA(1);

        if ( (LA321_0==NL) ) {
            alt321=1;
        }
        switch (alt321) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:442:14: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred2_babel171986); if (state.failed) return ;

                }
                break;

        }

        match(input,L_as,FOLLOW_L_as_in_synpred2_babel171989); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_babel17

    // $ANTLR start synpred3_babel17
    public final void synpred3_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:443:4: ( protected_expr ( NL )? QUESTION_MARK )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:443:5: protected_expr ( NL )? QUESTION_MARK
        {
        pushFollow(FOLLOW_protected_expr_in_synpred3_babel172020);
        protected_expr();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:443:20: ( NL )?
        int alt322=2;
        int LA322_0 = input.LA(1);

        if ( (LA322_0==NL) ) {
            alt322=1;
        }
        switch (alt322) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:443:20: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred3_babel172022); if (state.failed) return ;

                }
                break;

        }

        match(input,QUESTION_MARK,FOLLOW_QUESTION_MARK_in_synpred3_babel172025); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_babel17

    // $ANTLR start synpred4_babel17
    public final void synpred4_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:4: ( protected_expr ( NL )? EXCLAMATION_MARK )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:5: protected_expr ( NL )? EXCLAMATION_MARK
        {
        pushFollow(FOLLOW_protected_expr_in_synpred4_babel172063);
        protected_expr();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:20: ( NL )?
        int alt323=2;
        int LA323_0 = input.LA(1);

        if ( (LA323_0==NL) ) {
            alt323=1;
        }
        switch (alt323) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:445:20: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred4_babel172065); if (state.failed) return ;

                }
                break;

        }

        match(input,EXCLAMATION_MARK,FOLLOW_EXCLAMATION_MARK_in_synpred4_babel172068); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_babel17

    // $ANTLR start synpred5_babel17
    public final void synpred5_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:4: ( Id pattern )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:447:5: Id pattern
        {
        match(input,Id,FOLLOW_Id_in_synpred5_babel172106); if (state.failed) return ;
        pushFollow(FOLLOW_pattern_in_synpred5_babel172108);
        pattern();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_babel17

    // $ANTLR start synpred6_babel17
    public final void synpred6_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:4: ( pattern ( NL )? L_if )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:5: pattern ( NL )? L_if
        {
        pushFollow(FOLLOW_pattern_in_synpred6_babel172197);
        pattern();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:13: ( NL )?
        int alt324=2;
        int LA324_0 = input.LA(1);

        if ( (LA324_0==NL) ) {
            alt324=1;
        }
        switch (alt324) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:450:13: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred6_babel172199); if (state.failed) return ;

                }
                break;

        }

        match(input,L_if,FOLLOW_L_if_in_synpred6_babel172202); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_babel17

    // $ANTLR start synpred7_babel17
    public final void synpred7_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:451:4: ( pattern ( NL )? ':' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:451:5: pattern ( NL )? ':'
        {
        pushFollow(FOLLOW_pattern_in_synpred7_babel172233);
        pattern();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:451:13: ( NL )?
        int alt325=2;
        int LA325_0 = input.LA(1);

        if ( (LA325_0==NL) ) {
            alt325=1;
        }
        switch (alt325) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:451:13: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred7_babel172235); if (state.failed) return ;

                }
                break;

        }

        match(input,COLON,FOLLOW_COLON_in_synpred7_babel172238); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_babel17

    // $ANTLR start synpred8_babel17
    public final void synpred8_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:518:4: ( defpattern ( NL )? '=' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:518:5: defpattern ( NL )? '='
        {
        pushFollow(FOLLOW_defpattern_in_synpred8_babel173030);
        defpattern();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:518:16: ( NL )?
        int alt326=2;
        int LA326_0 = input.LA(1);

        if ( (LA326_0==NL) ) {
            alt326=1;
        }
        switch (alt326) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:518:16: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred8_babel173032); if (state.failed) return ;

                }
                break;

        }

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred8_babel173035); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_babel17

    // $ANTLR start synpred9_babel17
    public final void synpred9_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:4: ( ( pattern | objelem_assign ) ( NL )? '=' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:5: ( pattern | objelem_assign ) ( NL )? '='
        {
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:5: ( pattern | objelem_assign )
        int alt327=2;
        int LA327_0 = input.LA(1);

        if ( (LA327_0==L_exception||(LA327_0>=L_true && LA327_0<=L_false)||LA327_0==L_nil||LA327_0==MINUS||(LA327_0>=A_ELLIPSIS && LA327_0<=U_ELLIPSIS)||LA327_0==Constr||LA327_0==Num||(LA327_0>=String && LA327_0<=ROUND_BRACKET_OPEN)||LA327_0==SQUARE_BRACKET_OPEN||LA327_0==CURLY_BRACKET_OPEN||LA327_0==UNDERSCORE) ) {
            alt327=1;
        }
        else if ( (LA327_0==Id) ) {
            int LA327_2 = input.LA(2);

            if ( (LA327_2==PERIOD) ) {
                alt327=2;
            }
            else if ( (LA327_2==ASSIGN||(LA327_2>=A_DOUBLE_COLON && LA327_2<=U_DOUBLE_COLON)||LA327_2==NL) ) {
                alt327=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 327, 2, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 327, 0, input);

            throw nvae;
        }
        switch (alt327) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:6: pattern
                {
                pushFollow(FOLLOW_pattern_in_synpred9_babel173557);
                pattern();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:16: objelem_assign
                {
                pushFollow(FOLLOW_objelem_assign_in_synpred9_babel173561);
                objelem_assign();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:32: ( NL )?
        int alt328=2;
        int LA328_0 = input.LA(1);

        if ( (LA328_0==NL) ) {
            alt328=1;
        }
        switch (alt328) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:564:32: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred9_babel173564); if (state.failed) return ;

                }
                break;

        }

        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred9_babel173567); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_babel17

    // $ANTLR start synpred10_babel17
    public final void synpred10_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:11: ( L_obj ( NL )? parents )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:12: L_obj ( NL )? parents
        {
        match(input,L_obj,FOLLOW_L_obj_in_synpred10_babel173796); if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:18: ( NL )?
        int alt329=2;
        int LA329_0 = input.LA(1);

        if ( (LA329_0==NL) ) {
            alt329=1;
        }
        switch (alt329) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:599:18: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred10_babel173798); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_parents_in_synpred10_babel173801);
        parents();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_babel17

    // $ANTLR start synpred11_babel17
    public final void synpred11_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:603:4: ( lambda_expr )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:603:5: lambda_expr
        {
        pushFollow(FOLLOW_lambda_expr_in_synpred11_babel173870);
        lambda_expr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_babel17

    // $ANTLR start synpred12_babel17
    public final void synpred12_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:604:4: ( lambda_expr_nobrackets )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:604:5: lambda_expr_nobrackets
        {
        pushFollow(FOLLOW_lambda_expr_nobrackets_in_synpred12_babel173881);
        lambda_expr_nobrackets();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_babel17

    // $ANTLR start synpred13_babel17
    public final void synpred13_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:608:4: ( lambda_expr )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:608:5: lambda_expr
        {
        pushFollow(FOLLOW_lambda_expr_in_synpred13_babel173902);
        lambda_expr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_babel17

    // $ANTLR start synpred14_babel17
    public final void synpred14_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:609:4: ( lambda_expr_nobrackets )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:609:5: lambda_expr_nobrackets
        {
        pushFollow(FOLLOW_lambda_expr_nobrackets_in_synpred14_babel173913);
        lambda_expr_nobrackets();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_babel17

    // $ANTLR start synpred15_babel17
    public final void synpred15_babel17_fragment() throws RecognitionException {   
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:804:4: ( '[' ( NL )? protected_expr_nc ( NL )? ';' )
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:804:5: '[' ( NL )? protected_expr_nc ( NL )? ';'
        {
        match(input,SQUARE_BRACKET_OPEN,FOLLOW_SQUARE_BRACKET_OPEN_in_synpred15_babel175612); if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:804:9: ( NL )?
        int alt330=2;
        int LA330_0 = input.LA(1);

        if ( (LA330_0==NL) ) {
            alt330=1;
        }
        switch (alt330) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:804:9: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred15_babel175614); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_protected_expr_nc_in_synpred15_babel175617);
        protected_expr_nc();

        state._fsp--;
        if (state.failed) return ;
        // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:804:31: ( NL )?
        int alt331=2;
        int LA331_0 = input.LA(1);

        if ( (LA331_0==NL) ) {
            alt331=1;
        }
        switch (alt331) {
            case 1 :
                // /Users/stevenobua/Programming/babel-17/Babel17_ANTLR_Parser/babel17.g:804:31: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred15_babel175619); if (state.failed) return ;

                }
                break;

        }

        match(input,SC,FOLLOW_SC_in_synpred15_babel175622); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_babel17

    // Delegated rules

    public final boolean synpred4_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_babel17() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_babel17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA19 dfa19 = new DFA19(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA67 dfa67 = new DFA67(this);
    protected DFA73 dfa73 = new DFA73(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA75 dfa75 = new DFA75(this);
    protected DFA101 dfa101 = new DFA101(this);
    protected DFA139 dfa139 = new DFA139(this);
    protected DFA149 dfa149 = new DFA149(this);
    protected DFA150 dfa150 = new DFA150(this);
    protected DFA319 dfa319 = new DFA319(this);
    static final String DFA19_eotS =
        "\21\uffff";
    static final String DFA19_eofS =
        "\21\uffff";
    static final String DFA19_minS =
        "\1\131\16\0\2\uffff";
    static final String DFA19_maxS =
        "\1\u00a7\16\0\2\uffff";
    static final String DFA19_acceptS =
        "\17\uffff\1\1\1\2";
    static final String DFA19_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\2\uffff}>";
    static final String[] DFA19_transitionS = {
            "\1\15\10\uffff\1\6\1\7\2\uffff\1\10\31\uffff\1\11\17\uffff\2"+
            "\16\10\uffff\1\1\1\2\2\uffff\1\5\1\uffff\1\4\1\13\1\uffff\1"+
            "\12\1\uffff\1\14\1\uffff\1\3",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA19_eot = DFA.unpackEncodedString(DFA19_eotS);
    static final short[] DFA19_eof = DFA.unpackEncodedString(DFA19_eofS);
    static final char[] DFA19_min = DFA.unpackEncodedStringToUnsignedChars(DFA19_minS);
    static final char[] DFA19_max = DFA.unpackEncodedStringToUnsignedChars(DFA19_maxS);
    static final short[] DFA19_accept = DFA.unpackEncodedString(DFA19_acceptS);
    static final short[] DFA19_special = DFA.unpackEncodedString(DFA19_specialS);
    static final short[][] DFA19_transition;

    static {
        int numStates = DFA19_transitionS.length;
        DFA19_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA19_transition[i] = DFA.unpackEncodedString(DFA19_transitionS[i]);
        }
    }

    class DFA19 extends DFA {

        public DFA19(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 19;
            this.eot = DFA19_eot;
            this.eof = DFA19_eof;
            this.min = DFA19_min;
            this.max = DFA19_max;
            this.accept = DFA19_accept;
            this.special = DFA19_special;
            this.transition = DFA19_transition;
        }
        public String getDescription() {
            return "436:1: casepattern : ( ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation -> ^( TYPE_PATTERN typeannotation pattern ) | pattern );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA19_1 = input.LA(1);

                         
                        int index19_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA19_2 = input.LA(1);

                         
                        int index19_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA19_3 = input.LA(1);

                         
                        int index19_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA19_4 = input.LA(1);

                         
                        int index19_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA19_5 = input.LA(1);

                         
                        int index19_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA19_6 = input.LA(1);

                         
                        int index19_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA19_7 = input.LA(1);

                         
                        int index19_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA19_8 = input.LA(1);

                         
                        int index19_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA19_9 = input.LA(1);

                         
                        int index19_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA19_10 = input.LA(1);

                         
                        int index19_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA19_11 = input.LA(1);

                         
                        int index19_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA19_12 = input.LA(1);

                         
                        int index19_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA19_13 = input.LA(1);

                         
                        int index19_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA19_14 = input.LA(1);

                         
                        int index19_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_babel17()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 19, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA39_eotS =
        "\46\uffff";
    static final String DFA39_eofS =
        "\46\uffff";
    static final String DFA39_minS =
        "\1\107\34\0\11\uffff";
    static final String DFA39_maxS =
        "\1\u00a7\34\0\11\uffff";
    static final String DFA39_acceptS =
        "\35\uffff\1\5\1\1\1\2\1\3\1\4\1\7\1\10\1\11\1\6";
    static final String DFA39_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\11\uffff}>";
    static final String[] DFA39_transitionS = {
            "\1\32\1\uffff\1\34\1\33\1\25\3\uffff\1\26\1\30\2\uffff\1\27"+
            "\2\uffff\1\35\2\uffff\1\15\2\uffff\1\31\1\uffff\1\17\1\21\1"+
            "\17\1\uffff\1\7\1\10\1\23\1\21\1\11\4\uffff\1\21\4\uffff\1\20"+
            "\1\uffff\1\24\1\21\14\uffff\1\12\17\uffff\2\16\4\uffff\1\17"+
            "\3\uffff\1\3\1\1\1\uffff\1\22\1\6\1\uffff\1\5\1\2\1\uffff\1"+
            "\13\1\uffff\1\14\1\uffff\1\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA39_eot = DFA.unpackEncodedString(DFA39_eotS);
    static final short[] DFA39_eof = DFA.unpackEncodedString(DFA39_eofS);
    static final char[] DFA39_min = DFA.unpackEncodedStringToUnsignedChars(DFA39_minS);
    static final char[] DFA39_max = DFA.unpackEncodedStringToUnsignedChars(DFA39_maxS);
    static final short[] DFA39_accept = DFA.unpackEncodedString(DFA39_acceptS);
    static final short[] DFA39_special = DFA.unpackEncodedString(DFA39_specialS);
    static final short[][] DFA39_transition;

    static {
        int numStates = DFA39_transitionS.length;
        DFA39_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA39_transition[i] = DFA.unpackEncodedString(DFA39_transitionS[i]);
        }
    }

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = DFA39_eot;
            this.eof = DFA39_eof;
            this.min = DFA39_min;
            this.max = DFA39_max;
            this.accept = DFA39_accept;
            this.special = DFA39_special;
            this.transition = DFA39_transition;
        }
        public String getDescription() {
            return "441:1: bracket_pattern : ( ( Id ( NL )? L_as )=> Id ( NL )? L_as ( NL )? pattern -> ^( L_as Id pattern ) | ( protected_expr ( NL )? QUESTION_MARK )=> protected_expr ( NL )? QUESTION_MARK ( ( NL )? pattern )? -> ^( QUESTION_MARK protected_expr ( pattern )? ) | ( protected_expr ( NL )? EXCLAMATION_MARK )=> protected_expr ( NL )? EXCLAMATION_MARK ( ( NL )? pattern )? -> ^( EXCLAMATION_MARK protected_expr ( pattern )? ) | ( Id pattern )=> Id pattern -> ^( INNERVALUE_PATTERN Id pattern ) | L_val ( NL )? protected_expr_nc -> ^( L_val protected_expr_nc ) | L_for ( NL )? ( bracket_pattern ( ( NL )? COMMA ( NL )? bracket_pattern )* ( NL )? )? L_end -> ^( L_for ( bracket_pattern )* ) | ( pattern ( NL )? L_if )=> pattern ( NL )? L_if ( NL )? protected_expr_nc -> ^( IF_PATTERN pattern protected_expr_nc ) | ( pattern ( NL )? ':' )=> pattern ( NL )? ':' ( NL )? typeannotation -> ^( TYPE_PATTERN typeannotation pattern ) | pattern );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA39_1 = input.LA(1);

                         
                        int index39_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_babel17()) ) {s = 30;}

                        else if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (synpred5_babel17()) ) {s = 33;}

                        else if ( (synpred6_babel17()) ) {s = 34;}

                        else if ( (synpred7_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA39_2 = input.LA(1);

                         
                        int index39_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (synpred6_babel17()) ) {s = 34;}

                        else if ( (synpred7_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA39_3 = input.LA(1);

                         
                        int index39_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (synpred6_babel17()) ) {s = 34;}

                        else if ( (synpred7_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA39_4 = input.LA(1);

                         
                        int index39_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (synpred6_babel17()) ) {s = 34;}

                        else if ( (synpred7_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA39_5 = input.LA(1);

                         
                        int index39_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (synpred6_babel17()) ) {s = 34;}

                        else if ( (synpred7_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA39_6 = input.LA(1);

                         
                        int index39_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (synpred6_babel17()) ) {s = 34;}

                        else if ( (synpred7_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA39_7 = input.LA(1);

                         
                        int index39_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (synpred6_babel17()) ) {s = 34;}

                        else if ( (synpred7_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA39_8 = input.LA(1);

                         
                        int index39_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (synpred6_babel17()) ) {s = 34;}

                        else if ( (synpred7_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA39_9 = input.LA(1);

                         
                        int index39_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (synpred6_babel17()) ) {s = 34;}

                        else if ( (synpred7_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA39_10 = input.LA(1);

                         
                        int index39_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (synpred6_babel17()) ) {s = 34;}

                        else if ( (synpred7_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA39_11 = input.LA(1);

                         
                        int index39_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (synpred6_babel17()) ) {s = 34;}

                        else if ( (synpred7_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA39_12 = input.LA(1);

                         
                        int index39_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (synpred6_babel17()) ) {s = 34;}

                        else if ( (synpred7_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA39_13 = input.LA(1);

                         
                        int index39_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (synpred6_babel17()) ) {s = 34;}

                        else if ( (synpred7_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA39_14 = input.LA(1);

                         
                        int index39_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (synpred6_babel17()) ) {s = 34;}

                        else if ( (synpred7_babel17()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA39_15 = input.LA(1);

                         
                        int index39_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                         
                        input.seek(index39_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA39_16 = input.LA(1);

                         
                        int index39_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                         
                        input.seek(index39_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA39_17 = input.LA(1);

                         
                        int index39_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                         
                        input.seek(index39_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA39_18 = input.LA(1);

                         
                        int index39_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                         
                        input.seek(index39_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA39_19 = input.LA(1);

                         
                        int index39_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                         
                        input.seek(index39_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA39_20 = input.LA(1);

                         
                        int index39_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                         
                        input.seek(index39_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA39_21 = input.LA(1);

                         
                        int index39_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                         
                        input.seek(index39_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA39_22 = input.LA(1);

                         
                        int index39_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                         
                        input.seek(index39_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA39_23 = input.LA(1);

                         
                        int index39_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                         
                        input.seek(index39_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA39_24 = input.LA(1);

                         
                        int index39_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index39_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA39_25 = input.LA(1);

                         
                        int index39_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                         
                        input.seek(index39_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA39_26 = input.LA(1);

                         
                        int index39_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                         
                        input.seek(index39_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA39_27 = input.LA(1);

                         
                        int index39_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                         
                        input.seek(index39_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA39_28 = input.LA(1);

                         
                        int index39_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_babel17()) ) {s = 31;}

                        else if ( (synpred4_babel17()) ) {s = 32;}

                         
                        input.seek(index39_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 39, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA67_eotS =
        "\17\uffff";
    static final String DFA67_eofS =
        "\17\uffff";
    static final String DFA67_minS =
        "\1\142\12\uffff\2\107\2\uffff";
    static final String DFA67_maxS =
        "\1\u00a7\12\uffff\2\u00a7\2\uffff";
    static final String DFA67_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\2\uffff\1\13"+
        "\1\14";
    static final String DFA67_specialS =
        "\17\uffff}>";
    static final String[] DFA67_transitionS = {
            "\1\5\1\6\2\uffff\1\7\31\uffff\1\10\32\uffff\1\1\2\uffff\1\4"+
            "\1\uffff\1\3\1\12\1\uffff\1\11\1\uffff\1\13\1\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\15\1\uffff\3\15\3\uffff\2\15\2\uffff\1\15\2\uffff\1\15\2"+
            "\uffff\1\15\2\uffff\1\15\1\uffff\3\15\1\uffff\5\15\4\uffff\1"+
            "\15\4\uffff\1\15\1\uffff\2\15\14\uffff\1\15\15\uffff\2\16\2"+
            "\15\4\uffff\1\15\2\uffff\1\14\2\15\1\uffff\2\15\1\uffff\2\15"+
            "\1\uffff\1\15\1\uffff\3\15",
            "\1\15\1\uffff\3\15\3\uffff\2\15\2\uffff\1\15\2\uffff\1\15\2"+
            "\uffff\1\15\2\uffff\1\15\1\uffff\3\15\1\uffff\5\15\4\uffff\1"+
            "\15\4\uffff\1\15\1\uffff\2\15\14\uffff\1\15\15\uffff\2\16\2"+
            "\15\4\uffff\1\15\3\uffff\2\15\1\uffff\2\15\1\uffff\2\15\1\uffff"+
            "\1\15\1\uffff\3\15",
            "",
            ""
    };

    static final short[] DFA67_eot = DFA.unpackEncodedString(DFA67_eotS);
    static final short[] DFA67_eof = DFA.unpackEncodedString(DFA67_eofS);
    static final char[] DFA67_min = DFA.unpackEncodedStringToUnsignedChars(DFA67_minS);
    static final char[] DFA67_max = DFA.unpackEncodedStringToUnsignedChars(DFA67_maxS);
    static final short[] DFA67_accept = DFA.unpackEncodedString(DFA67_acceptS);
    static final short[] DFA67_special = DFA.unpackEncodedString(DFA67_specialS);
    static final short[][] DFA67_transition;

    static {
        int numStates = DFA67_transitionS.length;
        DFA67_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA67_transition[i] = DFA.unpackEncodedString(DFA67_transitionS[i]);
        }
    }

    class DFA67 extends DFA {

        public DFA67(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 67;
            this.eot = DFA67_eot;
            this.eof = DFA67_eof;
            this.min = DFA67_min;
            this.max = DFA67_max;
            this.accept = DFA67_accept;
            this.special = DFA67_special;
            this.transition = DFA67_transition;
        }
        public String getDescription() {
            return "462:1: primitive_pattern : ( Id | '_' -> ANY | String | Num | L_true | L_false | L_nil | '-' ( NL )? Num -> ^( UMINUS Num ) | '[' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* )? ']' -> ^( SQUARE_LIST ( bracket_pattern )* ) | '(' ( NL )? ( bracket_pattern ( NL )? ( COMMA ( NL )? bracket_pattern ( NL )? )* ( COMMA ( NL )? )? )? ')' -> ^( ROUND_LIST ^( NIL_TOKEN ( COMMA )* ) ^( NIL_TOKEN ( bracket_pattern )* ) ) | '{' ( NL )? ( mselem_pattern ( NL )? ( COMMA ( NL )? mselem_pattern ( NL )? )* )? '}' -> ^( MAP_OR_SET_OR_OBJ ( mselem_pattern )* ) | '{' ( NL )? token_ARROW ( NL )? '}' -> ^( EMPTY_MAP ) );";
        }
    }
    static final String DFA73_eotS =
        "\4\uffff";
    static final String DFA73_eofS =
        "\2\3\2\uffff";
    static final String DFA73_minS =
        "\2\107\2\uffff";
    static final String DFA73_maxS =
        "\2\u00ac\2\uffff";
    static final String DFA73_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA73_specialS =
        "\4\uffff}>";
    static final String[] DFA73_transitionS = {
            "\1\2\1\3\3\2\1\uffff\2\3\2\2\1\uffff\2\2\1\3\1\uffff\2\2\1\uffff"+
            "\1\2\2\uffff\1\2\1\uffff\11\2\2\uffff\5\2\1\3\1\uffff\1\2\1"+
            "\uffff\2\2\12\uffff\1\1\1\uffff\1\2\17\uffff\2\2\4\uffff\1\2"+
            "\2\uffff\1\1\2\2\1\uffff\2\2\1\uffff\2\2\1\uffff\1\2\1\uffff"+
            "\1\2\1\uffff\1\2\1\uffff\4\2",
            "\1\2\1\3\3\2\1\uffff\2\3\2\2\1\uffff\2\2\1\3\1\uffff\2\2\1"+
            "\uffff\1\2\2\uffff\1\2\1\uffff\11\2\2\uffff\5\2\1\3\1\uffff"+
            "\1\2\1\uffff\2\2\12\uffff\1\1\1\uffff\1\2\17\uffff\2\2\4\uffff"+
            "\1\2\2\uffff\1\1\2\2\1\uffff\2\2\1\uffff\2\2\1\uffff\1\2\1\uffff"+
            "\1\2\1\uffff\1\2\1\uffff\4\2",
            "",
            ""
    };

    static final short[] DFA73_eot = DFA.unpackEncodedString(DFA73_eotS);
    static final short[] DFA73_eof = DFA.unpackEncodedString(DFA73_eofS);
    static final char[] DFA73_min = DFA.unpackEncodedStringToUnsignedChars(DFA73_minS);
    static final char[] DFA73_max = DFA.unpackEncodedStringToUnsignedChars(DFA73_maxS);
    static final short[] DFA73_accept = DFA.unpackEncodedString(DFA73_acceptS);
    static final short[] DFA73_special = DFA.unpackEncodedString(DFA73_specialS);
    static final short[][] DFA73_transition;

    static {
        int numStates = DFA73_transitionS.length;
        DFA73_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA73_transition[i] = DFA.unpackEncodedString(DFA73_transitionS[i]);
        }
    }

    class DFA73 extends DFA {

        public DFA73(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 73;
            this.eot = DFA73_eot;
            this.eof = DFA73_eof;
            this.min = DFA73_min;
            this.max = DFA73_max;
            this.accept = DFA73_accept;
            this.special = DFA73_special;
            this.transition = DFA73_transition;
        }
        public String getDescription() {
            return "484:1: block : ( ( sep )? statement ( sep statement )* ( sep )? -> ^( BLOCK ( statement )* ) | ( sep )? -> ^( BLOCK ) );";
        }
    }
    static final String DFA70_eotS =
        "\4\uffff";
    static final String DFA70_eofS =
        "\2\2\2\uffff";
    static final String DFA70_minS =
        "\1\110\1\107\2\uffff";
    static final String DFA70_maxS =
        "\1\u0099\1\u00ac\2\uffff";
    static final String DFA70_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA70_specialS =
        "\4\uffff}>";
    static final String[] DFA70_transitionS = {
            "\1\2\4\uffff\2\2\5\uffff\1\2\31\uffff\1\2\17\uffff\1\1\32\uffff"+
            "\1\1",
            "\1\3\1\2\3\3\1\uffff\2\2\2\3\1\uffff\2\3\1\2\1\uffff\2\3\1"+
            "\uffff\1\3\2\uffff\1\3\1\uffff\11\3\2\uffff\5\3\1\2\1\uffff"+
            "\1\3\1\uffff\2\3\12\uffff\1\1\1\uffff\1\3\17\uffff\2\3\4\uffff"+
            "\1\3\2\uffff\1\1\2\3\1\uffff\2\3\1\uffff\2\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\uffff\1\3\1\uffff\4\3",
            "",
            ""
    };

    static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_eotS);
    static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_eofS);
    static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_minS);
    static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_maxS);
    static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_acceptS);
    static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_specialS);
    static final short[][] DFA70_transition;

    static {
        int numStates = DFA70_transitionS.length;
        DFA70_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA70_transition[i] = DFA.unpackEncodedString(DFA70_transitionS[i]);
        }
    }

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = DFA70_eot;
            this.eof = DFA70_eof;
            this.min = DFA70_min;
            this.max = DFA70_max;
            this.accept = DFA70_accept;
            this.special = DFA70_special;
            this.transition = DFA70_transition;
        }
        public String getDescription() {
            return "()* loopback of 484:25: ( sep statement )*";
        }
    }
    static final String DFA75_eotS =
        "\16\uffff";
    static final String DFA75_eofS =
        "\16\uffff";
    static final String DFA75_minS =
        "\1\107\15\uffff";
    static final String DFA75_maxS =
        "\1\u00ac\15\uffff";
    static final String DFA75_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15";
    static final String DFA75_specialS =
        "\16\uffff}>";
    static final String[] DFA75_transitionS = {
            "\1\11\1\uffff\3\11\3\uffff\2\11\1\uffff\1\4\1\11\2\uffff\1\2"+
            "\1\3\1\uffff\1\11\2\uffff\1\11\1\uffff\3\11\1\5\5\11\2\uffff"+
            "\1\7\1\1\1\11\1\6\1\10\2\uffff\1\11\1\uffff\2\11\14\uffff\1"+
            "\11\17\uffff\2\11\4\uffff\1\11\3\uffff\2\11\1\uffff\2\11\1\uffff"+
            "\2\11\1\uffff\1\11\1\uffff\1\11\1\uffff\1\11\1\uffff\1\13\1"+
            "\12\1\15\1\14",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA75_eot = DFA.unpackEncodedString(DFA75_eotS);
    static final short[] DFA75_eof = DFA.unpackEncodedString(DFA75_eofS);
    static final char[] DFA75_min = DFA.unpackEncodedStringToUnsignedChars(DFA75_minS);
    static final char[] DFA75_max = DFA.unpackEncodedStringToUnsignedChars(DFA75_maxS);
    static final short[] DFA75_accept = DFA.unpackEncodedString(DFA75_acceptS);
    static final short[] DFA75_special = DFA.unpackEncodedString(DFA75_specialS);
    static final short[][] DFA75_transition;

    static {
        int numStates = DFA75_transitionS.length;
        DFA75_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA75_transition[i] = DFA.unpackEncodedString(DFA75_transitionS[i]);
        }
    }

    class DFA75 extends DFA {

        public DFA75(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 75;
            this.eot = DFA75_eot;
            this.eof = DFA75_eof;
            this.min = DFA75_min;
            this.max = DFA75_max;
            this.accept = DFA75_accept;
            this.special = DFA75_special;
            this.transition = DFA75_transition;
        }
        public String getDescription() {
            return "490:1: statement : ( st_typedef | st_val | st_def | st_yield | st_memoize | st_private | st_module | st_import | expr_or_assign | PRAGMA_PRINT expr -> ^( PRAGMA_PRINT expr ) | PRAGMA_LOG expr -> ^( PRAGMA_LOG expr ) | PRAGMA_PROFILE expr -> ^( PRAGMA_PROFILE expr ) | PRAGMA_ASSERT expr -> ^( PRAGMA_ASSERT expr ) );";
        }
    }
    static final String DFA101_eotS =
        "\17\uffff";
    static final String DFA101_eofS =
        "\17\uffff";
    static final String DFA101_minS =
        "\1\142\14\0\2\uffff";
    static final String DFA101_maxS =
        "\1\u00a7\14\0\2\uffff";
    static final String DFA101_acceptS =
        "\15\uffff\1\1\1\2";
    static final String DFA101_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\2\uffff}>";
    static final String[] DFA101_transitionS = {
            "\1\5\1\6\2\uffff\1\7\31\uffff\1\10\31\uffff\1\14\1\1\2\uffff"+
            "\1\4\1\uffff\1\3\1\12\1\uffff\1\11\1\uffff\1\13\1\uffff\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA101_eot = DFA.unpackEncodedString(DFA101_eotS);
    static final short[] DFA101_eof = DFA.unpackEncodedString(DFA101_eofS);
    static final char[] DFA101_min = DFA.unpackEncodedStringToUnsignedChars(DFA101_minS);
    static final char[] DFA101_max = DFA.unpackEncodedStringToUnsignedChars(DFA101_maxS);
    static final short[] DFA101_accept = DFA.unpackEncodedString(DFA101_acceptS);
    static final short[] DFA101_special = DFA.unpackEncodedString(DFA101_specialS);
    static final short[][] DFA101_transition;

    static {
        int numStates = DFA101_transitionS.length;
        DFA101_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA101_transition[i] = DFA.unpackEncodedString(DFA101_transitionS[i]);
        }
    }

    class DFA101 extends DFA {

        public DFA101(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 101;
            this.eot = DFA101_eot;
            this.eof = DFA101_eof;
            this.min = DFA101_min;
            this.max = DFA101_max;
            this.accept = DFA101_accept;
            this.special = DFA101_special;
            this.transition = DFA101_transition;
        }
        public String getDescription() {
            return "517:1: typedef_clause : ( ( defpattern ( NL )? '=' )=> defpattern ( NL )? '=' ( NL )? expr -> ^( TYPEDEF_CLAUSE defpattern expr ) | defpattern -> ^( TYPEDEF_CLAUSE defpattern ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA101_1 = input.LA(1);

                         
                        int index101_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index101_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA101_2 = input.LA(1);

                         
                        int index101_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index101_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA101_3 = input.LA(1);

                         
                        int index101_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index101_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA101_4 = input.LA(1);

                         
                        int index101_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index101_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA101_5 = input.LA(1);

                         
                        int index101_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index101_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA101_6 = input.LA(1);

                         
                        int index101_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index101_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA101_7 = input.LA(1);

                         
                        int index101_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index101_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA101_8 = input.LA(1);

                         
                        int index101_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index101_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA101_9 = input.LA(1);

                         
                        int index101_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index101_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA101_10 = input.LA(1);

                         
                        int index101_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index101_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA101_11 = input.LA(1);

                         
                        int index101_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index101_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA101_12 = input.LA(1);

                         
                        int index101_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_babel17()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index101_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 101, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA139_eotS =
        "\36\uffff";
    static final String DFA139_eofS =
        "\36\uffff";
    static final String DFA139_minS =
        "\1\107\16\0\17\uffff";
    static final String DFA139_maxS =
        "\1\u00a7\16\0\17\uffff";
    static final String DFA139_acceptS =
        "\17\uffff\1\2\15\uffff\1\1";
    static final String DFA139_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\17\uffff}>";
    static final String[] DFA139_transitionS = {
            "\1\17\1\uffff\3\17\3\uffff\2\17\2\uffff\1\17\5\uffff\1\15\2"+
            "\uffff\1\17\1\uffff\3\17\1\uffff\1\6\1\7\2\17\1\10\4\uffff\1"+
            "\17\4\uffff\1\17\1\uffff\2\17\14\uffff\1\11\17\uffff\2\16\4"+
            "\uffff\1\17\3\uffff\1\1\1\2\1\uffff\1\17\1\5\1\uffff\1\4\1\13"+
            "\1\uffff\1\12\1\uffff\1\14\1\uffff\1\3",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA139_eot = DFA.unpackEncodedString(DFA139_eotS);
    static final short[] DFA139_eof = DFA.unpackEncodedString(DFA139_eofS);
    static final char[] DFA139_min = DFA.unpackEncodedStringToUnsignedChars(DFA139_minS);
    static final char[] DFA139_max = DFA.unpackEncodedStringToUnsignedChars(DFA139_maxS);
    static final short[] DFA139_accept = DFA.unpackEncodedString(DFA139_acceptS);
    static final short[] DFA139_special = DFA.unpackEncodedString(DFA139_specialS);
    static final short[][] DFA139_transition;

    static {
        int numStates = DFA139_transitionS.length;
        DFA139_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA139_transition[i] = DFA.unpackEncodedString(DFA139_transitionS[i]);
        }
    }

    class DFA139 extends DFA {

        public DFA139(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 139;
            this.eot = DFA139_eot;
            this.eof = DFA139_eof;
            this.min = DFA139_min;
            this.max = DFA139_max;
            this.accept = DFA139_accept;
            this.special = DFA139_special;
            this.transition = DFA139_transition;
        }
        public String getDescription() {
            return "563:1: expr_or_assign : ( ( ( pattern | objelem_assign ) ( NL )? '=' )=> ( pattern | objelem_assign ) ( NL )? '=' ( NL )? expr -> ^( ASSIGN ( pattern )* ( objelem_assign )* expr ) | expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA139_1 = input.LA(1);

                         
                        int index139_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index139_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA139_2 = input.LA(1);

                         
                        int index139_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index139_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA139_3 = input.LA(1);

                         
                        int index139_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index139_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA139_4 = input.LA(1);

                         
                        int index139_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index139_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA139_5 = input.LA(1);

                         
                        int index139_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index139_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA139_6 = input.LA(1);

                         
                        int index139_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index139_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA139_7 = input.LA(1);

                         
                        int index139_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index139_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA139_8 = input.LA(1);

                         
                        int index139_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index139_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA139_9 = input.LA(1);

                         
                        int index139_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index139_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA139_10 = input.LA(1);

                         
                        int index139_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index139_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA139_11 = input.LA(1);

                         
                        int index139_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index139_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA139_12 = input.LA(1);

                         
                        int index139_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index139_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA139_13 = input.LA(1);

                         
                        int index139_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index139_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA139_14 = input.LA(1);

                         
                        int index139_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_babel17()) ) {s = 29;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index139_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 139, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA149_eotS =
        "\35\uffff";
    static final String DFA149_eofS =
        "\35\uffff";
    static final String DFA149_minS =
        "\1\107\3\0\1\uffff\11\0\17\uffff";
    static final String DFA149_maxS =
        "\1\u00a7\3\0\1\uffff\11\0\17\uffff";
    static final String DFA149_acceptS =
        "\4\uffff\1\2\11\uffff\1\2\1\3\14\uffff\1\1";
    static final String DFA149_specialS =
        "\1\0\1\1\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\17\uffff}>";
    static final String[] DFA149_transitionS = {
            "\1\17\2\uffff\2\17\3\uffff\2\17\2\uffff\1\17\5\uffff\1\15\2"+
            "\uffff\1\17\1\uffff\3\17\1\uffff\1\7\1\10\2\17\1\11\4\uffff"+
            "\1\17\4\uffff\1\17\1\uffff\2\17\14\uffff\1\12\17\uffff\2\16"+
            "\4\uffff\1\17\3\uffff\1\2\1\3\1\uffff\1\17\1\6\1\uffff\1\5\1"+
            "\1\1\uffff\1\13\1\uffff\1\14\1\uffff\1\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA149_eot = DFA.unpackEncodedString(DFA149_eotS);
    static final short[] DFA149_eof = DFA.unpackEncodedString(DFA149_eofS);
    static final char[] DFA149_min = DFA.unpackEncodedStringToUnsignedChars(DFA149_minS);
    static final char[] DFA149_max = DFA.unpackEncodedStringToUnsignedChars(DFA149_maxS);
    static final short[] DFA149_accept = DFA.unpackEncodedString(DFA149_acceptS);
    static final short[] DFA149_special = DFA.unpackEncodedString(DFA149_specialS);
    static final short[][] DFA149_transition;

    static {
        int numStates = DFA149_transitionS.length;
        DFA149_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA149_transition[i] = DFA.unpackEncodedString(DFA149_transitionS[i]);
        }
    }

    class DFA149 extends DFA {

        public DFA149(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = DFA149_eot;
            this.eof = DFA149_eof;
            this.min = DFA149_min;
            this.max = DFA149_max;
            this.accept = DFA149_accept;
            this.special = DFA149_special;
            this.transition = DFA149_transition;
        }
        public String getDescription() {
            return "602:1: lop_expr : ( ( lambda_expr )=> lambda_expr | ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | op_expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA149_0 = input.LA(1);

                         
                        int index149_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA149_0==ROUND_BRACKET_OPEN) ) {s = 1;}

                        else if ( (LA149_0==Constr) ) {s = 2;}

                        else if ( (LA149_0==Id) ) {s = 3;}

                        else if ( (LA149_0==UNDERSCORE) && (synpred12_babel17())) {s = 4;}

                        else if ( (LA149_0==String) ) {s = 5;}

                        else if ( (LA149_0==Num) ) {s = 6;}

                        else if ( (LA149_0==L_true) ) {s = 7;}

                        else if ( (LA149_0==L_false) ) {s = 8;}

                        else if ( (LA149_0==L_nil) ) {s = 9;}

                        else if ( (LA149_0==MINUS) ) {s = 10;}

                        else if ( (LA149_0==SQUARE_BRACKET_OPEN) ) {s = 11;}

                        else if ( (LA149_0==CURLY_BRACKET_OPEN) ) {s = 12;}

                        else if ( (LA149_0==L_exception) ) {s = 13;}

                        else if ( ((LA149_0>=A_ELLIPSIS && LA149_0<=U_ELLIPSIS)) && (synpred12_babel17())) {s = 14;}

                        else if ( (LA149_0==L_begin||(LA149_0>=L_with && LA149_0<=L_if)||(LA149_0>=L_while && LA149_0<=L_for)||LA149_0==L_match||LA149_0==L_try||(LA149_0>=L_concurrent && LA149_0<=L_lazy)||(LA149_0>=L_this && LA149_0<=L_random)||LA149_0==L_typeof||LA149_0==L_not||(LA149_0>=L_root && LA149_0<=L_native)||LA149_0==L_force||LA149_0==Float) ) {s = 15;}

                         
                        input.seek(index149_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA149_1 = input.LA(1);

                         
                        int index149_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_babel17()) ) {s = 28;}

                        else if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index149_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA149_2 = input.LA(1);

                         
                        int index149_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index149_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA149_3 = input.LA(1);

                         
                        int index149_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index149_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA149_5 = input.LA(1);

                         
                        int index149_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index149_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA149_6 = input.LA(1);

                         
                        int index149_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index149_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA149_7 = input.LA(1);

                         
                        int index149_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index149_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA149_8 = input.LA(1);

                         
                        int index149_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index149_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA149_9 = input.LA(1);

                         
                        int index149_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index149_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA149_10 = input.LA(1);

                         
                        int index149_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index149_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA149_11 = input.LA(1);

                         
                        int index149_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index149_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA149_12 = input.LA(1);

                         
                        int index149_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index149_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA149_13 = input.LA(1);

                         
                        int index149_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index149_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 149, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA150_eotS =
        "\35\uffff";
    static final String DFA150_eofS =
        "\35\uffff";
    static final String DFA150_minS =
        "\1\107\3\0\1\uffff\11\0\17\uffff";
    static final String DFA150_maxS =
        "\1\u00a7\3\0\1\uffff\11\0\17\uffff";
    static final String DFA150_acceptS =
        "\4\uffff\1\2\11\uffff\1\2\1\3\14\uffff\1\1";
    static final String DFA150_specialS =
        "\1\0\1\1\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\17\uffff}>";
    static final String[] DFA150_transitionS = {
            "\1\17\2\uffff\2\17\3\uffff\2\17\2\uffff\1\17\5\uffff\1\15\2"+
            "\uffff\1\17\1\uffff\3\17\1\uffff\1\7\1\10\2\17\1\11\4\uffff"+
            "\1\17\4\uffff\1\17\1\uffff\2\17\14\uffff\1\12\17\uffff\2\16"+
            "\4\uffff\1\17\3\uffff\1\2\1\3\1\uffff\1\17\1\6\1\uffff\1\5\1"+
            "\1\1\uffff\1\13\1\uffff\1\14\1\uffff\1\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA150_eot = DFA.unpackEncodedString(DFA150_eotS);
    static final short[] DFA150_eof = DFA.unpackEncodedString(DFA150_eofS);
    static final char[] DFA150_min = DFA.unpackEncodedStringToUnsignedChars(DFA150_minS);
    static final char[] DFA150_max = DFA.unpackEncodedStringToUnsignedChars(DFA150_maxS);
    static final short[] DFA150_accept = DFA.unpackEncodedString(DFA150_acceptS);
    static final short[] DFA150_special = DFA.unpackEncodedString(DFA150_specialS);
    static final short[][] DFA150_transition;

    static {
        int numStates = DFA150_transitionS.length;
        DFA150_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA150_transition[i] = DFA.unpackEncodedString(DFA150_transitionS[i]);
        }
    }

    class DFA150 extends DFA {

        public DFA150(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 150;
            this.eot = DFA150_eot;
            this.eof = DFA150_eof;
            this.min = DFA150_min;
            this.max = DFA150_max;
            this.accept = DFA150_accept;
            this.special = DFA150_special;
            this.transition = DFA150_transition;
        }
        public String getDescription() {
            return "607:1: p_lop_expr : ( ( lambda_expr )=> lambda_expr | ( lambda_expr_nobrackets )=> lambda_expr_nobrackets | p_op_expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA150_0 = input.LA(1);

                         
                        int index150_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA150_0==ROUND_BRACKET_OPEN) ) {s = 1;}

                        else if ( (LA150_0==Constr) ) {s = 2;}

                        else if ( (LA150_0==Id) ) {s = 3;}

                        else if ( (LA150_0==UNDERSCORE) && (synpred14_babel17())) {s = 4;}

                        else if ( (LA150_0==String) ) {s = 5;}

                        else if ( (LA150_0==Num) ) {s = 6;}

                        else if ( (LA150_0==L_true) ) {s = 7;}

                        else if ( (LA150_0==L_false) ) {s = 8;}

                        else if ( (LA150_0==L_nil) ) {s = 9;}

                        else if ( (LA150_0==MINUS) ) {s = 10;}

                        else if ( (LA150_0==SQUARE_BRACKET_OPEN) ) {s = 11;}

                        else if ( (LA150_0==CURLY_BRACKET_OPEN) ) {s = 12;}

                        else if ( (LA150_0==L_exception) ) {s = 13;}

                        else if ( ((LA150_0>=A_ELLIPSIS && LA150_0<=U_ELLIPSIS)) && (synpred14_babel17())) {s = 14;}

                        else if ( (LA150_0==L_begin||(LA150_0>=L_with && LA150_0<=L_if)||(LA150_0>=L_while && LA150_0<=L_for)||LA150_0==L_match||LA150_0==L_try||(LA150_0>=L_concurrent && LA150_0<=L_lazy)||(LA150_0>=L_this && LA150_0<=L_random)||LA150_0==L_typeof||LA150_0==L_not||(LA150_0>=L_root && LA150_0<=L_native)||LA150_0==L_force||LA150_0==Float) ) {s = 15;}

                         
                        input.seek(index150_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA150_1 = input.LA(1);

                         
                        int index150_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_babel17()) ) {s = 28;}

                        else if ( (synpred14_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index150_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA150_2 = input.LA(1);

                         
                        int index150_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index150_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA150_3 = input.LA(1);

                         
                        int index150_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index150_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA150_5 = input.LA(1);

                         
                        int index150_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index150_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA150_6 = input.LA(1);

                         
                        int index150_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index150_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA150_7 = input.LA(1);

                         
                        int index150_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index150_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA150_8 = input.LA(1);

                         
                        int index150_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index150_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA150_9 = input.LA(1);

                         
                        int index150_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index150_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA150_10 = input.LA(1);

                         
                        int index150_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index150_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA150_11 = input.LA(1);

                         
                        int index150_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index150_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA150_12 = input.LA(1);

                         
                        int index150_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index150_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA150_13 = input.LA(1);

                         
                        int index150_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_babel17()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index150_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 150, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA319_eotS =
        "\21\uffff";
    static final String DFA319_eofS =
        "\21\uffff";
    static final String DFA319_minS =
        "\1\107\12\uffff\1\107\3\uffff\1\107\1\uffff";
    static final String DFA319_maxS =
        "\1\u00a5\12\uffff\1\u00a8\3\uffff\1\u00a8\1\uffff";
    static final String DFA319_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\uffff\1\14"+
        "\1\15\1\16\1\uffff\1\13";
    static final String DFA319_specialS =
        "\21\uffff}>";
    static final String[] DFA319_transitionS = {
            "\1\15\2\uffff\2\15\3\uffff\2\15\2\uffff\1\15\10\uffff\1\15\5"+
            "\uffff\1\6\1\7\1\10\1\uffff\1\11\13\uffff\1\12\47\uffff\1\5"+
            "\1\4\1\uffff\1\2\1\1\1\uffff\1\3\1\13\1\uffff\1\14\1\uffff\1"+
            "\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\14\1\uffff\3\14\3\uffff\2\14\2\uffff\1\14\5\uffff\1\14\2"+
            "\uffff\1\14\1\uffff\3\14\1\uffff\5\14\4\uffff\1\14\4\uffff\1"+
            "\14\1\uffff\2\14\14\uffff\1\14\17\uffff\2\14\4\uffff\1\14\2"+
            "\uffff\1\17\2\14\1\uffff\2\14\1\uffff\4\14\1\uffff\1\14\1\uffff"+
            "\1\14\1\20",
            "",
            "",
            "",
            "\1\14\1\uffff\3\14\3\uffff\2\14\2\uffff\1\14\5\uffff\1\14\2"+
            "\uffff\1\14\1\uffff\3\14\1\uffff\5\14\4\uffff\1\14\4\uffff\1"+
            "\14\1\uffff\2\14\14\uffff\1\14\17\uffff\2\14\4\uffff\1\14\3"+
            "\uffff\2\14\1\uffff\2\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1"+
            "\14\1\20",
            ""
    };

    static final short[] DFA319_eot = DFA.unpackEncodedString(DFA319_eotS);
    static final short[] DFA319_eof = DFA.unpackEncodedString(DFA319_eofS);
    static final char[] DFA319_min = DFA.unpackEncodedStringToUnsignedChars(DFA319_minS);
    static final char[] DFA319_max = DFA.unpackEncodedStringToUnsignedChars(DFA319_maxS);
    static final short[] DFA319_accept = DFA.unpackEncodedString(DFA319_acceptS);
    static final short[] DFA319_special = DFA.unpackEncodedString(DFA319_specialS);
    static final short[][] DFA319_transition;

    static {
        int numStates = DFA319_transitionS.length;
        DFA319_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA319_transition[i] = DFA.unpackEncodedString(DFA319_transitionS[i]);
        }
    }

    class DFA319 extends DFA {

        public DFA319(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 319;
            this.eot = DFA319_eot;
            this.eof = DFA319_eof;
            this.min = DFA319_min;
            this.max = DFA319_max;
            this.accept = DFA319_accept;
            this.special = DFA319_special;
            this.transition = DFA319_transition;
        }
        public String getDescription() {
            return "818:1: primitive_expr : ( Num | Float | String | Id | Constr | L_true | L_false | L_this | L_nil | L_root | type_expr | list_expr | with_control_expr | map_or_set_expr );";
        }
    }
 

    public static final BitSet FOLLOW_block_in_prog260 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_prog262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_EQUAL0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_NOT_EQUAL0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_LESS_EQ0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_GREATER_EQ0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_or_in_token_OR1086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_and_in_token_AND1094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_not_in_token_NOT1102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_DOUBLE_COLON0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_DOUBLE_ARROW0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_ARROW0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_token_ELLIPSIS0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_typeid1742 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_NL_in_typeid1745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_PERIOD_in_typeid1748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_typeid1750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Id_in_typeid1753 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_typeid_in_typeannotation1773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_typeannotation1778 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_protected_expr_in_typeannotation1780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_typeannotation1782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Constr_in_pattern1799 = new BitSet(new long[]{0x0000000000000002L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_pattern1802 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4C030001L});
    public static final BitSet FOLLOW_pattern_in_pattern1805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitive_pattern_in_pattern1821 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_NL_in_pattern1824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_token_DOUBLE_COLON_in_pattern1827 = new BitSet(new long[]{0x0000000000000000L,0x0000004C00000000L,0x000000AB4A000001L});
    public static final BitSet FOLLOW_NL_in_pattern1829 = new BitSet(new long[]{0x0000000000000000L,0x0000004C00000000L,0x000000AB48000001L});
    public static final BitSet FOLLOW_primitive_pattern_in_pattern1832 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_L_exception_in_pattern1851 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_pattern1853 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4C030001L});
    public static final BitSet FOLLOW_pattern_in_pattern1856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_ELLIPSIS_in_pattern1869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitive_pattern_in_defpattern1879 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_NL_in_defpattern1882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_token_DOUBLE_COLON_in_defpattern1885 = new BitSet(new long[]{0x0000000000000000L,0x0000004C00000000L,0x000000AB4A000001L});
    public static final BitSet FOLLOW_NL_in_defpattern1887 = new BitSet(new long[]{0x0000000000000000L,0x0000004C00000000L,0x000000AB48000001L});
    public static final BitSet FOLLOW_primitive_pattern_in_defpattern1890 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_Constr_in_defpattern1908 = new BitSet(new long[]{0x0000000000000002L,0x0000004C00000000L,0x000000AB4C000001L});
    public static final BitSet FOLLOW_defpattern_in_defpattern1910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_casepattern1941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010002000000L});
    public static final BitSet FOLLOW_NL_in_casepattern1943 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLON_in_casepattern1946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000020A000000L});
    public static final BitSet FOLLOW_NL_in_casepattern1948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000020A000000L});
    public static final BitSet FOLLOW_typeannotation_in_casepattern1951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_casepattern1966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_bracket_pattern1994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern1996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_L_as_in_bracket_pattern1999 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2001 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4C030001L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_bracket_pattern2033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002100000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_QUESTION_MARK_in_bracket_pattern2038 = new BitSet(new long[]{0x0000000000000002L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2041 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4C030001L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_bracket_pattern2076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002200000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_EXCLAMATION_MARK_in_bracket_pattern2081 = new BitSet(new long[]{0x0000000000000002L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2084 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4C030001L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_bracket_pattern2113 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4C030001L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_val_in_bracket_pattern2130 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2132 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_bracket_pattern2135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_for_in_bracket_pattern2154 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498F80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2156 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498F80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_bracket_pattern_in_bracket_pattern2160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000002040000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_bracket_pattern2167 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2169 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_bracket_pattern_in_bracket_pattern2172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000002040000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_bracket_pattern2182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_L_if_in_bracket_pattern2212 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2214 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_bracket_pattern2217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010002000000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2245 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLON_in_bracket_pattern2248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000020A000000L});
    public static final BitSet FOLLOW_NL_in_bracket_pattern2250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000020A000000L});
    public static final BitSet FOLLOW_typeannotation_in_bracket_pattern2253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_bracket_pattern2268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_ARROW_in_arrow_or_assign2278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGN_in_arrow_or_assign2289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bracket_pattern_in_mselem_pattern2304 = new BitSet(new long[]{0x0000000200000002L,0x0000000000000000L,0x000000000200C000L});
    public static final BitSet FOLLOW_NL_in_mselem_pattern2307 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x000000000200C000L});
    public static final BitSet FOLLOW_arrow_or_assign_in_mselem_pattern2310 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_mselem_pattern2312 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_bracket_pattern_in_mselem_pattern2315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_primitive_pattern2344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNDERSCORE_in_primitive_pattern2349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_String_in_primitive_pattern2358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Num_in_primitive_pattern2363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_true_in_primitive_pattern2368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_false_in_primitive_pattern2373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_nil_in_primitive_pattern2378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_primitive_pattern2386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000042000000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2388 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_Num_in_primitive_pattern2391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_OPEN_in_primitive_pattern2404 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000BB6E430001L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2407 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000BB6C430001L});
    public static final BitSet FOLLOW_bracket_pattern_in_primitive_pattern2411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001002040000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000040000L});
    public static final BitSet FOLLOW_COMMA_in_primitive_pattern2418 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2420 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_bracket_pattern_in_primitive_pattern2423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001002040000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000040000L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_CLOSE_in_primitive_pattern2433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_primitive_pattern2453 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AF6E430001L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2456 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AF6C430001L});
    public static final BitSet FOLLOW_bracket_pattern_in_primitive_pattern2460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000402040000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400040000L});
    public static final BitSet FOLLOW_COMMA_in_primitive_pattern2467 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2470 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_bracket_pattern_in_primitive_pattern2473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000402040000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400040000L});
    public static final BitSet FOLLOW_COMMA_in_primitive_pattern2481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000402000000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_primitive_pattern2490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_primitive_pattern2522 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000EB6E430001L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2525 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000EB6C430001L});
    public static final BitSet FOLLOW_mselem_pattern_in_primitive_pattern2529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004002040000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000040000L});
    public static final BitSet FOLLOW_COMMA_in_primitive_pattern2536 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2539 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2498E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_mselem_pattern_in_primitive_pattern2542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004002040000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000040000L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_primitive_pattern2552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_primitive_pattern2570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000200C000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_token_ARROW_in_primitive_pattern2575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004002000000L});
    public static final BitSet FOLLOW_NL_in_primitive_pattern2577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_primitive_pattern2580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_sep2596 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_sep_in_block2612 = new BitSet(new long[]{0x0000000000000000L,0x000D3E7FD2CD8E80L,0x00001EAB6C430001L});
    public static final BitSet FOLLOW_statement_in_block2615 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_sep_in_block2618 = new BitSet(new long[]{0x0000000000000000L,0x000D3E7FD2CD8E80L,0x00001EAB6C430001L});
    public static final BitSet FOLLOW_statement_in_block2620 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_sep_in_block2624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sep_in_block2640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_pure_block2657 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_sep_in_pure_block2660 = new BitSet(new long[]{0x0000000000000000L,0x000D3E7FD2CD8E80L,0x00001EAB6C430001L});
    public static final BitSet FOLLOW_statement_in_pure_block2662 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_st_typedef_in_statement2683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_val_in_statement2694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_def_in_statement2699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_yield_in_statement2704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_memoize_in_statement2709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_private_in_statement2714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_module_in_statement2719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_st_import_in_statement2724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_assign_in_statement2729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_PRINT_in_statement2735 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_statement2737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_LOG_in_statement2751 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_statement2753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_PROFILE_in_statement2767 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_statement2769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRAGMA_ASSERT_in_statement2783 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_statement2785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_objelem_assign2803 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_PERIOD_in_objelem_assign2805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Id_in_objelem_assign2807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_val_in_st_val2826 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_st_val2828 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4C030001L});
    public static final BitSet FOLLOW_pattern_in_st_val2832 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_objelem_assign_in_st_val2836 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_st_val2839 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_st_val2842 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_st_val2844 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_st_val2847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_def_in_st_def2871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_st_def2873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Id_in_st_def2876 = new BitSet(new long[]{0x0000000200000000L,0x0000004C00000000L,0x000001AB4E000001L});
    public static final BitSet FOLLOW_NL_in_st_def2878 = new BitSet(new long[]{0x0000000200000000L,0x0000004C00000000L,0x000001AB4C000001L});
    public static final BitSet FOLLOW_defpattern_in_st_def2882 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000010002000000L});
    public static final BitSet FOLLOW_NL_in_st_def2884 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLON_in_st_def2890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_st_def2892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_typeid_in_st_def2895 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_st_def2897 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_st_def2902 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_st_def2904 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_st_def2907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_def_in_st_def2933 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_st_def2935 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_L_this_in_st_def2938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010002000000L});
    public static final BitSet FOLLOW_NL_in_st_def2940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLON_in_st_def2943 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_st_def2945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_typeid_in_st_def2948 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_st_def2950 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_st_def2953 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_st_def2955 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_st_def2958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_typedef_in_st_typedef2981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_st_typedef2983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Id_in_st_typedef2986 = new BitSet(new long[]{0x0000000000000000L,0x0000004C00000000L,0x000000AB4E000001L});
    public static final BitSet FOLLOW_NL_in_st_typedef2988 = new BitSet(new long[]{0x0000000000000000L,0x0000004C00000000L,0x000000AB4E000001L});
    public static final BitSet FOLLOW_typedef_clause_in_st_typedef2991 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002040000L});
    public static final BitSet FOLLOW_NL_in_st_typedef2994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_st_typedef2997 = new BitSet(new long[]{0x0000000000000000L,0x0000004C00000000L,0x000000AB4E000001L});
    public static final BitSet FOLLOW_NL_in_st_typedef2999 = new BitSet(new long[]{0x0000000000000000L,0x0000004C00000000L,0x000000AB4E000001L});
    public static final BitSet FOLLOW_typedef_clause_in_st_typedef3002 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002040000L});
    public static final BitSet FOLLOW_defpattern_in_typedef_clause3040 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_typedef_clause3042 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_typedef_clause3045 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_typedef_clause3047 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_typedef_clause3050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defpattern_in_typedef_clause3065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_yield_in_st_yield3084 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_st_yield3086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_memoize_in_st_memoize3107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000208000000L});
    public static final BitSet FOLLOW_memo_id_in_st_memoize3109 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002040000L});
    public static final BitSet FOLLOW_NL_in_st_memoize3112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_st_memoize3115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000020A000000L});
    public static final BitSet FOLLOW_NL_in_st_memoize3117 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000208000000L});
    public static final BitSet FOLLOW_memo_id_in_st_memoize3120 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002040000L});
    public static final BitSet FOLLOW_Id_in_memo_id3149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_memo_id3162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Id_in_memo_id3164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_memo_id3166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_private_in_st_private3183 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_private_id_in_st_private3185 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002040000L});
    public static final BitSet FOLLOW_NL_in_st_private3188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_st_private3191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_st_private3193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_private_id_in_st_private3196 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002040000L});
    public static final BitSet FOLLOW_Id_in_private_id3222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_testid0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_moduleid3255 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_NL_in_moduleid3258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_PERIOD_in_moduleid3261 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_moduleid3263 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_testid_in_moduleid3266 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_L_module_in_st_module3289 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_st_module3291 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_moduleid_in_st_module3294 = new BitSet(new long[]{0x0000000000000000L,0x400D7E7FD2CD8F80L,0x00001EAB6E430001L});
    public static final BitSet FOLLOW_block_in_st_module3296 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000100L});
    public static final BitSet FOLLOW_L_unittest_in_st_module3299 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8F80L,0x00001EAB6E430001L});
    public static final BitSet FOLLOW_block_in_st_module3301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_st_module3305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_root_in_importprefix3332 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_testid_in_importprefix3336 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_NL_in_importprefix3340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_PERIOD_in_importprefix3343 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_importprefix3345 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_testid_in_importprefix3348 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_UNDERSCORE_in_importall3373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_testid_in_importsetclause3389 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_NL_in_importsetclause3392 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_importsetclause3395 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_importsetclause3398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Id_in_importsetclause3401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_importsetclause3421 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_importsetclause3423 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_testid_in_importsetclause3426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importall_in_importsetclause3439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_importset3449 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000800A000001L});
    public static final BitSet FOLLOW_NL_in_importset3451 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000800A000001L});
    public static final BitSet FOLLOW_importsetclause_in_importset3454 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004002040000L});
    public static final BitSet FOLLOW_NL_in_importset3457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_importset3460 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000800A000001L});
    public static final BitSet FOLLOW_NL_in_importset3462 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000800A000001L});
    public static final BitSet FOLLOW_importsetclause_in_importset3465 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004002040000L});
    public static final BitSet FOLLOW_NL_in_importset3469 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_importset3472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_import_in_st_import3490 = new BitSet(new long[]{0x0000000000000000L,0x0004400000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_st_import3492 = new BitSet(new long[]{0x0000000000000000L,0x0004400000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_importprefix_in_st_import3495 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002083000L});
    public static final BitSet FOLLOW_NL_in_st_import3498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002083000L});
    public static final BitSet FOLLOW_PERIOD_in_st_import3502 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000800A000001L});
    public static final BitSet FOLLOW_NL_in_st_import3504 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x000000800A000001L});
    public static final BitSet FOLLOW_importall_in_st_import3507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERIOD_in_st_import3511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002002000000L});
    public static final BitSet FOLLOW_NL_in_st_import3513 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002002000000L});
    public static final BitSet FOLLOW_importset_in_st_import3516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_st_import3520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_st_import3522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Id_in_st_import3525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_expr_or_assign3573 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_objelem_assign_in_expr_or_assign3577 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_expr_or_assign3580 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_expr_or_assign3583 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_expr_or_assign3585 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_expr_in_expr_or_assign3588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_expr_or_assign3607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lop_expr_in_expr3618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_obj_expr_in_expr3623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_expr_in_control_expr3633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_do_expr_in_control_expr3638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_match_expr_in_control_expr3643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_expr_in_control_expr3648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_expr_in_control_expr3654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_begin_end_in_control_expr3659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_control_expr_in_with_control_expr3669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_with_in_with_control_expr3674 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_with_control_expr3676 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_protected_expr_in_with_control_expr3679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_with_control_expr3681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_L_do_in_with_control_expr3684 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8F80L,0x00001EAB6E430001L});
    public static final BitSet FOLLOW_block_in_with_control_expr3686 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_with_control_expr3688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_lop_expr_in_protected_expr3713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_obj_expr_in_protected_expr3718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_protected_expr_nc3729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_begin_in_begin_end3739 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8F80L,0x00001EAB6E430001L});
    public static final BitSet FOLLOW_block_in_begin_end3741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_begin_end3743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_parents3761 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_primitive_expr_in_parents3763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMES_in_parents3776 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_primitive_expr_in_parents3778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_obj_in_obj_expr3806 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000002000002L});
    public static final BitSet FOLLOW_NL_in_obj_expr3808 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000002000002L});
    public static final BitSet FOLLOW_parents_in_obj_expr3811 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8F80L,0x00001EAB6E430001L});
    public static final BitSet FOLLOW_block_in_obj_expr3813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_obj_expr3815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_obj_in_obj_expr3843 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8F80L,0x00001EAB6E430001L});
    public static final BitSet FOLLOW_block_in_obj_expr3845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_obj_expr3847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_in_lop_expr3875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_nobrackets_in_lop_expr3886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_expr_in_lop_expr3891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_in_p_lop_expr3907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_nobrackets_in_p_lop_expr3918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_op_expr_in_p_lop_expr3923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_if_in_if_expr3933 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_if_expr3935 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_protected_expr_in_if_expr3938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_if_expr3940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_L_then_in_if_expr3943 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CDEF80L,0x00001EAB6E430001L});
    public static final BitSet FOLLOW_block_in_if_expr3945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000006100L});
    public static final BitSet FOLLOW_L_elseif_in_if_expr3951 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_if_expr3953 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_protected_expr_in_if_expr3956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_if_expr3958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_L_then_in_if_expr3961 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CDEF80L,0x00001EAB6E430001L});
    public static final BitSet FOLLOW_block_in_if_expr3963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000006100L});
    public static final BitSet FOLLOW_L_else_in_if_expr3971 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8F80L,0x00001EAB6E430001L});
    public static final BitSet FOLLOW_block_in_if_expr3973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_if_expr3977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_while_in_while_do_expr4001 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_while_do_expr4003 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_protected_expr_in_while_do_expr4006 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_while_do_expr4008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_L_do_in_while_do_expr4011 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8F80L,0x00001EAB6E430001L});
    public static final BitSet FOLLOW_block_in_while_do_expr4013 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_while_do_expr4015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_cases_in_cases4045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_cases4050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_NL_in_cases4052 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_cases4055 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8E80L,0x00001EAB6E430001L});
    public static final BitSet FOLLOW_block_in_cases4057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_expr_in_full_cases4080 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_L_case_in_case_expr4101 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_case_expr4103 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_casepattern_in_case_expr4106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_NL_in_case_expr4108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_case_expr4111 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8E80L,0x00001EAB6E430001L});
    public static final BitSet FOLLOW_block_in_case_expr4113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_match_in_match_expr4134 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_match_expr4136 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_op_expr_in_match_expr4139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_match_expr4141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000002000000L});
    public static final BitSet FOLLOW_full_cases_in_match_expr4144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_match_expr4146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_try_in_try_expr4172 = new BitSet(new long[]{0x0000000000000000L,0x000D3E7FD2CD8E80L,0x00001EAB6E430001L});
    public static final BitSet FOLLOW_NL_in_try_expr4174 = new BitSet(new long[]{0x0000000000000000L,0x000D3E7FD2CD8E80L,0x00001EAB6E430001L});
    public static final BitSet FOLLOW_pure_block_in_try_expr4177 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_try_expr4179 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_L_catch_in_try_expr4182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_try_expr4184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000002000000L});
    public static final BitSet FOLLOW_full_cases_in_try_expr4187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_try_expr4189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_lambda_expr4213 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02100000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_lambda_expr4215 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02100000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_lambda_cases_in_lambda_expr4218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000402000000L});
    public static final BitSet FOLLOW_NL_in_lambda_expr4220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_lambda_expr4223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_cases_nobrackets_in_lambda_expr_nobrackets4242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_lambda_cases_nobrackets4260 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_NL_in_lambda_cases_nobrackets4262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_lambda_cases_nobrackets4265 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_lambda_cases_nobrackets4267 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_lop_expr_in_lambda_cases_nobrackets4270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_case_in_lambda_case_expr4298 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_lambda_case_expr4300 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_casepattern_in_lambda_case_expr4303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_NL_in_lambda_case_expr4305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_lambda_case_expr4308 = new BitSet(new long[]{0x0000000000000000L,0x000D3E7FD2CD8E80L,0x00001EAB6E430001L});
    public static final BitSet FOLLOW_NL_in_lambda_case_expr4310 = new BitSet(new long[]{0x0000000000000000L,0x000D3E7FD2CD8E80L,0x00001EAB6E430001L});
    public static final BitSet FOLLOW_pure_block_in_lambda_case_expr4313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_lambda_cases4334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_NL_in_lambda_cases4336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002003000L});
    public static final BitSet FOLLOW_token_DOUBLE_ARROW_in_lambda_cases4339 = new BitSet(new long[]{0x0000000000000000L,0x000D3E7FD2CD8E80L,0x00001EAB6E430001L});
    public static final BitSet FOLLOW_NL_in_lambda_cases4341 = new BitSet(new long[]{0x0000000000000000L,0x000D3E7FD2CD8E80L,0x00001EAB6E430001L});
    public static final BitSet FOLLOW_pure_block_in_lambda_cases4344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_case_expr_in_lambda_cases4363 = new BitSet(new long[]{0x0000000000000002L,0x0000004C02100000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_lambda_cases4366 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02100000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_lambda_case_expr_in_lambda_cases4369 = new BitSet(new long[]{0x0000000000000002L,0x0000004C02100000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_L_for_in_for_expr4387 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4E030001L});
    public static final BitSet FOLLOW_NL_in_for_expr4389 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4C030001L});
    public static final BitSet FOLLOW_pattern_in_for_expr4392 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_for_expr4394 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_L_in_in_for_expr4397 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_for_expr4399 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_protected_expr_in_for_expr4402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_for_expr4404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_L_do_in_for_expr4407 = new BitSet(new long[]{0x0000000000000000L,0x400D3E7FD2CD8F80L,0x00001EAB6E430001L});
    public static final BitSet FOLLOW_block_in_for_expr4409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_end_in_for_expr4411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtin_primitive_in_op_expr4440 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_op_expr_in_op_expr4443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bool_expr_in_op_expr4448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtin_primitive_in_p_op_expr4458 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_op_expr4461 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_op_expr_in_p_op_expr4465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_bool_expr_in_p_op_expr4470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_builtin_primitive0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bool_or_expr_in_bool_expr4501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_bool_or_expr_in_p_bool_expr4511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bool_and_expr_in_bool_or_expr4520 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_bool_or_expr4523 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_token_OR_in_bool_or_expr4527 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_bool_or_expr4530 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_bool_and_expr_in_bool_or_expr4534 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_p_bool_and_expr_in_p_bool_or_expr4546 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_p_bool_or_expr4549 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_token_OR_in_p_bool_or_expr4553 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_bool_or_expr4556 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_bool_and_expr_in_p_bool_or_expr4560 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_bool_not_expr_in_bool_and_expr4572 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_bool_and_expr4575 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_token_AND_in_bool_and_expr4579 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_bool_and_expr4582 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_bool_not_expr_in_bool_and_expr4586 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_p_bool_not_expr_in_p_bool_and_expr4598 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_p_bool_and_expr4601 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_token_AND_in_p_bool_and_expr4605 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_bool_and_expr4608 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_bool_not_expr_in_p_bool_and_expr4612 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_token_NOT_in_bool_not_expr4624 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_bool_not_expr4627 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_bool_not_expr_in_bool_not_expr4631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_expr_in_bool_not_expr4636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_NOT_in_p_bool_not_expr4647 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_bool_not_expr4650 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_bool_not_expr_in_p_bool_not_expr4654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_rel_expr_in_p_bool_not_expr4659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relate_expr_in_rel_expr4669 = new BitSet(new long[]{0x0000000000000002L,0x3FF0000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_rel_expr4672 = new BitSet(new long[]{0x0000000000000000L,0x3FF0000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_rel_op_in_rel_expr4675 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_rel_expr4677 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_relate_expr_in_rel_expr4680 = new BitSet(new long[]{0x0000000000000002L,0x3FF0000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_p_relate_expr_in_p_rel_expr4707 = new BitSet(new long[]{0x0000000000000002L,0x3FF0000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_p_rel_expr4710 = new BitSet(new long[]{0x0000000000000000L,0x3FF0000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_rel_op_in_p_rel_expr4713 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_rel_expr4715 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_relate_expr_in_p_rel_expr4718 = new BitSet(new long[]{0x0000000000000002L,0x3FF0000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_token_EQUAL_in_rel_op4744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_NOT_EQUAL_in_rel_op4748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_in_rel_op4752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_GREATER_EQ_in_rel_op4756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_in_rel_op4760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_token_LESS_EQ_in_rel_op4764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_convert_expr_in_relate_expr4773 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000010L});
    public static final BitSet FOLLOW_NL_in_relate_expr4776 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_TOK_RELATE_in_relate_expr4779 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_relate_expr4781 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_convert_expr_in_relate_expr4784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_convert_expr_in_p_relate_expr4803 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000010L});
    public static final BitSet FOLLOW_NL_in_p_relate_expr4806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_TOK_RELATE_in_p_relate_expr4809 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_relate_expr4811 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_convert_expr_in_p_relate_expr4814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_expr_in_convert_expr4835 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000020L});
    public static final BitSet FOLLOW_NL_in_convert_expr4838 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_TOK_CONVERT_in_convert_expr4841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000020A000000L});
    public static final BitSet FOLLOW_NL_in_convert_expr4843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000020A000000L});
    public static final BitSet FOLLOW_typeannotation_in_convert_expr4846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_term_expr_in_p_convert_expr4868 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000020L});
    public static final BitSet FOLLOW_NL_in_p_convert_expr4871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_TOK_CONVERT_in_p_convert_expr4874 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000020A000000L});
    public static final BitSet FOLLOW_NL_in_p_convert_expr4876 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000020A000000L});
    public static final BitSet FOLLOW_typeannotation_in_p_convert_expr4879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtin_fun_in_term_expr4902 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_term_expr_in_term_expr4905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arith_expr_in_term_expr4910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtin_fun_in_p_term_expr4920 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_term_expr4923 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_term_expr_in_p_term_expr4927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_arith_expr_in_p_term_expr4932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_builtin_fun0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plusplus_expr_in_arith_expr4962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_plusplus_expr_in_p_arith_expr4971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timestimes_expr_in_plusplus_expr4981 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000C00L});
    public static final BitSet FOLLOW_NL_in_plusplus_expr4984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000C00L});
    public static final BitSet FOLLOW_PLUSPLUS_in_plusplus_expr4989 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_MINUSMINUS_in_plusplus_expr4992 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_plusplus_expr4996 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_timestimes_expr_in_plusplus_expr5000 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000C00L});
    public static final BitSet FOLLOW_p_timestimes_expr_in_p_plusplus_expr5012 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000C00L});
    public static final BitSet FOLLOW_NL_in_p_plusplus_expr5015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000C00L});
    public static final BitSet FOLLOW_PLUSPLUS_in_p_plusplus_expr5020 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_MINUSMINUS_in_p_plusplus_expr5023 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_plusplus_expr5027 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_timestimes_expr_in_p_plusplus_expr5031 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000C00L});
    public static final BitSet FOLLOW_simple_expr_in_timestimes_expr5043 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000300L});
    public static final BitSet FOLLOW_NL_in_timestimes_expr5046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000300L});
    public static final BitSet FOLLOW_TIMESTIMES_in_timestimes_expr5051 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_QUOTIENTQUOTIENT_in_timestimes_expr5054 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_timestimes_expr5058 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_simple_expr_in_timestimes_expr5062 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000300L});
    public static final BitSet FOLLOW_p_simple_expr_in_p_timestimes_expr5075 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000300L});
    public static final BitSet FOLLOW_NL_in_p_timestimes_expr5078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000300L});
    public static final BitSet FOLLOW_TIMESTIMES_in_p_timestimes_expr5083 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_QUOTIENTQUOTIENT_in_p_timestimes_expr5086 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_timestimes_expr5090 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_simple_expr_in_p_timestimes_expr5094 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000300L});
    public static final BitSet FOLLOW_cons_expr_in_simple_expr5105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_cons_expr_in_p_simple_expr5114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_expr_in_cons_expr5123 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_NL_in_cons_expr5126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_token_DOUBLE_COLON_in_cons_expr5129 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_cons_expr5131 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_to_expr_in_cons_expr5134 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_p_to_expr_in_p_cons_expr5154 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_NL_in_p_cons_expr5157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_token_DOUBLE_COLON_in_p_cons_expr5160 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_cons_expr5162 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_to_expr_in_p_cons_expr5165 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000020000C0L});
    public static final BitSet FOLLOW_arith_plus_expr_in_to_expr5185 = new BitSet(new long[]{0x0000000000000002L,0x000000000C000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_to_expr5188 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_L_to_in_to_expr5193 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_L_downto_in_to_expr5197 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_to_expr5201 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_arith_plus_expr_in_to_expr5205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_arith_plus_expr_in_p_to_expr5218 = new BitSet(new long[]{0x0000000000000002L,0x000000000C000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_p_to_expr5221 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_L_to_in_p_to_expr5226 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_L_downto_in_p_to_expr5230 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_to_expr5234 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_arith_plus_expr_in_p_to_expr5238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arith_uminus_expr_in_arith_plus_expr5250 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000002000001L});
    public static final BitSet FOLLOW_NL_in_arith_plus_expr5254 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_PLUS_in_arith_plus_expr5258 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_MINUS_in_arith_plus_expr5263 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_arith_plus_expr5267 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_arith_uminus_expr_in_arith_plus_expr5271 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000002000001L});
    public static final BitSet FOLLOW_p_arith_uminus_expr_in_p_arith_plus_expr5282 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000002000001L});
    public static final BitSet FOLLOW_NL_in_p_arith_plus_expr5285 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_set_in_p_arith_plus_expr5289 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_arith_plus_expr5298 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_arith_uminus_expr_in_p_arith_plus_expr5302 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000002000001L});
    public static final BitSet FOLLOW_MINUS_in_arith_uminus_expr5315 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_arith_uminus_expr5317 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_arith_mult_expr_in_arith_uminus_expr5320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arith_mult_expr_in_arith_uminus_expr5333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_p_arith_uminus_expr5344 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_arith_uminus_expr5346 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_arith_mult_expr_in_p_arith_uminus_expr5349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_arith_mult_expr_in_p_arith_uminus_expr5362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arith_pow_expr_in_arith_mult_expr5371 = new BitSet(new long[]{0x0000000000000002L,0x0000018000000000L,0x0000000002000006L});
    public static final BitSet FOLLOW_NL_in_arith_mult_expr5374 = new BitSet(new long[]{0x0000000000000000L,0x0000018000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_set_in_arith_mult_expr5378 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_arith_mult_expr5395 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_arith_pow_expr_in_arith_mult_expr5399 = new BitSet(new long[]{0x0000000000000002L,0x0000018000000000L,0x0000000002000006L});
    public static final BitSet FOLLOW_p_arith_pow_expr_in_p_arith_mult_expr5411 = new BitSet(new long[]{0x0000000000000002L,0x0000018000000000L,0x0000000002000006L});
    public static final BitSet FOLLOW_NL_in_p_arith_mult_expr5414 = new BitSet(new long[]{0x0000000000000000L,0x0000018000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_set_in_p_arith_mult_expr5418 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_arith_mult_expr5435 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_arith_pow_expr_in_p_arith_mult_expr5439 = new BitSet(new long[]{0x0000000000000002L,0x0000018000000000L,0x0000000002000006L});
    public static final BitSet FOLLOW_apply_expr_in_arith_pow_expr5450 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000008L});
    public static final BitSet FOLLOW_NL_in_arith_pow_expr5453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_POW_tok_in_arith_pow_expr5456 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_arith_pow_expr5458 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_apply_expr_in_arith_pow_expr5461 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000008L});
    public static final BitSet FOLLOW_p_apply_expr_in_p_arith_pow_expr5482 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000008L});
    public static final BitSet FOLLOW_NL_in_p_arith_pow_expr5485 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_POW_tok_in_p_arith_pow_expr5488 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_arith_pow_expr5490 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_apply_expr_in_p_arith_pow_expr5493 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000008L});
    public static final BitSet FOLLOW_basic_expr_in_apply_expr5514 = new BitSet(new long[]{0x0000000000000002L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_basic_expr_in_p_apply_expr5532 = new BitSet(new long[]{0x0000000000000002L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_p_apply_expr5535 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098C80L,0x000000AB6C430001L});
    public static final BitSet FOLLOW_p_basic_expr_in_p_apply_expr5538 = new BitSet(new long[]{0x0000000000000002L,0x000D087DD2098C80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_message_send_expr_in_basic_expr5558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_message_send_expr_in_p_basic_expr5567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitive_expr_in_message_send_expr5576 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_NL_in_message_send_expr5579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_PERIOD_in_message_send_expr5582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_message_send_expr5584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Id_in_message_send_expr5587 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_OPEN_in_list_expr5627 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_list_expr5629 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5632 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_list_expr5634 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_SC_in_list_expr5637 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_list_expr5639 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001002000000L});
    public static final BitSet FOLLOW_NL_in_list_expr5644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_CLOSE_in_list_expr5647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_OPEN_in_list_expr5661 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000BB6E430001L});
    public static final BitSet FOLLOW_NL_in_list_expr5663 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000BB6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001002040000L});
    public static final BitSet FOLLOW_NL_in_list_expr5670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_list_expr5673 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_list_expr5675 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001002040000L});
    public static final BitSet FOLLOW_NL_in_list_expr5682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_CLOSE_in_list_expr5687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_list_expr5701 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AF6E430001L});
    public static final BitSet FOLLOW_NL_in_list_expr5703 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AF6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000402040000L});
    public static final BitSet FOLLOW_NL_in_list_expr5710 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COMMA_in_list_expr5713 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_list_expr5715 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_list_expr5718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000402040000L});
    public static final BitSet FOLLOW_NL_in_list_expr5722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400040000L});
    public static final BitSet FOLLOW_COMMA_in_list_expr5726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000402000000L});
    public static final BitSet FOLLOW_NL_in_list_expr5728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_list_expr5735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_map_or_set_expr5764 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000EB6E430001L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr5766 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000EB6E430001L});
    public static final BitSet FOLLOW_map_or_set_elem_expr_in_map_or_set_expr5770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004002040000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr5772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000040000L});
    public static final BitSet FOLLOW_COMMA_in_map_or_set_expr5776 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr5778 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_map_or_set_elem_expr_in_map_or_set_expr5781 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004002040000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr5783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000040000L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_map_or_set_expr5790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURLY_BRACKET_OPEN_in_map_or_set_expr5810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000200C000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr5812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_token_ARROW_in_map_or_set_expr5815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004002000000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_expr5817 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_CURLY_BRACKET_CLOSE_in_map_or_set_expr5820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_nc_in_map_or_set_elem_expr5837 = new BitSet(new long[]{0x0000000200000002L,0x0000000000000000L,0x000000000200C000L});
    public static final BitSet FOLLOW_NL_in_map_or_set_elem_expr5840 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x000000000200C000L});
    public static final BitSet FOLLOW_arrow_or_assign_in_map_or_set_elem_expr5843 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_map_or_set_elem_expr5845 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_map_or_set_elem_expr5848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_BRACKET_OPEN_in_type_expr5875 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010002000000L});
    public static final BitSet FOLLOW_NL_in_type_expr5877 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLON_in_type_expr5880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000A000000L});
    public static final BitSet FOLLOW_NL_in_type_expr5882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_typeid_in_type_expr5885 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000402000000L});
    public static final BitSet FOLLOW_NL_in_type_expr5887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_ROUND_BRACKET_CLOSE_in_type_expr5890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Num_in_primitive_expr5908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Float_in_primitive_expr5913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_String_in_primitive_expr5918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_primitive_expr5923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Constr_in_primitive_expr5928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_true_in_primitive_expr5933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_false_in_primitive_expr5938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_this_in_primitive_expr5943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_nil_in_primitive_expr5949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_root_in_primitive_expr5954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_expr_in_primitive_expr5959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_list_expr_in_primitive_expr5965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_control_expr_in_primitive_expr5970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_or_set_expr_in_primitive_expr5975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_synpred1_babel171931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010002000000L});
    public static final BitSet FOLLOW_NL_in_synpred1_babel171933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLON_in_synpred1_babel171936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_synpred2_babel171984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_synpred2_babel171986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_L_as_in_synpred2_babel171989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_synpred3_babel172020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002100000L});
    public static final BitSet FOLLOW_NL_in_synpred3_babel172022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_QUESTION_MARK_in_synpred3_babel172025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protected_expr_in_synpred4_babel172063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002200000L});
    public static final BitSet FOLLOW_NL_in_synpred4_babel172065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_EXCLAMATION_MARK_in_synpred4_babel172068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_synpred5_babel172106 = new BitSet(new long[]{0x0000000000000000L,0x0000004C02000000L,0x000000AB4C030001L});
    public static final BitSet FOLLOW_pattern_in_synpred5_babel172108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_synpred6_babel172197 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_synpred6_babel172199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_L_if_in_synpred6_babel172202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_synpred7_babel172233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010002000000L});
    public static final BitSet FOLLOW_NL_in_synpred7_babel172235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLON_in_synpred7_babel172238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defpattern_in_synpred8_babel173030 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_synpred8_babel173032 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred8_babel173035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_in_synpred9_babel173557 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_objelem_assign_in_synpred9_babel173561 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_synpred9_babel173564 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred9_babel173567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_obj_in_synpred10_babel173796 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000002000002L});
    public static final BitSet FOLLOW_NL_in_synpred10_babel173798 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000002000002L});
    public static final BitSet FOLLOW_parents_in_synpred10_babel173801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_in_synpred11_babel173870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_nobrackets_in_synpred12_babel173881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_in_synpred13_babel173902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expr_nobrackets_in_synpred14_babel173913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQUARE_BRACKET_OPEN_in_synpred15_babel175612 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_NL_in_synpred15_babel175614 = new BitSet(new long[]{0x0000000000000000L,0x000D087DD2098E80L,0x000000AB6E430001L});
    public static final BitSet FOLLOW_protected_expr_nc_in_synpred15_babel175617 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NL_in_synpred15_babel175619 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_SC_in_synpred15_babel175622 = new BitSet(new long[]{0x0000000000000002L});

}