module lang.unittest.this_keyword.test1

val r =
  object
    def outer = this
    def name = "r"
    def u =
      object
        def test = (inner, outer)
        def inner = this
        def name = "u"
      end

  end

val (i, o) = r.u.test

#assert (i.name, o.name) == ("u", "r")

end

module lang.unittest.this_keyword.test2

typedef wow _ = lazy (object
                  def inner =
                    match this
                        case (wow i) => i
                    end
                end)

val v = wow 23

#assert typeof v == (: wow)
#assert v.inner == 23
end

module lang.unittest.this_keyword.test3

val u =
  object
    def color1 = calc
    def color2 = this.calc
    def calc = Green
  end

#assert u.color1 == u.color2 == Green

##u.calc = Red

##assert u.color1 == u.color2 == Red

end

module lang.unittest.this_keyword.test4

val u =
  begin
    def r = "r"
    object
      def test = r
    end
  end

#assert u.test == "r"

def v =
  object + [u]
    def r = "v.r"
  end

#assert u.test == v.test == "r"

def w = object +[v] end

## a subtle bug was causing w.test == "v.r"
#assert u.test == v.test == w.test == "r"

end

